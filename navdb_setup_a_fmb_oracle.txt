ProgramUnits:
 populateItems:
PROCEDURE POPULATE_ITEMS(mname IN varchar2) IS
	scr_description	varchar2(100);
	scr_part_number	varchar2(100);
BEGIN	
	:DISPLAY_ITEM_BLOCK.PROCESSING_CYCLE := :global.processing_cycle;	
	get_module_information(mname, scr_description, scr_part_number);
--Begin Fix SCR 101 -- Madhu -- 09-Apr-2012
	IF Name_In('parameter.work_type') = 'VIEW' THEN
		:DISPLAY_ITEM_BLOCK.FORM_DESC := substr(scr_description,1,instr(scr_description,'/')-1)||substr(scr_description,instr(scr_description,'/')+7);
	ELSE
		:DISPLAY_ITEM_BLOCK.FORM_DESC := scr_description;
	END IF;
--End Fix SCR 101 -- Madhu -- 09-Apr-2012
	:DISPLAY_ITEM_BLOCK.FORM_DATE_TIME := to_char(sysdate,'DD-MON-YYYY HH24:MI:SS');
	:DISPLAY_ITEM_BLOCK.FORM_NAME := mname;
	:DISPLAY_ITEM_BLOCK.FORM_PART_NUMBER := scr_part_number;
	BEGIN
		SELECT data_supplier_name,obs_enabled,	--DCR 6788.01 Imran included obs_enabled
					 crh_enabled, --CRH Imran 7091.01
					 atd_enabled	--ATD Imran 7817.01 Airport Info
		INTO   :DISPLAY_ITEM_BLOCK.FORM_SOURCE,:PARAMETER.obs_enabled,:PARAMETER.crh_enabled,:PARAMETER.atd_enabled
		FROM   data_supplier
		WHERE  data_supplier = NVL(:NAVDB.DATA_SUPPLIER,nvl(:global.data_supplier,'T'));  -- Fix SCR 7762.01 -- Venkat M 10-Sep-2018
	Exception
		When no_data_found then
		:DISPLAY_ITEM_BLOCK.FORM_SOURCE := :NAVDB.DATA_SUPPLIER;
	End;	
   SELECT DECODE(nvl(:parameter.record_type,'S'),'S','STANDARD','T','TAILORED','UNKNOWN')||', '||:parameter.library_access||', '||
				  DECODE(nvl(:parameter.work_type,'VIEW'),'VIEW','Query Only','Data Entry')
   INTO   :DISPLAY_ITEM_BLOCK.FORM_RECORD_TYPE
   FROM   dual;
END;

 populateSelections:
/* This procedure populates all the selections selected*/
--Fix SCR 7887.01 -- Venkat M --14-Jan-2019 - modified query for adding predefined Geo Areas
PROCEDURE populate_selections IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
	var varchar2(10);  --SCR 7887.01 -- Venkat M --14-Jan-2019
begin   
	var := '%GEO';  
	-- delete the old group
	rg := find_group('sel'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   
	-- create list 

	rg := create_group_from_query('sel','
		select ''-------Selected Selections--------- '' rlabel,''S'' rvalue from dual
	union all
		select ''NAVDB Default Criteria'' rlabel,''-1'' rvalue from dual
	union all
		select unique ''-----Selected Predefined Geographic Regions------'' rlabel ,''P'' rvalue
		from select_by_geographic_area
		where select_by_geographic_area.navdb_id =:navdb.navdb_id
		and geo_area_name like ''$%''
	union all
		select geo_area_name rlabel ,TO_CHAR(select_by_id) rvalue
		from select_by_geographic_area
		where select_by_geographic_area.navdb_id =:navdb.navdb_id
		and geo_area_name like ''$%''
	union all
		select unique ''-----Selected Geographic Areas------'' rlabel ,''G'' rvalue
		from select_by_geographic_area
		where select_by_geographic_area.navdb_id =:navdb.navdb_id
	union all
		select geo_area_name rlabel ,TO_CHAR(select_by_id) rvalue
		from select_by_geographic_area
		where select_by_geographic_area.navdb_id =:navdb.navdb_id
		and geo_area_name not like ''$%''
	union all
  	select unique ''--------Selected Area Codes---------'' rlabel ,''A'' rvalue
		from select_by_area
		where select_by_area.navdb_id =:navdb.navdb_id
	union all
  	select area_code rlabel,TO_CHAR(select_by_id) rvalue
		from select_by_area
		where select_by_area.navdb_id =:navdb.navdb_id
	union all
  	select unique ''---------Selected ICAO Codes--------''rlabel ,''I'' rvalue
		from select_by_icao
  	where select_by_icao.navdb_id =:navdb.navdb_id
	union all
		select icao_code rlabel, TO_CHAR(select_by_id) rvalue
  	from select_by_icao
  	where select_by_icao.navdb_id =:navdb.navdb_id
	union all
		select unique ''----------Selected Airports---------''rlabel ,''R'' rvalue
		from select_by_airport_group
  	where select_by_airport_group.navdb_id =:navdb.navdb_id 
	union all
  	select group_name rlabel,TO_CHAR(select_by_id) rvalue
  	from select_by_airport_group
  	where select_by_airport_group.navdb_id =:navdb.navdb_id 
  union all
		select unique ''----------Selected Heliports---------''rlabel ,''H'' rvalue 
		from select_by_heliport_group
  	where select_by_heliport_group.navdb_id =:navdb.navdb_id 
  union all
  	select group_name rlabel,TO_CHAR(select_by_id) rvalue
  	from select_by_heliport_group
  	where select_by_heliport_group.navdb_id =:navdb.navdb_id ');  
  -- populate the group
	nn := populate_group(rg);        
	if nn <> 0 then            
		-- Shall never happen
		dsp_msg('Populate group had error '||to_char(nn));        
	end if;
	populate_list('SELECTION.selections',rg);
	:SELECTION.selections := GET_GROUP_CHAR_CELL('sel.rvalue',1);
	SET_RECORD_PROPERTY(1, 'SELECTION', STATUS, QUERY_STATUS);   
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
end;


 populateDatatypDescr:
/* This procedure populates the valid data types for a particular FMS id*/
PROCEDURE populate_datatyp_descr(p_type varchar2) IS         
	cursor datatypcur is         
		--select distinct rec.rowid,
		select rec.ENROUTE_TERMINAL_IND,
					 rec.record_type_code,
					 rec.record_type_descr
		  FROM FMS_DATA_TYPE FDT,
		       FLIGHT_MANAGEMENT_SYSTEM FMS, 
		       RECORD_TYPE REC,
					 navdb nav
		 WHERE fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
			 and fdt.selectable_ind = 'Y'   -- Added per SCR1267.01
			 and nav.navdb_id = :navdb.navdb_id
			 AND upper(fms.FMS_ID) = upper(:NAVDB.FMS_ID)
			 and nav.fms_id = fms.fms_id
			 and fms.FMS_ID = fdt.FMS_ID
			 and exists (select 'x' from select_criteria
										where record_type_code = rec.record_type_code
											and processing_order = 0)
			 and rec.enroute_terminal_ind in ('T','E','H')
			--order by rec.record_type_code;
			order by decode(rec.ENROUTE_TERMINAL_IND,'H','U',rec.ENROUTE_TERMINAL_IND), rec.record_type_code;
	--
	cursor arpt_datatypcur is         
		select rec.record_type_code, rec.record_type_descr
		FROM  FMS_DATA_TYPE FDT,
					FLIGHT_MANAGEMENT_SYSTEM FMS, 
					RECORD_TYPE REC,
					navdb nav
		WHERE fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
			and fdt.selectable_ind = 'Y'   -- Added per SCR1267.01
			and nav.navdb_id = :navdb.navdb_id
			AND upper(fms.FMS_ID) =upper(:NAVDB.FMS_ID)
			and nav.fms_id = fms.fms_id
			and fms.FMS_ID = fdt.FMS_ID
			and exists (select 'x' from select_criteria
									 where record_type_code = rec.record_type_code
										 and processing_order = 0)
			and rec.enroute_terminal_ind IN ('T','H') -- Added H as per SCR 6113--Madhu--14-Jan-2016
			and rec.record_type_code != '10'          -- Exclude Airport  
		order by rec.record_type_code;		
	--
	cursor hrpt_datatypcur is         
		select rec.record_type_code, rec.record_type_descr
		FROM  FMS_DATA_TYPE FDT,
					FLIGHT_MANAGEMENT_SYSTEM FMS, 
					RECORD_TYPE REC,
					navdb nav
		WHERE fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
			and fdt.selectable_ind = 'Y'   -- Added per SCR1267.01
			and nav.navdb_id = :navdb.navdb_id
			AND upper(fms.FMS_ID) = upper(:NAVDB.FMS_ID)
			and nav.fms_id = fms.fms_id
			and fms.FMS_ID = fdt.FMS_ID
			and exists (select 'x' from select_criteria
									 where record_type_code = rec.record_type_code
										 and processing_order = 0)
			and rec.enroute_terminal_ind = 'H'
	    and rec.record_type_code not in ('15') -- Exclude Heliport
		order by rec.record_type_code;		
	V_PRE_TYPE  varchar2(10);
BEGIN
  if p_type = 'T' then
  	FOR selrec in arpt_datatypcur LOOP                             
   		:datatyp_rad.RECORD_TYPE_CODE     := selrec.record_type_code;
   		:datatyp_rad.RECORD_TYPE_DESCR    := selrec.record_type_descr;
	   	next_record;  	    	       
  	END LOOP;
  elsif p_type = 'H' then
  	FOR selrec in hrpt_datatypcur LOOP                             
   		:datatyp_rad.RECORD_TYPE_CODE     := selrec.record_type_code;
   		:datatyp_rad.RECORD_TYPE_DESCR    := selrec.record_type_descr;
	   	next_record;  	    	       
  	END LOOP;	
  else
  	FOR selrec in datatypcur LOOP                             
   		if (:selection.selections != '-1' and p_type != 'G') and selrec.record_type_code in ('80','380') then
   			null; -- Mod to exclude GridMora from display
   		elsif (:selection.selections != '-1' and p_type = 'I') and selrec.record_type_code in ('44','45') then -- SCR 7024 -- Changed from 93 to 44
   			null; -- Mod to exclude ENROUTE_COMM and FIR/UIR from display   		
   		else
   			if selrec.ENROUTE_TERMINAL_IND = 'T' then
   				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'AIRPORTS');
   			elsif selrec.ENROUTE_TERMINAL_IND = 'H' then
   				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'HELIPORTS');
   			end if;   			
   			:datatyp_rad.RECORD_TYPE_CODE     := selrec.record_type_code;
   			:datatyp_rad.RECORD_TYPE_DESCR    := selrec.record_type_descr;   			
   			v_pre_type := selrec.ENROUTE_TERMINAL_IND;
   			next_record;
   		end if;	
  	END LOOP;
  end if;	
  first_record;       
END;

 dspError:
PROCEDURE DSP_ERROR(ERR_MSG IN VARCHAR2) IS
  alert_id    alert;
  choice      number(3);
BEGIN
  set_alert_property('ERROR_MESSAGE', alert_message_text,ERR_MSG); 
  alert_id := find_alert ('ERROR_MESSAGE');
  choice := show_alert(alert_id);
END;


 checkPackageFailure:
Procedure Check_Package_Failure IS
BEGIN
  IF NOT ( Form_Success ) THEN
    RAISE Form_Trigger_Failure;
  END IF;
END;

 queryMasterDetails:
PROCEDURE Query_Master_Details(rel_id Relation,detail VARCHAR2) IS
  oldmsg VARCHAR2(2);  -- Old Message Level Setting
  reldef VARCHAR2(5);  -- Relation Deferred Setting
BEGIN
  --
  -- Initialize Local Variable(s)
  --
  reldef := Get_Relation_Property(rel_id, DEFERRED_COORDINATION);
  oldmsg := :System.Message_Level;
  --
  -- If NOT Deferred, Goto detail and execute the query.
  --
  IF reldef = 'FALSE' THEN
    Go_Block(detail);
    Check_Package_Failure;
    :System.Message_Level := '10';
    Execute_Query;
    :System.Message_Level := oldmsg;
  ELSE
    --
    -- Relation is deferred, mark the detail block as un-coordinated
    --
    Set_Block_Property(detail, COORDINATION_STATUS, NON_COORDINATED);
  END IF;

EXCEPTION
    WHEN Form_Trigger_Failure THEN
      :System.Message_Level := oldmsg;
      RAISE;
END Query_Master_Details;


 clearAllMasterDetails:
PROCEDURE Clear_All_Master_Details IS
  mastblk  VARCHAR2(30);  -- Initial Master Block Causing Coord
  coordop  VARCHAR2(30);  -- Operation Causing the Coord
  trigblk  VARCHAR2(30);  -- Cur Block On-Clear-Details Fires On
  startitm VARCHAR2(61);  -- Item in which cursor started
  frmstat  VARCHAR2(15);  -- Form Status
  curblk   VARCHAR2(30);  -- Current Block
  currel   VARCHAR2(30);  -- Current Relation
  curdtl   VARCHAR2(30);  -- Current Detail Block

  FUNCTION First_Changed_Block_Below(Master VARCHAR2)
  RETURN VARCHAR2 IS
    curblk VARCHAR2(30);  -- Current Block
    currel VARCHAR2(30);  -- Current Relation
    retblk VARCHAR2(30);  -- Return Block
  BEGIN
    --
    -- Initialize Local Vars
    --
    curblk := Master;
    currel := Get_Block_Property(curblk,  FIRST_MASTER_RELATION);
    --
    -- While there exists another relation for this block
    --
    WHILE currel IS NOT NULL LOOP
      --
      -- Get the name of the detail block
      --
      curblk := Get_Relation_Property(currel, DETAIL_NAME);
      --
      -- If this block has changes, return its name
      --
      IF ( Get_Block_Property(curblk, STATUS) = 'CHANGED' ) THEN
        RETURN curblk;
      ELSE
        --
        -- No changes, recursively look for changed blocks below
        --
        retblk := First_Changed_Block_Below(curblk);
        --
        -- If some block below is changed, return its name
        --
        IF retblk IS NOT NULL THEN
          RETURN retblk;
        ELSE
          --
          -- Consider the next relation
          --
          currel := Get_Relation_Property(currel, NEXT_MASTER_RELATION);
        END IF;
      END IF;
    END LOOP;

    --
    -- No changed blocks were found
    --
    RETURN NULL;
  END First_Changed_Block_Below;

BEGIN
  --
  -- Init Local Vars
  --
  mastblk  := :System.Master_Block;
  coordop  := :System.Coordination_Operation;
  trigblk  := :System.Trigger_Block;
  startitm := :System.Cursor_Item;
  frmstat  := :System.Form_Status;

  --
  -- If the coordination operation is anything but CLEAR_RECORD or
  -- SYNCHRONIZE_BLOCKS, then continue checking.
  --
  IF coordop NOT IN ('CLEAR_RECORD', 'SYNCHRONIZE_BLOCKS') THEN
    --
    -- If we're processing the driving master block...
    --
    IF mastblk = trigblk THEN
      --
      -- If something in the form is changed, find the
      -- first changed block below the master
      --
      IF frmstat = 'CHANGED' THEN
        curblk := First_Changed_Block_Below(mastblk);
        --
        -- If we find a changed block below, go there
        -- and Ask to commit the changes.
        --
        IF curblk IS NOT NULL THEN
          Go_Block(curblk);
          Check_Package_Failure;
          Clear_Block(ASK_COMMIT);
          --
          -- If user cancels commit dialog, raise error
          --
          IF NOT ( :System.Form_Status = 'QUERY'
                   OR :System.Block_Status = 'NEW' ) THEN
            RAISE Form_Trigger_Failure;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;

  --
  -- Clear all the detail blocks for this master without
  -- any further asking to commit.
  --
  currel := Get_Block_Property(trigblk, FIRST_MASTER_RELATION);
  WHILE currel IS NOT NULL LOOP
    curdtl := Get_Relation_Property(currel, DETAIL_NAME);
    IF Get_Block_Property(curdtl, STATUS) <> 'NEW'  THEN
      Go_Block(curdtl);
      Check_Package_Failure;
      Clear_Block(NO_VALIDATE);
      IF :System.Block_Status <> 'NEW' THEN
        RAISE Form_Trigger_Failure;
      END IF;
    END IF;
    currel := Get_Relation_Property(currel, NEXT_MASTER_RELATION);
  END LOOP;

  --
  -- Put cursor back where it started
  --
  IF :System.Cursor_Item <> startitm THEN
    Go_Item(startitm);
    Check_Package_Failure;
  END IF;

EXCEPTION
  WHEN Form_Trigger_Failure THEN
    IF :System.Cursor_Item <> startitm THEN
      Go_Item(startitm);
    END IF;
    RAISE;

END Clear_All_Master_Details;


 populateDatatypDetailCrit:
/* This procedure populates the detailed rules for a datatype*/
PROCEDURE populate_DATATYP_detail_crit IS
	cursor navcur is
		select A.SELECT_BY_ID,
					 B.criteria_descr,
					 b.CRITERIA_ID,
					 A.include_exclude_ind,
					 B.number_of_values
		from 	navdb_select_criteria A, select_criteria B
		where A.criteria_id = B.criteria_id
		and A.parent_select_by_id = :datatyp_rad.select_by_id
		and B.display_flag = 'Y'
		order by A.criteria_id;
BEGIN
	for rec in navcur loop 
	  :rules.SELECT_BY_ID := rec.select_by_id;
	  :rules.selected_rules := rec.criteria_descr;
		:RULES.CRITERIA_ID := REC.CRITERIA_ID;
		:rules.list := rec.include_exclude_ind;
		:rules.old_list := rec.include_exclude_ind;
		:rules.num_of_values := nvl(rtrim(rec.number_of_values),'0');
	 	next_record;
	end loop;
	first_record;
END;

 populateSelCrit:
/*PROCEDURE populate_sel_crit IS         
cursor mycur is         
select sel.rowid,sel.criteria_id,sel.criteria_descr,sel.plsqlmodule,
sel.record_type_code,sel.created_by,sel.created_on
from 
select_criteria sel,record_type rec
where sel.record_type_code = rec.record_type_code
and rec.record_type_descr = :sel_data_types.sel_data_type;
         
             BEGIN       
	 If :system.mode = 'ENTER-QUERY' then             
	 	 exit_form;       
	 else              clear_block;        
	 End if;                  
	   last_record;    
	           
	    FOR selrec in mycur LOOP             
	    	:select_criteria.rowid := selrec.rowid;                  
	    	  :select_criteria.criteria_descr     := selrec.criteria_descr;                         
--	    	  set_record_property(:system.trigger_record, 'select_criteria', STATUS,     
--	    	                              QUERY_STATUS);             
	    	                              next_record;         
	    END LOOP;         
	    first_record;       
	    END;  */
	    
null;   

 populateDatatypOption:
PROCEDURE POPULATE_DATATYP_OPTION IS
	cursor datradcur is 
	select select_by_id,
				 include_exclude_ind
	  from navdb_select_criteria 
   where navdb_id = :navdb.navdb_id
 	   and record_type_code = :DATATYP_RAD.RECORD_TYPE_CODE
 		 and parent_select_by_id is null
 		 and 	(geo_area_id = :SELECTION.selections OR
					 area_code_id = :SELECTION.selections OR
					 icao_code_id = :SELECTION.selections OR
					 airport_group_id = :SELECTION.selections OR
					 heliport_group_id = :SELECTION.selections)
		 and criteria_id not in (select criteria_id
														 from select_criteria
														 where processing_order = 30); -- be sure not the ind of list rule
	V_ID     NUMBER;
	V_OPTION VARCHAR2(1);
	v_count  number(2);
BEGIN   
  open datradcur;
  fetch datradcur into V_ID,V_OPTION;
  if datradcur%found then	
  	:datatyp_rad.SELECT_BY_ID := V_ID; 
  	:datatyp_rad.options := V_OPTION;
  	:datatyp_rad.OLD_option := V_OPTION;
  	if :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE AIRWAY' then
  		:control_block.airway_sbi := v_id;
  	elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT' then
  		:control_block.airport_sbi := v_id;
  	end if;	
  else
		dsp_msg('Can not find the Select_by_id for '||:datatyp_rad.record_type_descr||chr(10)||'. Record has been deleted.');
  end if;
  close datradcur;
END;

 createDatatypCriteria:
PROCEDURE CREATE_DATATYP_CRITERIA(p_select_id number,p_record_type_code number) IS 
cursor popnavcur is
	select select_by_id_seq.nextval as seq,
			 a.crit,a.geo,a.area,a.icao,a.airport,a.heliport
	from ( select criteria_id as crit,
								-1 geo, 
								NULL area, 
								NULL icao, 
								NULL airport,
								null heliport
					 from select_criteria
					where record_type_code = p_record_type_code
						and processing_order = 0
						and p_select_id = -1  -- WHEN IT IS NAVDB Default
			UNION
				 select criteria_id as crit,
								p_select_id geo,
								NULL area, 
								NULL icao, 
								NULL airport,
								null heliport
					 from select_criteria
					where record_type_code = p_record_type_code
						and processing_order = 0
						and exists (select 1 
            						  from select_by_geographic_area
             						 where select_by_id = p_select_id)
			UNION
				 select criteria_id as crit,
								NULL geo, 
								NULL area, 
								NULL icao,
								p_select_id airport,
								null heliport
					 from select_criteria
					where record_type_code = p_record_type_code
					  and processing_order = 0
						and exists (select 1 
            						  from select_by_airport_group
             						 where select_by_id = p_select_id)
      UNION
				 select criteria_id as crit,
								NULL geo, 
								NULL area, 
								NULL icao,
								null airport,
								p_select_id heliport
					 from select_criteria
					where record_type_code = p_record_type_code
					  and processing_order = 0
						and exists (select 1 
            						  from select_by_HELIport_group
             						 where select_by_id = p_select_id)       						 
		UNION             
				 select criteria_id as crit,
								NULL geo, 
								NULL area,
								p_select_id icao, 
								NULL airport,
								null heliport
					 from select_criteria
					where record_type_code = p_record_type_code
						and processing_order = 0
						and exists (select 1 
             						  from select_by_icao
             						 where select_by_id = p_select_id)
		UNION             
				 select criteria_id as crit,
								NULL geo,
								p_select_id area, 
								NULL icao, 
								NULL airport,
								null heliport
					 from select_criteria
					where record_type_code = p_record_type_code
						and processing_order = 0
						and exists (select 1 
            						  from select_by_area
             						 where select_by_id = p_select_id)
             ) a ;
	v_ind varchar(1);
BEGIN  
	FOR rec IN popnavcur LOOP  -- Shall only get one value 
		if rec.geo = -1 then
			v_ind := 'N';
		else
			v_ind := 'D';
		end if;	
-- Begin Fix - SCR 4102  - Sesha - 27-Aug-2008
	  if p_record_type_code = 10 and rec.airport is not null then
		-- Begin Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
		   SELECT NVL (include_exclude_ind, 'I')
		     INTO v_ind
		     FROM select_by_airport_group
		    WHERE select_by_id = rec.airport;
		-- End Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
		end if;	
-- End Fix - SCR 4102 - Sesha - 27-Aug-2008		
		if p_record_type_code in ('80','380') and (rec.area is not null or
			                              rec.icao is not null or
			                              rec.airport is not null or
			                              rec.heliport is not null) then 
			null;  -- Grid mora is only used in default and geo groups
		elsif p_record_type_code in ('44','45') and (rec.icao is not null or -- SCR 7024 -- Changed record type code from 93 to 44
			                              rec.airport is not null or
			                              rec.heliport is not null) then 
			null;  -- FIR UIR, ENROUTE COMM are only used in Default, Geo and Area groups		
		else	 
-- Reverted back the changes for SCR 4078 by Sesha 
	-- Begin Fix - SCR 3772.00(SAAAR APPROACH) - Sesha		
		/* if p_record_type_code = 94 and v_ind = 'N' then
			  null;
		 else	*/
  -- End Fix - SCR 3772.00(SAAAR APPROACH) - Sesha	
			  Insert into navdb_select_criteria (select_by_id,
																			 navdb_id,
																			 record_type_code,
																			 criteria_id,
																			 parent_select_by_id,
																			 geo_area_id,
																			 area_code_id,
																			 icao_code_id,
																			 airport_group_id,
																			 heliport_group_id,
																			 include_exclude_ind)  
			  values (rec.seq,
				  		:navdb.navdb_id,
					  	p_record_type_code,
					  	rec.crit,
					  	'',
					  	rec.geo,
					  	rec.area,
					  	rec.icao,
					  	rec.airport,
					  	rec.heliport,
					  	v_ind);
	  	    forms_ddl('COMMIT');
-- Reverted back the changes for SCR 4078 by Sesha 
 -- Begin Fix - SCR 3772.00(SAAAR APPROACH) - Sesha	  	
      --end if;  		
 -- End Fix - SCR 3772.00(SAAAR APPROACH) - Sesha	  	    
	  end if;
	END LOOP;
END;

 doneIncExcLists:
/*
    SCR 0143 --Madhu -- 18-Apr-2012 
    This SCR is Created to bring up all the updates done to this form from baseline version of build 229A to 236
	(SCR no's 5196,3358,5215,5329)
    
*/
PROCEDURE DONE_INC_EXC_LISTS IS
	cursor get_value_descr(p_order number) is
		select identifier_column_name 
		from   record_identifier
		where  record_type_code = :datatyp_rad.record_type_code
		and 	 display_order = p_order;
	v_descr 	varchar2(100);  -- SCR 5215 - VenkatReddy S -26 Sep 2011 (v_descr Variable size increased 20 to 100)
	v_value   varchar2(1000):= null;
	v_count   number(10) := 0;
BEGIN
	-- Check if record completly entered
	for i in 1..:DATATYP_RAD.list_no LOOP
		v_value := v_value||name_in('lists.value_'||to_char(i));
	end loop;
	GO_BLOCK('LISTS');
	first_record;
	if v_value is not null or
		(v_value is null and :system.last_record = 'FALSE') then
		LOOP 
				--scr 7259 -- check 
  	/*	FOR i in 1..:DATATYP_RAD.list_no LOOP
  			v_value := name_in('lists.value_'||to_char(i));
  			if v_value is null then
  				-- Begin Fix - SCR 6340.02 - Eswar KC - 09-July-2014 ; 
  				-- Allows blank value in Include(I) list for both Runway(3) and Enroute(4) Transition for SID(91) and STAR(92).
  				-- Allows blank value in Exclude(X) list either Runway(3) or Enroute(4) Transition for SID(91) and STAR(92).  
					IF :DATATYP_RAD.RECORD_TYPE_CODE IN ( 91, 92 ) AND i IN ( 3, 4 ) 
						 AND ( CASE 
		  							WHEN :DATATYP_RAD.LIST_VAL = 'I' THEN 1
		  							WHEN :DATATYP_RAD.LIST_VAL = 'X' AND ( name_in('lists.value_'||to_char(3)) IS NOT NULL OR name_in('lists.value_'||to_char(4)) IS NOT NULL )  THEN 1 		
		  					    ELSE 0
		  					   END ) = 1
						THEN
						NULL; 
  				ELSE	
  				-- End Fix - SCR 6340.02 - Eswar KC - 09-July-2014 	
	  				GO_ITEM('lists.value_'||to_char(i));
	  				dsp_msg('Please enter value completely for the record.');
	  				:control_block.did := 'N';
	  				raise form_trigger_failure;
					END IF; -- End Fix - SCR 6340.02 - Eswar KC - 09-July-2014 
  			end if;
  		end loop;
  		*/
  		v_count := v_count + 1;
  		if :system.last_record = 'TRUE' then
				exit;
			else
				next_record;
			end if;
		END LOOP;
--
-- Begin Fix - SCR 3358 - Venu T -07 Sep 2011
			
/*
		-- check list limit per Data Type
		if :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT' and v_count > 423 then
			dsp_msg('Exceeded maximum Airport list limit 423. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'RUNWAY' and v_count > 275 then
			dsp_msg('Exceeded maximum Runway list limit 275. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT_NDB' and v_count > 226 then
			dsp_msg('Exceeded maximum Airport NDB list limit 226. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE HOLDING' and v_count > 176 then
			dsp_msg('Exceeded maximum ENROUTE HOLDING list limit 176. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'APPROACH' and v_count > 191 then
			dsp_msg('Exceeded maximum APPROACH list limit 191. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'SIDS' and v_count > 200 then
			dsp_msg('Exceeded maximum SID list limit 200. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'STARS' and v_count > 198 then
			dsp_msg('Exceeded maximum STAR list limit 198. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT WAYPOINT' and v_count > 203 then
			dsp_msg('Exceeded maximum AIRPORT WAYPOINT list limit 203. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE NAVAID' and v_count > 448 then
			dsp_msg('Exceeded maximum ENROUTE NAVAID list limit 448. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'GLS' and v_count > 261 then
			dsp_msg('Exceeded maximum GLS list limit 261. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE NDB' and v_count > 488 then
			dsp_msg('Exceeded maximum ENROUTE NDB list limit 488. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE AIRWAY' and v_count > 758 then
			dsp_msg('Exceeded maximum ENROUTE AIRWAY list limit 758. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE WAYPOINT' and v_count > 400 then
			dsp_msg('Exceeded maximum ENROUTE WAYPOINT list limit 400. Please delete extra.');
			raise form_trigger_failure;
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT' and v_count > 407 then
			dsp_msg('Exceeded maximum HELIPORT list limit 407. Please delete extra.');
			raise form_trigger_failure;		
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT APPROACH' and v_count > 188 then
			dsp_msg('Exceeded maximum HELIPORT APPROACH list limit 188. Please delete extra.');
			raise form_trigger_failure;	
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT SID' and v_count > 196 then
			dsp_msg('Exceeded maximum HELIPORT SID list limit 196. Please delete extra.');
			raise form_trigger_failure;	
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT STAR' and v_count > 194 then
			dsp_msg('Exceeded maximum HELIPORT STAR list limit 194. Please delete extra.');
			raise form_trigger_failure;	
		elsif :DATATYP_RAD.RECORD_TYPE_DESCR = 'LOCALIZER' and v_count > 280 then
			dsp_msg('Exceeded maximum LOCALIZER list limit 280. Please delete extra.');
			raise form_trigger_failure;			
		end if;	
		*/
		-- End Fix - SCR 3358 - Venu T -07 Sep 2011
		-- delete old data
		delete from selection_criteria_value
		where select_by_id= :control_block.list_s_id;
		COMMIT; -- scr 7259 20-AUG-2017
		-- create new data
		first_record;
		if :LISTS.VALUE_1 is not null then
			LOOP 
  			FOR i in 1..:DATATYP_RAD.list_no LOOP
  				v_value := name_in('lists.value_'||to_char(i));
  				open get_value_descr(i);
  				fetch get_value_descr into v_descr;
					if get_value_descr%found then
						Insert into selection_criteria_value
									 (select_by_id, value_seq, value_descr, value,update_dcr_number)
						values (:control_block.list_s_id, :system.trigger_record, v_descr, v_value, :lists.dcr_number);
  				end if;
  				close get_value_descr;
				END LOOP;
				if :system.last_record = 'TRUE' then
					exit;
				else
					next_record;
				end if;
			END LOOP;
		end if;	
	else
		if DISPLAY_ALERT.MORE_BUTTONS('S','NO LIST DATA',
  		'There is no data enterted, or you deleted all the data.'||chr(10)||
  		'Are you sure this is what it shall be?'||chr(10),
  		'Yes','Cancel') = 1 then
  		-- delete old data
			delete from selection_criteria_value
			where select_by_id= :control_block.list_s_id;		
			delete from navdb_select_criteria
			where select_by_id = :control_block.list_s_id;
  	else
  		:control_block.did := 'N';
  		raise form_trigger_failure;
  	end if;		
	end if;
end;

 deleteSelectionCriterias:
PROCEDURE delete_selection_criterias IS
	ln_cnt NUMBER; --7177
	ln_dt_cnt NUMBER; --7177
BEGIN
	

	delete from selection_criteria_value
	where select_by_id in
			(select select_by_id 
			 from   navdb_select_criteria
			 where  navdb_id = :navdb.navdb_id
			 and	  record_type_code not in 
														(select record_type_code  
														 from fms_data_type
														 where upper(fms_id) = upper(:navdb.fms_id)
														 and selectable_ind = 'Y')); --Fix SCR 06158 - Ashish N- 24-Jan-2022
	--
  delete from navdb_select_criteria
	where navdb_id = :navdb.navdb_id
	and record_type_code not in 
			(select record_type_code  
			 from fms_data_type
			 where upper(fms_id) = upper(:navdb.fms_id)
			 and selectable_ind = 'Y'); --Fix SCR 06158 - Ashish N- 24-Jan-2022

--Begin SCR 7177 --Madhu --17-May-2017		 
	SELECT count(*) INTO ln_cnt
	FROM airbus_apf
	WHERE navdb_id = :navdb.navdb_id;
	

	IF ln_cnt > 0 THEN
			SELECT count(*) INTO ln_dt_cnt
			FROM fms_data_type
			WHERE fms_id = upper(:navdb.fms_id)
			AND record_type_code = ( SELECT record_type_code
		                            FROM record_type
		                            WHERE record_type_descr = 'AIRBUS APF');
		                            
		  IF ln_dt_cnt = 0 THEN
		  /*	DELETE FROM airbus_td_triggers
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM airbus_dest_triggers
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM airbus_imi
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM airbus_apf_airframe_engine
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM airbus_apf
				WHERE navdb_id = :navdb.navdb_id;	*/
				
				display_alert.one_button('S','Airbus APF Data','Changed FMS ID '''||:navdb.fms_id||''' do not support the Airbus APF. Please delete the '''||:navdb.navdb_id||''' APF data');
				
		  END IF;                          
	END IF;
	
	ln_cnt := NULL;
	ln_dt_cnt := NULL;
	
	SELECT count(*) INTO ln_cnt
	FROM boeing_apf
	WHERE navdb_id = :navdb.navdb_id;

	IF ln_cnt > 0 THEN
			SELECT count(*) INTO ln_dt_cnt
			FROM fms_data_type
			WHERE fms_id = upper(:navdb.fms_id)
			AND record_type_code = ( SELECT record_type_code
		                            FROM record_type
		                            WHERE record_type_descr = 'BOEING APF');
		                            
		  IF ln_dt_cnt = 0 THEN
		  /*	DELETE FROM boeing_ads_address
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM boeing_dest_triggers
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM boeing_td_triggers
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM boeing_imi
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM boeing_apf_airframe_engine
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM boeing_controlled_apf
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM boeing_apf
				WHERE navdb_id = :navdb.navdb_id;*/
					display_alert.one_button('S','Boeing APF Data','Changed FMS ID '''||:navdb.fms_id||''' do not support the Boeing APF. Please delete the '''||:navdb.navdb_id||''' APF data');
				
		  END IF;                          
	END IF;
	
	ln_cnt := NULL;
	ln_dt_cnt := NULL;
	
	SELECT count(*) INTO ln_cnt
	FROM douglas_apf
	WHERE navdb_id = :navdb.navdb_id;
	
	IF ln_cnt > 0 THEN
		SELECT count(*) INTO ln_dt_cnt
		FROM fms_data_type
		WHERE fms_id = upper(:navdb.fms_id)
		AND record_type_code = ( SELECT record_type_code
	                            FROM record_type
	                            WHERE record_type_descr = 'DOUGLAS APF');
	  
	  IF ln_dt_cnt = 0 THEN
	  		/*DELETE FROM md80_software_options
				WHERE navdb_id = :navdb.navdb_id;
				
				DELETE FROM douglas_apf
				WHERE navdb_id = :navdb.navdb_id;*/
				display_alert.one_button('S','Douglas APF Data','Changed FMS ID '''||:navdb.fms_id||''' do not support the Douglas APF. Please delete the '''||:navdb.navdb_id||''' APF data');
	  END IF;                          
	END IF;	                            

--End SCR 7177 --Madhu --17-May-2017	
END;

 createDatatypDetailCrit:
/* This procedure inserts the associated details of a particular rule into the navdb_select_criteria table*/
PROCEDURE CREATE_DATATYP_DETAIL_CRIT(P_type varchar2) IS 
	v_geo		number;
	v_area  number;
	v_icao  number;
	v_apt   number;
	v_heli  number;
	v_criteria number;
	cursor get_selection_id is
		select geo_area_id as geo,
					 area_code_id as area,
					 icao_code_id as icao,
					 airport_group_id as apt,
					 heliport_group_id as heli
		from navdb_select_criteria
		where select_by_id = :datatyp_rad.select_by_id;
	--
	cursor get_criteria is
		select criteria_id 
		from select_criteria
		where record_type_code = :datatyp_rad.record_type_code
		and PROCESSING_ORDER not in (0,30)
		and display_flag = 'Y'
			minus
		select criteria_id
		from navdb_select_criteria
		where parent_select_by_id = :datatyp_rad.select_by_id
		and criteria_id in (select criteria_id from select_criteria
												where record_type_code = :DATATYP_RAD.RECORD_TYPE_CODE);
BEGIN   
	open get_selection_id;
	fetch get_selection_id into v_geo,v_area,v_icao,v_apt,v_heli;
	if get_selection_id%found then
		if lower(p_type) = 'normal' then
			FOR rec IN get_criteria LOOP
			/*	if :NAVDB.DATA_SUPPLIER != 'J' and rec.criteria_id in ('8','39') then -- added per scr 1189.04
	  			null;                                       -- exclude runway surface, added per scr 1189.04
	  		else	  */ -- Commented for SCR 6510 --Madhu                                                             -- added per scr 1189.04
	  			Insert into navdb_select_criteria 
		 						(select_by_id, navdb_id, record_type_code,
							 	criteria_id, parent_select_by_id,	
							 	geo_area_id, area_code_id, icao_code_id, airport_group_id,
					 			heliport_group_id,include_exclude_ind)  
					values (select_by_id_seq.nextval,
		 						:navdb.navdb_id,
		    		    :datatyp_rad.record_type_code,
		      		  rec.criteria_id,
		        		:datatyp_rad.select_by_id,
		        		v_geo,v_area,v_icao,v_apt,v_heli,
		        		'N');
		    --end if;    -- commented for SCR 6510--Madhu		
			END LOOP;
  		commit;                                     
		end if;		
	end if;	
	close get_selection_id;	 
end;

 checkAirport:
PROCEDURE check_Airport(p_ident varchar2,p_icao varchar2 := null,p_type varchar2) IS
	cursor get_id(icao_code varchar2) is
		select A.select_by_id 
		from Airport_to_select A, select_by_Airport_group B
		where Airport_ident = p_ident
		and   Airport_icao like icao_code
		and   B.navdb_id = :NAVDB.navdb_id
		and   A.select_by_id = B.select_by_id;
	cursor get_icao_S is
	  select Airport_icao
	  from   pl_std_Airport
	  where  Airport_ident = p_ident
	  and    data_supplier = :navdb.data_supplier
		and processing_cycle = :control_block.proc_cycle --:global.processing_cycle ----Fix SCR 7607.01 --Madhu --02-Mar-2018
		and validate_ind in ('Y','S','H','O');
	cursor get_icao_T is
	  select Airport_icao
	  from   pl_tld_Airport
	  where  Airport_ident = p_ident
	  and    data_supplier = :navdb.data_supplier
		and    processing_cycle = :global.processing_cycle
		and    customer_ident IN (SELECT CUSTOMER_IDENT 
															 FROM   CUSTOMER_NAVDB
															 WHERE  NAVDB_ID = :NAVDB.NAVDB_ID)
		and    validate_ind in ('Y','S','H','O');	 
	v_icao   varchar2(2);
	v_icao2  varchar2(2);
	v_exist  number(1);
	V_BUTTON NUMBER(1);
	v_name       varchar2(20)  := null;
	v_name_temp  varchar2(20);
	v_other_name varchar2(200) := null;
	v_count      number        := 0;    
	v_message    varchar2(1000):= null;
	v_no_icao    exception;
	ls_Airport_query VARCHAR2(1000); ----Fix SCR 7647 --Madhu --10-Jan-2018	
BEGIN
IF p_icao IS NOT NULL THEN
SELECT COUNT (*)
  INTO v_exist
  FROM pl_std_airport
 WHERE airport_ident = p_ident
   AND airport_icao = p_icao
   AND data_supplier = :navdb.data_supplier --Added for SCR 3277,Neelima,18-Oct-2010
   AND processing_cycle = :control_block.proc_cycle --:GLOBAL.processing_cycle --Fix SCR 7607.01 --Madhu --02-Mar-2018
   AND validate_ind IN ('Y', 'S', 'H', 'O');
		--
IF V_EXIST = 0 THEN
	SELECT COUNT (*)
  INTO v_exist
  FROM pl_tld_airport
 WHERE airport_ident = p_ident
   AND airport_icao = p_icao
   AND data_supplier = :navdb.data_supplier --Added For SCR 3277,Neelima,18-Oct-2010
   AND processing_cycle = :GLOBAL.processing_cycle
   AND validate_ind IN ('Y', 'S', 'H', 'O')
   AND customer_ident IN (SELECT customer_ident
                            FROM customer_navdb
                           WHERE navdb_id = :navdb.navdb_id);
			if v_exist != 0 then
				dsp_msg('This is a tailored Airport.');
			end if;	
		END IF;
		v_icao := p_icao;
	else
		begin
			open get_icao_S;
		  fetch get_icao_S into v_icao;
  	  if get_icao_S%notfound = TRUE then
 				raise v_no_icao;
  		else
  			fetch get_icao_S into v_icao2;
    		if get_icao_S%notfound = TRUE then
    			if p_type = 'RECORD' then
						:Airport_TO_SELECT.Airport_icao := v_icao;
    			end if;
    			v_exist := 1;
    		else
    		  v_exist := 2;		
    		end if;
			end if;
		exception
			when v_no_icao then	
			begin
				open get_icao_T;
		  	fetch get_icao_T into v_icao;
  	  	if get_icao_T%notfound = TRUE then
 					raise v_no_icao;
  			else
  				fetch get_icao_T into v_icao2;
    			if get_icao_T%notfound = TRUE then
    				if p_type = 'RECORD' then
							:Airport_TO_SELECT.Airport_icao := v_icao;
							dsp_msg('This is a tailored Airport.');
    				end if;
    				v_exist := 1;
    			else
    		  	v_exist := 2;		
    			end if;
				end if;				
			exception
				when v_no_icao then	
					v_exist := 0;
				when others then
					Set_Application_Property(cursor_style,'DEFAULT');
					dsp_msg(sqlerrm);
					raise form_trigger_failure;
			end;		
			when others then
					Set_Application_Property(cursor_style,'DEFAULT');
					dsp_msg(sqlerrm);
					raise form_trigger_failure;
		end;		
	end if;
	--
	if p_icao is not null then
		FOR rec IN get_id(p_icao) LOOP 
  		select group_name into v_name_temp
  		from select_by_Airport_group
  		where select_by_id = rec.select_by_id;
  		v_count := v_count + 1;
  		if v_count = 1 then
  			v_name := v_name_temp;
  		else
  			v_other_name := v_other_name||' '||v_name_temp;
  		end if;	
		end loop;
	else
		FOR rec IN get_id('%') LOOP 
  		select group_name into v_name_temp
  		from select_by_Airport_group
  		where select_by_id = rec.select_by_id;
  		v_count := v_count + 1;
  		if v_count = 1 then
  			v_name := v_name_temp;
  		else	
  			v_other_name := v_other_name||' '||v_name_temp;
  		end if;	
		end loop;	
	end if;
	
	--
	if p_type = 'BUTTON' then
		if v_name is not null then
			go_block('SELECT_BY_AIRPORT_GROUP');
 			corept_execute_query;
 			loop
 				exit when :select_by_Airport_group.GROUP_NAME = ltrim(v_name) or 
 				:system.last_record = 'TRUE';
 				next_record;
 			end loop;
 			go_block('AIRPORT_TO_SELECT');
			if p_icao is not null then
				loop
					exit when (:Airport_to_select.Airport_ident = p_ident and
					           :Airport_to_select.Airport_icao  = p_icao) or
					           :system.last_record = 'TRUE';
  				next_record;
				end loop;				
			else
				loop
					exit when (:Airport_to_select.Airport_ident = p_ident or
					:system.last_record = 'TRUE');
  				next_record;
				end loop;
			end if;	
      if v_other_name is not null then
				v_message := 'There exist other Airport(s) with the same ident in group:'||v_other_name||'.';
			end if;		
			if v_exist = 0 then
				dsp_msg('Invalid Airport, found in group '||v_name||'.'||chr(10)||v_message);
			else
				if v_other_name is not null then
					dsp_msg(v_message);
				end if;
			end if;
		else
			if v_exist = 0 then
				dsp_msg('This is not a valid Airport in cycle '||:global.processing_cycle||'.');
			elsif v_exist = 1 then
					dsp_msg('This Airport is available to use.');
	--Begin SCR 7647 --Madhu --10-Jan-2018
					:CONTROL_BLOCK.temp_airport:= p_ident; --:CONTROL_BLOCK.airport_ident;
					go_block('STD_AIRPORT');
					ls_Airport_query := 'data_supplier = :navdb.data_supplier and airport_ident = :CONTROL_BLOCK.temp_airport and validate_ind in (''Y'',''S'',''H'',''O'') and processing_cycle = :control_block.proc_cycle and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from AIRPORT_TO_SELECT A, SELECT_BY_AIRPORT_GROUP B where B.NAVDB_ID = :NAVDB.NAVDB_ID AND A.SELECT_BY_ID = B.SELECT_BY_ID) '; --7607 --Madhu
					set_block_property('STD_AIRPORT',default_where,ls_Airport_query);
					corept_execute_query;
--End SCR 7647 --Madhu --10-Jan-2018				
			else
				dsp_msg('There are more than one Airports with this ident, all of them available to use.');
			end if;	
		end if;	
	else
		if v_name is not null and p_icao is not null then
			if v_exist = 0 then
				dsp_msg('This Airport is already used in group '||v_name||'. '||chr(10)||
								'And this is not a valid Airport in cycle '||:global.processing_cycle||'.');
			elsif v_exist = 1 then					
				dsp_msg('This Airport is already used in group '||v_name||'. ');
			end if;	
  		Set_Application_Property(cursor_style,'DEFAULT');
  		raise form_trigger_failure;
		else
			if v_exist = 0 and p_icao is not null then
				v_button := DISPLAY_ALERT.MORE_BUTTONS('S','INVALID Airport DATA',
  								'This Airport does not exist in cycle '||:global.processing_cycle||'.'||
  								chr(10)||'Select from the options:'||chr(10)||chr(10),
  								'Correct the data','Accept it');
  			if v_button = 1 then
  				Set_Application_Property(cursor_style,'DEFAULT');
  				raise form_trigger_failure;
  			else
  				null;
  			end if;
  		else
  			-- don't care, let user continue.
  			null;		
			end if;
		end if;
	end if;
END;

 populateIncExcLists:
PROCEDURE POPULATE_INC_EXC_LISTS(p_ind varchar2) IS

  cursor get_criteria is
		select criteria_id
		from select_criteria
		where record_type_code = :datatyp_rad.record_type_code
		and processing_order = 30;	

	cursor get_select_by_id(p_criteria number) is
		select select_by_id
		from navdb_select_criteria
		where navdb_id = :navdb.navdb_id
		and record_type_code = :datatyp_rad.record_type_code
		and parent_select_by_id is null
		and geo_area_id = '-2'
		and include_exclude_ind = p_ind
		and criteria_id = p_criteria;	

-- Begin Fix - SCR 6365.01 - Eswar KC
/* 	Commented as Cusror is written as Non-Parameterized Cursor to fetch the Inc/Exc List records in alphabetical order.
		cursor get_list_value(p_order number) is
		select A.value_seq s_seq,
					 A.value     s_val
		from selection_criteria_value A, navdb_select_criteria B
		where A.value_descr = (select identifier_column_name 
													 from record_identifier
													 where record_type_code = :datatyp_rad.record_type_code
													 and display_order = p_order)
		and A.select_by_id = B.select_by_id
		and A.select_by_id = :control_block.list_s_id		
		and B.include_exclude_ind = p_ind		
		order by A.value_seq;
*/
	CURSOR get_list_value IS		
	SELECT List_Records.S_Seq, List_Records.S_Val, List_Records.Value_Descr, Rec_Ident.Display_Order, UPDATE_DCR_NUMBER
    FROM Record_Identifier Rec_Ident,
         (SELECT Scv.Value_Seq S_Seq, Scv.Value S_Val, Scv.Value_Descr, SCV.UPDATE_DCR_NUMBER
             FROM Selection_Criteria_Value Scv, Navdb_Select_Criteria Nsc
           WHERE Scv.Value_Descr IN  (SELECT Identifier_Column_Name
                                        FROM Record_Identifier
                                       WHERE Record_Type_Code = :datatyp_rad.record_type_code)
             AND Scv.Select_By_Id = Nsc.Select_By_Id
             AND Scv.Select_By_Id = :control_block.list_s_id
             AND Nsc.Include_Exclude_Ind = P_Ind) List_Records, 
         (SELECT Scv1.Value, Scv1.Value_Seq
            FROM Selection_Criteria_Value Scv1, Navdb_Select_Criteria Nsc1
           WHERE Value_Descr = (SELECT Identifier_Column_Name
						                      FROM Record_Identifier
						                     WHERE Record_Type_Code = :datatyp_rad.record_type_code
						                       AND Display_Order = 1)
             AND Scv1.Select_By_Id = Nsc1.Select_By_Id
             AND Scv1.Select_By_Id = :Control_Block.List_S_Id)  List_Value
  WHERE List_Records.S_Seq = List_Value.Value_Seq
    AND Rec_Ident.Record_Type_Code = :datatyp_rad.record_type_code
    AND REC_IDENT.IDENTIFIER_COLUMN_NAME = List_Records.value_descr
ORDER BY Value, S_Seq, Display_Order, Value_Descr;

	ln_Cnt NUMBER;  
-- End Fix - SCR 6365.01 - Eswar KC		
	v_count     number;	
	v_criteria  number;
	v_s_id      number;
BEGIN
  open get_criteria;
	fetch get_criteria into v_criteria;
	close get_criteria;
	--
	if v_criteria is not null then
		open get_select_by_id(v_criteria);
		fetch get_select_by_id into v_s_id;
		close get_select_by_id;
		if v_s_id is null then
			IF CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN ('navdb.navdb_id')) = 1 THEN 	--Fix SCR 5962 --Madhu --22-Jul-2013
				select select_by_id_Seq.nextval into :control_block.list_s_id from dual;
				insert into navdb_select_criteria(select_by_id,
																					navdb_id,
																					record_type_code,
																					criteria_id,
																					geo_area_id,
																					include_exclude_ind)
				values(:control_block.list_s_id, :navdb.navdb_id, 
							 :datatyp_rad.record_type_code,v_criteria,'-2',p_ind);
				commit;
			END IF;		--Fix SCR 5962 --Madhu --22-Jul-2013
		else				 
			:control_block.list_s_id := v_s_id;
			-- loop for each column
-- Begin Fix - SCR 6365.01 - Eswar KC
/*	
		Commented as Non-Parameterized Cursor is used to dispaly the Inc/Exc List records. 			
  		FOR i IN 1..:DATATYP_RAD.list_no LOOP
				-- loop for each record
				FOR rec IN get_list_value(i) LOOP           
					-- copy(nvl(rec.s_val,'Null'),'lists.value_'||to_char(i)); Commented for not to populate Null. - Fix - SCR 6340.02 - Eswar KC - 09-July-2014
					copy(rec.s_val,'lists.value_'||to_char(i)); -- Fix - SCR 6340.02 - Eswar KC - 09-July-2014
					next_record;
				END LOOP;
				First_Record;
			END LOOP;
*/
			ln_Cnt := 1;
			FOR rec IN get_list_value LOOP
				COPY(rec.S_Val,'lists.value_'||to_char(ln_Cnt));
				COPY(rec.S_Val,'lists.value_D_'||to_char(ln_Cnt));  --Fix SCR 7259.01 Venkat M 15-Aug-17
				:lists.dcr_number := rec.update_DCR_NUMBER;
				ln_Cnt := ln_Cnt + 1;
					IF ln_Cnt > :DATATYP_RAD.list_no THEN
						:lists.dcr_number := rec.update_DCR_NUMBER;
					  ln_Cnt := 1;
					  Next_Record;
					END IF;
			END LOOP;
			First_Record;
	-- End Fix - SCR 6365.01 - Eswar KC 			
  	end if;
  end if;	
EXCEPTION
	when others then
	dsp_msg(sqlerrm);
END;

 checkLength:
PROCEDURE CHECK_LENGTH(p_num number) IS
	v_max_length number(3) := name_in('CONTROL_BLOCK.LENGTH_'||to_Char(p_num));
BEGIN
	if length(name_in('LISTS.VALUE_'||to_char(p_num))) > v_max_length  then
		dsp_msg('The maxium length for this field is '||v_max_length);
		raise form_trigger_failure;
	end if;	   
END;

 setGroup:
PROCEDURE SET_GROUP
	(p_block varchar2,
	 p_group varchar2,
	 p_chk  varchar2,
	 p_item1 varchar2,
	 p_item2 varchar2 := null) IS
	group_id       recordgroup := find_group(p_group);
	total_rows     number := get_group_row_count(group_id);
	v_row          number;
	v_item1        varchar2(38);
	v_item2        varchar2(38);
BEGIN

	if p_chk = 'Y' then
		add_group_row(group_id, end_of_group);
		v_row := total_rows + 1;
			--Start Fix SCR 7016.01 - 21-03-2017 - Ashish N
			if p_block in('AIRPORT_TO_SELECT','STD_AIRPORT') THEN
							:control_block.apt_cnt := v_row;
			end if;
			--End Fix SCR 7016.01 - 21-03-2017 - Ashish N
		set_group_char_cell(p_group||'.item1', v_row, p_item1);
		if p_item2 is not null then
			set_group_char_cell(p_group||'.item2', v_row, p_item2);
		end if;	
		set_item_instance_property(p_block||'.CHK',current_record, visual_attribute,'CHECKED');
	elsif p_chk = 'N' then
		if p_item2 is null then
			v_row := get_group_record_number(p_group||'.item1',p_item1);				
			delete_group_row(group_id,v_row);
		else
			--Start Fix SCR 7016.01 - 21-03-2017 - Ashish N
				if p_block in('AIRPORT_TO_SELECT','STD_AIRPORT') THEN
			  :control_block.apt_cnt := total_rows-1;
				end if;
				--End Fix SCR 7016.01 - 21-03-2017 - Ashish N
			for i in 1..total_rows loop
				v_item1 := get_group_char_cell(p_group||'.item1',i);
				if v_item1 = p_item1 then
					v_item2 := get_group_char_cell(p_group||'.item2',i);
					if v_item2 = p_item2 then
						delete_group_row(group_id,i);
						exit;
					end if;
				end if;
			end loop;
		end if;	
		set_item_instance_property(p_block||'.CHK',current_record, visual_attribute,'PLAIN');
	end if;

END;

 queryBlockRecords:
PROCEDURE QUERY_BLOCK_RECORDS(p_block varchar2,p_type varchar2 := null) IS
	v_query varchar2(30000);
	v_length_w number;
	v_length_o number;
	v_where varchar2(30000);
	v_airport_where varchar2(30000);
BEGIN
	if p_type = 'INITIAL' or p_type is null then
		go_block(p_block);
	end if;	
	if p_type in ('INITIAL','KEY_EXE') then
		if p_block = 'AREA_CODE' then
			set_block_property('AREA_CODE',default_where,'AREA_CODE not in (select AREA_CODE from select_by_AREA where navdb_id = :navdb.navdb_id)');
		elsif p_block = 'ICAO' then
			set_block_property('ICAO',default_where,'icao_code not in (select icao_code from select_by_icao where navdb_id = :navdb.navdb_id)');
		elsif p_block = 'STD_AIRPORT' then
			v_airport_where := 'data_supplier = :navdb.data_supplier and validate_ind in (''Y'',''S'',''H'') and processing_cycle = :control_block.proc_cycle and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from AIRPORT_TO_SELECT A, SELECT_BY_AIRPORT_GROUP B where B.NAVDB_ID = :NAVDB.NAVDB_ID AND A.SELECT_BY_ID = B.SELECT_BY_ID)'; --7607 --Madhu
			if :std_airport.four_alpha_terminal = 'Y' then
				v_airport_where := v_airport_where||' and length(ltrim(rtrim(airport_ident))) = 4 '||
				                  'and substr(airport_ident,1,1) between ''A'' and ''Z'' '||
				                  'and substr(airport_ident,2,1) between ''A'' and ''Z'' '||
				                  'and substr(airport_ident,3,1) between ''A'' and ''Z'' '||
				                  'and substr(airport_ident,4,1) between ''A'' and ''Z'' '; 	
			end if;
			if :std_airport.RUNWAY_LENGTH is not null then
				if substr(ltrim(:std_airport.RUNWAY_LENGTH),1,1) not in ('=','>','<') then
					dsp_msg('For the Runway Length field, please use format like: =100, >100, <100, >=100 or <=100.');
					raise form_trigger_failure;
				end if;
				v_airport_where := v_airport_where||' and (airport_ident,airport_icao) in '||
				'(select airport_ident,airport_icao from pl_std_runway where RUNWAY_LENGTH '||:std_airport.RUNWAY_LENGTH||
				' and data_supplier = :navdb.data_supplier and validate_ind in (''Y'',''S'',''H'',''O'') and processing_cycle = :control_block.proc_cycle) '; --7607 --Madhu
			end if;	 
			--if :NAVDB.DATA_SUPPLIER = 'J' then -- Commented for SCR 6510-- Madhu
				if :std_airport.SURFACE_CODE = 'S' then
					v_airport_where := v_airport_where||' and (airport_ident,airport_icao) in '||
					'(select airport_ident,airport_icao from pl_std_suppl_runway where runway_surface in '||
					'(''CLAY'',''CORL'',''DIRT'',''GRAS'',''GRVL'',''ICE'',''SILT'',''SNOW'',''SOIL'',''TRTD'',''TURF'',''UNKN'',''LATE'',''MATS'',''PLNG'',''SAND'',''SELD'',''SHAE'',''UNPV'',''WATE'')'|| -- Added runway surface 'WATE' as part of scr 4555 by Neelima 12-May-2010
					' and data_supplier = :navdb.data_supplier and validate_ind in (''Y'',''S'',''H'',''O'') and processing_cycle = :control_block.proc_cycle) '; --7607 --Madhu
				elsif :std_airport.SURFACE_CODE = 'H' then	
					v_airport_where := v_airport_where||' and (airport_ident,airport_icao) in '||
					'(select airport_ident,airport_icao from pl_std_suppl_runway where runway_surface in '||
					'(''ASPH'',''BITU'',''BRCK'',''CONC'',''MACA'',''PAVD'',''TARM'')'||
					' and data_supplier = :navdb.data_supplier and validate_ind in (''Y'',''S'',''H'',''O'') and processing_cycle = :control_block.proc_cycle) '; --7607 --Madhu
				end if;
		---	end if;				
			set_block_property('STD_AIRPORT',default_where,v_airport_where);
			:control_block.copy_RUNWAY_LENGTH := :std_airport.RUNWAY_LENGTH;
			:control_block.COPY_SURFACE_CODE := :std_airport.surface_code;
			:control_block.COPY_4_ALPHA_TERMINAL := :std_airport.FOUR_ALPHA_TERMINAL;
			
		elsif p_block = 'STD_HELIPORT' then
			set_block_property('STD_HELIPORT',default_where,
			'data_supplier = :navdb.data_supplier and validate_ind in (''Y'',''S'',''H'',''O'') and processing_cycle = :control_block.proc_cycle and (terminal_ident, terminal_icao) not in (select heliport_ident, heliport_icao from HELIPORT_TO_SELECT A, SELECT_BY_HELIPORT_GROUP B where B.NAVDB_ID = :NAVDB.NAVDB_ID AND A.SELECT_BY_ID = B.SELECT_BY_ID)'); --7607 --Madhu
-- Begin Fix - SCR 4337 - Eswar KC -12 MAR 2009  
		elsif p_block = 'FMS_DELIVERY_FORMAT_MEDIA' then
			set_block_property('FMS_DELIVERY_FORMAT_MEDIA',default_where,
			'FMS_ID = :navdb.fms_id and FORMAT_MEDIA_TYPE NOT IN (Select Format_Media_type from NAVDB_DELIVERY_FORMAT_MEDIA where navdb_id = :navdb.navdb_id) ');
-- End Fix - SCR 4337 - Eswar KC -12 MAR 2009  
		else
			set_block_property(p_block,default_where,'');
		end if;	
	else	
		v_query := get_block_property(p_block,last_query);
		if v_query is not null then
			v_length_w := instr(v_query,'WHERE');
			v_length_o := instr(v_query,'order by');
			v_where := substr(v_query,v_length_w+5,v_length_o-v_length_w-5);
			set_block_property(p_block,default_where,v_where);
		end if;		
	end if;

	corept_execute_query;	
		--Fix SCR 7159 --Harikrishna--22-Mar-2017--Added to disable the Export data functionality.
	set_menu_item_property( rtrim('Tools')||'.'||ltrim('Export_Data') ,ENABLED ,PROPERTY_FALSE);
END;

 createNewGroup:
PROCEDURE CREATE_NEW_GROUP(P_GROUP varchar2, P_NUM_COL NUMBER) IS
	group_id      recordgroup;
	col_id        groupcolumn;
begin
	group_id := find_group(p_group);
	if NOT id_null(group_id) then
		DELETE_GROUP(p_group);
	END IF;	
	group_id := create_group(p_group);
	for i in 1..p_num_col loop
		col_id := Add_group_column(group_id,'item'||to_char(i),char_column,38);
	end loop;
END;

 checkSave:
PROCEDURE CHECK_SAVE(p_block varchar2 := null) IS
	v_cursor_block varchar2(50) := :system.cursor_block;
	v_out   varchar2(50);
	V_FLAG VARCHAR2(1):= 'Y'; -- SCR 3693 - Sesha 
BEGIN
 if :system.form_status = 'CHANGED' then
		if not id_null(find_timer('delete_geo_alarm')) then
			raise form_trigger_failure;
		else	
					
-- Begin Fix - SCR 3693 - Sesha 
     IF NVL(GET_ITEM_PROPERTY('NAVDB.CUSTOMER_EMAIL_ID',DATABASE_VALUE),'~~~') <> NVL(:CUSTOMER_INFO.CUSTOMER_EMAIL_ID,'~~~') 
   	    OR NVL(GET_ITEM_PROPERTY('NAVDB.NOTES',DATABASE_VALUE),'~~~') <> NVL(:CUSTOMER_INFO.NOTES,'~~~')
   	    OR NVL(GET_ITEM_PROPERTY('NAVDB.CUST_EMAIL_FLAG',DATABASE_VALUE),'~') <> NVL(:CUSTOMER_INFO.CUST_EMAIL_FLAG,'~') -- Fix - SCR 6815.04 - Eswar KC - 19-Jan-2016
   	    THEN
        V_FLAG:= 'Y';
     ELSE
        V_FLAG:= 'N';
     END IF;

   IF V_FLAG = 'Y' OR (V_FLAG='N' AND :PARAMETER.P_CUSTOMER_FLAG <> 'Y') THEN
 -- End Fix - SCR 3693 - Sesha 
		 dsp_msg('Please save your change first!');
	 	 if v_cursor_block = 'STD_AIRPORT' then
			if :std_airport.CHK = 'Y' then
				:std_airport.chk := 'N';
				SET_GROUP('STD_AIRPORT','Select_Group',:STD_AIRPORT.chk,:STD_AIRPORT.AIRPORT_IDENT,:STD_AIRPORT.AIRPORT_ICAO);
			end if;
		 elsif v_cursor_block = 'ICAO' then
			if :ICAO.CHK = 'Y' then
				:ICAO.CHK := 'N';
				SET_GROUP('ICAO','Select_Group',:ICAO.chk,:ICAO.ICAO_CODE);
		 end if;		
		elsif v_cursor_block = 'AREA_CODE' then
			if :AREA_CODE.CHK = 'Y' then
				:AREA_CODE.CHK := 'N';
				SET_GROUP('AREA_CODE','Select_Group',:AREA_CODE.chk,:AREA_CODE.AREA_CODE);
			end if;
		elsif v_cursor_block = 'STD_HELIPORT' then
			if :std_heliport.CHK = 'Y' then
				:std_heliport.chk := 'N';
				SET_GROUP('STD_HELIPORT','Select_Group',:STD_HELIPORT.chk,:STD_HELIPORT.TERMINAL_IDENT,:STD_HELIPORT.TERMINAL_ICAO);
			end if;
		end if;
		-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
		go_block(v_cursor_block);
		IF v_cursor_block = 'NAVDB' THEN 
			SET_CANVAS_PROPERTY ('SEL_CAN', Topmost_Tab_Page, 'MAIN');
			Hide_View('FOCALS'); -- Fix - SCR 6927.01 - Eswar KC	
		END IF; 
		-- End Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
		-- Begin Fix - SCR 6927.01 - Eswar KC	
		if v_cursor_block = 'CONTROL_BLOCK' then
			go_block('NAVDB'); 
		-- End Fix - SCR 6927.01 - Eswar KC	
		elsif p_block is not null then
			go_block(p_block);
  	end if;	
		Set_Application_Property(cursor_style,'DEFAULT');
		raise form_trigger_failure;
  	end if; -- SCR 3693 - Sesha 
  end if;
 end if;	
END;

 selAll:
PROCEDURE SEL_ALL
	(p_block 	  varchar2, p_group 	varchar2) IS
	v_item1_val varchar2(38);
	v_item2_val varchar2(38) := null;
BEGIN
	if :parameter.work_type != 'VIEW' then
  	Set_Application_Property(cursor_style,'BUSY');
		delete_group_row(find_group(p_group),ALL_ROWS);
		first_record;
		loop
			copy('Y',p_block||'.CHK');
			if p_block like '%AIRPORT%' then
				v_item1_val := name_in(p_block||'.AIRPORT_IDENT');
				v_item2_val := name_in(p_block||'.AIRPORT_ICAO');
			elsif p_block like 'STD_HELIPORT' then
				v_item1_val := name_in(p_block||'.TERMINAL_IDENT');
				v_item2_val := name_in(p_block||'.TERMINAL_ICAO');	
			ELSIF p_block like 'HELIPORT_TO_SELECT' then
				v_item1_val := name_in(p_block||'.HELIPORT_IDENT');
				v_item2_val := name_in(p_block||'.HELIPORT_ICAO');	
			elsif p_block = 'ICAO' then
				v_item1_val := :ICAO.ICAO_CODE;
			elsif p_block = 'AREA_CODE' then
				v_item1_val := :AREA_CODE.AREA_CODE;
			ELSIF P_BLOCK IN ('SELECT_BY_ICAO','SELECT_BY_AREA') THEN
				v_item1_val := NAME_IN(P_BLOCK||'.SELECT_BY_ID');
	-- Begin Fix - SCR 4337 - Eswar KC -12 MAR 2009  
			ELSIF P_BLOCK = 'FMS_DELIVERY_FORMAT_MEDIA' THEN
				v_item1_val := :FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE;
			ELSIF P_BLOCK = 'NAVDB_DELIVERY_FORMAT_MEDIA' THEN	
				v_item1_val := :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE;
-- End Fix - SCR 4337 - Eswar KC -12 MAR 2009  
			end if;	
			SET_GROUP(p_block,p_group,'Y',v_item1_val,v_item2_val);
			if :system.last_record = 'TRUE' then
				first_record;
				exit;
			else
				next_record;
			end if;
		end loop;
		Set_Application_Property(cursor_style,'DEFAULT');
	end if;	
END;

 initializeForm:
PROCEDURE INITIALIZE_FORM IS
	fname	varchar2(100) := get_application_property(CURRENT_FORM_NAME);
	v_err  varchar2(300);
BEGIN
	default_value('J','global.data_supplier');
  default_value('99999','global.dcr_number');
  default_value(null,'global.processing_cycle');
  default_value('MAXIMIZE','global.Status_Window'); 
  default_value(null,'global.allroles');
  default_value('N','global.is_admin');
  /*********************************************************************/
  /*********************************************************************/
  /* Global Variables declared Plotting Function- updated as part of scr 2304.00 */
  -- Declaring Common variables
  default_value('cpt','global.user_name');
  default_value('cpt','global.password');
  default_value('cpt','global.connect_string');
  default_value('airport','global.data_type');
  default_value('airport','global.table_name');
  default_value('blank','global.last_query');
 -- Updated for Plotting Function
	:global.user_name := Get_Application_Property(USERNAME);
  :global.password := Get_Application_Property(PASSWORD);
  :global.connect_string := Get_Application_Property(CONNECT_STRING);
   set_item_property('CONTROL_BLOCK.PLOT',VISIBLE, PROPERTY_FALSE);
   set_item_property('CONTROL_BLOCK.GEARTH',VISIBLE, PROPERTY_FALSE);--Fix SCR 6088 --Madhu--11-Mar-2014
  /*********************************************************************/
  /*********************************************************************/
  :global.Status_Window := get_window_property('BASE_WINDOW',window_state);
  if name_in('global.Status_Window') = 'MAXIMIZE' then
		set_window_property('BASE_WINDOW', window_state, MAXIMIZE);
	else
		set_window_property('BASE_WINDOW', window_state, NORMAL);
	end if;
  
  -- activate all roles
  v_err := set_role(:global.allroles);
  if v_err != 'PASSED' then
		-- The roles cannot be activated
		display_alert.one_button('S','Fatal Error',
		'The roles cannot be activated.  Contact the COREPT Administrator.');
		exit_form;
  else
--  Continue
  if :global.processing_cycle is null then
    begin
      select max(processing_cycle) 
      into   :global.processing_cycle
      from pl_std_airport;
    exception
  	  when no_data_found then
  	   :global.processing_cycle := null;
    end;
  end if;
	--
	
		/* Begin Fix -- Sesha --scr 3392*/
	set_item_property('DISPLAY_ITEM_BLOCK.PROCESSING_CYCLE',DISPLAYED, PROPERTY_TRUE); -- MOD
	set_item_property('DISPLAY_ITEM_BLOCK.PROCESSING_CYCLE',WIDTH, 60);								 -- MOD
	--:DISPLAY_ITEM_BLOCK.PROCESSING_CYCLE := :global.processing_cycle;	
	/* End Fix -- Sesha --scr 3392*/
	populate_items(fname);
	unset_query_menu_items;
	/*Imran Obstacle Changes SCR 6788.01*/
	IF NVL(:PARAMETER.OBS_ENABLED,'N') = 'Y' THEN
		SET_TAB_PAGE_PROPERTY('GEO',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('AIRPORT',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('HELIPORT',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('ORC',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('VALIDATE',ENABLED,PROPERTY_FALSE );
	/*Imran Obstacle*/
	/*Imran CRH Start 7091.01*/
	ELSIF NVL(:PARAMETER.CRH_ENABLED,'N') = 'Y' THEN
		--SET_TAB_PAGE_PROPERTY('GENERAL_CRITERIA',ENABLED,PROPERTY_FALSE );	Commented Imran SCR 7751
		--SET_TAB_PAGE_PROPERTY('GEO',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('AREA',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('ICAO',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('AIRPORT',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('HELIPORT',ENABLED,PROPERTY_FALSE );
		--SET_TAB_PAGE_PROPERTY('SELECTIONS',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('ORC',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('VALIDATE',ENABLED,PROPERTY_FALSE );
	/*Imran CRH End 7091.01*/
	/*Imran Airport Info Start 7817.01*/
	ELSIF NVL(:PARAMETER.ATD_ENABLED,'N') = 'Y' THEN
		SET_TAB_PAGE_PROPERTY('AREA',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('ICAO',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('AIRPORT',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('HELIPORT',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('ORC',ENABLED,PROPERTY_FALSE );
		SET_TAB_PAGE_PROPERTY('VALIDATE',ENABLED,PROPERTY_FALSE );
	/*Imran Airport Info End 7817.01*/
	END IF;
	
	end if;
END;

 checkDid:
PROCEDURE check_did(p_type varchar2) IS
BEGIN

  if p_type = 'Post Block Check' then
  --Begin fix SCR 7426.09 --Madhu 
  	IF :control_block.did = 'N' AND :control_block.GEN_CRITERIA_CAN = 'GENERAL_CRITERIA' THEN
  		dsp_msg('Use the save/cancel button on the bottom of this form to go back.');
  		set_canvas_property('SEL_CAN',topmost_tab_page,'GENERAL_CRITERIA');
  	
  		RAISE form_trigger_failure;
  	--End fix SCR 7426.09 --Madhu 
  	ELSIF :control_block.did = 'N' THEN
  		dsp_msg('Use the available button on the bottom of this form to go back.');
  		--Set_Application_Property(cursor_style,'DEFAULT');  --SCR 7259 23-aug-2017 check it is raising an exception
  		raise form_trigger_failure;
  		end if;
  elsif p_type = 'Main Button Check' then
  	if get_view_property('RULES',visible) = 'TRUE' then
			dsp_msg('Please go back to the main rule form by using the ''Go Back'' button first.');
 			raise form_trigger_failure;
  	end if;
 	-- Begin Fix - SCR 3215 - Sesha - 05-Dec-2008 	
		/*if (:system.cursor_block = 'AIRPORT_TO_SELECT' and :system.cursor_record = 1)
			or :system.cursor_block = 'STD_AIRPORT' then
			if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME is not null and :AIRPORT_TO_SELECT.AIRPORT_IDENT is null then
				dsp_msg('Please select at lease one airport for group '''||:SELECT_BY_AIRPORT_GROUP.GROUP_NAME||'''');
				raise form_trigger_failure;
			end if;
		end if;*/
 	 -- End Fix - SCR 3215 - Sesha - 05-Dec-2008			
 	 -- Begin Fix - SCR 3215 - Neelima - 01-Sep-2010
	/*	if (:system.cursor_block = 'HELIPORT_TO_SELECT' and :system.cursor_record = 1)
			or :system.cursor_block = 'STD_HELIPORT' then
			if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME is not null and :HELIPORT_TO_SELECT.HELIPORT_IDENT is null then
				dsp_msg('Please select at lease one Heliport for group '''||:SELECT_BY_HELIPORT_GROUP.GROUP_NAME||'''');			
				raise form_trigger_failure;
			end if;
		end if;  */	
		-- End Fix - SCR 3215 - Neelima - 01-Sep-2010				
  end if;	
END;

 updateDatatypValue:
PROCEDURE UPDATE_DATATYP_VALUE(P_OPTION VARCHAR2) IS
BEGIN
  if P_option in ('I','N','D') then
  	--  delete parent selections
 		delete from selection_criteria_value
  	where select_by_id in (select select_by_id 
  												 from   navdb_select_criteria
  												 where  parent_select_by_id = :datatyp_rad.SELECT_BY_ID
  												 and criteria_id in (select criteria_id
  												 										 from select_criteria));
		delete from  navdb_select_criteria 
		where parent_select_by_id = :datatyp_rad.SELECT_BY_ID
		and criteria_id in (select criteria_id
												from select_criteria);
		:datatyp_rad.old_option := :datatyp_rad.options;
  elsif p_option = 'X' then
  	--  delete parent selections
 		delete from selection_criteria_value
  	where select_by_id in (select select_by_id 
  												 from   navdb_select_criteria
  												 where  parent_select_by_id = :datatyp_rad.SELECT_BY_ID);
		delete from  navdb_select_criteria 
		where parent_select_by_id = :datatyp_rad.SELECT_BY_ID;
		:datatyp_rad.old_option := :datatyp_rad.options;
	 end if;
	--  update_radio;
	update navdb_select_criteria 
	set    include_exclude_ind = :datatyp_rad.options
	where  select_by_id = :datatyp_rad.SELECT_BY_ID;
	--
	commit;                                    
END;

 clickDatatypRadio:
PROCEDURE click_datatyp_radio IS
	v_airway_ind   varchar2(1);
	v_airway_Low   varchar2(1) := 'N';
	v_arpt_include varchar2(1);
	v_arpt_ind     varchar2(1);
	v_button   number(1);
	cursor get_selection_group is
							select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
							from navdb_select_criteria
							where navdb_id = :navdb.navdb_id
							and record_type_code = 10
							and include_exclude_ind = 'D'
							and parent_select_by_id is null;
BEGIN
--Fix SCR 7420.01 Ashish N 07-JUL-2017
	if :parameter.work_type != 'VIEW' and Name_In('parameter.flag') != 'Y' THEN
			if (:datatyp_rad.old_option = 'R' AND :datatyp_rad.options <> 'R') then
				  v_button :=	display_alert.more_buttons ('S','Change Selection Criteria ',
			 		'You are going to change the Selection from Rules to Other Please check and Confirm.'||chr(10)||
			 		'Please pick your choice carefully:'||chr(10)||chr(10),'Change','Cancel');
			    	if v_button = 2 then
			    		:datatyp_rad.options := 'R';
			    	 RAISE Form_Trigger_Failure;
			    	end if;
			  end if;
 	end if;
	--End SCR 7420.01 Ashish N 07-JUL-2017		    	
			    	
	if :DATATYP_RAD.RECORD_TYPE_CODE is not null then
		if :parameter.work_type != 'VIEW' and :datatyp_rad.options != :datatyp_rad.old_option then
			if :datatyp_rad.RECORD_TYPE_CODE = 10 and :datatyp_rad.options in ('I','R','D') and :control_block.airway_sbi is not null then
			begin
					select include_exclude_ind into v_airway_ind
					from NAVDB_SELECT_CRITERIA
					where select_by_id = :control_block.airway_sbi;
					if v_airway_ind = 'D' then
						--check into default
						select 'Y' into v_airway_low
						from NAVDB_SELECT_CRITERIA
						where include_exclude_ind = 'I'
						and criteria_id = 24  -- TERMINAL AREA LOWS
						and NAVDB_ID = :navdb.navdb_id
						and GEO_AREA_ID = '-1';
					elsif v_airway_ind = 'R' then		
						select 'Y' into v_airway_low
						from NAVDB_SELECT_CRITERIA
						where include_exclude_ind = 'I'
						and criteria_id = 24  -- TERMINAL AREA LOWS
						and parent_select_by_id = :control_block.airway_sbi;
					else
						v_airway_Low := 'N';
					end if;		
				exception
					when no_data_found then
					v_airway_Low := 'N';
				end;	
				if v_airway_Low = 'Y' then
					if :datatyp_rad.options in ('I','R') then
						:datatyp_rad.options := :datatyp_rad.old_option;
						dsp_msg('''Include'' or ''Rule'' of Airport is not allowed while ''Terminal AREA Lows'' is applied in record type Enroute Airway.');
						raise form_trigger_failure;
					elsif :datatyp_rad.options = 'D' then
						begin
							select 'Y' into v_arpt_include
							from NAVDB_SELECT_CRITERIA
							where include_exclude_ind in ('I','R')
							and NAVDB_ID = :navdb.navdb_id
							and record_type_code = 10
							and GEO_AREA_ID = '-1'
							and PARENT_SELECT_BY_ID is null;
						exception
							when no_data_found then
							v_arpt_include := 'N';
						end;
						if v_arpt_include = 'Y' then
							:datatyp_rad.options := :datatyp_rad.old_option;
							dsp_msg('''Include'' or ''Rule'' is applied on the default Airport rule. So, can not apply ''Default'' here while ''Terminal AREA Lows'' is applied on record type Enroute Airway.');
							raise form_trigger_failure;
						end if;	
					end if;	
				end if;		
				if :SELECTION.SELECTIONS = '-1' then
					for rec in get_selection_group loop
						begin
							select 'Y' into v_airway_low
							from navdb_select_criteria
							where (geo_area_id = rec.selection_group
							or area_code_id = rec.selection_group
							or icao_code_id = rec.selection_group)
							and include_exclude_ind = 'I'
							and criteria_id = 24
							and navdb_id = :navdb.navdb_id;
						exception
							when no_data_found then
							v_airway_low := 'N';
						end;	
						if v_airway_low = 'Y' then
							dsp_msg('There exist at least one selection, it''s Airport uses ''Default'', and it''s Airway has selected low. '||
							        'So, can not apply ''Include'' or ''Rule'' for Airport here.');
							:datatyp_rad.options := :datatyp_rad.old_option;
							exit;
						end if;
					end loop;	
				end if;		
			end if;
			if :datatyp_rad.RECORD_TYPE_CODE = 60 and :datatyp_rad.options = 'D' and :control_block.airport_sbi is not null then
				begin
					select 'Y' into v_airway_low
					from NAVDB_SELECT_CRITERIA
					where include_exclude_ind = 'I'
					and criteria_id = 24  -- TERMINAL AREA LOWS
					and geo_area_id = '-1'
					and navdb_id = :NAVDB.NAVDB_ID;
				exception
					when no_data_found then
					v_airway_low := 'N';
				end;	
				if v_airway_low = 'Y' then
				 	select include_exclude_ind into v_arpt_ind
				 	from NAVDB_SELECT_CRITERIA
				 	where select_by_id = :control_block.airport_sbi;
				 	if v_arpt_ind in ('I','R') then
				 		v_arpt_include := 'Y';
				 	elsif v_arpt_include = 'D' then	
				 		begin
				 			select 'Y' into v_arpt_include
				 			from NAVDB_SELECT_CRITERIA
				 			where include_exclude_ind in ('I','R')
				 			and GEO_AREA_ID = '-1'
				 			and record_type_code = 10
				 			and navdb_id = :navdb.navdb_id
				 			and PARENT_SELECT_BY_ID is null;
				 		exception
				 			when no_data_found then
				 			v_arpt_include := 'N';
				 		end;	
				 	end if;
				 	if v_arpt_include = 'Y' then
						:datatyp_rad.options := :datatyp_rad.old_option;
						dsp_msg('''Terminal AREA Lows'' is applied in the default rule. So, can not apply ''Default'' here while ''Include'' or ''Rule'' is applied on Ariport.');
						raise form_trigger_failure;
					end if;
				end if;	 
			end if;
			UPDATE_DATATYP_VALUE(:datatyp_rad.options);
		end if;	
		if :parameter.work_type = 'VIEW' and :datatyp_rad.options != :datatyp_rad.old_option then
			:datatyp_rad.options := :datatyp_rad.old_option;
		else
			if :datatyp_rad.options = 'R' then
				if :parameter.work_type != 'VIEW' then
					CREATE_DATATYP_DETAIL_CRIT('normal');
				end if;	
				go_block('rules');
				clear_block;
				POPULATE_DATATYP_DETAIL_CRIT;
			end if;
		end if;
	end if;
END;

 clickDetailRadio:
PROCEDURE click_detail_radio IS 
BEGIN
	if :system.cursor_block = 'RULES' then
		if :RULES.SELECTED_RULES is not null then
			if (:parameter.work_type = 'VIEW' and :RULES.list != :rules.old_list) 
				--or(:RULES.SELECTED_RULES in ('ROUTE TYPE','GPS/FMS VALID INDICATORS') and :RULES.list = 'X') 
				then
				:RULES.list := :rules.old_list;
			else 
				declare
					cursor singlevalue is
						select value as val 
						from selection_criteria_value
 						where select_by_id = :rules.select_by_id;
					cursor multiplevalue is
 						select value as val 
 						from selection_criteria_value
 						where select_by_id = :rules.select_by_id
 						order by value_seq;
					cursor get_selection_group is
							select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
							from navdb_select_criteria
							where navdb_id = :navdb.navdb_id
							and record_type_code = 60
							and include_exclude_ind = 'D'
							and parent_select_by_id is null;
					v_airport_ind     varchar2(1);
					v_airport_include varchar2(1) := 'N';
				begin	
					--if :rules.list in ('I','X') then
					if :rules.list = 'I' then	
						if :rules.CRITERIA_ID = 24 and :control_block.airport_sbi is not null and :RULES.list != :rules.old_list then
							begin
								select include_exclude_ind into v_airport_ind
								from NAVDB_SELECT_CRITERIA
								where select_by_id = :control_block.airport_sbi;
								if v_airport_ind = 'D' then
									select 'Y' into v_airport_include
									from NAVDB_SELECT_CRITERIA
									where include_exclude_ind in ('I','R')
									and record_type_code = 10  -- AIRPORT
									and NAVDB_ID = :navdb.navdb_id
									and GEO_AREA_ID = '-1'	-- default
									and PARENT_SELECT_BY_ID is null;
								elsif v_airport_ind in ('I','R') then		
									v_airport_include := 'Y';
								else
									v_airport_include := 'N';
								end if;		
							exception
								when no_data_found then
								v_airport_include := 'N';
							end;					
							if v_airport_include = 'Y' then
								:RULES.list := :rules.old_list;
								dsp_msg('Apply ''Terminal AREA Low'' is not allowed while Airport is ''Included'' or ''Ruled''.');
								raise form_trigger_failure;
							end if;
							--
							if :SELECTION.SELECTIONS = '-1' then
								for rec in get_selection_group loop									
									begin
										select 'Y' into v_airport_include
										from navdb_select_criteria
										where (geo_area_id = rec.selection_group
										or area_code_id = rec.selection_group
										or icao_code_id = rec.selection_group)
										and include_exclude_ind = 'I'
										and record_type_code = 10
										and navdb_id = :navdb.navdb_id;
									exception
										when no_data_found then
										v_airport_include := 'N';
									end;	
									if v_airport_include = 'Y' then
										dsp_msg('There exist at least one selection, it''s Airway uses ''Default'', and the selection of that Airport is ''Include'' or ''Rule''. '||
							        'So, can not apply ''Airway Low'' here.');
										:RULES.list := :rules.old_list;
										exit;
									end if;
								end loop;
								if :RULES.list = :rules.old_list then
									raise form_trigger_failure;
								end if;	
							end if;									
							if :parameter.work_type != 'VIEW' then
								update navdb_select_criteria 
								set include_exclude_ind = :rules.list
								where select_by_id = :rules.select_by_id;
								
								commit;
								:rules.old_list := :rules.list;
							end if;
						else	
							if :rules.num_of_values = '0' then
								if :parameter.work_type != 'VIEW' then
									update navdb_select_criteria 
									set include_exclude_ind = :rules.list
									where select_by_id = :rules.select_by_id;
									
									commit;
									:rules.old_list := :rules.list;
								end if;	
							--
							elsif :rules.num_of_values = '1' then
	 							:CONTROL_BLOCK.did := 'N';
	 							go_block('SINGLE_VAL');
	 							clear_block;
								open singlevalue;
 								fetch singlevalue into :single_val.single;
 					      :single_val.old_value := :single_val.single;
 								close singlevalue;
 	  					--
 	  					elsif :rules.num_of_values = 'M' then
	 							:control_block.did := 'N';
	 							if (:datatyp_rad.record_type_descr LIKE '%APPROACH%' and :rules.CRITERIA_ID in (85,317)) then -- INCLUDE ROUTE TYPES
                  go_block('APP_SUB_TYPE');
                  populate_SUB_TYPE;                  
	 							elsif	(:datatyp_rad.record_type_descr LIKE '%APPROACH%' and :rules.CRITERIA_ID in (86,319))   -- GPS_FMS_INDICATOR	 								                  
	 								or
	 								(:datatyp_rad.record_type_descr LIKE '%SID%' and :rules.CRITERIA_ID = 98)  -- SID INCLUDE ROUTE TYPES
                  or 
                  (:datatyp_rad.record_type_descr LIKE '%STAR%' and :rules.CRITERIA_ID = 99) -- STAR INCLUDE ROUTE TYPES
                 --Begin SCR 6709--Madhu--22-Mar-2016
                  OR
                  (:datatyp_rad.record_type_descr LIKE '%APPROACH%' and :rules.CRITERIA_ID in (529,532)) -- APPROACH INCLUDE AIRCRAFT TYPE
                  OR
                  (:datatyp_rad.record_type_descr LIKE '%SID%' and :rules.CRITERIA_ID in (527,530)) -- SID INCLUDE AIRCRAFT TYPE
                  OR
                  (:datatyp_rad.record_type_descr LIKE '%STAR%' and :rules.CRITERIA_ID in (528,531)) -- STAR INCLUDE AIRCRAFT TYPE
	 							 --End SCR 6709--Madhu--22-Mar-2016
	 								or
	 								(:datatyp_rad.record_type_descr LIKE '%OBSTACLE%' AND :rules.criteria_id = 602) -- OBSTACLE INCLUDE TYPE /*Imran SCR 6788.01*/
	 								or
	 								(:datatyp_rad.record_type_descr LIKE '%AIRWAY%' and :rules.CRITERIA_ID in (22,23,131)) then --('LEVEL','EXCLUDE LEGS','Airway Route Types') -- Added Airway Route Types for SCR 7503--Madhu
								
									go_block('RECORD_SUB_TYPE');
									populate_sub_type;
	 							elsif :datatyp_rad.record_type_descr = 'RUNWAY' and
	 								:rules.CRITERIA_ID = 39 THEN -- 'INCLUDE SURFACE TYPES'
	 								go_block('RUNWAY_SURFACE');	 	
							-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
	 								elsif :datatyp_rad.record_type_descr like '%AIRSPACE%'  and :rules.CRITERIA_ID in (493,494) then 
	 								go_block('SUA_RULES');	
							-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011
	 									-- Begin Fix - SCR 4918.04 - Ayodya Ch - 28-Nov-2012
	 						 	ELSIF :datatyp_rad.record_type_descr LIKE '%AIRSPACE%'  AND :rules.CRITERIA_ID IN (505,506) THEN 
	 					      NULL;	
						      	-- End Fix - SCR 4918.04 - Ayodya Ch - 28-Nov-2012
	 									else
	 								go_block('MULT_VAL');
	 								clear_block;
									set_block_property('MULT_VAL',INSERT_ALLOWED, PROPERTY_TRUE);
 									set_block_property('MULT_VAL',UPDATE_ALLOWED, PROPERTY_TRUE);
 									set_block_property('MULT_VAL',DELETE_ALLOWED, PROPERTY_TRUE);
 									for rec in multiplevalue loop
	 									:mult_val.multiple := rec.val;
	 									next_record;
									end loop;
									first_record;
									if :parameter.work_type = 'VIEW' then
										set_block_property('MULT_VAL',INSERT_ALLOWED, PROPERTY_FALSE);
 										set_block_property('MULT_VAL',UPDATE_ALLOWED, PROPERTY_FALSE);
 										set_block_property('MULT_VAL',DELETE_ALLOWED, PROPERTY_FALSE);
 									end if;	 		
								end if;
 	  					end if;
 	  				end if;	
					else
						if :parameter.work_type != 'VIEW' then
							update navdb_select_criteria 
							set include_exclude_ind = 'N'
							where select_by_id = :rules.select_by_id;
							--
							delete from selection_criteria_value
							where select_by_id =:rules.select_by_id;
							:rules.old_list := 'N';

							commit;
						end if;			
					end if;	
				end;
			end if;
		end if;
	end if;	
END;

 createDefaultCriteria:
PROCEDURE create_default_criteria (
   v_geo_id        NUMBER,
   v_area_id       NUMBER,
   v_icao_id       NUMBER,
   v_airport_id    NUMBER,
   v_heliport_id   NUMBER,
   v_type          VARCHAR2 := NULL
)
IS
   CURSOR get_criteria_id IS
      SELECT criteria_id, record_type_code
        FROM select_criteria
       WHERE processing_order = 0
         AND record_type_code IN (
                SELECT rec.record_type_code
                  FROM fms_data_type fdt,
                       flight_management_system fms,
                       record_type rec,
                       navdb nav
                 WHERE fdt.record_type_code = rec.record_type_code
                   AND fdt.fms_id = fms.fms_id
                   AND nav.fms_id = fms.fms_id
                   AND nav.navdb_id = :navdb.navdb_id
                   AND UPPER (fms.fms_id) = UPPER (:navdb.fms_id)
                   AND selectable_ind = 'Y'           -- Added per SCR 1267.01
                   AND rec.enroute_terminal_ind IN ('T', 'E', 'H'));
   --
   CURSOR get_criteria_id_t (p_type VARCHAR2) IS
      SELECT criteria_id, record_type_code
        FROM select_criteria
       WHERE processing_order = 0
         AND record_type_code IN (
                SELECT rec.record_type_code
                  FROM fms_data_type fdt,
                       flight_management_system fms,
                       record_type rec,
                       navdb nav
                 WHERE fdt.record_type_code = rec.record_type_code
                   AND nav.navdb_id = :navdb.navdb_id
                   AND UPPER (fms.fms_id) = UPPER (:navdb.fms_id)
                   AND nav.fms_id = fms.fms_id
                   AND fdt.fms_id = fms.fms_id
                   AND rec.enroute_terminal_ind = p_type
                   AND selectable_ind = 'Y');         -- Added per SCR 1267.01

   v_criteria_id        NUMBER;
   v_record_type_code   NUMBER (4);
   v_ind                VARCHAR2 (1);
BEGIN
   IF v_type IN ('T', 'H') THEN
      OPEN get_criteria_id_t (v_type);
      LOOP
         FETCH get_criteria_id_t
          INTO v_criteria_id, v_record_type_code;

         EXIT WHEN get_criteria_id_t%NOTFOUND;

         IF v_criteria_id IN (3, 33) THEN                      -- 3, select airport. 33, select heliport.
			-- Begin Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
            IF v_criteria_id = 3 THEN
               SELECT NVL (include_exclude_ind, 'I')
                 INTO v_ind
                 FROM select_by_airport_group
                WHERE select_by_id = v_airport_id;
      -- Begin Fix - SCR 05944 - Ashish N  - 04 Nov 2020         
            ELSIF v_criteria_id = 33 THEN
                 SELECT NVL (include_exclude_ind, 'I')
                 INTO v_ind
                 FROM select_by_heliport_group
                WHERE select_by_id = v_heliport_id;
      -- End Fix - SCR 05944 - Ashish N  - 04 Nov 2020 
            	ELSE
               v_ind := 'I';
            END IF;
			-- End Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
         ELSE
            v_ind := 'D';
         END IF;

-- Begin Fix - SCR 4102 - Sesha - 27-Aug-2008
         IF v_record_type_code = 10 AND v_airport_id IS NOT NULL THEN
       -- Begin Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
            SELECT NVL (include_exclude_ind, 'I')
              INTO v_ind
              FROM select_by_airport_group
             WHERE select_by_id = v_airport_id;
       -- End Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
END IF;
-- End Fix - SCR 4102 - Sesha - 27-Aug-2008
         INSERT INTO navdb_select_criteria
                     (select_by_id, navdb_id,
                      record_type_code, criteria_id, parent_select_by_id,
                      geo_area_id, area_code_id, icao_code_id,
                      airport_group_id, heliport_group_id, include_exclude_ind
                     )
              VALUES (select_by_id_seq.NEXTVAL, :navdb.navdb_id,
                      v_record_type_code, v_criteria_id, NULL,
                      v_geo_id, v_area_id, v_icao_id,
                      v_airport_id, v_heliport_id, v_ind
                     );
      END LOOP;
      CLOSE get_criteria_id_t;
   ELSE
      IF v_geo_id = -1 THEN
         v_ind := 'N';
      ELSE
         v_ind := 'D';
      END IF;

      OPEN get_criteria_id;

      LOOP
         FETCH get_criteria_id
          INTO v_criteria_id, v_record_type_code;

         EXIT WHEN get_criteria_id%NOTFOUND;

         IF     v_record_type_code IN ('80', '380') AND (v_area_id IS NOT NULL OR v_icao_id IS NOT NULL) THEN
            NULL;                 -- Grid mora only need in default and world
         ELSIF v_record_type_code IN ('44', '45') AND (v_icao_id IS NOT NULL) THEN -- SCR 7024 -- Changed record type code from 93 to 44
            NULL;           -- FIR UIR, ENROUTE COMM don't need in ICAO group
         ELSE
            -- Begin Fix - SCR 4102 - Sesha - 27-Aug-2008
            IF v_record_type_code = 10 AND v_airport_id IS NOT NULL THEN
               -- Begin Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
               SELECT NVL (include_exclude_ind, 'I')
                 INTO v_ind
                 FROM select_by_airport_group
                WHERE select_by_id = v_airport_id;
            -- End Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
            END IF;

            -- End Fix - SCR 4102 - Sesha - 27-Aug-2008
            INSERT INTO navdb_select_criteria
                        (select_by_id, navdb_id,
                         record_type_code, criteria_id, parent_select_by_id,
                         geo_area_id, area_code_id, icao_code_id,
                         airport_group_id, heliport_group_id,
                         include_exclude_ind
                        )
                 VALUES (select_by_id_seq.NEXTVAL, :navdb.navdb_id,
                         v_record_type_code, v_criteria_id, NULL,
                         v_geo_id, v_area_id, v_icao_id,
                         v_airport_id, v_heliport_id,
                         v_ind
                        );
         END IF;
      END LOOP;

      CLOSE get_criteria_id;
   END IF;
END;

 checkHeliport:
PROCEDURE check_Heliport(p_ident varchar2,p_icao varchar2 := null,p_type varchar2) IS
	cursor get_id(icao_code varchar2) is
		select A.select_by_id 
		from Heliport_to_select A, select_by_Heliport_group B
		where Heliport_ident = p_ident
		and   Heliport_icao like icao_code
		and   B.navdb_id = :NAVDB.navdb_id
		and   A.select_by_id = B.select_by_id;
	cursor get_icao_S is
	  select Terminal_icao             -- Heliport_icao
	  from   cptsc.VIEW_FOR_HELIPORT_GROUP   -- pl_std_Heliport
	  where  Terminal_ident = p_ident  -- Heliport_ident = p_ident
	  and    data_supplier = :navdb.data_supplier
		and processing_cycle = :control_block.proc_cycle --:global.processing_cycle ----Fix SCR 7607.01 --Madhu --02-Mar-2018
		and validate_ind in ('Y','S','H','O');
	cursor get_icao_T is
	  select Heliport_icao terminal_icao
	  from   pl_tld_Heliport
	  where  Heliport_ident = p_ident
	  and    data_supplier = :navdb.data_supplier
		and    processing_cycle = :global.processing_cycle
		and    customer_ident IN (SELECT CUSTOMER_IDENT 
															 FROM   CUSTOMER_NAVDB
															 WHERE  NAVDB_ID = :NAVDB.NAVDB_ID)
		and    validate_ind in ('Y','S','H','O')
		union
		select Airport_icao terminal_icao
	  from   pl_tld_Airport
	  where  Airport_ident = p_ident
	  and    data_supplier = :navdb.data_supplier
		and    processing_cycle = :global.processing_cycle
		and    customer_ident IN (SELECT CUSTOMER_IDENT 
															 FROM   CUSTOMER_NAVDB
															 WHERE  NAVDB_ID = :NAVDB.NAVDB_ID)
		and    validate_ind in ('Y','S','H','O');
	--	
	v_icao   varchar2(2);
	v_icao2  varchar2(2);
	v_exist  number(1);
	V_BUTTON NUMBER(1);
	v_name       varchar2(20)  := null;
	v_name_temp  varchar2(20);
	v_other_name varchar2(200) := null;
	v_count      number        := 0;    
	v_message    varchar2(1000):= null;
	v_no_icao    exception;
	ls_Heliport_query VARCHAR2(1000);--Fix SCR 7647 --Madhu --10-Jan-2018
BEGIN
	if p_icao is not null then
		SELECT COUNT(*) INTO V_EXIST
		FROM cptsc.VIEW_FOR_HELIPORT_GROUP   --PL_STD_Heliport
		WHERE terminal_ident = p_ident --Heliport_IDENT = p_ident
		AND   terminal_icao  = p_icao  --Heliport_ICAO = p_icao
		AND   PROCESSING_CYCLE = :control_block.proc_cycle --:global.processing_cycle ----Fix SCR 7607.01 --Madhu --02-Mar-2018
		and   validate_ind in ('Y','S','H','O');
		--
		IF V_EXIST = 0 THEN
			SELECT COUNT(*) INTO V_EXIST
			FROM PL_TLD_Heliport
			WHERE Heliport_IDENT = p_ident
			AND   Heliport_ICAO = p_icao
			AND   PROCESSING_CYCLE = :global.processing_cycle
			AND   validate_ind in ('Y','S','H','O')
			AND   CUSTOMER_IDENT IN (SELECT CUSTOMER_IDENT 
															 FROM   CUSTOMER_NAVDB
															 WHERE  NAVDB_ID = :NAVDB.NAVDB_ID);
			if v_exist != 0 then
				dsp_msg('This is a tailored Heliport.');
			else
				SELECT COUNT(*) INTO V_EXIST
				FROM PL_TLD_AIrport
				WHERE airport_IDENT = p_ident
				AND   airport_ICAO = p_icao
				AND   PROCESSING_CYCLE = :global.processing_cycle
				AND   validate_ind in ('Y','S','H','O')
				AND   CUSTOMER_IDENT IN (SELECT CUSTOMER_IDENT 
															 FROM   CUSTOMER_NAVDB
															 WHERE  NAVDB_ID = :NAVDB.NAVDB_ID);
				if v_exist != 0 then
					dsp_msg('This is a tailored Airport.');
				end if;	
			end if;	
		END IF;
		v_icao := p_icao;
	else
		begin
			open get_icao_S;
		  fetch get_icao_S into v_icao;
  	  if get_icao_S%notfound = TRUE then
 				raise v_no_icao;
  		else
  			fetch get_icao_S into v_icao2;
    		if get_icao_S%notfound = TRUE then
    			if p_type = 'RECORD' then
						:Heliport_TO_SELECT.Heliport_icao := v_icao;
    			end if;
    			v_exist := 1;
    		else
    		  v_exist := 2;		
    		end if;
			end if;
		exception
			when v_no_icao then	
			begin
				open get_icao_T;
		  	fetch get_icao_T into v_icao;
  	  	if get_icao_T%notfound = TRUE then
 					raise v_no_icao;
  			else
  				fetch get_icao_T into v_icao2;
    			if get_icao_T%notfound = TRUE then
    				if p_type = 'RECORD' then
							:Heliport_TO_SELECT.Heliport_icao := v_icao;
							dsp_msg('This is a tailored Heliport/Airport.');
    				end if;
    				v_exist := 1;
    			else
    		  	v_exist := 2;		
    			end if;
				end if;				
			exception
				when v_no_icao then	
					v_exist := 0;
				when others then
					Set_Application_Property(cursor_style,'DEFAULT');
					dsp_msg(sqlerrm);
					raise form_trigger_failure;
			end;		
			when others then
					Set_Application_Property(cursor_style,'DEFAULT');
					dsp_msg(sqlerrm);
					raise form_trigger_failure;
		end;		
	end if;
	--
	if p_icao is not null then
		FOR rec IN get_id(p_icao) LOOP 
  		select group_name into v_name_temp
  		from select_by_Heliport_group
  		where select_by_id = rec.select_by_id;
  		v_count := v_count + 1;
  		if v_count = 1 then
  			v_name := v_name_temp;
  		else
  			v_other_name := v_other_name||' '||v_name_temp;
  		end if;	
		end loop;
	else
		FOR rec IN get_id('%') LOOP 
  		select group_name into v_name_temp
  		from select_by_Heliport_group
  		where select_by_id = rec.select_by_id;
  		v_count := v_count + 1;
  		if v_count = 1 then
  			v_name := v_name_temp;
  		else	
  			v_other_name := v_other_name||' '||v_name_temp;
  		end if;	
		end loop;	
	end if;
	
	--
	if p_type = 'BUTTON' then
		if v_name is not null then
			go_block('SELECT_BY_HELIPORT_GROUP');
 			corept_execute_query;
 			loop
 				exit when :select_by_Heliport_group.GROUP_NAME = ltrim(v_name) or 
 				:system.last_record = 'TRUE';
 				next_record;
 			end loop;
 			go_block('Heliport_TO_SELECT');
			if p_icao is not null then
				loop
					exit when (:Heliport_to_select.Heliport_ident = p_ident and
					           :Heliport_to_select.Heliport_icao  = p_icao) or
					           :system.last_record = 'TRUE';
  				next_record;
				end loop;				
			else
				loop
					exit when (:Heliport_to_select.Heliport_ident = p_ident or
					:system.last_record = 'TRUE');
  				next_record;
				end loop;
			end if;	
      if v_other_name is not null then
				v_message := 'There exist other Terminal(s) with the same ident in group:'||v_other_name||'.';
			end if;		
			if v_exist = 0 then
				dsp_msg('Invalid Heliport/Airport, found in group '||v_name||'.'||chr(10)||v_message);
			else
				if v_other_name is not null then
					dsp_msg(v_message);
				end if;
			end if;
		else
			if v_exist = 0 then
				dsp_msg('This is not a valid Heliport/Airport in cycle '||:global.processing_cycle||'.');
			elsif v_exist = 1 then
				dsp_msg('This Heliport/Airport is available to use.');
--Begin SCR 7647 --Madhu --10-Jan-2018				
				:CONTROL_BLOCK.temp_heliport:=:CONTROL_BLOCK.heliport_ident;
				go_block('STD_HELIPORT');
				ls_Heliport_query := 'data_supplier = :navdb.data_supplier and terminal_ident = :CONTROL_BLOCK.temp_heliport and validate_ind in (''Y'',''S'',''H'',''O'') and processing_cycle = :control_block.proc_cycle and (terminal_ident, terminal_icao) not in (select heliport_ident, heliport_icao from HELIPORT_TO_SELECT A, SELECT_BY_HELIPORT_GROUP B where B.NAVDB_ID = :NAVDB.NAVDB_ID AND A.SELECT_BY_ID = B.SELECT_BY_ID) ';
				set_block_property('STD_HELIPORT',default_where,ls_Heliport_query);
				corept_execute_query;
--End SCR 7647 --Madhu --10-Jan-2018				
			else
				dsp_msg('There are more than one Heliports/Airports with this ident, all of them available to use.');
			end if;	
		end if;	
	else
		if v_name is not null and p_icao is not null then
			if v_exist = 0 then
				dsp_msg('This Heliport/Airport is already used in group '||v_name||'. '||chr(10)||
								'And this is not a valid Heliport/Airport in cycle '||:global.processing_cycle||'.');
			elsif v_exist = 1 then					
				dsp_msg('This Heliport/Airport is already used in group '||v_name||'. ');
			end if;	
  		Set_Application_Property(cursor_style,'DEFAULT');
  		raise form_trigger_failure;
		else
			if v_exist = 0 and p_icao is not null then
				v_button := DISPLAY_ALERT.MORE_BUTTONS('S','INVALID Heliport/Airport DATA',
  								'This Heliport/Airport does not exist in cycle '||:global.processing_cycle||'.'||
  								chr(10)||'Select from the options:'||chr(10)||chr(10),
  								'Correct the data','Accept it');
  			if v_button = 1 then
  				Set_Application_Property(cursor_style,'DEFAULT');
  				raise form_trigger_failure;
  			else
  				null;
  			end if;
  		else
  			-- don't care, let user continue.
  			null;		
			end if;
		end if;
	end if;
END;

 createDefaultNewCriteria:
PROCEDURE create_default_new_criteria(p_new_record_code number) IS
	cursor get_not_T_select_id is
		select select_by_id	
		from   select_by_geographic_area
		where  navdb_id = :navdb.navdb_id
		union
		select select_by_id	
		from   select_by_icao
		where  navdb_id = :navdb.navdb_id
		union
		select select_by_id	
		from   select_by_area
		where  navdb_id = :navdb.navdb_id;
	cursor get_airport_select_id is
	  select select_by_id	
		from   select_by_airport_group
		where  navdb_id = :navdb.navdb_id;
	cursor get_heliport_select_id is
	  select select_by_id	
		from   select_by_heliport_group
		where  navdb_id = :navdb.navdb_id;
	v_type_ind varchar2(1);
BEGIN
  Set_Application_Property(cursor_style,'BUSY');
  select enroute_terminal_ind into v_type_ind
	from record_type
	where record_type_code = p_new_record_code;
	if nvl(v_type_ind,'C') != 'C' then
		CREATE_DATATYP_CRITERIA(-1,p_new_record_code);	
		for id_rec in get_not_T_select_id loop
			CREATE_DATATYP_CRITERIA(id_rec.select_by_id,p_new_record_code);
		end loop;	
		if v_type_ind = 'T' then
			for id_rec in get_airport_select_id loop
				CREATE_DATATYP_CRITERIA(id_rec.select_by_id,p_new_record_code);
			end loop;				 	 				
		elsif v_type_ind = 'H' then
			for id_rec in get_heliport_select_id loop
				CREATE_DATATYP_CRITERIA(id_rec.select_by_id,p_new_record_code);
			end loop;
		end if;
	end if;	
	Set_Application_Property(cursor_style,'DEFAULT');
Exception
	when others then
	Set_Application_Property(cursor_style,'DEFAULT');
	dsp_msg('Error: '||sqlerrm);		
END;

 refreshAal:
PROCEDURE refresh_aal IS
	total_rows     number := get_group_row_count('Refresh_AAL_Group');
	v_ident      varchar2(4);
	v_icao       varchar2(2);
	v_exist      number;
	v_count      number := 0;
BEGIN
  -- Loop through each record
 	if total_rows > 0 then
		clear_message;
 		Set_Application_Property(cursor_style,'BUSY');
 		for j in 1..total_rows loop
			-- Get the record value
			v_ident    := get_group_char_cell('Refresh_AAL_Group.airport_ident', j);
			v_icao     := get_group_char_cell('Refresh_AAL_Group.airport_icao', j);
			begin
				select count(*) into v_exist
				from airport_airway_low
				where airport_ident = v_ident
				and airport_icao = v_icao
				and data_supplier = :navdb.data_supplier;
				if v_exist = 0 then
					terminal_low_area.ONE_AIRPORT_UPDATE(:navdb.data_supplier,v_ident,v_icao,'S',:global.aal_cycle,'N');				
					v_count := v_count + 1;
				else
					null;
					-- We don't refresh AAL when we delete an Airport. So, when we add an airport,
					-- we don't need refresh AAL again if the airport already in AAL.	
				end if;
			end;
			-- Refresh the one record
			if j = total_rows then
				Delete_Group_Row('Refresh_AAL_Group',all_rows); 				
 			end if;
 		end loop;
 		set_item_property('DISPLAY_ITEM_BLOCK.REFRESH_AIRPORT_AIRWAY_LOW', visible, PROPERTY_FALSE);
 		set_item_property('DISPLAY_ITEM_BLOCK.REFRESH_AIRPORT_AIRWAY_LOW', ENABLED, PROPERTY_FALSE);
 		Set_Application_Property(cursor_style,'DEFAULT');
 		if v_count > 0 then
 			dsp_msg('Done with refreshing Airport Airway Low.');
 		else
 			dsp_msg('All the airports already in AAL table, no refresh needed.');
 		end if;	
	end if;
exception
	when others then
	Set_Application_Property(cursor_style,'DEFAULT');
	dsp_msg(sqlerrm); 		
END;

 plotGlobalPkg:
/* Package is created and used by Plotting Function */
PACKAGE BODY PLOT_GLOBAL_PKG IS
   /* Declare the library and function handles. */
   Getcoreptdupid_lhandle       Ora_ffi.Libhandletype;
   Getcoreptdupid_fhandle       Ora_ffi.Funchandletype;
   Exit_coreptdu_plot_fhandle   Ora_ffi.Funchandletype;
   get_process_count_fhandle    Ora_ffi.Funchandletype;
   GetInstallationDir_fhandle   Ora_ffi.Funchandletype;

   -- Private Package Variables
   Lh_kernel32                  Ora_ffi.Libhandletype;
   Fh_winexec                   Ora_ffi.Funchandletype;
   
   FUNCTION Getcoreptdupid_handle (Fhandle Ora_ffi.Funchandletype)
   RETURN PLS_INTEGER;
   PRAGMA INTERFACE (C, Getcoreptdupid_handle, 11265);

   FUNCTION get_process_count_handle (Fhandle Ora_ffi.Funchandletype)
   RETURN PLS_INTEGER;
   PRAGMA INTERFACE (C, get_process_count_handle, 11265);


   FUNCTION Exit_coreptdu_plot_handle (Fhandle         Ora_ffi.Funchandletype,
                                       Ls_process_id   VARCHAR2)
   RETURN PLS_INTEGER;
   PRAGMA INTERFACE (C, Exit_coreptdu_plot_handle, 11265);
   
   FUNCTION GetInstallationDir_handle (Fhandle Ora_ffi.Funchandletype)
   RETURN VARCHAR2;
   PRAGMA INTERFACE (C, GetInstallationDir_handle, 11265);

   
   FUNCTION Getcoreptdupid
   RETURN PLS_INTEGER IS
   BEGIN
      RETURN (Getcoreptdupid_handle (Getcoreptdupid_fhandle));
   END Getcoreptdupid;

   FUNCTION get_process_count
   RETURN PLS_INTEGER IS
   BEGIN
      RETURN (get_process_count_handle (get_process_count_fhandle));
   END get_process_count;

   PROCEDURE Exit_coreptdu_plot (Pi_sprocess_id VARCHAR2)
   AS 
      Ls_return   PLS_INTEGER;
   BEGIN
      Ls_return := Exit_coreptdu_plot_handle (Exit_coreptdu_plot_fhandle,
                                              Pi_sprocess_id);
   END;
   
   FUNCTION GetInstallationDir
   RETURN VARCHAR2 IS
   BEGIN
      RETURN (GetInstallationDir_handle (GetInstallationDir_fhandle));
   END GetInstallationDir;
   
   PROCEDURE Loadlibrary;

   FUNCTION I_winexec (Functionhandle   IN       Ora_ffi.Funchandletype,
                       Cmd              IN OUT   VARCHAR2,
                       Ucmdshow         IN       PLS_INTEGER)
   RETURN PLS_INTEGER;

   PROCEDURE Rg_winexec;
   PRAGMA INTERFACE (C, I_winexec, 11265);

   PROCEDURE Loadlibrary IS
   BEGIN
      BEGIN
         Lh_kernel32 := Ora_ffi.Find_library ('KERNEL32.DLL');
      EXCEPTION
         WHEN Ora_ffi.Ffi_error THEN
            Lh_kernel32 := Ora_ffi.Load_library (NULL, 'KERNEL32.DLL');
      END;
   EXCEPTION
      WHEN OTHERS THEN
         Ffi_error := TRUE ;
         Ffi_error_text := Tool_err.message;
         Ffi_error_code := Tool_err.Code;
         FOR Ierrors IN 1 .. Tool_err.Nerrors
         LOOP
            message ('KERNEL32: ' || Tool_err.message);
            Tool_err.Pop;
         END LOOP;
         Tool_err.CLEAR;
   END Loadlibrary;

   PROCEDURE Rg_winexec IS
   BEGIN
      Fh_winexec := Ora_ffi.Register_function (Lh_kernel32,
                                               'WinExec',
                                               Ora_ffi.C_std);
      Ora_ffi.Register_parameter (Fh_winexec, Ora_ffi.C_char_ptr);
      Ora_ffi.Register_parameter (Fh_winexec, Ora_ffi.C_int);
      Ora_ffi.Register_return (Fh_winexec, Ora_ffi.C_int);
   EXCEPTION
      WHEN OTHERS THEN
         Ffi_error := TRUE ;
         Ffi_error_text := Tool_err.message;
         Ffi_error_code := Tool_err.Code;
         FOR Ierrors IN 1 .. Tool_err.Nerrors
         LOOP
            message ('KERNEL32: ' || Tool_err.message);
            Tool_err.Pop;
         END LOOP;
         Tool_err.CLEAR;
   END Rg_winexec;

   FUNCTION Winexec (Cmd IN OUT VARCHAR2, Ucmdshow IN OUT PLS_INTEGER)
   RETURN PLS_INTEGER IS 
      Rc           PLS_INTEGER;
      L_cmd        VARCHAR2 (8192) := rpad (substr (nvl (Cmd, ' '), 1, 8192), 8192, chr (0));
      L_ucmdshow   PLS_INTEGER     := Ucmdshow;
   BEGIN
      Rc       := I_winexec (Fh_winexec, L_cmd, L_ucmdshow);
      Cmd      := L_cmd;
      Ucmdshow := L_ucmdshow;
      RETURN Rc;
   END Winexec;

BEGIN
   /*
   BEGIN
	   Getcoreptdupid_lhandle :=
	      Ora_ffi.Load_library ('C:\Program Files\Honeywell Inc., Aviation Services\CorePTDU Tool\','PFUtils.dll');
	
	   -- Register the foreign function. 
	   Getcoreptdupid_fhandle := Ora_ffi.Register_function (Getcoreptdupid_lhandle,
	                                                        'GetCorePTDUPID',
	                                                        Ora_ffi.C_std);
	
	   Ora_ffi.Register_return (Getcoreptdupid_fhandle, Ora_ffi.C_int);
	
	   get_process_count_fhandle := Ora_ffi.Register_function (Getcoreptdupid_lhandle,
	                                                           'get_process_count',
	                                                           Ora_ffi.C_std);
	
	   Ora_ffi.Register_return (get_process_count_fhandle, Ora_ffi.C_int);
	
	   GetInstallationDir_fhandle := Ora_ffi.Register_function (Getcoreptdupid_lhandle,
	                                                            'GetInstallationDir',
	                                                            Ora_ffi.C_std);
	                                                            
	   Ora_ffi.Register_return (GetInstallationDir_fhandle, Ora_ffi.C_char_ptr);
	
	   Exit_coreptdu_plot_fhandle :=
	                             Ora_ffi.Register_function (Getcoreptdupid_lhandle,
	                                                        'KillDUApp',
	                                                        Ora_ffi.C_std);
	                                                        
	   Ora_ffi.Register_parameter (Exit_coreptdu_plot_fhandle,
	                               Ora_ffi.C_char_ptr);

   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;      
   	
   Loadlibrary;
   Rg_winexec;
   */
   NULL;
END PLOT_GLOBAL_PKG;

 populateAirportGroups:
  /* This procedure populates all airport groups*/
PROCEDURE populate_airport_groups(p_port varchar2) IS
	rg recordgroup;       
	nn number;
  e_group exception;--Fix - SCR 0087 - Madhu - 13-Apr-2012
begin     
	-- delete the old group
	rg := find_group('apr'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   
	-- create list 

	rg := create_group_from_query('apr','
		select group_name rlabel,to_char(SELECT_BY_ID) rvalue 
		from select_by_'||p_port||'_group
		where NAVDB_ID = '''||:NAVDB.NAVDB_ID||'''
		minus
		select group_name rlabel,to_char(SELECT_BY_ID) rvalue 
		from select_by_'||p_port||'_group
		where select_by_id = '||name_in(p_port||'_TO_SELECT.SELECT_BY_ID'));
  -- populate the group
	nn := populate_group(rg);
       
	if nn <> 0 then            
		-- Shall never happen
	--	dsp_msg('Populate group had error '||to_char(nn));
		raise e_group;        
	end if;
	populate_list('SELECT_FROM_GROUPS.SELECTED_GROUP',rg);
	:SELECT_FROM_GROUPS.SELECTED_GROUP := GET_GROUP_CHAR_CELL('apr.rvalue',1);
	SET_RECORD_PROPERTY(1, 'SELECT_FROM_GROUPS', STATUS, QUERY_STATUS);
-- Begin Fix - SCR 0087 - Madhu - 13-Apr-2012
	Exception 
		when e_group then
		dsp_msg('Cannot move the Group Since it has only one group');
		if p_port = 'heliport' then
		  go_block('SELECT_BY_HELIPORT_GROUP');
		else
			go_block('SELECT_BY_AIRPORT_GROUP');
		end if;
		raise form_trigger_failure;
-- End Fix - SCR 0087 - Madhu - 13-Apr-2012
END;

 deleteGeneratedNavdb:
FUNCTION DELETE_GENERATED_NAVDB return VARCHAR2 IS
/*
 --SCR 7557.00-Harikrishna Ch-29-Nov-2017 -- As part of reports tables consolidation
 --                                         NAVDB_REPORTS table got removed,reference in the form of DELETE statement in this form removed. 
*/	
	CURSOR GET_MRID IS
	SELECT EXECUTED_DMR_ROWS_ID
	FROM EXECUTED_DMR_ROWS
	WHERE	NAVDB_ID = :NAVDB.NAVDB_ID;
	--
	CURSOR GET_REPORTS IS
	SELECT REPORT_NUMBER
	FROM GENERATED_REPORTS
	WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
	--
	P_STATUS varchar2(100) := 'OK';
	
BEGIN
  Set_Application_Property(cursor_style,'BUSY');
  
  DELETE FROM DMR_RUNTIME_ERROR
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  DELETE FROM NON_DMR_ERROR
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  DELETE FROM PROCESS_EXECUTION_TIME
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  DELETE FROM DEBUG_MESSAGE
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  DELETE FROM SELECTED_RECORD_COUNT
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  FOR REC IN GET_MRID LOOP
  	DELETE FROM MODIFIED_ROWS
  	WHERE EXECUTED_DMR_ROWS_ID = REC.EXECUTED_DMR_ROWS_ID;
  	COMMIT;
  END LOOP;
  --
  DELETE FROM EXECUTED_DMR_ROWS
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  DELETE FROM EXECUTED_DMR
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  
  -- DELETE FROM GENERATED REPORTS
  FOR REC IN GET_REPORTS LOOP
  	DELETE FROM REPORTED_PROCEDURES
  	WHERE REPORT_NUMBER = REC.REPORT_NUMBER;
  	COMMIT;
  	DELETE FROM REMOVED_COMPANY_ROUTES
  	WHERE REPORT_NUMBER = REC.REPORT_NUMBER;
  	COMMIT;
  	DELETE FROM REMOVED_FIXES
  	WHERE REPORT_NUMBER = REC.REPORT_NUMBER;
  	COMMIT;
  	DELETE FROM NAVDB_BINARY_SIZES
  	WHERE REPORT_NUMBER = REC.REPORT_NUMBER;
  	COMMIT;
  END LOOP;
  --
  DELETE FROM GENERATED_REPORTS
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  DELETE FROM GENERATED_NAVDB
  WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
  COMMIT;
  --
  Set_Application_Property(cursor_style,'DEFAULT');
  return p_status;
EXCEPTION
	WHEN OTHERS THEN
	p_status := substr(SQLERRM,1,100);
	Set_Application_Property(cursor_style,'DEFAULT');
	return p_status;
END;

 populateSubType:
-- Display the sub type based on the selectable_ind in the FMS_Data_Sub_Type.
PROCEDURE populate_sub_type IS
	v_type_code number;
	v_limit     number;
	cursor get_sub_types(p_code number, p_precision varchar2 := null) is
	select a.record_sub_type_code, a.record_sub_type_descr
	from record_sub_type a,FMS_data_sub_type b
	where a.record_type_code = b.record_type_code
	and a.record_sub_type_code = b.record_sub_type_code
	and a.Record_Type_Code = p_code
	and b.selectable_ind = 'Y'
	and upper(b.FMS_ID) = upper(:NAVDB.FMS_ID)
	and nvl(a.PRECISION_IND,'-') = nvl(p_precision,'-');

  PROCEDURE display_guidelines(p_value varchar2, p_block varchar2) IS
	BEGIN
			if p_value = 'A' then
 			  copy('A - APPROACH TRANSITION',p_block||'.value'); 			  
 			elsif p_value = 'B' then
 				copy('B - LOC/BACKCOURSE',p_block||'.value');
 			elsif p_value = 'D' then
 			  copy('D - VORDME',p_block||'.value');
 			elsif p_value = 'F' then
 			  copy('F - FMS',p_block||'.value');
 			elsif p_value = 'G' then
 			  copy('G - IGS',p_block||'.value');
 			elsif p_value = 'I' then
 			  copy('I - ILS',p_block||'.value');
 			elsif p_value = 'J' then
 			  copy('J - GLS',p_block||'.value');
 			elsif p_value = 'L' then
 			  copy('L - LOC',p_block||'.value');
 			elsif p_value = 'M' then
 			  copy('M - MLS',p_block||'.value');
 			elsif p_value = 'N' then
 			  copy('N - NDB',p_block||'.value');
 			elsif p_value = 'P' then
 			  copy('P - GPS',p_block||'.value');
 			elsif p_value = 'Q' then
 			  copy('Q - NDB+DME',p_block||'.value');
 			elsif p_value = 'R' then
 			  copy('R - RNAV',p_block||'.value');
 			elsif p_value = 'S' then
 			  copy('S - VORDME/VORTAC',p_block||'.value');
 			elsif p_value = 'T' then
 			  copy('T - TACAN',p_block||'.value');
 			elsif p_value = 'U' then
 			  copy('U - SDF',p_block||'.value');
 			elsif p_value = 'V' then
 			  copy('V - VOR',p_block||'.value');
 			elsif p_value = 'W' then
 			  copy('W - MLS, TYPE A',p_block||'.value');
 			elsif p_value = 'X' then
 			  copy('X - LDA',p_block||'.value');
 			elsif p_value = 'Y' then
 			  copy('Y - MLS, TYPE B AND C',p_block||'.value');
 			elsif p_value = 'Z' then
 			  copy('Z - MISSED APPROACH',p_block||'.value');
 			else
 				copy(p_value,p_block||'.value');
 			end if;
	End;
	
  -- Added SID/ STAR route Type, SCR 2506 and also adjusted the layout
	Procedure display_sid_guidelines(p_value varchar2) is
		Begin
			if p_value = '1' then
 			  :RECORD_SUB_TYPE.value := '1 - SID Runway Transition'; 
 			elsif p_value = '2' then
 				:RECORD_SUB_TYPE.value := '2 - SID Common';
 			elsif p_value = '3' then
 			  :RECORD_SUB_TYPE.value := '3 - SID Enroute Transition';
 			elsif p_value = '4' then
 			  :RECORD_SUB_TYPE.value := '4 - RNAV SID Runway Transition'; 
 			elsif p_value = '5' then
 			  :RECORD_SUB_TYPE.value := '5 - RNAV SID Common'; 
 			elsif p_value = '6' then
 			  :RECORD_SUB_TYPE.value := '6 - RNAV SID Enroute Transition'; 
 			elsif p_value = 'F' then
 			  :RECORD_SUB_TYPE.value := 'F - FMS SID Runway Transition';   
 			elsif p_value = 'M' then
 			  :RECORD_SUB_TYPE.value := 'M - FMS SID Common'; 
 			elsif p_value = 'S' then
 			  :RECORD_SUB_TYPE.value := 'S - FMS SID Enroute Transition'; 
 			elsif p_value = 'T' then
 			  :RECORD_SUB_TYPE.value := 'T - Vector SID Runway Transition'; 
 			elsif p_value = 'V' then
 			  :RECORD_SUB_TYPE.value := 'V - Vector SID Enroute Transition'; 
 			elsif p_value = '0' then
 			  :RECORD_SUB_TYPE.value := '0 - SID Engine Out'; 
 			else
 				:RECORD_SUB_TYPE.value := p_value;
 			end if;
		End;

   -- Added SID/ STAR route Type, SCR 2506 and also adjusted the layout
	Procedure display_star_guidelines(p_value varchar2) is
		Begin
			if p_value = '1' then
 			  :RECORD_SUB_TYPE.value := '1 - STAR Enroute Transition'; 
 			elsif p_value = '2' then
 				:RECORD_SUB_TYPE.value := '2 - STAR Common';
 			elsif p_value = '3' then
 			  :RECORD_SUB_TYPE.value := '3 - STAR Runway Transition';
 			elsif p_value = '4' then
 			  :RECORD_SUB_TYPE.value := '4 - RNAV STAR Enroute Transition'; 
 			elsif p_value = '5' then
 			  :RECORD_SUB_TYPE.value := '5 - RNAV STAR Common'; 
 			elsif p_value = '6' then
 			  :RECORD_SUB_TYPE.value := '6 - RNAV STAR Runway Transition'; 
 			elsif p_value = '7' then
 			  :RECORD_SUB_TYPE.value := '7 - Profile Descent Enroute Transition';   
 			elsif p_value = '8' then
 			  :RECORD_SUB_TYPE.value := '8 - Profile Descent Common'; 
 			elsif p_value = '9' then
 			  :RECORD_SUB_TYPE.value := '9 - Profile Descent Runway Transition'; 
 			elsif p_value = 'F' then
 			  :RECORD_SUB_TYPE.value := 'F - FMS STAR Enroute Transition'; 
 			elsif p_value = 'M' then
 			  :RECORD_SUB_TYPE.value := 'M - FMS STAR Common'; 
 			elsif p_value = 'S' then
 			  :RECORD_SUB_TYPE.value := 'S - FMS STAR Runway Transition'; 
 			else
 				:RECORD_SUB_TYPE.value := p_value;
 			end if;
		End;

	Procedure apply_the_check(p_block varchar2 := 'RECORD_SUB_TYPE') is		
		v_value      varchar2(100) := name_in(p_block||'.real_value');
		v_real_value varchar2(1000);
		v_ind        varchar2(1);
	Begin
		Begin
 			if p_block = 'APP_SUB_TYPE' then
 				select value into v_real_value
 				from selection_criteria_value
 				where substr(value,1,1) = v_value
 				and select_by_id = :rules.select_by_id
 				and value_descr  = :RULES.SELECTED_RULES; 		
 				v_ind := 'Y';
 				:APP_SUB_TYPE.LIMIT_PRIORITY := to_number(substr(v_real_value,4));
 				V_LIMIT := to_number(substr(v_real_value,2,2));
 			else
 				select 'Y' into v_ind
 				from selection_criteria_value
 				where value = v_value
 				and select_by_id = :rules.select_by_id
 				and value_descr  = :RULES.SELECTED_RULES; 		
 			end if;	 			
 		Exception
 			when no_data_found then
 			v_ind := 'N';
 		End;
 		copy(v_ind,p_block||'.CHK'); 		
 	End;
	
BEGIN
	clear_block;
	first_record;
	if :datatyp_rad.record_type_descr LIKE '%APPROACH%' then	 		
		if :rules.CRITERIA_ID in (85,86) THEN     
			v_type_code := 90;       -- Airport Approach
		elsif :rules.CRITERIA_ID in (317,319) THEN 
			v_type_code := 190;	     -- Heliport Approach
		end if;
	end if;
	if :rules.CRITERIA_ID in (85, 317) then -- ROUTE TYPE
		:APP_SUB_TYPE.VALUE := '------Precision Route Types------';		
		set_item_instance_property('APP_SUB_TYPE.VALUE',current_record, visual_attribute,'SEPERATE');
		set_item_instance_property('APP_SUB_TYPE.LIMIT_PRIORITY',current_record, visual_attribute,'SEPERATE');		
		next_record;
		for rec in get_sub_types(v_type_code,'Y') loop
 			:APP_SUB_TYPE.real_value := rtrim(rec.record_sub_type_descr);
 			display_guidelines(rtrim(rec.record_sub_type_descr),'APP_SUB_TYPE');	
 			apply_the_check('APP_SUB_TYPE'); 			
 			next_record;
		end loop;
		if v_limit is not null then
			first_record;
			:APP_SUB_TYPE.limit_priority := v_limit;
			v_limit := null;
			last_record;
			next_record;
		end if;	
		:APP_SUB_TYPE.VALUE := '----Non Precision Route Types----';
		set_item_instance_property('APP_SUB_TYPE.VALUE',current_record, visual_attribute,'SEPERATE');
		set_item_instance_property('APP_SUB_TYPE.LIMIT_PRIORITY',current_record, visual_attribute,'SEPERATE');
		next_record;                    
		for rec in get_sub_types(v_type_code,'N') loop
 			:APP_SUB_TYPE.real_value := rtrim(rec.record_sub_type_descr);
 			display_guidelines(rtrim(rec.record_sub_type_descr),'APP_SUB_TYPE');	
 			apply_the_check('APP_SUB_TYPE');
 			next_record;
		end loop;
		if v_limit is not null then
			previous_record;
			loop
				if :APP_SUB_TYPE.VALUE = '----Non Precision Route Types----' then
					:APP_SUB_TYPE.LIMIT_PRIORITY := v_limit;
					exit;
				end if;	
				previous_record;
			end loop;
		end if;	
	else
		if :datatyp_rad.record_type_descr LIKE '%APPROACH%' AND :rules.CRITERIA_ID in (86, 319) then	-- 86,319 'GPS_FMS_INDICATOR' -- Fix 6709 Added AND CRITERIA Condition 			 		
	 		-- 1st
			:RECORD_SUB_TYPE.real_value := '0';
			:RECORD_SUB_TYPE.value := '0';
			apply_the_check;
			next_record;
			-- 2nd
			:RECORD_SUB_TYPE.real_value := '1';
			:RECORD_SUB_TYPE.value := '1';
			apply_the_check;
			next_record;
			--3rd
			:RECORD_SUB_TYPE.real_value := '2';
			:RECORD_SUB_TYPE.value := '2';
			apply_the_check;	
	 		next_record;
	 		-- 4th
			:RECORD_SUB_TYPE.real_value := '3';
			:RECORD_SUB_TYPE.value := '3';
			apply_the_check;
			next_record;
			-- 5th
			:RECORD_SUB_TYPE.real_value := '4';
			:RECORD_SUB_TYPE.value := '4';
			apply_the_check;
			next_record;
			-- 6th
			:RECORD_SUB_TYPE.real_value := '5';
			:RECORD_SUB_TYPE.value := '5';
			apply_the_check;
			next_record;
			-- 7th
			:RECORD_SUB_TYPE.real_value := 'A';
			:RECORD_SUB_TYPE.value := 'A';
			apply_the_check;
			next_record;
			-- 8th
			:RECORD_SUB_TYPE.real_value := 'B';
			:RECORD_SUB_TYPE.value := 'B';
			apply_the_check;
			next_record;
			-- 9th
			:RECORD_SUB_TYPE.real_value := 'C';
			:RECORD_SUB_TYPE.value := 'C';
			apply_the_check;
			next_record;
-- Begin Fix - SCR 5940.06 - Eswar KC - 07-May-2013			
			-- 10th
			:RECORD_SUB_TYPE.real_value := 'G';
			:RECORD_SUB_TYPE.value := 'G';
			apply_the_check;
			NEXT_RECORD;			
			-- 11th
			:RECORD_SUB_TYPE.real_value := 'L';
			:RECORD_SUB_TYPE.value := 'L';
			apply_the_check;
			NEXT_RECORD;	
-- End Fix - SCR 5940.06 - Eswar KC - 07-May-2013			
			-- 12th
			:RECORD_SUB_TYPE.real_value := 'P';
			:RECORD_SUB_TYPE.value := 'P';
			apply_the_check;
			next_record;
			-- 13th
			:RECORD_SUB_TYPE.real_value := 'U';
			:RECORD_SUB_TYPE.value := 'U';
			apply_the_check;

		elsif :datatyp_rad.record_type_descr LIKE '%AIRWAY%' then
	 		IF :RULES.CRITERIA_ID = 23 THEN	-- 'LEVEL'
				-- 1st
				:RECORD_SUB_TYPE.real_value := 'H';
				:RECORD_SUB_TYPE.value := 'High';
				apply_the_check;
				next_record;
				-- 2nd
				:RECORD_SUB_TYPE.real_value := 'L';
				:RECORD_SUB_TYPE.value := 'Low';
				apply_the_check;
				next_record;
				--3rd
				:RECORD_SUB_TYPE.real_value := 'B';
				:RECORD_SUB_TYPE.value := 'Both';
				apply_the_check;	
	 		elsif :RULES.CRITERIA_ID = 22 THEN	--'EXCLUDE LEGS'
	 			-- 1st
				:RECORD_SUB_TYPE.real_value := 'NONCOMPULSORY';
				:RECORD_SUB_TYPE.value := 'NonEssential/NonCompulsory';
				apply_the_check;
				next_record;
				-- 2nd
				:RECORD_SUB_TYPE.real_value := 'GATEWAY';
				:RECORD_SUB_TYPE.value := 'Gateway';
				apply_the_check;
				next_record;
				--3rd
				:RECORD_SUB_TYPE.real_value := 'UNCHARTED';
				:RECORD_SUB_TYPE.value := 'Uncharted';
				apply_the_check;
	 	--Fix SCR 7503 --Madhu
	 		elsif :RULES.CRITERIA_ID = 131 THEN
	 			
	 				:RECORD_SUB_TYPE.real_value := 'A';
					:RECORD_SUB_TYPE.value := 'A - Airline Airway';
					apply_the_check;
					next_record;
			
					:RECORD_SUB_TYPE.real_value := 'C';
					:RECORD_SUB_TYPE.value := 'C - Control';
					apply_the_check;
					next_record;
				
					:RECORD_SUB_TYPE.real_value := 'D';
					:RECORD_SUB_TYPE.value := 'D - Direct Route';
					apply_the_check;	
			 		next_record;
			 	
					:RECORD_SUB_TYPE.real_value := 'H';
					:RECORD_SUB_TYPE.value := 'H - Helicopter Airways';
					apply_the_check;
					next_record;
				
					:RECORD_SUB_TYPE.real_value := 'O';
					:RECORD_SUB_TYPE.value := 'O - Officially Designated Airways(Except RNAV)';
					apply_the_check;
					next_record;
				
					:RECORD_SUB_TYPE.real_value := 'R';
					:RECORD_SUB_TYPE.value := 'R - RNAV Airways';
					apply_the_check;
					next_record;
				
					:RECORD_SUB_TYPE.real_value := 'S';
					:RECORD_SUB_TYPE.value := 'S - Undesignated ATS Route';
					apply_the_check;
					next_record;
				
					:RECORD_SUB_TYPE.real_value := 'T';
					:RECORD_SUB_TYPE.value := 'T - TACAN Airway';
					apply_the_check;
--Fix SCR 7503 --Madhu
	 		end if;	
   		-- Added SID/ STAR route Type, SCR 2506 and also adjusted the layout
  	elsif :datatyp_rad.record_type_descr LIKE '%SID%' then
	 		if :rules.CRITERIA_ID = 98 THEN     -- Airport SID 'INCLUDE ROUTE TYPES'
				for rec in get_sub_types(91) loop
 					:RECORD_SUB_TYPE.real_value := rtrim(rec.record_sub_type_descr);
 					display_sid_guidelines(rtrim(rec.record_sub_type_descr));	
 					apply_the_check;
 					next_record;
				end loop;
     	end if;			
   	elsif :datatyp_rad.record_type_descr LIKE '%STAR%' then
	 		if :rules.CRITERIA_ID = 99 THEN     -- Airport STAR 'INCLUDE ROUTE TYPES'
				for rec in get_sub_types(92) loop
 					:RECORD_SUB_TYPE.real_value := rtrim(rec.record_sub_type_descr);
 					display_star_guidelines(rtrim(rec.record_sub_type_descr));	
 					apply_the_check;
 					next_record;
				end loop;
	 		end if;
	 		/*Imran Obstacle SCR 6788.01*/
	 		/*HArikrishna Ch  CORPT00005990 16-July-2020--Updated table name OBSTACLE_TYPE to OBS_TYPE as part of PackageDesign*/
	  elsif :datatyp_rad.record_type_descr LIKE '%OBSTACLE%' then
	 		IF :rules.CRITERIA_ID = 602 THEN
	 			for rec in (select * from obs_type) LOOP  
 					:RECORD_SUB_TYPE.value := rec.obstacle_type;
 					:RECORD_SUB_TYPE.real_value := rec.obstacle_type;
 					apply_the_check;
 					next_record;
				end loop;
	 		END IF;
	 	/*Imran Obstacle*/
  	end if;	
	end if;
	first_record;
END;

 setButtonProperty:
PROCEDURE set_button_property(p_button varchar2) IS
	v_button  cpt_types.table_vchar30;
BEGIN	
	v_button(1) := 'CRITERIA';
	v_button(2) := 'CUSTOMER';
	v_button(3) := 'GEOGRAPHIC';
	v_button(4) := 'AREA';
	v_button(5) := 'ICAO';
	v_button(6) := 'ARPTLSTS';
	v_button(7) := 'HELIPLSTS';
	v_button(8) := 'SELECTIONS';
	v_button(9) := 'COPY_NAVDB';
	v_button(10) := 'DMR_LIST';
	v_button(11) := 'VALIDATE';
	v_button(12) := 'REPORT';
-- Begin Fix - SCR 3693 - Sesha 
	v_button(13) := 'CUSTOMER_INFO';
	--for i in 1..12 loop
     --	for i in 1..13 loop	 commented for - SCR 4337 - Eswar KC -12 MAR 2009  
-- End Fix - SCR 3693 - Sesha 
	-- Begin Fix - SCR 4337 - Eswar KC -12 MAR 2009  
		 v_button(14) := 'NAVDB_DFM';
		for i in 1..14 loop	 
	-- End Fix - SCR 4337 - Eswar KC -12 MAR 2009  	
		if v_button(i) = p_button then
		--	set_item_property('CONTROL_BLOCK.'||v_button(i),visual_attribute,'BLOCK_SCROLL_BAR');
				set_item_property('CONTROL_BLOCK.'||v_button(i),visual_attribute,'GREY_OUT'); -- Fix -- SCR 87--Madhu -- 09-Apr-2012
		else
			set_item_property('CONTROL_BLOCK.'||v_button(i),visual_attribute,'DEFAULT');
		end if;
	end loop;
END;

 populateFocal:
--  Begin Fix -- SCR 3701 - Sesha
PROCEDURE POPULATE_FOCAL IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
BEGIN    
	
	-- delete the old group
	rg := find_group('focal'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   
	-- create list  --Fix 10-Jun-2013 --SCR 5904 - Ashish N - Added condition in status = 'ACTIVE'
   -- Fix 31-Aug-2017 --SCR 7155 - Ashish N --rename status column to active_ind
	rg := create_group_from_query('focal','
		select  DECODE(LAST_NAME,NULL,FIRST_NAME,FIRST_NAME||'' ''||LAST_NAME ) rlabel,LOGON_ID rvalue
  	from corept_user
  	where first_name is not null
  	and   logon_id in (select logon_id 
  	                   from corept_user_role 
  	                   where role_name in (''COREPT_PROD_DATA'',''COREPT_ADMIN'',''COREPT_VIEW_DATA'',''COREPT_PROD_EXEC''))
  	                   and active_ind = ''Y''   
  	order by 1 asc' );  
  	
  -- populate the group
	nn := populate_group(rg);        
	if nn <> 0 then  
		dsp_msg('Populate group had error '||to_char(nn));        
	end if;
	populate_list('NAVDB.PRIMARY_FOCAL',rg);
	populate_list('NAVDB.SECONDARY_FOCAL',rg);
	populate_list('CONTROL_BLOCK.PRI_FOCAL',rg); -- Fix - SCR 6927.01 - Eswar KC
	populate_list('CONTROL_BLOCK.SEC_FOCAL',rg); -- Fix - SCR 6927.01 - Eswar KC

	--Imran CMC - SCR 7375.01
	rg := find_group('cmc_lst'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;
	rg := create_group_from_query('cmc_lst','select cmc_db_name rlabel,cmc_db_name rvalue from cmc_db_name order by 1');
	nn := populate_group(rg);        
	if nn <> 0 then  
		dsp_msg('Populate group had error '||to_char(nn));        
	end if;
	populate_list('NAVDB.CMC_CUSTOMER_NAME',rg);
	--Imran CMC - SCR 7375.01	
END;	

--  End Fix -- SCR 3701 - Sesha



 refreshGeoCount:
-- Begin Fix -- SCR 3761 - Sesha	
PROCEDURE REFRESH_GEO_COUNT IS
  num number;
BEGIN
  num := :System.Cursor_Record;
  first_record;
  last_record;
  :SELECT_BY_GEOGRAPHIC_AREA.geo_count := :System.Cursor_Record;
  go_record(num);
END;
-- End Fix -- SCR 3761 - Sesha	

 checkProfile:
PROCEDURE check_profile IS

  v_count  number;
  v_count1 number;
  lov_id LOV;

BEGIN
   select count(fms_id) into v_count from flight_management_system where fms_id = nvl(:navdb.fms_id,fms_id) --Fix SCR 6172- Ashish- 10-Aug
   and binary_format_type like 'K%'; 
   if v_count > 0 then 
   	  set_item_property('NAVDB.PROFILE_NUMBER',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.PROFILE_NUMBER',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.PROFILE_NUMBER',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.PROFILE_NUMBER',UPDATE_ALLOWED, PROPERTY_TRUE);
      set_item_property('NAVDB.PROFILE_NUMBER',QUERYABLE, PROPERTY_TRUE);
    lov_id := Find_LOV('PROFILE_NUM');  
  /*	select count(fms_id) into v_count1 from 
    --    (select fms_id from flight_management_system where fms_id = :navdb.fms_id and binary_format_type like 'K6%');
    if v_count1 > 0 then   	
   	 if Get_LOV_Property(lov_id,GROUP_NAME) = 'PROFILE_NUM' THEN 
    	 Set_LOV_Property(lov_id,GROUP_NAME,'PROFILE_NUM_K660');
     end if;
    else
    	   
    end if; */ -- Commented for SCR 5147
		Set_LOV_Property(lov_id,GROUP_NAME,'PROFILE_NUM');
   else
    	
       --set_item_property('NAVDB.PROFILE_NUMBER',INSERT_ALLOWED, PROPERTY_FALSE); 
      -- set_item_property('NAVDB.PROFILE_NUMBER',UPDATE_ALLOWED, PROPERTY_FALSE);
   	  -- set_item_property('NAVDB.PROFILE_NUMBER',ENABLED, PROPERTY_FALSE);
   	   set_item_property('NAVDB.PROFILE_NUMBER',visible, PROPERTY_FALSE);   	  
  end if;	 
END;

-- Enable_disable_profile; 



 enableDisableProfile:
PROCEDURE Enable_disable_profile IS
v_count  number;
BEGIN
    select count(fms_id) into v_count from flight_management_system where fms_id = nvl(:navdb.fms_id,fms_id) --Fix SCR 6172- Ashish- 10-Aug
    and binary_format_type like 'K%'; 
   if v_count > 0 then 
   	  set_item_property('NAVDB.PROFILE_NUMBER',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.PROFILE_NUMBER',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.PROFILE_NUMBER',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.PROFILE_NUMBER',UPDATE_ALLOWED, PROPERTY_TRUE);
      set_item_property('NAVDB.PROFILE_NUMBER',QUERYABLE, PROPERTY_TRUE); --Fix SCR 6172- Ashish- 10-Aug
   else
    	
       --set_item_property('NAVDB.PROFILE_NUMBER',INSERT_ALLOWED, PROPERTY_FALSE); 
       --set_item_property('NAVDB.PROFILE_NUMBER',UPDATE_ALLOWED, PROPERTY_FALSE);
   	   --set_item_property('NAVDB.PROFILE_NUMBER',ENABLED, PROPERTY_FALSE);
   	   set_item_property('NAVDB.PROFILE_NUMBER',visible, PROPERTY_FALSE);   	  
   end if;
END;

 enableDisableValerieInd:
PROCEDURE Enable_disable_valerie_IND IS
v_count  number;
BEGIN
    select count(fms_id) into v_count from flight_management_system where fms_id = nvl(:navdb.fms_id,fms_id) --Fix SCR 6172- Ashish- 10-Aug
    and binary_format_type like 'FD%'; 
   if v_count > 0 then 
   	  set_item_property('NAVDB.GEN_VALERIE',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.GEN_VALERIE',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.GEN_VALERIE',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.GEN_VALERIE',UPDATE_ALLOWED, PROPERTY_TRUE);
      set_item_property('NAVDB.GEN_VALERIE',QUERYABLE, PROPERTY_TRUE); --Fix SCR 6172- Ashish- 10-Aug
   else
    	
       --set_item_property('NAVDB.GEN_VALERIE',INSERT_ALLOWED, PROPERTY_FALSE); 
       --set_item_property('NAVDB.GEN_VALERIE',UPDATE_ALLOWED, PROPERTY_FALSE);
   	   --set_item_property('NAVDB.GEN_VALERIE',ENABLED, PROPERTY_FALSE);
   	   set_item_property('NAVDB.GEN_VALERIE',visible, PROPERTY_FALSE);   	  
   end if;
END;

 populateSuaRules:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
PROCEDURE populate_sua_rules(p_record_type varchar2) IS
l_string varchar2(30);
l_str char(1);
BEGIN
	clear_block;
	first_record;
	
-- CONTROLLED AIRSPACE TYPES
if p_record_type = 'UC' then
 l_string := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234';
  for i in 1.. length(l_string) loop
         :SUA_RULES.TYPE := substr(l_string,i,1);
 	if :SUA_RULES.TYPE is not null then
 			begin
 				select 'Y' into :SUA_RULES.CHK
 				from selection_criteria_value
 				where value = :SUA_RULES.TYPE
 				and select_by_id = :rules.select_by_id
 				and value_descr = :RULES.SELECTED_RULES;
 			exception
 				when no_data_found then
 				:SUA_RULES.CHK := 'N';
 			end;
		end if;   
      
     if  :SUA_RULES.TYPE = 'A' then  
   	     :SUA_RULES.ABBREVATION := 'Airport Radar Service Area';
   elsif :SUA_RULES.TYPE = 'B' then 
   	     :SUA_RULES.ABBREVATION := 'Air Traffic Zone';
   elsif :SUA_RULES.TYPE = 'C' then 
   	     :SUA_RULES.ABBREVATION := 'Class A Airspace';
   elsif :SUA_RULES.TYPE = 'D' then 
   	     :SUA_RULES.ABBREVATION := 'Class B Airspace';   	     
   elsif :SUA_RULES.TYPE = 'E' then 
   	     :SUA_RULES.ABBREVATION := 'Class C Airspace';
   elsif :SUA_RULES.TYPE = 'F' then 
   	     :SUA_RULES.ABBREVATION := 'Class D Airspace';
   elsif :SUA_RULES.TYPE = 'G' then 
   	     :SUA_RULES.ABBREVATION := 'Class E Airspace';
   elsif :SUA_RULES.TYPE = 'H' then 
   	     :SUA_RULES.ABBREVATION := 'Class F Airspace';   	     
   elsif :SUA_RULES.TYPE = 'I' then 
   	     :SUA_RULES.ABBREVATION := 'Class G Airspace';
   elsif :SUA_RULES.TYPE = 'J' then 
   	     :SUA_RULES.ABBREVATION := 'Multi-Class Airspace';
   elsif :SUA_RULES.TYPE = 'K' then 
   	     :SUA_RULES.ABBREVATION := 'Control Area (Airport)';
   elsif :SUA_RULES.TYPE = 'L' then 
   	     :SUA_RULES.ABBREVATION := 'Control Area (Non-Airport)';   	     
   elsif :SUA_RULES.TYPE = 'M' then 
   	     :SUA_RULES.ABBREVATION := 'Control Zone';
   elsif :SUA_RULES.TYPE = 'N' then 
   	     :SUA_RULES.ABBREVATION := 'Helicopter Protected Zone';
   elsif :SUA_RULES.TYPE = 'O' then 
   	     :SUA_RULES.ABBREVATION := 'Helicopter Traffic Zone';
   elsif :SUA_RULES.TYPE = 'P' then 
   	     :SUA_RULES.ABBREVATION := 'Military Air Traffic Zone';   	     
   elsif :SUA_RULES.TYPE = 'Q' then 
   	     :SUA_RULES.ABBREVATION := 'Military Control Zone';
   elsif :SUA_RULES.TYPE = 'R' then 
   	     :SUA_RULES.ABBREVATION := 'Military Terminal Area or Control';   	     
   elsif :SUA_RULES.TYPE = 'S' then 
   	     :SUA_RULES.ABBREVATION := 'Oceanic Control Area (Non-Airport)';
   elsif :SUA_RULES.TYPE = 'T' then 
   	     :SUA_RULES.ABBREVATION := 'Radar (Zone or Area)';   	     
   elsif :SUA_RULES.TYPE = 'U' then 
   	     :SUA_RULES.ABBREVATION := 'Special Rules Area';
   elsif :SUA_RULES.TYPE = 'V' then 
   	     :SUA_RULES.ABBREVATION := 'Special Rules Zone';
   elsif :SUA_RULES.TYPE = 'W' then 
   	     :SUA_RULES.ABBREVATION := 'Terminal Control Area';
   elsif :SUA_RULES.TYPE = 'X' then 
   	     :SUA_RULES.ABBREVATION := 'Terminal Area';   	     
   elsif :SUA_RULES.TYPE = 'Y' then 
   	     :SUA_RULES.ABBREVATION := 'Terminal Radar Service Area';
   elsif :SUA_RULES.TYPE = 'Z' then 
   	     :SUA_RULES.ABBREVATION := 'Traffic Information Zone';
   elsif :SUA_RULES.TYPE = '1' then 
   	     :SUA_RULES.ABBREVATION := 'Upper Control Area';
   elsif :SUA_RULES.TYPE = '2' then 
   	     :SUA_RULES.ABBREVATION := 'Upper Control Area (Non-Airport)';   	     
   elsif :SUA_RULES.TYPE = '3' then 
   	     :SUA_RULES.ABBREVATION := 'Positive Control Area';
   elsif :SUA_RULES.TYPE = '4' then 
   	     :SUA_RULES.ABBREVATION := 'Traffic Information Area';
   end if;
   NEXT_RECORD;
   --
  end loop;
end if;
--
-- RESTRICTED AIRSPACE TYPES
if p_record_type = 'UR' then
 l_string := 'ABCDFGJKMPRSTUWZ';
--
  for i in 1.. length(l_string) loop
       :SUA_RULES.TYPE := substr(l_string,i,1);
 		if :SUA_RULES.TYPE is not null then
 			begin
 				select 'Y' into :SUA_RULES.CHK
 				from selection_criteria_value
 				where value = :SUA_RULES.TYPE
 				and select_by_id = :rules.select_by_id
 				and value_descr = :RULES.SELECTED_RULES;
 			exception
 				when no_data_found then
 				:SUA_RULES.CHK := 'N';
 			end;
		end if;         
   --
     if  :SUA_RULES.TYPE = 'A' then  
   	     :SUA_RULES.ABBREVATION := 'Alert Area';
   elsif :SUA_RULES.TYPE = 'B' then 
   	     :SUA_RULES.ABBREVATION := 'Buffer Zone';
   elsif :SUA_RULES.TYPE = 'C' then 
   	     :SUA_RULES.ABBREVATION := 'Caution Area';
   elsif :SUA_RULES.TYPE = 'D' then 
   	     :SUA_RULES.ABBREVATION := 'Danger Area';   	     
   elsif :SUA_RULES.TYPE = 'F' then 
   	     :SUA_RULES.ABBREVATION := 'Cross Boarder Area';
   elsif :SUA_RULES.TYPE = 'G' then 
   	     :SUA_RULES.ABBREVATION := 'Temporary Reserve Area';
   elsif :SUA_RULES.TYPE = 'J' then 
   	     :SUA_RULES.ABBREVATION := 'Temporary Flight Restriction';
   elsif :SUA_RULES.TYPE = 'K' then 
   	     :SUA_RULES.ABBREVATION := 'Temporary Segregated Areas';
   elsif :SUA_RULES.TYPE = 'M' then 
   	     :SUA_RULES.ABBREVATION := 'Military Operations Area';
   elsif :SUA_RULES.TYPE = 'P' then 
   	     :SUA_RULES.ABBREVATION := 'Prohibited Area';   	     
   elsif :SUA_RULES.TYPE = 'R' then 
   	     :SUA_RULES.ABBREVATION := 'Restricted Area';   	     
   elsif :SUA_RULES.TYPE = 'S' then 
   	     :SUA_RULES.ABBREVATION := 'Advisory Area (Canada)';
   elsif :SUA_RULES.TYPE = 'T' then 
   	     :SUA_RULES.ABBREVATION := 'Training Area';   	     
   elsif :SUA_RULES.TYPE = 'U' then 
   	     :SUA_RULES.ABBREVATION := 'Unspecified Area';
   elsif :SUA_RULES.TYPE = 'W' then 
   	     :SUA_RULES.ABBREVATION := 'Warning Area';
   elsif :SUA_RULES.TYPE = 'Z' then 
   	     :SUA_RULES.ABBREVATION := 'Air Defense Identification Zone';
   end if;   
    NEXT_RECORD;
   --
end loop;
--
end if;
--
	first_record;
END;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 populateSuaRecords:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
FUNCTION populate_sua_records(p_num number, p_value varchar2) RETURN NUMBER IS
v_num number := p_num;
v_value varchar2(50);
BEGIN
   v_num:= v_num +1;
	   INSERT INTO selection_criteria_value
	                     (select_by_id, 
						  					value_seq, 
						  					value_descr,
	                      VALUE
	                     )
	              VALUES (:rules.select_by_id, 
				          			v_num, 
						  					:rules.selected_rules,
	                      p_value
	                     );
 RETURN v_num;                     
END;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 getIncExcInd:
-- Begin Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
FUNCTION Get_Inc_Exc_Ind(p_select_by_id Number) RETURN char IS
BEGIN
  Begin
	  Select	Nvl(Include_Exclude_Ind,'I')
					Into		:Parameter.Inc_Exc_Ind
	        From 		Select_By_Airport_Group
	        Where select_by_id = p_select_by_id; --to_number(rtrim(ltrim(:SELECTION.selections)));
		Exception 
			When Others Then
			 :Parameter.Inc_Exc_Ind := null;
		End;
		Return (:Parameter.Inc_Exc_Ind);
END;
-- End Fix - SCR 4184 - Eswar KC  - 10 Sep 2012

 populateIatacode:
-- Begin Fix - SCR 5825 - Ayodya Ch - 20 Nov 2012
 	 /* This function returns IATA CODE of the airport ident */
FUNCTION POPULATE_IATACODE(v_ident varchar2,v_icao varchar2)
RETURN VARCHAR2 IS
v_sIatacode VARCHAR2(3);
BEGIN
   IF v_ident IS NOT NULL
   AND v_icao IS NOT NULL THEN 
  SELECT ata_iata_designator INTO V_sIatacode 
    FROM pl_std_airport
	 WHERE data_supplier = :NAVDB.DATA_SUPPLIER
		 AND processing_cycle = :control_block.proc_cycle --:global.processing_cycle --7607 --Madhu
		 AND airport_ident = v_ident
		 AND airport_icao  = v_icao;
  END IF;
 RETURN V_sIatacode;
  EXCEPTION	
	WHEN no_data_found THEN
   RETURN NULL;
	WHEN OTHERS THEN
	dsp_msg(sqlerrm);-- Fix SCR 5825 -Ayodya Ch-22 Nov 2012 --Removed the form_trigger_failure. 
  END;
-- End Fix - SCR 5825 - Ayodya Ch - 20 Nov 2012


 checkToCommit:
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
PROCEDURE CHECK_TO_COMMIT (p_action_type VARCHAR2) IS
		v_button        NUMBER (1);
		v_nAllow_update   NUMBER := 0;
		v_cBlock          VARCHAR2 (30) := :SYSTEM.cursor_block;
		msgnum          NUMBER       := MESSAGE_CODE;
		v_cNavdb_Block VARCHAR2 (30) := 'NAVDB';
		fname	varchar2(100) := get_application_property(CURRENT_FORM_NAME);
		ln_Count NUMBER :=0;
  	Rec_Cnt NUMBER :=0;
BEGIN
IF :SYSTEM.form_status = 'CHANGED'THEN
	    IF p_action_type = 'COMMIT' THEN
         v_button := display_alert.more_buttons ('S','Save Record','You have modified record(s). Select an option: ',
                      'Save','Cancel'); 
              
              IF :PARAMETER.NEW_NAVDB = 'Y' and v_button = 1 THEN
              		COMMIT_FORM;
              -- BEGIN FIX -- SCR 7699.01 - SHRIKANT K -- 11-01-2019
                	update_new_navdb_orc;
              -- SET_TAB_PAGE_PROPERTY('SEL_CAN.ORC',Enabled,PROPERTY_TRUE);
              -- END FIX -- SCR 7699.01 - SHRIKANT K -- 11-01-2019              	
              
              ELSE
               IF v_button = 1 THEN 
               	--Fix Start SCR 7645 - 09-Jul-2018 - Ashish N
               	   IF :Parameter.Seq = 'Y' THEN 	
  										IF :SYSTEM.form_status = 'CHANGED' THEN
													Go_Block('GEOGRAPHIC_AREA_POINT'); 
													Last_Record;
													Rec_Cnt:= TO_NUMBER(:System.Trigger_Record);
													First_Record;
	    										LOOP
													ln_Count:= ln_Count+10;
													:geographic_area_point.sequence_number := ln_Count;
													EXIT When :System.Last_Record = 'TRUE';
													Next_Record;
	    									END LOOP;	
	    									END IF;
													Forms_Utilities.geo_area_Seq_Update_Prc(:geographic_area_point.select_by_id);  --7645 Ashish
               	     			:Parameter.Seq := 'N';
               	   END IF;
               	   --Fix End SCR 7645 - 09-Jul-2018 - Ashish N
				        v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
				         IF 	 v_nAllow_update = 1 THEN
				            :PARAMETER.UPD_REC := 'N';
										COMMIT_FORM;
				         ELSE
				            :PARAMETER.UPD_REC := 'Y';
				            dsp_action_msg ('I',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				         END IF;
				         
               ELSIF v_button = 2 THEN
               	NULL;
               END IF;
             END IF;    
      ELSIF p_action_type = 'EXIT' THEN
         v_button := display_alert.more_buttons ('S','Save Record','You have modified record(s). Select an option: ',
                      'Save','Exit','Cancel'); 

				      IF v_button = 1 THEN
				     --Fix Start SCR 7645 - 09-Jul-2018 - Ashish N
				     IF :Parameter.Seq = 'Y' THEN 	
  										IF :SYSTEM.form_status = 'CHANGED' THEN
													Go_Block('GEOGRAPHIC_AREA_POINT'); 
													Last_Record;
													Rec_Cnt:= TO_NUMBER(:System.Trigger_Record);
													First_Record;
	    										LOOP
													ln_Count:= ln_Count+10;
													:geographic_area_point.sequence_number := ln_Count;
													EXIT When :System.Last_Record = 'TRUE';
													Next_Record;
	    									END LOOP;	
	    									END IF;
													Forms_Utilities.geo_area_Seq_Update_Prc(:geographic_area_point.select_by_id);  --7645 Ashish
               	     			:Parameter.Seq := 'N';
				     END IF;
				     --Fix End SCR 7645 - 09-Jul-2018 - Ashish N
								        v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
								         IF v_nAllow_update = 1 THEN
								            :PARAMETER.UPD_REC := 'N';
														Exit_Form(DO_COMMIT);
								         ELSE
								            :PARAMETER.UPD_REC := 'Y';
								            dsp_action_msg ('I',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
								         END IF;
				      ELSIF v_button = 2 THEN
				      	Exit_Form(NO_COMMIT);
				      ELSIF v_button = 3 THEN
				      	NULL;
				      END IF;
			  ELSIF p_action_type = 'UPDATE' THEN
						        v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
	--Fix SCR 5820 --Madhu --5-Mar-2013 -- Removed debug message from here
						         IF 	 v_nAllow_update = 1 THEN
						            :PARAMETER.UPD_REC := 'N';
						            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
						         ELSE
						            :PARAMETER.UPD_REC := 'Y';
						            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
						            dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
						         END IF;
        	    ELSIF p_action_type IN ('ENTER_QUERY','EXECUTE_QUERY') THEN
         						v_button := display_alert.more_buttons ('S','Save Record','You have modified record(s). Select an option: ',
                      'Save','Cancel'); 
               IF v_button = 1 THEN
				        v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
				         IF v_nAllow_update = 1 THEN
				            :PARAMETER.UPD_REC := 'N';
										COMMIT_FORM;
				         ELSE
				            :PARAMETER.UPD_REC := 'Y';
				            dsp_action_msg ('I',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				         END IF;
               ELSIF v_button = 2 THEN
               	CLEAR_FORM(No_Validate);
         	 			populate_items(fname);
               END IF; 
        END IF;   
END IF;
END;

--End Fix - SCR 5820 - Eswar KC - 29-Jan-2013

 checkDelRec:
  --Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
PROCEDURE CHECK_DEL_REC(p_cBlock in VARCHAR2, p_cRec_Status in VARCHAR2) IS
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN

      IF p_cRec_Status	NOT IN ('NEW', 'INSERT') THEN
         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
          IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
            Set_Block_Property (p_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
	         ELSE
	            :PARAMETER.UPD_REC := 'Y';
	            Set_Block_Property (p_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
	            dsp_action_msg ('D',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
	         END IF;
      END IF;
END;
--End Fix - SCR 5820 - Eswar KC - 29-Jan-2013 

 newRecInstance:
  --Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
PROCEDURE new_rec_instance(p_cBlock in VARCHAR2,p_cRec_Status in VARCHAR2) IS
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
      IF p_cRec_Status NOT IN ('NEW', 'INSERT') THEN
         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
            Set_Block_Property (p_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
         ELSE
            :PARAMETER.UPD_REC := 'Y';
            Set_Block_Property (p_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
         END IF;
      END IF;
   END IF;
END;
  --End Fix - SCR 5820 - Eswar KC - 29-Jan-2013

 createNewRec:
  --Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
PROCEDURE CREATE_NEW_REC(p_cBlock in VARCHAR2,p_cRec_Status in VARCHAR2) IS
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
            Set_Block_Property (p_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
            CREATE_RECORD;
         ELSE
            :PARAMETER.UPD_REC := 'Y';
            Set_Block_Property (p_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
            dsp_action_msg ('I',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
						RAISE Form_Trigger_Failure;         
         END IF;
END;
  --End Fix - SCR 5820 - Eswar KC - 29-Jan-2013

 populateDefaultIncExcInd:
-- Begin Fix - SCR 6503.01 - Eswar KC
PROCEDURE Populate_Default_Inc_Exc_ind (pi_block IN VARCHAR2, pi_item IN VARCHAR2) 
IS
ln_Record_Type_Code NUMBER(4);
lc_Inc_Ind VARCHAR2(1);
lc_exc_Ind VARCHAR2(1);
lc_Ind  VARCHAR2(1) := NULL; 
BEGIN
           SELECT Record_Type_Code, Inc_Ind, Exc_Ind
             INTO ln_Record_Type_Code, lc_Inc_Ind, lc_Exc_Ind
             FROM (  SELECT Record_Type_Code,
                            MAX (
                               CASE
                                  WHEN Include_Exclude_Ind = 'I' THEN
                                     Include_Exclude_Ind
                               END) Inc_Ind,
                            MAX (
                               CASE
                                  WHEN Include_Exclude_Ind = 'X' THEN
                                     Include_Exclude_Ind
                               END) Exc_Ind
                       FROM (SELECT Nsc.Record_Type_Code, Nsc.Include_Exclude_Ind
                               FROM Navdb_Select_Criteria Nsc, Select_Criteria Sc
                              WHERE     Nsc.Navdb_Id = :NAVDB.NAVDB_ID
                                    AND Nsc.Geo_Area_Id = -2
                                    AND Nsc.Record_Type_Code = :DATATYP_RAD.RECORD_TYPE_CODE
                                    AND Nsc.Record_Type_Code = Sc.Record_Type_Code
                                    AND Sc.Processing_Order = 30
                                    )
          GROUP BY Record_Type_Code);
                lc_Ind :=  CASE
                               WHEN lc_Inc_Ind IS NOT NULL AND lc_Exc_Ind IS NOT NULL THEN 'B'
                               WHEN lc_Inc_Ind IS NULL THEN 'X'
                               WHEN lc_eXC_Ind IS NULL THEN 'I'
                           END;
                   Copy(lc_Ind,':'||pi_block||'.'||pi_item);
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Copy(lc_Ind,':'||pi_block||'.'||pi_item);
   WHEN OTHERS THEN
      NULL;                                                                            
END;                                                                                         
-- End Fix - SCR 6503.01 - Eswar KC


 deleteOneOrc:
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
PROCEDURE DELETE_ONE_ORC (pi_sCorte VARCHAR2)
IS                                                                 
   ln_Length          NUMBER;
   ls_Cortes_1        VARCHAR2 (32000);
   ls_Cortes_2        VARCHAR2 (32000);
   ls_Customer_Name   VARCHAR2 (50) := pi_sCorte;  
BEGIN
   ln_Length := INSTR (',' || :CONTROL_BLOCK.ORC_APPLIED || ',', ',' || pi_sCorte || ',');

   IF ln_Length > 0 THEN
      IF ln_Length = 1 THEN
         ls_Cortes_1 := NULL;
      ELSE
         ls_Cortes_1 := RTRIM ( LTRIM (SUBSTR (:CONTROL_BLOCK.ORC_APPLIED, 1, ln_Length - 2),  ','), ',');
      END IF;

      ls_Cortes_2 := RTRIM ( LTRIM ( SUBSTR (:CONTROL_BLOCK.ORC_APPLIED, ln_Length + 1 + LENGTH (pi_sCorte)), ','),  ',');
      :CONTROL_BLOCK.ORC_APPLIED := RTRIM (LTRIM (ls_Cortes_1 || ',' || ls_Cortes_2, ', '), ',');
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      Dsp_Msg ('Error while clearing the list-' || SQLERRM);
      RAISE Form_Trigger_Failure;
END;
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

 populateOrcApplied:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
PROCEDURE Populate_Orc_Applied IS
	-- Begin Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
		CURSOR GET_ORC IS
		SELECT F_ORC.DMR_ID,
			     F_ORC.DEFAULT_APPLY_IND,
			     F_ORC.FMS_ID,
			     NVL (N_ORC.APPLY_IND, 'N') APPLY_IND,
			     DMR_DESCR,
			     N_ORC.UPDATE_DCR_NUMBER											-- Fix - SCR 6946.00 - Eswar KC - 09-Jun-2016
		FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC, NAVDB_ORC N_ORC
		WHERE     F_ORC.FMS_ID = :Navdb.Fms_Id
		       AND F_ORC.DMR_ID = ORC.DMR_ID
		       AND N_ORC.ORC_ID = ORC.DMR_ID
		       AND N_ORC.NAVDB_ID = :Navdb.Navdb_Id
		       AND APPLY_IND = 'Y'													-- SCR 5441 -- SHRIKANT K
		       AND F_ORC.DM_ORC_IND = 'ORC' --- 7773
		UNION
		SELECT F_ORC.DMR_ID,
		       F_ORC.DEFAULT_APPLY_IND,
		       F_ORC.FMS_ID,
		       'N' APPLY_IND,
		       ORC.DMR_DESCR,
		       NULL																					 -- Fix - SCR 6946.00 - Eswar KC - 09-Jun-2016
		  FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
		 WHERE F_ORC.FMS_ID IN (SELECT FMS_ID
		                              FROM NAVDB
		                             WHERE NAVDB_ID = :Navdb.Navdb_Id)
		       AND F_ORC.DMR_ID NOT IN (SELECT ORC_ID
		                                  FROM NAVDB_ORC
		                                 WHERE NAVDB_ID = :Navdb.Navdb_Id)
		       AND ORC.DMR_ID = F_ORC.DMR_ID
		       AND F_ORC.DM_ORC_IND = 'ORC' -- 7773
		ORDER BY 1;
	-- End Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
BEGIN
   :Control_Block.Orc_Applied := NULL;
   GO_BLOCK ('NAVDB_ORC');
   -- Begin Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
	 CLEAR_BLOCK(	no_validate);
	 FOR REC IN GET_ORC LOOP
		:NAVDB_ORC.APPLY_IND := REC.APPLY_IND;
		:NAVDB_ORC.APPLY_IND_D := REC.APPLY_IND; 							 -- Fix - SCR 6946.00 - Eswar KC - 09-Jun-2016
		:NAVDB_ORC.ORC_ID := REC.DMR_ID;
		:NAVDB_ORC.ORC_DESCR := REC.DMR_DESCR;
		:NAVDB_ORC.UPDATE_DCR_NUMBER := REC.UPDATE_DCR_NUMBER; -- Fix - SCR 6946.00 - Eswar KC - 09-Jun-2016
		NEXT_RECORD;
	 END LOOP;
   -- End Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
   FIRST_RECORD;
   LOOP
      IF :Navdb_Orc.Apply_Ind = 'Y' THEN
         :Control_Block.Orc_Applied := :Control_Block.Orc_Applied || ',' || :Navdb_Orc.Orc_ID;
      END IF;
      EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
      NEXT_RECORD;
   END LOOP;
   :Control_Block.Orc_Applied := LTRIM (RTRIM (:Control_Block.Orc_Applied, ','), ',');             
   FIRST_RECORD;
END;
-- End Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
-- end Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 setFmsId:
-- Begin Fix - SCR 6704.01 - Eswar KC - 28-Aug-2015
PROCEDURE set_fms_id
IS
   ls_Host_Name   VARCHAR2 (60);
   ln_Exists      NUMBER := 0;
   lov_id         LOV;
BEGIN
   SELECT NVL(Instance_Type,'$') INTO :Parameter.DB_INST_NAME FROM system_software_identification; --Fix SCR 7194 --Madhu--8-Feb-2017 -- 7415.01 - Eswar KC

   --SELECT COUNT (1) INTO ln_Exists FROM DB_INSTANCE 
    --WHERE UPPER (INSTANCE_NAME) = UPPER (ls_Host_Name);

   lov_id := FIND_LOV ('FMSID');

   IF UPPER(:Parameter.DB_INST_NAME) = 'ENGR' THEN --Fix SCR 7194 --Madhu--8-Feb-2017
      SET_LOV_PROPERTY (lov_id, GROUP_NAME, 'FMS_ID_FOR_OTHERS');
   ELSE
      SET_LOV_PROPERTY (lov_id, GROUP_NAME, 'FMSID');
   END IF;
END;
-- End Fix - SCR 6704.01 - Eswar KC - 28-Aug-2015

 rp2rro:
/* ------------------------------------------------------------------------

 rp2rro utility 
	
 Authors: Duncan Mills (drmills) ,Frank Nimphius (fnimphiu)
 Copyright Oracle Corporation 2001, 2008
 Dependencies: rp2rrp utility (this)
	
 list of changes
 ----------------

 10. September 2001 fnimphiu initial creation
 12. September 2001 drmills  initialization of Reports parameters
 14. November  2001 fnimphiu added procedures to handle run_product calls with paramlist null and no display variable
 										Bug#	
 03. Juni      2002 Bug# 2371098, added procedures to manually set destype, desname and communication mode overwriting the 
                    default values set during migration. The procedures don't change the global values used which means that
                    overwriting the default setting for destype in one Forms module doesn't change the setting in other modules 
                    of the same application	
 04. July      2002 Bug# 2351931 Modified the arguments to web.show_document(Removed = from getjobid and using 
                    rp2rro_jobidPartial instead of rp2rro_jobidFull).
 26. September 2002	fnimphiu removed orarrp and reports server queue usage (Bug #2578405).
 10. January   2008 Remove run_product as the built-in has been obseleted.
 
 GENERAL DOCUMENTATION		
 ---------------------

 Introducing Reports Services and orarrp variables used in this library.


   Name										Default                          Used by                 Comment
   ---------------------------------------------------------------------------------------------------------------------------------------------------
   
   rp2rroDesformat         HTML|HTMLCSS|[PDF]|XML|CSV      rp2rro_run_product      Determines the Report output format
   
   rp2rroDestype	         [CACHE]|FILE|PRINTER            rp2rro_run_product      set via rp2rro_destype parameter. Determines the Reports 
   																										                             output device
   
   rp2rroDesname           PRINTERNAME|FILENAME|[NULL]     rp2rro_run_product      If not DESTYPE=CACHE then this parameter provides the filename
   																										                             the report gets printed to. This is used with orarrp only.
   
   rp2rroReportOther       ['']|<parameter>=<value>		     rp2rro_run_product 		 set additional Reports runtime parameters. Allows to pass additional 
   																										                             user parameters in the form of e.g. 'deptno=10' or 'deptno='||:dept
   																										     												 You cannot use rp2rroReportOther with parameter lists
   
   rp2rroReportServer      [NULL]								           rp2rro_run_product      This parameter determines the name of the Reports Server to be used
   																										                             with rp2rro. Use the Reports server name as defined when starting the 
   																										                             Reports Server and found in reports/conf directory <name>.conf

   rp2rroVirtualDir		     [/reports/]|/<value>/			     rp2rro_run_product      Report Web Interface virtual directory e.g. /reports/ if servlet is 
   																																								 used. If the Reports Server is not on the same machine with the Forms
   																																								 Services then the rp2rroVirtualDir needs to contain the absolute path
   																																								 http://<host>:<port>/reports/
                                                           
                                                           
   rp2rroReportsInterface  rwservlet              				 rp2rro_run_product      Reports Web interface
   
-----------------------------------------------------------------------------------------------------------------------*/  

PACKAGE BODY rp2rro IS


	/* Package variables */
		 

   rp2rroDesformat         varchar2(30);
	 rp2rroDesname           varchar2(200);
	 rp2rroDestype           varchar2(30);
	 rp2rroReportOther       varchar2(2000):='';   
   rp2rroComm_mode         number  			 := Synchronous;
	 
	 rp2rroReportServer      varchar2(100);
	 rp2rroVirtualDir				 varchar2(100);
   rp2rroReportsInterface  varchar2(30);
	 
	 /* Fixed general settings */
   
	 rp2rroNodeId 			Report_Object	:=find_report_object('rp2rro');
	 
	  

  /*INIT*****************************************************************************************************************/
   
  procedure INIT is
  BEGIN
  	-- this proc actually does nothing all - init is done by the body block
  	null;
  END;
    
  /*RP2RRO_RUN_PRODUCT***************************************************************************************************/
  /* 
  	Run_Reports allows to overload calls omitting the display variable. To catch this Exception for
  	Reports we use rp2rro_run_product to filter the display variable out if the call is for REPORTS
  */
    PROCEDURE rp2rro_run_product(product NUMBER,reportFile VARCHAR2,commMode NUMBER,engine NUMBER,fileLocation NUMBER,mparamlist_id ParamList,display   VARCHAR2)  IS
		
		BEGIN
    	/* Handle only calls to Reports */
 			IF product = REPORTS THEN	 
 				   Handle_rp2rro_run_product(product, reportFile,commMode,engine,fileLocation,mparamlist_id);
 			END IF;
		END;
		
	/*RP2RRO_RUN_PRODUCT ***********Taking parameter lists in varchar2 **********************************************************/
	-- If a parameter list is passed by a varchar2 string then this is used to obtain the parameter list id
	
	PROCEDURE rp2rro_run_product(product NUMBER,reportFile VARCHAR2,commMode NUMBER,engine NUMBER,fileLocation NUMBER,mparamlist_id Varchar2,display   VARCHAR2)  IS
		rp2rrpParamList ParamList;
		BEGIN
 			IF product = REPORTS THEN	 				
         -- get parameter list id from parameter name 
         rp2rrpParamList:= get_parameter_list(mparamlist_id); 
         
        IF id_null(rp2rrpParamList) THEN 
         Handle_rp2rro_run_product(product,reportFile,commMode,engine,fileLocation,null);
 				ELSE
 				 Handle_rp2rro_run_product(product,reportFile,commMode,engine,fileLocation,rp2rrpParamList);
 				END IF;
 			END IF;
		END;
		
	
		/*RP2RRO_RUN_PRODUCT ***********Taking parameter lists and no display variable  **********************************************************/
		-- If using Run Product with Reports then a display variable is not necessary
		
	  PROCEDURE rp2rro_run_product(product NUMBER,reportFile VARCHAR2,commMode NUMBER,engine NUMBER,fileLocation NUMBER,mparamlist_id ParamList) IS
	  
	  BEGIN
    	/* Handle only calls to Reports */

 			IF product = REPORTS THEN 
 				 Handle_rp2rro_run_product(product, reportFile,commMode,engine,fileLocation,mparamlist_id);
 			END IF;
		END;
  	
  	/*RP2RRO_RUN_PRODUCT *********** Taking Varchar parameter lists and no display variable **********************************************************/
  	-- If a parameter list is passed by a varchar2 string then this is used to obtain the parameter list id
    
    PROCEDURE rp2rro_run_product(product NUMBER,reportFile VARCHAR2,commMode NUMBER,engine NUMBER,fileLocation NUMBER,mparamlist_id Varchar2) IS
      
    		rp2rrpParamList ParamList;
  	BEGIN
 			IF product = REPORTS THEN	  				
         -- get parameter list id from parameter name 
         rp2rrpParamList:= get_parameter_list(mparamlist_id); 
         
        IF id_null(rp2rrpParamList) THEN 
           Handle_rp2rro_run_product(product,reportFile,commMode,engine,fileLocation,null);
        ELSE
 				   Handle_rp2rro_run_product(product,reportFile,commMode,engine,fileLocation,rp2rrpParamList);
 				END IF;
 			END IF;
		END;
  
  -- Use this procedure if no parameter list is passed. Note that this procedure is not used by default because Reports
  -- started with Run_Product always had a parameter list
   PROCEDURE rp2rro_run_product(product NUMBER,reportFile VARCHAR2,commMode NUMBER,engine NUMBER,fileLocation NUMBER) IS
   BEGIN
  			IF product != REPORTS THEN	 
  			-- this wasn't a valid option using run_product
 	 			 null;
  			ELSE
  				Handle_rp2rro_run_product(product,reportFile,commMode,engine,fileLocation,null);
  			END IF;
   END; 

  /*Handle_RP2RRO_RUN_PRODUCT********************************************************************************************/

    PROCEDURE Handle_rp2rro_run_product(product NUMBER,reportFile VARCHAR2,commMode NUMBER,engine NUMBER,fileLocation NUMBER,mparamlist_id ParamList) IS

	  rp2rroExecution_mode         number			   := Runtime;
   	rp2rro_jobidFull	           varchar2(100);
	  rp2rro_status                varchar2(100);
	  rp2rro_jobidPartial 				 varchar2(100);
    	
   BEGIN
    	--	SET_REPORT_OBJECT node properties
 	 	  SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_FILENAME,lower(reportFile));
 	 	  SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_DESNAME,rp2rroDesname);
 	 	  SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_EXECUTION_MODE,rp2rroExecution_mode);
  	  SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_COMM_MODE,rp2rroComm_mode);
			
			-- setting the Reports services output format. If you want to have the user to decide about the Reports output
			-- format then you need set "rp2rroDestype" variable to a value determined by a user selectable item
  	  IF (upper(rp2rroDestype)='CACHE') THEN
  	  	SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_DESTYPE,CACHE);
  	  ELSIF (upper(rp2rroDestype)='PRINTER') THEN
  	  	SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_DESTYPE,PRINTER);
  	  ELSIF (upper(rp2rroDestype)='FILE') THEN
  	  	SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_DESTYPE,FILE);
  	  ELSIF (upper(rp2rroDestype)='MAIL') THEN
  	    SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_DESTYPE,MAIL);
  	  ELSE
  	  	-- default
  	  	message('Not a valid destype');
  	  	null;
  	  END IF;
   	  	
  	  
  	  SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_DESFORMAT,rp2rroDesformat);
  	  SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_SERVER,rp2rroReportServer);
  	  
  	  IF id_null (mparamlist_id)  THEN
  	  	SET_REPORT_OBJECT_PROPERTY(rp2rroNodeId,REPORT_OTHER,rp2rroReportOther);
		   	rp2rro_jobidFull:=run_report_object(rp2rroNodeId);
  	  ELSE
  	    rp2rro_jobidFull:=run_report_object(rp2rroNodeId,mparamlist_id);
  	  END IF;
  	  
  	  -- If communication mode Synchronous then provide Reports success or error status
  	  
  	  IF (rp2rroComm_mode = SYNCHRONOUS) THEN  	  
  	  	-- Check the Reports Status.
  	
  		
  			-- the partial job id is used to retrieve the Reports output. It contain sthe Reportsjob_id only
  			
   	  	rp2rro_jobidPartial := substr(rp2rro_jobidFull,length(rp2rroReportServer)+2,length(rp2rro_jobidFull));
      	
      	rp2rro_status:= report_object_status(rp2rro_jobidFull);
  			
  		
  	
  	  		IF (rp2rro_status='FINISHED') then
		 
		  			/* Report run was successful 
		     		Get the Report output to the Browser */
		    
		    			IF (upper(rp2rroDestype) ='CACHE') THEN
		    				--Begin Fix SCR 6526--Madhu--16-02-2015
		     				IF 	(upper(rp2rroDesformat) ='SPREADSHEET') THEN
		     					web.show_document(rp2rroVirtualDir||rp2rroReportsInterface||'/getjobid'||rp2rro_jobidPartial||'?server='||rp2rroReportServer||'+desformat=SPREADSHEET','_blank');         
		     				ELSE
		     				--End Fix SCR 6526--Madhu--16-02-2015
		     					web.show_document(rp2rroVirtualDir||rp2rroReportsInterface||'/getjobid'||rp2rro_jobidPartial||'?server='||rp2rroReportServer,'_blank');         
								END IF;
		    			ELSE
		      		-- Reports output is send to printer or file, there is nothing to download to the client
		      		null; 
		    			END IF;
		
		  		ELSE -- Report generation errors
		    	
	     	   				message('Report failed with message: '||rp2rro_status);
	     	
		  		END IF;
		  END IF;
   END;
    
   
	/* ====================================================================== 
  /* SETTING REPORT_OBJECT_PROPERTIES PARAMETER, OVERWRITING THE DEFAULT */
  /* ===================================================================== 
 		SetDesname, SetDestype, setCommunicationMode, SetOthers */
	  
	PROCEDURE setDestype (vDestype varchar2)IS
	BEGIN
	 if (upper(vDestype) in ('MAIL','FILE','PRINTER','CACHE')) then
	 		rp2rroDestype := vDestype;
	 else 
	 		-- default
	 	 message(vDestype||' is not a valid destination');
	 end if;
  END;
  
  -- desname is normally is left empty because a Report printed to teh cache doe not need to specify a desname. To send the Report Output to the 
  -- printer, desname holds the name of the network printer. This procedure does not check if the specified printer is accessible
  
  PROCEDURE setDesname (vDesname varchar2) IS
  BEGIN
 	 rp2rroDesname := vDesname;
  END;
  
  -- Communication mode can be set to Synchronous (default) or Asynchronous. The latter case doesn't provide the Reports success status to the 
  -- Forms application so that errors with e.g. printing a Report output are not displayed in the Forms message bar
  
  PROCEDURE setCommunicationMode (vCommMode Number) IS
  BEGIN
   if (vCommMode in (SYNCHRONOUS, ASYNCHRONOUS)) then 
   		rp2rroComm_mode  := vCommMOde;
   else
   	-- default
   	message('not a valid communication mode');
    null;
   end if;
  END;
  
  -- Change Reports Server
  
  PROCEDURE setReportsServer (vReportServer varchar2) IS
  BEGIN
  	 rp2rroReportServer := vReportServer;
  END;
	
	  -- change the Reports output format HTMLCSS, HTML, PDF, RTF, DELIMITED, XML
  PROCEDURE setDesformat (vDesformat varchar2)IS
  BEGIN
  	if (upper(vDesformat) in ('HTML','HTMLCSS','PDF','XML','DELIMITED','RTF','ASCII','PS','PCL','SPREADSHEET')) then --Fix SCR 6526--Madhu--16-02-2015
  		rp2rroDesformat := vDesformat;
  	else
  		-- stay with the default
  		message(vDesformat ||'is not a valid desformat');
  	end if;
  END;
	
	-- Others is used to set additional Reports Parameters like "deptno=10" or "pagestream=yes". This can be used with all custom Reports Parameters. This procedure 
  -- does not check the passed parameters for validness
  
  PROCEDURE setOthers (vOthers varchar2) IS
  BEGIN
  	 rp2rroReportOther :=vOthers;
  END;
   
  /*PARAMETER SETTTINGS*************************************************************************************************/
  -- <better comments here >
  -- Anonymous block that does the initialization This will only fire the very first time the package is called
  -- so if PLLs are shared we have nothing to do. If PLLs are not shared then this code will run and we can get 
  -- the setup info from globals.

BEGIN 
	
/* Global settings 
   -------------------
  This section sets the default values for the parameters used with Run_Report_Object. If a Form is opened by call_form,
  new_form or open_form then we try to read the settings from global parameters first. This is to save the state of
  user defined parameter settings across module navigation 
 */

	 DEFAULT_VALUE('_','GLOBAL.rp2rroDesformat');
	  IF name_in('GLOBAL.rp2rroDesformat') = '_' THEN
	 	  rp2rroDesformat := lower(name_in('PARAMETER.rp2rroDesformat'));
	 	  COPY(lower(name_in('PARAMETER.rp2rroDesformat')),'GLOBAL.rp2rroDesformat');
	  ELSE
	 	  rp2rroDesformat:= lower(name_in('GLOBAL.rp2rroDesformat'));
	  END IF;
	  
	 DEFAULT_VALUE('_','GLOBAL.rp2rroDesname');
	  IF name_in('GLOBAL.rp2rroDesname') = '_' THEN
	 	  rp2rroDesname := lower(name_in('PARAMETER.rp2rroDesname'));
	 	  COPY(lower(name_in('PARAMETER.rp2rroDesname')),'GLOBAL.rp2rroDesname');
	  ELSE
	 	  rp2rroDesname:= lower(name_in('GLOBAL.rp2rroDesname'));
	  END IF;
	  
	 DEFAULT_VALUE('_','GLOBAL.rp2rroDestype');
	  IF name_in('GLOBAL.rp2rroDestype') = '_' THEN
	 	  rp2rroDestype := lower(name_in('PARAMETER.rp2rroDestype'));
	 	  COPY(lower(name_in('PARAMETER.rp2rroDestype')),'GLOBAL.rp2rroDestype');
	  ELSE
	 	  rp2rroDestype:= lower(name_in('GLOBAL.rp2rroDestype'));
	  END IF;
	 
	 DEFAULT_VALUE('_','GLOBAL.rp2rroReportServer');
	  IF name_in('GLOBAL.rp2rroReportServer') = '_' THEN
	 	  rp2rroReportServer := name_in('PARAMETER.rp2rroReportServer');
	 	  COPY(name_in('PARAMETER.rp2rroReportServer'),'GLOBAL.rp2rroReportServer');
	  ELSE
	 	  rp2rroReportServer:= name_in('GLOBAL.rp2rroReportServer');
	  END IF;
	 
	 DEFAULT_VALUE('_','GLOBAL.rp2rroVirtualDir');
	  IF name_in('GLOBAL.rp2rroVirtualDir') = '_' THEN
	 	  rp2rroVirtualDir := name_in('PARAMETER.rp2rroVirtualDir');
	 	  COPY(name_in('PARAMETER.rp2rroVirtualDir'),'GLOBAL.rp2rroVirtualDir');
	  ELSE
	 	  rp2rroVirtualDir:= name_in('GLOBAL.rp2rroVirtualDir');
	  END IF;
	 
	 DEFAULT_VALUE('_','GLOBAL.rp2rroReportsInterface');
	  IF name_in('GLOBAL.rp2rroReportsInterface') = '_' THEN
	 	  rp2rroReportsInterface := name_in('PARAMETER.rp2rroReportsInterface');
	 	  COPY(name_in('PARAMETER.rp2rroReportsInterface'),'GLOBAL.rp2rroReportsInterface');
	  ELSE
	 	  rp2rroReportsInterface:= name_in('GLOBAL.rp2rroReportsInterface');
	  END IF;
	  
END rp2rro;

 updateNavdbOrc:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
-- Begin Fix - SCR 7166.00 -- Madhu --22-AUG-2016
PROCEDURE update_navdb_orc IS
	CURSOR fms_orc_cur IS
		SELECT F_ORC.DMR_ID,
			F_ORC.DEFAULT_APPLY_IND,
			F_ORC.FMS_ID,
			DMR_DESCR
		FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
		WHERE F_ORC.FMS_ID = :NavDB.FMS_ID
		AND F_ORC.DMR_ID = ORC.DMR_ID
		AND F_ORC.DEFAULT_APPLY_IND = 'Y'  									          -- SCR 5441 -- SHRIKANT K
		AND F_ORC.DM_ORC_IND = 'ORC'; -- 7773 -- SHRIKANT K -- 09-OCT-2018
	
	CURSOR navdb_orc_cur IS
		SELECT orc_id
		FROM navdb_orc
		WHERE navdb_id = :NavDB.NavDB_ID;

	CURSOR new_orc_cur IS
		SELECT dmr_id, default_apply_ind
		FROM fms_dmr
	WHERE DM_ORC_IND =  'ORC' -- 7773	-- SHRIKANT K -- 09-OCT-2018
	  AND fms_id = :NavDB.FMS_ID
		AND dmr_id NOT IN (  /*SELECT dmr_id  													--  SCR 5441 -- SHRIKANT K
					FROM fms_dmr
					WHERE FMS_ID = :NavDB.Old_FMS_ID AND DM_ORC_IND = 'ORC' -- 7773/8018 -- SHRIKANT K -- 09-OCT-2018
				  */
				  SELECT orc_id  																			    -- SCR 5441 -- SHRIKANT K 
					FROM navdb_orc																			    -- SCR 5441 -- SHRIKANT K
					WHERE navdb_id = :NavDB.navdb_id AND DM_ORC_IND = 'ORC' -- SCR 5441 -- SHRIKANT K
				  );

	TYPE orc_array IS TABLE OF VARCHAR2(6)
	INDEX BY BINARY_INTEGER;

	orc_tab ORC_ARRAY;
	i_idx NUMBER := 0;

	n_orc navdb_orc.orc_id%TYPE;

	ls_sqlerrm VARCHAR2(240);
	ls_sqlcode NUMBER;

BEGIN

	OPEN navdb_orc_cur;
	LOOP
		FETCH navdb_orc_cur INTO n_orc;
		EXIT WHEN navdb_orc_cur%NOTFOUND;

		FOR rec IN fms_orc_cur LOOP
			IF n_orc = rec.dmr_id THEN
				i_idx:=i_idx+1;
				orc_tab(i_idx) := rec.dmr_id;
			END IF;
		END LOOP;
	END LOOP;
	CLOSE navdb_orc_cur;
	
  	DELETE FROM NAVDB_ORC
  	WHERE NAVDB_ID = :NAVDB.NAVDB_ID;
	
	IF orc_tab.COUNT>0 THEN
		FOR i IN 1..orc_tab.COUNT LOOP
			INSERT INTO navdb_orc VALUES ( orc_tab(i), :NavDB.NavDB_ID, NULL, :global.dcr_number, USER, SYSDATE, 'Y');
		END LOOP;

		FOR rec IN new_orc_cur LOOP
			IF rec.default_apply_ind = 'Y' THEN
				INSERT INTO navdb_orc VALUES (rec.dmr_id, :NavDB.NavDB_ID, NULL, :global.dcr_number, USER, SYSDATE, 'Y');
			END IF;
		END LOOP;
	ELSE
		FOR rec IN fms_orc_cur LOOP
			IF rec.default_apply_ind = 'Y' THEN
				INSERT INTO navdb_orc VALUES (rec.dmr_id, :NavDB.NavDB_ID, NULL, :global.dcr_number, USER, SYSDATE, 'Y');
			END IF;
		END LOOP;
	END IF;
	
	FORMS_DDL('COMMIT');

EXCEPTION
	WHEN others THEN
		FORMS_DDL('ROLLBACK');
		ls_sqlerrm:=SQLERRM;
		ls_sqlcode:=SQLCODE;
		dsp_msg('ORC Creation Failed due to '||ls_sqlcode||' : '||ls_sqlerrm); 

	 
END;
-- End Fix - SCR 7166.00 --Madhu --22-AUG-2016
-- END Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 modificationHistory:
PROCEDURE Modification_History IS
BEGIN
  NULL;
  
/*
---------------------------------------------------------------------------------------------------------
Modification History:

 Sno			Date					SCR			Programmer			Generation				Changes Summary
---------------------------------------------------------------------------------------------------------
	1			16-Mar-2017		7402.00 	Imran							277							Reverted changes of scr 7159 upon gen 273
																																	as scr 7159 is not part of 296 build
	2			16-Mar-2017		7159.00 	Harikrishna Ch		278							Updated to disable the Export data functionality.
	3			22-Mar-2017		7159.00 	Harikrishna Ch		281							Updated to disable the Export data functionality again due to Merge issues with other scr.
	4     23-Mar-2017   7016.01   Ashish N          282             Added Airport Sel/DSL Count field in airport group tab to display selected airport count
  5			09-May-2017		7143.01 	Eswar KC				  283   					
  6			09-May-2017		7415.00 	Eswar KC				  284   					Not checking the DCR Association for ENGineeiring instance
---------------------------------------------------------------------------------------------------------
*/

END;

 saveIncExcList:
--BEGIN FIX SCR 7259.01 -- VENKAT M - 15-AUG-2017
PROCEDURE SAVE_INC_EXC_LIST IS
	trg_record number;
	cur_record number;
	v_value_1 varchar2(30);
	v_value_2 varchar2(30);
	v_value_3 varchar2(30);
	v_value_4 varchar2(30);
	v_value_5 varchar2(30);
	v_value_6 varchar2(30);
	v_value_7 varchar2(30);
	v_val_chk varchar2(30);
	no_of_vals number;
	v_timer_id timer;  --mvr
	rec_count number := 0;  --mvr
	v_value varchar2(200);
begin
for i in 1..:DATATYP_RAD.list_no LOOP
  	v_value := v_value||name_in('lists.value_'||to_char(i));
end loop;
GO_BLOCK('LISTS');
first_record;
if v_value is not null or
	(v_value is null and :system.last_record = 'FALSE') then
	LOOP
		rec_count := rec_count + 1;
		CHECK_LISTS_REC_VAL;  --scr 7259 RECORD LEVEL VALIDATION
	EXIT WHEN :SYSTEM.LAST_RECORD='TRUE';
			NEXT_RECORD;
	END LOOP;
	first_record;
	trg_record := :system.cursor_record;  
	v_value_1 := :LISTS.VALUE_1;
	v_value_2 := NVL(:LISTS.VALUE_2,NULL);
	v_value_3 := NVL(:LISTS.VALUE_3,NULL);
	v_value_4 := NVL(:LISTS.VALUE_4,NULL);
	v_value_5 := NVL(:LISTS.VALUE_5,NULL);
	v_value_6 := NVL(:LISTS.VALUE_6,NULL);
	v_value_7 := NVL(:LISTS.VALUE_7,NULL);
	no_of_vals := :DATATYP_RAD.LIST_NO;
	:parameter.DUP_LISTS_REC := 0; 
	LOOP
			IF trg_record <> :system.cursor_record THEN
					cur_record := :system.cursor_record;
					IF no_of_vals = 2 THEN
							IF :LISTS.VALUE_1 LIKE v_value_1 or v_value_1 LIKE :LISTS.VALUE_1 THEN
								IF :LISTS.VALUE_2 LIKE v_value_2 or v_value_2 LIKE :LISTS.VALUE_2 THEN
										DISPLAY_ALERT.ONE_BUTTON('S','Duplicate Record ', 'Modify or Delete the Duplicate Record(s). '
  													                                                  ||'Record '||:LISTS.VALUE_1||','||:LISTS.VALUE_2
											                                                        ||' Compared with '||v_value_1||','||v_value_2||'.'); --then																																																								
										:parameter.DUP_LISTS_REC := 1; 
										 go_record(trg_record); 
										 raise form_trigger_failure;
								ELSE
										:parameter.DUP_LISTS_REC := 0; 
								END IF;                                
							ELSE
									:parameter.DUP_LISTS_REC := 0; -- venkat final check		
							END IF;	
					ELSIF no_of_vals = 3 THEN		
							IF :LISTS.VALUE_1 LIKE v_value_1 or v_value_1 like :LISTS.VALUE_1 THEN
								IF :LISTS.VALUE_2 LIKE v_value_2 or v_value_2 like :LISTS.VALUE_2 THEN
									IF :LISTS.VALUE_3 LIKE v_value_3 or v_value_3 like :LISTS.VALUE_3 THEN
										DISPLAY_ALERT.ONE_BUTTON('S','Duplicate Record ', 'Modify or Delete the Duplicate Record(s). '
  													                                                  ||'Record '||:LISTS.VALUE_1||','||:LISTS.VALUE_2||','||:LISTS.VALUE_3
											                                                        ||' Compared with '||v_value_1||','||v_value_2||','||v_value_3||'.'); --then																																														
										:parameter.DUP_LISTS_REC := 1; 
										 go_record(trg_record);  
										 --go_record(:system.cursor_record);  
										 raise form_trigger_failure;
									ELSE
										:parameter.DUP_LISTS_REC := 0; 
									END IF;
								ELSE
									:parameter.DUP_LISTS_REC := 0; 		
								END IF;	
							ELSE
								:parameter.DUP_LISTS_REC := 0; 		
							END IF;	
					ELSIF no_of_vals = 4 THEN		
							IF :LISTS.VALUE_1 LIKE v_value_1 or v_value_1 like :LISTS.VALUE_1 THEN
								IF :LISTS.VALUE_2 LIKE v_value_2 or v_value_2 like :LISTS.VALUE_2 THEN 
									IF NVL(:LISTS.VALUE_3,'$') LIKE NVL(v_value_3,'$') or NVL(v_value_3,'$') like NVL(:LISTS.VALUE_3,'$') THEN
										IF NVL(:LISTS.VALUE_4,'$') LIKE NVL(v_value_4,'$') or NVL(v_value_4,'$') like NVL(:LISTS.VALUE_4,'$') THEN
											DISPLAY_ALERT.ONE_BUTTON('S','Duplicate Record ', 'Modify or Delete the Duplicate Record(s). '
  													                                                  ||'Record '||:LISTS.VALUE_1||','||:LISTS.VALUE_2||','||:LISTS.VALUE_3||','||:LISTS.VALUE_4
											                                                        ||' Compared with '||v_value_1||','||v_value_2||','||v_value_3||','||v_value_4||'.'); --then																																				
											:parameter.DUP_LISTS_REC := 1; 
											 go_record(trg_record);  
											 --go_record(:system.cursor_record);  
											 raise form_trigger_failure;
										ELSE
											:parameter.DUP_LISTS_REC := 0; 
										END IF;
									ELSE
										:parameter.DUP_LISTS_REC := 0; 		
									END IF;	
								ELSE
									:parameter.DUP_LISTS_REC := 0; 		
								END IF;	
							ELSE
								:parameter.DUP_LISTS_REC := 0; 		
							END IF;	

					ELSIF no_of_vals = 5 THEN		
							IF :LISTS.VALUE_1 LIKE v_value_1 or v_value_1 like :LISTS.VALUE_1 THEN
								IF :LISTS.VALUE_2 LIKE v_value_2 or v_value_2 like :LISTS.VALUE_2 THEN
									IF :LISTS.VALUE_3 LIKE v_value_3 or v_value_3 like :LISTS.VALUE_3 THEN
										IF :LISTS.VALUE_4 LIKE v_value_4 or v_value_4 like :LISTS.VALUE_4 THEN
											IF :LISTS.VALUE_5 LIKE v_value_5 or v_value_5 like :LISTS.VALUE_5 THEN
												DISPLAY_ALERT.ONE_BUTTON('S','Duplicate Record ', 'Modify or Delete the Duplicate Record(s). '
  													                                                  ||'Record '||:LISTS.VALUE_1||','||:LISTS.VALUE_2||','||:LISTS.VALUE_3||','||:LISTS.VALUE_4||','||:LISTS.VALUE_5
											                                                        ||' Compared with '||v_value_1||','||v_value_2||','||v_value_3||','||v_value_4||','||v_value_5||'.'); --then																									
												:parameter.DUP_LISTS_REC := 1; 
												 go_record(trg_record);  
												 --go_record(:system.cursor_record);  
												 raise form_trigger_failure;
											ELSE
												:parameter.DUP_LISTS_REC := 0; 
											END IF;
										ELSE
											:parameter.DUP_LISTS_REC := 0; 		
										END IF;	
									ELSE
										:parameter.DUP_LISTS_REC := 0; 		
									END IF;	
								ELSE
									:parameter.DUP_LISTS_REC := 0; 		
								END IF;	
							ELSE
								:parameter.DUP_LISTS_REC := 0; 		
							END IF;	
					ELSIF no_of_vals = 6 THEN		
							IF :LISTS.VALUE_1 LIKE v_value_1 or v_value_1 like :LISTS.VALUE_1 THEN
								IF :LISTS.VALUE_2 LIKE v_value_2 or v_value_2 like :LISTS.VALUE_2 THEN
									IF :LISTS.VALUE_3 LIKE v_value_3 or v_value_3 like :LISTS.VALUE_3 THEN
										IF :LISTS.VALUE_4 LIKE v_value_4 or v_value_4 like :LISTS.VALUE_4 THEN
											IF :LISTS.VALUE_5 LIKE v_value_5 or v_value_5 like :LISTS.VALUE_5 THEN
												IF :LISTS.VALUE_6 LIKE v_value_6 or v_value_6 like :LISTS.VALUE_6 THEN
													DISPLAY_ALERT.ONE_BUTTON('S','Duplicate Record ', 'Modify or Delete the Duplicate Record(s). '
  													                                                  ||'Record '||:LISTS.VALUE_1||','||:LISTS.VALUE_2||','||:LISTS.VALUE_3||','||:LISTS.VALUE_4||','||:LISTS.VALUE_5||','||:LISTS.VALUE_6
											                                                        ||' Compared with '||v_value_1||','||v_value_2||','||v_value_3||','||v_value_4||','||v_value_5||','||v_value_6||'.'); --then													
													:parameter.DUP_LISTS_REC := 1; 
													 go_record(trg_record);  
													 --go_record(:system.cursor_record);  
													 raise form_trigger_failure;
												ELSE
													:parameter.DUP_LISTS_REC := 0; 
												END IF;
											ELSE
												:parameter.DUP_LISTS_REC := 0; 		
											END IF;	
										ELSE
											:parameter.DUP_LISTS_REC := 0; 		
										END IF;	
									ELSE
										:parameter.DUP_LISTS_REC := 0; 		
									END IF;	
								ELSE
									:parameter.DUP_LISTS_REC := 0; 		
								END IF;	
							ELSE
								:parameter.DUP_LISTS_REC := 0; 		
							END IF;	
					ELSIF no_of_vals = 7 THEN		
							IF :LISTS.VALUE_1 LIKE v_value_1 or v_value_1 like :LISTS.VALUE_1 THEN
								IF :LISTS.VALUE_2 LIKE v_value_2 or v_value_2 like :LISTS.VALUE_2 THEN
									IF :LISTS.VALUE_3 LIKE v_value_3 or v_value_3 like :LISTS.VALUE_3 THEN
										IF :LISTS.VALUE_4 LIKE v_value_4 or v_value_4 like :LISTS.VALUE_4 THEN
											IF :LISTS.VALUE_5 LIKE v_value_5 or v_value_5 like :LISTS.VALUE_5 THEN
												IF :LISTS.VALUE_6 LIKE v_value_6 or v_value_6 like :LISTS.VALUE_6 THEN
													IF :LISTS.VALUE_7 LIKE v_value_7 or v_value_7 like :LISTS.VALUE_7 THEN		
														DISPLAY_ALERT.ONE_BUTTON('S','Duplicate Record ', 'Modify or Delete the Duplicate Record(s). '
  													                                                  ||'Record '||:LISTS.VALUE_1||','||:LISTS.VALUE_2||','||:LISTS.VALUE_3||','||:LISTS.VALUE_4||','||:LISTS.VALUE_5||','||:LISTS.VALUE_6||','||:LISTS.VALUE_7
											                                                        ||' Compared with '||v_value_1||','||v_value_2||','||v_value_3||','||v_value_4||','||v_value_5||','||v_value_6||','||v_value_7||'.'); --then
														:parameter.DUP_LISTS_REC := 1; 
														go_record(trg_record);  
														--go_record(:system.cursor_record);  
														raise form_trigger_failure;
													ELSE
														:parameter.DUP_LISTS_REC := 0; 
													END IF;
												ELSE
													:parameter.DUP_LISTS_REC := 0; 		
												END IF;	
											ELSE
												:parameter.DUP_LISTS_REC := 0; 		
											END IF;	
										ELSE
											:parameter.DUP_LISTS_REC := 0; 		
										END IF;	
									ELSE
										:parameter.DUP_LISTS_REC := 0; 		
									END IF;	
								ELSE
									:parameter.DUP_LISTS_REC := 0; 		
								END IF;				
							ELSE
								:parameter.DUP_LISTS_REC := 0; 										
						END IF;
					END IF;		
			END IF;
				IF :system.last_record = 'TRUE' and trg_record < rec_count and :parameter.DUP_LISTS_REC = 0 THEN  --Fix SCR 7259 20-feb-2017 Venkat M
					trg_record := trg_record + 1;
					go_record(trg_record);
					v_value_1 := :LISTS.VALUE_1;
					v_value_2 := NVL(:LISTS.VALUE_2,NULL);
					v_value_3 := NVL(:LISTS.VALUE_3,NULL);
					v_value_4 := NVL(:LISTS.VALUE_4,NULL);
					v_value_5 := NVL(:LISTS.VALUE_5,NULL);
					v_value_6 := NVL(:LISTS.VALUE_6,NULL);
					v_value_7 := NVL(:LISTS.VALUE_7,NULL);
				
			ELSIF :system.last_record = 'FALSE' and :parameter.DUP_LISTS_REC = 0 THEN
				next_record;
			ELSIF :system.last_record = 'TRUE' and trg_record = rec_count THEN
				exit;
			ELSIF :parameter.DUP_LISTS_REC = 1 THEN	
					exit;
			END IF;
	END LOOP;	
	IF :parameter.DUP_LISTS_REC = 1 THEN
				go_record(:system.cursor_record);  				
				raise form_trigger_failure;
	END IF;	
ELSE
  :parameter.DUP_LISTS_REC := 0;--in case of no records
END IF;	
END;
--END Fix SCR 7259.01 Venkat M - 15-AUG-2017

 exportCsv:
PACKAGE BODY EXPORT_CSV IS
    
  FUNCTION Create_File_On_Server(file_handle out Client_Text_IO.file_type) RETURN NUMBER IS
  	l_server_path			VARCHAR2(4000);
  	l_file_nm					VARCHAR2(20) := 'sel_criteria_rep';
  	l_srv_file_sep		CHAR(1) := '/';
--  	l_File_Handle 		Client_Text_IO.file_type;
  	--the_conn_str VARCHAR2(200) := GET_APPLICATION_PROPERTY(USERNAME)||'/'||GET_APPLICATION_PROPERTY(PASSWORD)||'@'||GET_APPLICATION_PROPERTY(CONNECT_STRING); 
  BEGIN
  	l_data_file_path := Webutil_File.File_Save_Dialog('.',
								'',
								'*.csv|*.*',
								'Save File as...');
		IF l_data_file_path IS NULL THEN
			Return 1; --user selected cancel button
		ELSIF Substr(l_data_file_path,-3,3) != 'csv' THEN
			l_data_file_path := l_data_file_path||'.csv';
		END IF;
    File_Handle := Client_Text_IO.fopen(l_data_file_path, 'W');
    Return 0;
    
  END Create_File_On_Server; 
    
  PROCEDURE Export_File IS
  	l_sel_cnt VARCHAR2(4000);
  	l_count		NUMBER;
  	v_value   VARCHAR2(200) := NULL;
  	Prev_S_Seq NUMBER;
  	l_rec_count NUMBER := 0;
  	v_criteria select_criteria.criteria_id%TYPE;
  	v_select_by_id navdb_select_criteria.select_by_id%TYPE;
  	v_file_handle Client_Text_IO.file_type;
  	v_record_type_descr record_type.record_type_descr%TYPE;
	v_include_exclude_ind navdb_select_criteria.include_exclude_ind%TYPE;
  	cursor get_criteria is
		select criteria_id
		from select_criteria
		where record_type_code = :datatyp_rad.record_type_code
		and processing_order = 30;

	cursor get_select_by_id(p_criteria number,p_include_exclcude_ind varchar2) is
		select select_by_id, record_type_descr,include_exclude_ind
		from navdb_select_criteria ns, record_type rt
		where navdb_id = :navdb.navdb_id
		and ns.record_type_code = :datatyp_rad.record_type_code
		and ns.record_type_code = rt.record_type_code
		and parent_select_by_id is null
		and geo_area_id = '-2'
		--and include_exclude_ind = :DATATYP_RAD.INC_EXC_INDICATOR
		and ((p_include_exclcude_ind in ('I','X') and include_exclude_ind = :DATATYP_RAD.INC_EXC_INDICATOR)
			or (p_include_exclcude_ind ='B' and include_exclude_ind in ('I','X')))	
		and criteria_id = p_criteria;	  	

  	cursor get_header(p_select_by_id NUMBER) IS--,p_data_type VARCHAR2) IS
	  /*select value_descr 
	  from   Selection_Criteria_Value
	  where  select_by_id = p_select_by_id
	  and    value_seq = 1;*/
      select distinct identifier_column_name,display_order
      from   Selection_Criteria_Value sel, record_identifier rec
      where  select_by_id = p_select_by_id
      and    sel.value_descr = rec.identifier_column_name
      --and    identifier_table_name = ('STD_'||p_data_type
      and    record_type_code = :datatyp_rad.record_type_code
      and    value_seq = 1
      order by display_order asc;
  
	cursor Inc_Exc_Cursor(p_select_by_id NUMBER,p_include_exclude_ind VARCHAR2) is--(p_select_by_id number,p_value_seq number) is
		SELECT List_Records.S_Seq S_Seq,List_Records.S_Val S_Val, Rec_Ident.Display_Order display_order
		  FROM Record_Identifier Rec_Ident,(SELECT Scv.Value_Seq S_Seq, Scv.Value S_Val, Scv.Value_Descr
             					      FROM Selection_Criteria_Value Scv, Navdb_Select_Criteria Nsc
					              WHERE Scv.Value_Descr IN  (SELECT Identifier_Column_Name
						                                   FROM Record_Identifier
					                                          WHERE Record_Type_Code = :datatyp_rad.record_type_code)
					               and Scv.Select_By_Id = Nsc.Select_By_Id
					               and Scv.Select_By_Id = p_select_by_id
             					       and Nsc.Include_Exclude_Ind = p_include_exclude_ind) List_Records, 
         					    (SELECT Scv1.Value, Scv1.Value_Seq
					     	       FROM Selection_Criteria_Value Scv1, Navdb_Select_Criteria Nsc1
					              WHERE Value_Descr = (SELECT Identifier_Column_Name
							                      FROM Record_Identifier
							                     WHERE Record_Type_Code = :datatyp_rad.record_type_code
						        	               AND Display_Order = 1)
					               and Scv1.Select_By_Id = Nsc1.Select_By_Id
					               and Scv1.Select_By_Id = p_select_by_id)  List_Value
	    	WHERE List_Records.S_Seq = List_Value.Value_Seq
	    	AND Rec_Ident.Record_Type_Code = :datatyp_rad.record_type_code
    		AND REC_IDENT.IDENTIFIER_COLUMN_NAME = List_Records.value_descr
  		ORDER BY S_Seq asc, display_order asc; 
  	v_rec_hdr varchar2(300):= NULL;
  	ln_ret_val NUMBER := 0;
  BEGIN
		l_rec_count := 0;
		GO_BLOCK('DATATYP_RAD');
		first_record;
		GO_ITEM('DATATYP_RAD.RECORD_TYPE_DESCR');
		LOOP
			IF :DATATYP_RAD.INC_EXC_INDICATOR IN ('I','X','B') and :DATATYP_RAD.SELECT_ALL = 'Y' THEN
			  	
				open get_criteria;
				fetch get_criteria into v_criteria;
				close get_criteria;
				IF v_criteria is not null then
					FOR m in get_select_by_id(v_criteria,:DATATYP_RAD.INC_EXC_INDICATOR)
					loop
						l_rec_count := l_rec_count + 1;
			  			IF l_rec_count = 1 THEN				
								 ln_ret_val := Create_File_On_Server(v_file_handle);
								 IF ln_ret_val = 1 THEN
								 	  exit;
								 END IF;	  
							   Client_Text_IO.PUT_LINE(v_file_handle,'Exported on '||SYSDATE);
							   Client_Text_IO.PUT_LINE(v_file_handle,'NAVDB: '||:NAVDB.NAVDB_ID||' FMS ID: '||:NAVDB.FMS_ID);
							   Client_Text_IO.PUT_LINE(v_file_handle,' ');
							--Client_Text_IO.PUT_LINE (v_file_handle,m.record_type_descr||' Include Exclude Ind '||m.include_exclude_ind);--:DATATYP_RAD.INC_EXC_INDICATOR);
  							 FOR j in get_header(m.select_by_id) LOOP  
	  							IF v_rec_hdr is NULL THEN
		  							v_rec_hdr := j.identifier_column_name;
	  							ELSE	
		  							v_rec_hdr := v_rec_hdr||','||j.identifier_column_name;
	  							END IF;	
  							 END LOOP;
							   IF m.include_exclude_ind = 'I' THEN
								    Client_Text_IO.PUT_LINE(v_file_handle,'Data Type :'||	m.record_type_descr||' Include List');
							   ELSE
								    Client_Text_IO.PUT_LINE(v_file_handle,'Data Type :'||	m.record_type_descr||' Exclude List');
							   END IF;
							   Client_Text_IO.PUT_LINE (v_file_handle,v_rec_hdr);
							   v_rec_hdr := NULL;			  			
							   FOR i in Inc_Exc_Cursor(m.select_by_id,m.include_exclude_ind) LOOP
			  					 IF v_value IS NOT NULL and Prev_S_Seq is not null and Prev_S_Seq <> i.S_Seq THEN
							 		    Client_Text_IO.PUT_LINE (v_file_handle,v_value);
							 		    v_value := NULL; -- setting back to null
								   END IF;	
				  				 IF v_value is NULL THEN
				  					  v_value := i.S_Val;
				  			   ELSE	  
									    v_value := v_value||','||i.S_Val;
				  			   END IF;
				  			   Prev_S_Seq := i.S_Seq;
							   END LOOP;	  
			  				 IF V_VALUE IS NOT NULL THEN
			  					  Client_Text_IO.PUT_LINE (v_file_handle,v_value);
			  					  V_VALUE:= NULL;
			  				 END IF;								
						  ELSIF l_rec_count > 1 THEN
							  v_value := NULL;
							  Prev_S_Seq := NULL;	
  							FOR j in get_header(m.select_by_id) LOOP
	  							IF v_rec_hdr is NULL THEN
		  							v_rec_hdr := j.identifier_column_name;
	  							ELSE	
		  							v_rec_hdr := v_rec_hdr||','||j.identifier_column_name;
	  							END IF;	
  							END LOOP;	
  							Client_Text_IO.PUT_LINE(v_file_handle,' ');
							  IF m.include_exclude_ind = 'I' THEN
								  Client_Text_IO.PUT_LINE(v_file_handle,'Data Type :'||	m.record_type_descr||' Include List');
							  ELSE
								  Client_Text_IO.PUT_LINE(v_file_handle,'Data Type :'||	m.record_type_descr||' Exclude List');
							  END IF;
							  Client_Text_IO.PUT_LINE (v_file_handle,v_rec_hdr);
							  v_rec_hdr := NULL;			  			
							  FOR i in Inc_Exc_Cursor(m.select_by_id,m.include_exclude_ind) LOOP
			  					IF v_value IS NOT NULL and Prev_S_Seq is not null and Prev_S_Seq <> i.S_Seq THEN
									   Client_Text_IO.PUT_LINE (v_file_handle,v_value);
									   v_value := NULL; -- setting back to null
								  END IF;	
				  				IF v_value is NULL THEN
				  					 v_value := i.S_Val;
				  				ELSE	  
									   v_value := v_value||','||i.S_Val;
				  				END IF;
				  				Prev_S_Seq := i.S_Seq;
				  			END LOOP;	  
			  				IF V_VALUE IS NOT NULL THEN
			  					Client_Text_IO.PUT_LINE (v_file_handle,v_value);
			  					V_VALUE:= NULL;
			  				END IF;	
						END IF;	
					END LOOP;  -- CHECK
					IF ln_ret_val = 1 THEN
						 EXIT;
					END IF;						
				END IF; --CHECK		  			
				IF :SYSTEM.LAST_RECORD = 'TRUE' THEN
					exit;
				ELSE
					next_record;
				END IF;
			ELSE
				IF :SYSTEM.LAST_RECORD = 'TRUE' THEN
					exit;
				ELSE
					next_record;
				END IF;
			END IF;
		END LOOP;
		IF l_rec_count = 0 THEN
			DISPLAY_ALERT.ONE_BUTTON('S','Report Warning','Report cannot be generated,  select atleast one Datatype with Inc/Exc values for Report Generation');
		ELSIF l_rec_count >= 1 and ln_ret_val = 0 THEN
			Client_Text_IO.FClose (v_file_handle);	
			Message('Report generated Successfully.',No_Acknowledge);
		END IF;				  	  
  END Export_File;
  
  --Begin Fix SCR 6913 - Venkat M 16-FEB-2018
  PROCEDURE Export_vldt_tab_rep IS
  	l_sel_cnt VARCHAR2(4000);
  	l_count		NUMBER;
  	v_value   VARCHAR2(200) := NULL;
  	Prev_S_Seq NUMBER;
  	l_rec_count NUMBER := 0;
  	v_criteria select_criteria.criteria_id%TYPE;
  	v_select_by_id navdb_select_criteria.select_by_id%TYPE;
  	v_file_handle Client_Text_IO.file_type;
  	v_record_type_descr record_type.record_type_descr%TYPE;
	  v_include_exclude_ind navdb_select_criteria.include_exclude_ind%TYPE;
  	cursor get_criteria is
		select criteria_id
		from select_criteria
		where record_type_code = :datatyp_rad.record_type_code
		and processing_order = 30;

  	cursor Aptgrp_Cursor IS
  	   SELECT distinct Data_Type_Desc,Type_id,Ident,Icao,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='AIRPORT_GROUP'
        ORDER BY Type_Id,Ident;

    --Begin Fix SCR 7257.01 -24-Apr-2018
    cursor Apt_Grp_Hdr_Cursor IS
  	   SELECT distinct List_Str  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='APT_GROUP_RW_HDR'
          AND ROWNUM = 1;

    cursor Apt_Grp_List_Cursor IS
  	   SELECT distinct Type_Id,List_Str,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='APT_GROUP_RW_LIST'
        ORDER BY Type_Id,List_Str;
    --End Fix SCR 7257.01 -24-Apr-2018

  	cursor Heligrp_Cursor IS
  	   SELECT distinct Data_Type_Desc,Type_id,Ident,Icao,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='HELIPORT_GROUP'
        ORDER BY Type_Id,Ident;

  	cursor Geo_Cursor IS
  	   SELECT distinct Data_Type_Desc,Type_id,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='GEO';

  	cursor Icao_Cursor IS
  	   SELECT distinct Data_Type_Desc,Type_id,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='ICAO'
        ORDER BY Type_id;

    cursor Area_Cursor IS
  	   SELECT distinct Data_Type_Desc,Type_id,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='AREA'
        ORDER BY Type_id;
       
    cursor Default_Crit_Cursor IS
       SELECT distinct Data_Type,Data_Type_desc,Ident,msg     
         FROM tmp_for_load_vld_tab
        WHERE Rec_Type is NULL
        ORDER BY Data_Type,Ident;

    cursor Lists_Hdr_Cursor IS
  	   SELECT distinct Data_Type,Data_Type_Desc,List_Str  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='LISTS_HDR'
        ORDER BY Data_Type;

    cursor Lists_Cursor(p_data_type VARCHAR2) IS
  	   SELECT distinct Data_Type,Data_Type_Desc,List_Str,Msg  --can only single record be inserted into the table, we are getting duplicates to included distinct
  	     FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type='LISTS'
          AND Data_Type = p_data_type
        ORDER BY Data_Type,List_Str;

    cursor Media_Cursor IS
      SELECT msg
        FROM TMP_FOR_LOAD_VLD_TAB
        WHERE Rec_Type = 'MEDIA';

    cursor Dup_Rec_Hdr_Cursor IS
       SELECT distinct Data_Type,Data_Type_desc,List_str,msg     
         FROM tmp_for_load_vld_tab
        WHERE Rec_Type = 'DUPREC_HDR'
        ORDER BY Data_Type;
        
    cursor Dup_Rec_Cursor(p_data_type VARCHAR2) IS
       SELECT distinct Data_Type,Data_Type_desc,List_str,msg     
         FROM tmp_for_load_vld_tab
        WHERE Rec_Type = 'DUPREC'
          AND Data_Type = p_data_type
        ORDER BY Data_Type,List_str;       

  	ln_rec_cnt NUMBER := 0;  
    ln_ret_val NUMBER := 0;  	
    ls_Data_Type_Desc Tmp_For_Load_Vld_Tab.Data_Type_Desc%TYPE;
    ls_Type_Id Tmp_For_Load_Vld_Tab.Type_Id%TYPE;
    ls_Ident Tmp_For_Load_Vld_Tab.Ident%TYPE;
    ls_Icao Tmp_For_Load_Vld_Tab.Icao%TYPE;
    ls_Msg Tmp_For_Load_Vld_Tab.Msg%TYPE;
    ln_rec_begin NUMBER := 0;
    ln_rec_chk NUMBER := 0;
    ln_prev_data_type tmp_for_load_vld_tab.data_type%TYPE;
    ln_number NUMBER := 0;
  BEGIN
          
  	GO_BLOCK('VALIDATION_RESULT');
  	FIRST_RECORD;  --Fix SCR 7257.01.01 - Venkat M 24-Apr-2018
  	GO_ITEM('VALIDATION_RESULT.RUNTIME_MESSAGE');
  	
  	IF :PARAMETER.VLDT_REPORT = 0 THEN --:VALIDATION_RESULT.RUNTIME_MESSAGE IS NULL THEN  -- Fix SCR 7257.01.01 - Venkat M 24-Apr-2018
  	 	 DSP_MSG('No Records to Export');
  	ELSE
  		 ln_ret_val := Create_File_On_Server(v_file_handle);
			 IF ln_ret_val = 1 THEN
			 	  NULL;
			 ELSE	  
			   Client_Text_IO.PUT_LINE(v_file_handle,'Exported on,'||SYSDATE);
			   Client_Text_IO.PUT_LINE(v_file_handle,'NAVDB:,'||:NAVDB.NAVDB_ID);
			   Client_Text_IO.PUT_LINE(v_file_handle,'FMS ID:, '||:NAVDB.FMS_ID);
			   ln_rec_begin := 0;
  	     ln_rec_begin := 0;
  	     for i in Aptgrp_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF ln_rec_begin = 1 THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'AIRPORT GROUP');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'AIRPORT GROUP,AIRPORT IDENT,AIRPORT ICAO,MESSAGE');
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Ident||','||i.Icao||','||i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Ident||','||i.Icao||','||i.Msg);
  	   	    ELSE
  	   	       --Client_Text_IO.PUT_LINE(v_file_handle,i.Ident||','||i.Icao||','||i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Ident||','||i.Icao||','||i.Msg);
  	   	    END IF;
  	     end loop;
         
         --Begin Fix SCR 7257.01 -24-Apr-2018
  	     ln_rec_begin := 0;
  	     for i in Apt_Grp_Hdr_Cursor -- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    --IF i.Data_Type <> NVL(ln_prev_data_type,'$') THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Data_Type_Desc||','||i.list_str);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.list_str||',MESSAGE');
  	   	    --END IF;
  	   	    --ln_prev_data_type := i.Data_Type;
  	     
  	        ln_rec_begin := 0;
  	        --ln_prev_data_type := NULL;
  	        for j in Apt_Grp_List_Cursor -- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	        loop
  	   	      ln_rec_chk := 1;
  	   	      ln_rec_begin := ln_rec_begin + 1;
  	   	         --Client_Text_IO.PUT_LINE(v_file_handle,j.Data_Type_Desc||','||j.list_str||','||j.Msg);
  	   	         Client_Text_IO.PUT_LINE(v_file_handle,j.Type_Id||','||j.list_str||','||j.Msg);
  	        end loop;  	     
  	      end loop;  --hdr closure  
         --End Fix SCR 7257.01 -24-Apr-2018
  	     ln_rec_begin := 0;
  	     for i in Heligrp_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF ln_rec_begin = 1 THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'HELIPORT GROUP');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'HELIPORT GROUP,HELIPORT IDENT,HELIPORT ICAO,DATA TYPE,MESSAGE');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Ident||','||i.Icao||','||i.Data_Type_Desc||','||i.Msg);
  	   	    ELSE
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Ident||','||i.Icao||','||i.Data_Type_Desc||','||i.Msg);
  	   	    END IF;
  	     end loop;

  	     ln_rec_begin := 0;
  	     for i in Geo_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF ln_rec_begin = 1 THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'GEO AREA');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'GEO AREA,DATA TYPE,MESSAGE');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	    ELSE
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	    END IF;
  	     end loop;

  	     ln_rec_begin := 0;
  	     for i in Icao_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF ln_rec_begin = 1 THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'ICAO CODE');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'ICAO CODE,MESSAGE');
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Msg);
  	   	    ELSE
  	   	       --Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Msg);
  	   	    END IF;
  	     end loop;

  	     ln_rec_begin := 0;
  	     for i in Area_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF ln_rec_begin = 1 THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'AREA CODE');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'AREA CODE,DATA TYPE,MESSAGE');
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Msg);
  	   	    ELSE
  	   	       --Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Msg);
  	   	    END IF;
  	     end loop;  	     

  	     ln_rec_begin := 0;
  	     ln_prev_data_type := NULL;
  	     for i in Default_Crit_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF i.Data_Type <> NVL(ln_prev_data_type,'$') THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'DATA TYPE,'||i.Data_Type_Desc);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'IDENT,MESSAGE');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Ident||','||i.Msg);
  	   	    ELSE
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Ident||','||i.Msg);
  	   	    END IF;
  	   	    ln_prev_data_type := i.Data_Type;
  	     end loop;  	     

  	     --ln_rec_begin := 0;
  	     ln_prev_data_type := NULL;
  	     for i in Lists_Hdr_Cursor -- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    --IF i.Data_Type <> NVL(ln_prev_data_type,'$') THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'DATA TYPE,'||i.Data_Type_Desc);
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Data_Type_Desc||','||i.list_str);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.list_str||',MESSAGE');
  	   	    --END IF;
  	   	    --ln_prev_data_type := i.Data_Type;
  	     
  	        ln_rec_begin := 0;
  	        --ln_prev_data_type := NULL;
  	        for j in Lists_Cursor(i.Data_Type) -- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	        loop
  	   	      ln_rec_chk := 1;
  	   	      ln_rec_begin := ln_rec_begin + 1;
  	   	         --Client_Text_IO.PUT_LINE(v_file_handle,j.Data_Type_Desc||','||j.list_str||','||j.Msg);
  	   	         Client_Text_IO.PUT_LINE(v_file_handle,j.list_str||','||j.Msg);
  	        end loop;  	     
  	      end loop;  --hdr closure  


  	     ln_rec_begin := 0;
  	     for i in Media_Cursor-- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    IF ln_rec_begin = 1 THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 Client_Text_IO.PUT_LINE('MEDIA');
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,'MESSAGE');
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.Msg);
  	   	    ELSE
  	   	       --Client_Text_IO.PUT_LINE(v_file_handle,i.Type_Id||','||i.Data_Type_Desc||','||i.Msg);
  	   	       Client_Text_IO.PUT_LINE(v_file_handle,i.Msg);
  	   	    END IF;
  	     end loop;  	     

  	     --ln_rec_begin := 0;
  	     ln_prev_data_type := NULL;
  	     ln_number := 0;
  	     for i in Dup_Rec_Hdr_Cursor -- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	     loop
  	     	  ln_number := ln_number + 1;
  	   	    ln_rec_chk := 1;
  	   	    ln_rec_begin := ln_rec_begin + 1;
  	   	    --IF i.Data_Type <> NVL(ln_prev_data_type,'$') THEN
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,' ');
  	   	    	 IF ln_number = 1 THEN
  	   	    	   Client_Text_IO.PUT_LINE(v_file_handle,'Duplicate Record Details');
  	   	    	 END IF;
  	   	    	 Client_Text_IO.PUT_LINE(v_file_handle,'DATA TYPE,'||i.Data_Type_Desc);
  	   	  	   --Client_Text_IO.PUT_LINE(v_file_handle,i.Data_Type_Desc||','||i.list_str);
  	   	  	   Client_Text_IO.PUT_LINE(v_file_handle,i.list_str||',MESSAGE');
  	   	    --END IF;
  	   	    --ln_prev_data_type := i.Data_Type;
  	     
  	        ln_rec_begin := 0;
  	        --ln_prev_data_type := NULL;
  	        for j in Dup_Rec_Cursor(i.Data_Type) -- into  ls_Data_Type_Desc,ls_Type_Id,ls_Ident,ls_Icao,ls_Msg;
  	        loop
  	   	      ln_rec_chk := 1;
  	   	      ln_rec_begin := ln_rec_begin + 1;
  	   	         --Client_Text_IO.PUT_LINE(v_file_handle,j.Data_Type_Desc||','||j.list_str||','||j.Msg);
  	   	         Client_Text_IO.PUT_LINE(v_file_handle,j.list_str||','||j.Msg);
  	        end loop;  	     
  	      end loop;  --hdr closure  

  	     IF ln_rec_chk = 1 THEN
  	        Client_Text_IO.FClose (v_file_handle);	
			      Message('Report generated Successfully.',No_Acknowledge);
  	     ELSE
  	     	  Client_Text_IO.FClose (v_file_handle);	
		     END IF;			
			 END IF; 
		END IF;	 
	EXCEPTION
		WHEN OTHERS THEN
		  Client_Text_IO.FClose (v_file_handle);	
			  	  
  END Export_vldt_tab_rep;
  --End Fix SCR 6913 - Venkat M 16-FEB-2018
    
  -- Begin Fix SCR --05684 -- Venkat M 18-May-2020
  PROCEDURE General_criteria(p_file_handle Client_Text_IO.file_type) IS
		v_selectable  varchar2(1);
		v_apply_int varchar2(1);
		v_apply_cnt number := 0;	
		v_fms_id    varchar2(30);
		v_yes       varchar2(1);
		rec_count     NUMBER := 0;
		ls_string   varchar2(100);
		cursor get_criteria_id is
			select CRITERIA_ID, CRITERIA_DESCR 
	  		from General_criteria;	
	
		cursor get_gen_criteria_value is
			select value_descr
				from navdb_general_criteria_value
			 where navdb_id = :navdb.navdb_id
			   and criteria_id = 4; 
	begin
  	select fms_id into v_fms_id
  		from navdb
  	 where navdb_id =:navdb.navdb_id;
  	-- 
 	 	for rec in get_criteria_id loop
  	  begin
  		  select selectable_ind into v_selectable
			    From FMS_GENERAL_CRITERIA	fgc	
			   where  Criteria_id = rec.CRITERIA_ID
			     and exists (select 1 from flight_management_system
	 			          where fms_id = :navdb.fms_id
	 			          and fms_id   = fgc.fms_id);	
  	  exception
  		  when no_data_found then
  		   exit;
  	  end;	
			if v_selectable = 'Y' then
				begin
					select count(apply_ind)
						into v_apply_cnt
						from navdb_general_criteria
					 where navdb_id = :navdb.navdb_id
						 and criteria_id = REC.CRITERIA_ID
						 and apply_ind = 'Y';
					if v_apply_cnt = 1 then
						if :PARAMETER.GENERAL_CRITERIA is null then
							:PARAMETER.GENERAL_CRITERIA := REC.CRITERIA_DESCR;
						else	
					  	:PARAMETER.GENERAL_CRITERIA := :PARAMETER.GENERAL_CRITERIA||chr(10)||','||REC.CRITERIA_DESCR;
						end if;  
						IF REC.CRITERIA_ID = 4 THEN
							for rec1 in get_gen_criteria_value loop	
								:PARAMETER.GENERAL_CRITERIA := :PARAMETER.GENERAL_CRITERIA||chr(10)||','||REPLACE(REC1.value_descr,',','/');
							end loop;		
						END IF;
					end if;  
				exception
					when no_data_found then
							v_apply_cnt := 0;
				end;	
			end if;	
		end loop;
	end General_criteria;
  	
  PROCEDURE Export_Selection_Criteria IS
  	l_sel_cnt VARCHAR2(4000);
  	l_count		NUMBER;
  	v_value   VARCHAR2(200) := NULL;
  	Prev_S_Seq NUMBER;
  	l_rec_count NUMBER := 0;
  	v_criteria select_criteria.criteria_id%TYPE;
  	v_select_by_id navdb_select_criteria.select_by_id%TYPE;
  	v_file_handle Client_Text_IO.file_type;
  	v_record_type_descr record_type.record_type_descr%TYPE;
	  v_include_exclude_ind navdb_select_criteria.include_exclude_ind%TYPE;
	  
  	cursor get_criteria is
		select criteria_id
		from select_criteria
		where record_type_code = :datatyp_rad.record_type_code
		and processing_order = 30;

		cursor gen_crit is select a.select_by_id, a.record_type_code, a.criteria_id, a.include_exclude_ind,
          b.criteria_descr, c.record_type_descr
		from   navdb_select_criteria a,
          select_criteria b,
          record_type    c
		where a.navdb_id = :navdb.navdb_id
			and    geo_area_id = -1
			and    parent_select_by_id is null
			and    a.criteria_id = b.criteria_id
			and   a.record_type_code = c.record_type_code
		order by 2;

 		cursor gen_crit_rule(p_select_by_id navdb_select_criteria.select_by_id%type) is 
 		select a.select_by_id dcc_sel_by_id, a.record_type_code dcc_rec_type_code,
			 a.criteria_id dcc_crit_id,a.include_exclude_ind dcc_inc_excl_ind,
       b.criteria_descr dcc_crit_desc, c.record_type_descr dcc_rec_type_descr, a.parent_select_by_id dcc_parent_id
			from   navdb_select_criteria a,
          select_criteria b,
          record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and  geo_area_id = -1
			 and  a.criteria_id = b.criteria_id
			 and  a.record_type_code = c.record_type_code
			 and a.parent_select_by_id = p_select_by_id
			 and  a.include_exclude_ind in ('I','X')
		order by 2;

		CURSOR gen_crit_rule1(p_select_by_id navdb_select_criteria.select_by_id%type) is
		select select_by_id dccv_sel_by_id, value_descr dccv_value_descr, 
     value dccv_value
			from selection_criteria_value
		 where select_by_id = p_select_by_id
		order by value_seq;

		CURSOR supp_cur is
		select a.select_by_id sup_selbyid, a.record_type_code sup_rtc, a.criteria_id sup_criteria_id, 
           decode(a.include_exclude_ind, 'I','Include',null) sup_incexci,
           b.criteria_descr sup_criteria_descr, c.record_type_descr sup_rec_descr
  	  from navdb_select_criteria a,
           select_criteria b,
           record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and a.criteria_id in (select criteria_id from select_criteria where criteria_descr like '%SUPPL%')
			 and a.criteria_id = b.criteria_id
			 and a.record_type_code = c.record_type_code
			 and a.geo_area_id = -1
		order by 2;

		CURSOR geo_area_cur is
		select select_by_id g_selbyid,
           geo_area_name  g_geo_area_name,
           include_exclude_ind g_incexcl
			from select_by_geographic_area
		 where navdb_id = :navdb.navdb_id
		order by 1;

		CURSOR geo_area_point(p_select_by_id geographic_area_point.select_by_id%TYPE) is
		select select_by_id geop_selbyid,
           sequence_number geop_seqn,
           latitude ,
           longitude
			from geographic_area_point
		 where select_by_id = p_select_by_id
		order by 2;

		CURSOR cur_geo_sel_rule(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select a.select_by_id gc_select_by_id, a.record_type_code gc_record_type_code, a.criteria_id gc_criteria_id, a.include_exclude_ind gc_incexcl,
           b.criteria_descr gc_criteria_desc, c.record_type_descr gc_record_type_descr, a.geo_area_id gc_geo_area_id
			from navdb_select_criteria a,
           select_criteria b,
           record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and a.parent_select_by_id is null
			 and a.criteria_id = b.criteria_id
			 and geo_area_id = p_select_by_id
			 and a.record_type_code = c.record_type_code
		order by 2;

		CURSOR cur_geo_sel_rule1(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select a.select_by_id gcc_sel_by_id, a.record_type_code gcc_rec_type_code,a.criteria_id gcc_crit_id, 
           a.include_exclude_ind gcc_inc_excl_ind,b.criteria_descr gcc_crit_desc,
           c.record_type_descr gcc_rec_type_descr, a.parent_select_by_id gcc_parent_id
		  from navdb_select_criteria a,
           select_criteria b,
           record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and a.criteria_id = b.criteria_id
			 and a.record_type_code = c.record_type_code
			 and parent_select_by_id = p_select_by_id
			 and a.include_exclude_ind in ('I','X')
		order by 2;

		CURSOR cur_geo_sel_val(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select select_by_id gccv_sel_by_id, value_descr gccv_value_descr,value gccv_value
			from selection_criteria_value
		 where select_by_id = p_select_by_id
		order by value_seq;

		CURSOR cur_sel_area is 
		  select select_by_id ac_selbyid,
        		 area_code  ac_area_code,
        		 include_exclude_ind ac_incexcl
				from select_by_area
			 where navdb_id = :navdb.navdb_id
			order by 2;

   CURSOR cur_sel_area_crit(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
   select a.select_by_id acc_select_by_id, a.record_type_code acc_record_type_code, 
       		a.criteria_id acc_criteria_id, a.include_exclude_ind acc_incexcl,
       		b.criteria_descr acc_criteria_desc, c.record_type_descr acc_record_type_descr, a.area_code_id acc_area_code_id
		 from navdb_select_criteria a,
       		select_criteria b,
       		record_type    c
		where a.navdb_id = :navdb.navdb_id
			and a.parent_select_by_id is null
			and a.criteria_id = b.criteria_id
			and area_code_id = p_select_by_id
			and a.record_type_code = c.record_type_code
		order by 2;

		CURSOR cur_sel_area_crit1(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select a.select_by_id accc_sel_by_id, a.record_type_code accc_rec_type_code,
       		 a.criteria_id accc_crit_id, a.include_exclude_ind accc_inc_excl_ind,
       		 b.criteria_descr accc_crit_desc, c.record_type_descr accc_rec_type_descr, 
       		 a.parent_select_by_id accc_parent_id
			from navdb_select_criteria a,
       		 select_criteria b,
       		 record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and a.criteria_id = b.criteria_id
			 and a.record_type_code = c.record_type_code
       and parent_select_by_id = p_select_by_id
			 and a.include_exclude_ind in ('I','X')
		order by 2;

		CURSOR cur_sel_area_crit_val(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select select_by_id acccv_sel_by_id, value_descr acccv_value_descr,value acccv_value
			from selection_criteria_value
			 where select_by_id = p_select_by_id
		order by value_seq;

		CURSOR cur_sel_icao is
		select select_by_id ic_selbyid,
        	 icao_code  ic_icao_code,
        	 include_exclude_ind ic_incexcl
			from select_by_icao
		 where navdb_id = :navdb.navdb_id
		order by 2;

		CURSOR cur_sel_icao_crit(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select a.select_by_id icc_select_by_id, a.record_type_code icc_record_type_code, 
       		 a.criteria_id icc_criteria_id, a.include_exclude_ind icc_incexcl,
       		 b.criteria_descr icc_criteria_desc, c.record_type_descr icc_record_type_descr, a.icao_code_id icc_icao_code_id
			from navdb_select_criteria a,
       		 select_criteria b,
       		 record_type c
		 where a.navdb_id = :navdb.navdb_id
		 	 and a.parent_select_by_id is null
			 and a.criteria_id = b.criteria_id
			 and icao_code_id = p_select_by_id
			 and a.record_type_code = c.record_type_code
		order by 2;

		CURSOR cur_sel_icao_crit1(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select a.select_by_id iccc_sel_by_id, a.record_type_code iccc_rec_type_code,
       		 a.criteria_id iccc_crit_id, a.include_exclude_ind iccc_inc_excl_ind,
       		 b.criteria_descr iccc_crit_desc, c.record_type_descr iccc_rec_type_descr, 
       		 a.parent_select_by_id iccc_parent_id
		  from navdb_select_criteria a,
       		 select_criteria b,
       		 record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and a.criteria_id = b.criteria_id
			 and a.record_type_code = c.record_type_code
			 and parent_select_by_id = p_select_by_id
			 and a.include_exclude_ind in ('I','X')
		order by 2;

		CURSOR cur_sel_icao_crit_val(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select select_by_id icccv_sel_by_id, value_descr icccv_value_descr, 
           value icccv_value
		  from selection_criteria_value
		 where select_by_id = p_select_by_id
		order by value_seq;

	  CURSOR cur_aptgrp is	
		select select_by_id ag_selbyid,
        	 group_name  ag_group_name,
        	 include_exclude_ind ag_incexcl
		  from select_by_airport_group
		 where navdb_id = :navdb.navdb_id
		order by 2;

	 CURSOR cur_aptgrp_sel_crit(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
	 select a.select_by_id agc_select_by_id, a.record_type_code agc_record_type_code, 
       		a.criteria_id agc_criteria_id, a.include_exclude_ind agc_incexcl,
       		b.criteria_descr agc_criteria_desc, c.record_type_descr agc_record_type_descr, a.airport_group_id agc_airport_group_id
		 from navdb_select_criteria a,
       		select_criteria b,
       		record_type    c
		where a.navdb_id = :navdb.navdb_id
			and a.parent_select_by_id is null
			and a.criteria_id = b.criteria_id
			and airport_group_id = p_select_by_id
			and a.record_type_code = c.record_type_code
	 order by 2;

		CURSOR cur_aptgrp_sel_crit1(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select a.select_by_id agcc_sel_by_id, a.record_type_code agcc_rec_type_code,
       		 a.criteria_id agcc_crit_id, a.include_exclude_ind agcc_inc_excl_ind,
       		 b.criteria_descr agcc_crit_desc, c.record_type_descr agcc_rec_type_descr, 
       		 a.parent_select_by_id agcc_parent_id
		  from navdb_select_criteria a,
       		 select_criteria b,
       		 record_type    c
		 where a.navdb_id = :navdb.navdb_id
			 and a.criteria_id = b.criteria_id
			 and a.record_type_code = c.record_type_code
       and parent_select_by_id = p_select_by_id
			 and a.include_exclude_ind in ('I','X')
	  order by 2;

		CURSOR cur_aptgrp_sel_crit_val(p_select_by_id navdb_select_criteria.select_by_id%TYPE) is 
		select select_by_id agccv_sel_by_id, value_descr agccv_value_descr, 
          	value agccv_value
			from selection_criteria_value
		 where select_by_id = p_select_by_id
		order by value_seq;

		CURSOR cur_aptgrp_lst is 
		select a.select_by_id al_selbyid, a.navdb_id al_navdbid, a.group_name, 
           b.airport_ident al_airport_ident, b.airport_icao al_airport_icao
			from select_by_airport_group a, airport_to_select b
		 where a.navdb_id = :navdb.navdb_id
			 and a.select_by_id = b.select_by_id
		order by 3, 4, 5;

		CURSOR cur_apt_lst(p_airport_ident pl_std_airport.airport_ident%TYPE, p_airport_icao pl_std_airport.airport_icao%TYPE) IS
		select airport_ident, airport_icao,ata_iata_designator, airport_name, 'Std' type
			from pl_std_airport a, navdb b
		 where processing_cycle = :global.processing_cycle
			 and navdb_id = :navdb.navdb_id
			 and airport_ident = p_airport_ident
			 and airport_icao = p_airport_icao
			 and a.data_supplier = b.data_supplier
		 union
		select airport_ident, airport_icao,ata_iata_designator, airport_name, 'Tld' type
			from pl_tld_airport a, navdb b
		 where processing_cycle = :global.processing_cycle
			 and customer_ident = :navdb.navdb_id
			 and navdb_id = :navdb.navdb_id
			 and airport_ident = p_airport_ident
			 and airport_icao = p_airport_icao
			 and a.customer_ident = b.navdb_id
			 and a.data_supplier = b.data_supplier;

		CURSOR cur_inc_exc_list is
		select select_by_id, include_exclude_ind lv_incexcl, a.record_type_code lv_rectypecode, record_type_descr
		  from navdb_select_criteria a, record_type b
		 where navdb_id = :navdb.navdb_id
		   and a.record_type_code = b.record_type_code
		   and geo_area_id = -2
		 order by 3 asc;
		
		CURSOR cur_rec_type(p_record_type_code navdb_select_criteria.record_type_code%TYPE) is
		select identifier_label, display_order 
		  from record_identifier 
		 where record_type_code = p_record_type_code 
		 order by display_order asc;
		
		CURSOR cur_inc_exc_lst_val(p_select_by_id navdb_select_criteria.select_by_id%TYPE,p_record_type_code navdb_select_criteria.record_type_code%TYPE) is 
		select b.select_by_id lv_selbyid, a.record_type_code lv_rectypecode, --a.include_exclude_ind lv_incexcl,
       		 b.value_seq lv_seq, b.value lv_value,
       		 c.identifier_label lv_label, d.record_type_descr lv_record_descr,display_order
			from navdb_select_criteria a,
         	 selection_criteria_value b,
         	 record_identifier  c,
         	 record_type  d
		 where a.navdb_id = :navdb.navdb_id
			 and a.geo_area_id = -2
			 and a.select_by_id = b.select_by_id 
			 and b.select_by_id = p_select_by_id
			 and c.record_type_code = a.record_type_code
			 and c.record_type_code = p_record_type_code
			 and a.record_type_code = d.record_type_code
			 and b.value_descr = c.identifier_column_name
		order by 1, 2, 3, 7 asc;

	v_rec_hdr varchar2(300):= NULL;
  ls_inc_exc_descr VARCHAR2(100);
  k NUMBER := 0;
  kk NUMBER := 0;
  ls_rule_descr VARCHAR2(30);
  ln_ret_val NUMBER := 0;
  ln_rec_count NUMBER := 0;
  ls_aif_rwy_length_limit VARCHAR2(30);
  ls_rnp VARCHAR2(30) := NULL;
  ln_cnt_geo NUMBER;
  ln_area_cnt NUMBER;
  ln_icao_cnt NUMBER;
  ln_aptgrp_cnt NUMBER;
  v_geo_rule_ind VARCHAR2(30);
  v_geo_inc_exc_ind VARCHAR2(30);
  ln_cnt NUMBER;
  v_ac_rule_ind VARCHAR2(30);
  v_ac_inc_exc_ind VARCHAR2(30);
  v_agc_rule_ind VARCHAR2(30);
  v_agc_inc_exc_ind VARCHAR2(30);
  v_ic_rule_ind VARCHAR2(30);
  v_ic_inc_exc_ind VARCHAR2(30);
  ln_aptgrp_lst_cnt NUMBER;
  ln_group_name  VARCHAR2(50);
  ls_incexcl VARCHAR2(20);
  ls_label VARCHAR2(4000) := NULL;
  ls_value VARCHAR2(4000) := NULL;
  ls_cur_seq NUMBER;
  ls_next_seq NUMBER;
  ln_cur_seq NUMBER := 0;
  ln_prev_seq NUMBER := 0;
  BEGIN
  	:PARAMETER.GENERAL_CRITERIA := NULL;
		l_rec_count := 0;
		ln_ret_val := Create_File_On_Server(v_file_handle);
		IF ln_ret_val = 1 THEN
			NULL;
		ELSE
			
    	Client_Text_IO.PUT_LINE(v_file_handle,'Exported on:,'||SYSDATE);
	  	Client_Text_IO.PUT_LINE(v_file_handle,'NAVDB:,'||:NAVDB.NAVDB_ID||',FMS ID:,'||:NAVDB.FMS_ID);
			Client_Text_IO.PUT_LINE(v_file_handle,' ');
			General_Criteria(v_file_handle);                              
			if :PARAMETER.GENERAL_CRITERIA is null then
			  Client_Text_IO.PUT_LINE(v_file_handle,'General Criteria,None Selected');
			Else
				Client_Text_IO.PUT_LINE(v_file_handle,'General Criteria,'|| :PARAMETER.GENERAL_CRITERIA);
			End if;
			Client_Text_IO.PUT_LINE(v_file_handle,'');
			Client_Text_IO.PUT_LINE(v_file_handle,'Default Criteria ');
			Client_Text_IO.PUT_LINE(v_file_handle,'Record Type, Selection Rule');
			FOR i IN gen_crit LOOP
				if i.include_exclude_ind = 'I' then
  				ls_inc_exc_descr := 'Include All';
  			elsif i.include_exclude_ind = 'X' then
  				ls_inc_exc_descr := 'Exclude All';
  			elsif i.include_exclude_ind = 'R' then
  				ls_inc_exc_descr := 'By Rules (see below)';
  			else
  				ls_inc_exc_descr := 'Referenced records only';
  			end if;
      	Client_Text_IO.PUT_LINE(v_file_handle,i.record_type_descr||','||ls_inc_exc_descr);  
    		k := 0;
    		FOR j IN gen_crit_rule(i.select_by_id) LOOP
      		k := k + 1;
      		IF j.dcc_inc_excl_ind = 'I' THEN
      		 	ls_rule_descr := 'Apply';
      		ELSIF j.dcc_inc_excl_ind = 'X' THEN
  				 	ls_rule_descr := 'Do Not Apply';
  				END IF;
      		select COUNT(select_by_id)-- dccv_sel_by_id, value_descr dccv_value_descr, 
      	  	into ln_rec_count
						from selection_criteria_value
		 				where select_by_id = 	 j.dcc_sel_by_id;
		 				IF ln_rec_count > 0 THEN
		 					k := 0;
        			FOR l IN gen_crit_rule1(j.dcc_sel_by_id) LOOP
        			  k := k + 1;
        	  		IF l.dccv_value is NOT NULL THEN
        	  	 		IF k = 1 THEN
        	  	 				Client_Text_IO.PUT_LINE(v_file_handle,',Rules:,'||j.dcc_crit_desc||' '||l.dccv_value||','||ls_rule_descr);
        	  	 		ELSE
 											Client_Text_IO.PUT_LINE(v_file_handle,',,'||j.dcc_crit_desc||' '||l.dccv_value||','||ls_rule_descr);
        	  	 		END IF;
        	  		END IF;	 
        			END LOOP;	
        		ELSE
							Client_Text_IO.PUT_LINE(v_file_handle,',,'||j.dcc_crit_desc||','||ls_rule_descr);
						END IF;                  	
    		END LOOP;  
			END LOOP;
    	k := 0;
			FOR m IN supp_cur LOOP
			 	k := k + 1;
		   	IF k = 1 THEN
		   		Client_Text_IO.Put_LINE(v_file_handle,'');
		   		Client_Text_IO.Put_LINE(v_file_handle,'Supplemental Records');
				  Client_Text_IO.PUT_LINE(v_file_handle,m.sup_criteria_descr||','||m.sup_incexci);
		   	ELSE
		   	  Client_Text_IO.PUT_LINE(v_file_handle,m.sup_criteria_descr||','||m.sup_incexci);
       	END IF;
			END LOOP;
			SELECT nvl(to_char(aif_rwy_length_limit),'None Selected') aif_rwy_length_limit 
		  	INTO ls_aif_rwy_length_limit
		  	FROM navdb 
		 	 WHERE navdb_id = :navdb.navdb_id;
    	Client_Text_IO.PUT_LINE(v_file_handle,' ');
			Client_Text_IO.PUT_LINE(v_file_handle,'AIR Runway Length Limit,'||ls_aif_rwy_length_limit);
		
			SELECT nvl(to_char(rnp),'None Selected') 
		  	INTO ls_rnp
		  	FROM navdb 
		 	 WHERE navdb_id = :navdb.navdb_id;
    	Client_Text_IO.PUT_LINE(v_file_handle,' ');
			Client_Text_IO.PUT_LINE(v_file_handle,'RNP (nms),'||ls_rnp);
		
			select count(select_by_id)
		  	into ln_cnt_geo
		  	from select_by_geographic_area
	   	 where navdb_id = :navdb.navdb_id;

    	--Geographic Area
	  	IF NVL(ln_cnt_geo,0) = 0 THEN
			  Client_Text_IO.PUT_LINE(v_file_handle,' ');
				Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Geographic Area,'||'None Selected');
	  	ELSE
	   	 	Client_Text_IO.PUT_LINE(v_file_handle,' ');
	   	 	Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Geographic Area');
	   	 	FOR n IN geo_area_cur LOOP
	   	 	  Client_Text_IO.PUT_LINE(v_file_handle,'Geographic Area Name,'||n.g_geo_area_name||','||n.g_incexcl);
	   	 	  k := 0;
					FOR o IN geo_area_point(n.g_selbyid) LOOP
						 k := k + 1;
						 IF k = 1 THEN
						 	  Client_Text_IO.PUT_LINE(v_file_handle,',Seq#,Latitude,Longitude');
	   	 	  	 		Client_Text_IO.PUT_LINE(v_file_handle,','||o.geop_seqn||','||o.latitude||','||o.longitude);
						 ELSE
						 	  Client_Text_IO.PUT_LINE(v_file_handle,','||o.geop_seqn||','||o.latitude||','||o.longitude);
	   	 	  	 END IF;		
					END LOOP;
		
					k := 0;
					FOR p IN cur_geo_sel_rule(n.g_selbyid) LOOP
						 k := k + 1;
						 if p.gc_incexcl = 'I' then
  								v_geo_inc_exc_ind := 'Include All';
  					 elsif p.gc_incexcl = 'X' then
  								v_geo_inc_exc_ind := 'Exclude All';
  					 elsif p.gc_incexcl = 'R' then
  								v_geo_inc_exc_ind := 'By Rules (see below)';
						 elsif p.gc_incexcl = 'N' then
  								v_geo_inc_exc_ind := 'Reference Only';
  					 else
  								v_geo_inc_exc_ind := 'Apply Default Criteria';
  					 end if;
						 IF k = 1 THEN
						 	  Client_Text_IO.PUT_LINE(v_file_handle,',Record Type, Selection Rule');
	   	 	  	 		Client_Text_IO.PUT_LINE(v_file_handle,','||p.gc_record_type_descr||','||v_geo_inc_exc_ind);
						 ELSE
						 	  Client_Text_IO.PUT_LINE(v_file_handle,','||p.gc_record_type_descr||','||v_geo_inc_exc_ind);
						 END IF;	
						kk := 0;
						FOR q IN cur_geo_sel_rule1(p.gc_select_by_id) LOOP --(n.g_selbyid) LOOP
						  if q.gcc_inc_excl_ind = 'I' then
  								v_geo_rule_ind := 'Apply';
  						elsif q.gcc_inc_excl_ind = 'X' then
  								v_geo_rule_ind := 'Do Not Apply';
  						end if;
						
						 select COUNT(select_by_id)
						   into ln_rec_count
							 from selection_criteria_value
		 					where select_by_id = q.gcc_sel_by_id;
		 					IF ln_rec_count > 0 THEN
		 						 kk := 0;
		 						 FOR r IN cur_geo_sel_val(q.gcc_sel_by_id) LOOP
		 								kk := kk + 1;
		 								IF kk = 1 THEN
		 										Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||r.gccv_value_descr||' '||r.gccv_value||','||v_geo_rule_ind);
		 								ELSE
		 									  Client_Text_IO.PUT_LINE(v_file_handle,',,'||r.gccv_value_descr||' '||r.gccv_value||','||v_geo_rule_ind);
		 								END IF;	  
								 END LOOP;
		 					ELSE	 	  
						 		 kk := kk + 1;	
						 		 IF kk = 1 THEN
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||q.gcc_crit_desc||','||v_geo_rule_ind);
						 		 ELSE
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',,'||q.gcc_crit_desc||','||v_geo_rule_ind);
						 	   END IF;
						 	END IF;		
						END LOOP;
					END LOOP;					
	   	 END LOOP;
	   END IF;
	   	 	
	  --Select By Area Code
		select count(select_by_id)
		  into ln_area_cnt
		  from select_by_area
		 where navdb_id = :navdb.navdb_id;

		IF NVL(ln_area_cnt,0) = 0 THEN
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Area Code,'||'None Selected');
		ELSE
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Area Code');
	   	 	FOR n IN cur_sel_area LOOP
	   	 	  Client_Text_IO.PUT_LINE(v_file_handle,'Area Code,'||n.ac_area_code||','||n.ac_incexcl);
	   	 	  k := 0;
					FOR p IN cur_sel_area_crit(n.ac_selbyid) LOOP
						 k := k + 1;
						 if p.acc_incexcl = 'I' then
  								v_ac_inc_exc_ind := 'Include All';
  					 elsif p.acc_incexcl = 'X' then
  								v_ac_inc_exc_ind := 'Exclude All';
  					 elsif p.acc_incexcl = 'R' then
  								v_ac_inc_exc_ind := 'By Rules (see below)';
						 elsif p.acc_incexcl = 'N' then
  								v_ac_inc_exc_ind := 'Reference Only';
  					 else
  								v_ac_inc_exc_ind := 'Apply Default Criteria';
  					 end if;
						 IF k = 1 THEN
						 	  Client_Text_IO.PUT_LINE(v_file_handle,',Record Type, Selection Rule');
	   	 	  	 		Client_Text_IO.PUT_LINE(v_file_handle,','||p.acc_record_type_descr||','||v_ac_inc_exc_ind);
						 ELSE
						 	  Client_Text_IO.PUT_LINE(v_file_handle,','||p.acc_record_type_descr||','||v_ac_inc_exc_ind);
						 END IF;	
						kk := 0;
						FOR q IN cur_sel_area_crit1(p.acc_select_by_id) LOOP --(n.g_selbyid) LOOP
						  if q.accc_inc_excl_ind = 'I' then
  								v_ac_rule_ind := 'Apply';
  						elsif q.accc_inc_excl_ind = 'X' then
  								v_ac_rule_ind := 'Do Not Apply';
  						end if;

						 select COUNT(select_by_id)
						   into ln_rec_count
							 from selection_criteria_value
		 					where select_by_id = q.accc_sel_by_id;
		 					IF ln_rec_count > 0 THEN
		 						 kk := 0;
		 						 FOR r IN cur_sel_area_crit_val(q.accc_sel_by_id) LOOP
		 								kk := kk + 1;
		 								IF kk = 1 THEN
		 										Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||r.acccv_value_descr||' '||r.acccv_value||','||v_ac_rule_ind);
								 		ELSE
												Client_Text_IO.PUT_LINE(v_file_handle,',,'||r.acccv_value_descr||' '||r.acccv_value||','||v_ac_rule_ind);
										END IF;
								 END LOOP;
		 					ELSE	 	  
						 		 kk := kk + 1;	
						 		 IF kk = 1 THEN
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||q.accc_crit_desc||','||v_ac_rule_ind);
						 		 ELSE
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',,'||q.accc_crit_desc||','||v_ac_rule_ind);
						 	   END IF;
						 	END IF;		
						END LOOP;
					END LOOP;					
	   	 END LOOP;
	   END IF;

    -- Icao Code	  	
	  select count(select_by_id)
	    into ln_icao_cnt 
			from select_by_icao
		 where navdb_id = :navdb.navdb_id;

		IF NVL(ln_icao_cnt,0) = 0 THEN
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Icao Code,'||'None Selected');
		ELSE
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Icao Code');
	   	 	FOR n IN cur_sel_icao LOOP
	   	 	  Client_Text_IO.PUT_LINE(v_file_handle,'Icao Code,'||n.ic_icao_code||','||n.ic_incexcl);
	   	 	  k := 0;
					FOR p IN cur_sel_icao_crit(n.ic_selbyid) LOOP
						 k := k + 1;
						 if p.icc_incexcl = 'I' then
  								v_ic_inc_exc_ind := 'Include All';
  					 elsif p.icc_incexcl = 'X' then
  								v_ic_inc_exc_ind := 'Exclude All';
  					 elsif p.icc_incexcl = 'R' then
  								v_ic_inc_exc_ind := 'By Rules (see below)';
						 elsif p.icc_incexcl = 'N' then
  								v_ic_inc_exc_ind := 'Reference Only';
  					 else
  								v_ic_inc_exc_ind := 'Apply Default Criteria';
  					 end if;
						 IF k = 1 THEN
						 	  Client_Text_IO.PUT_LINE(v_file_handle,',Record Type, Selection Rule');
	   	 	  	 		Client_Text_IO.PUT_LINE(v_file_handle,','||p.icc_record_type_descr||','||v_ic_inc_exc_ind);
						 ELSE
						 	  Client_Text_IO.PUT_LINE(v_file_handle,','||p.icc_record_type_descr||','||v_ic_inc_exc_ind);
						 END IF;	
						kk := 0;
						FOR q IN cur_sel_icao_crit1(p.icc_select_by_id) LOOP
						  if q.iccc_inc_excl_ind = 'I' then
  								v_ic_rule_ind := 'Apply';
  						elsif q.iccc_inc_excl_ind = 'X' then
  								v_ic_rule_ind := 'Do Not Apply';
  						end if;

						 select COUNT(select_by_id)
						   into ln_rec_count
							 from selection_criteria_value
		 					where select_by_id = q.iccc_sel_by_id;
		 					IF ln_rec_count > 0 THEN
		 						 kk := 0;
		 						 FOR r IN cur_sel_icao_crit_val(q.iccc_sel_by_id) LOOP
		 								kk := kk + 1;
		 								IF kk = 1 THEN
		 										Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||r.icccv_value_descr||' '||r.icccv_value||','||v_ic_rule_ind);
								 		ELSE
												Client_Text_IO.PUT_LINE(v_file_handle,',,'||r.icccv_value_descr||' '||r.icccv_value||','||v_ic_rule_ind);
										END IF;
								 END LOOP;
		 					ELSE	 	  
						 		 kk := kk + 1;	
						 		 IF kk = 1 THEN
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||q.iccc_crit_desc||','||v_ic_rule_ind);
						 		 ELSE
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',,'||q.iccc_crit_desc||','||v_ic_rule_ind);
						 	   END IF;
						 	END IF;		
						END LOOP;
					END LOOP;					
	   	 END LOOP;
	   END IF;

    -- Airport Group	  	
	  select count(select_by_id)
	    into ln_aptgrp_cnt 
			from  select_by_airport_group
		 where navdb_id = :navdb.navdb_id;

		IF NVL(ln_aptgrp_cnt,0) = 0 THEN
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Airport Group,'||'None Selected');
		ELSE
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Selection By Airport Group');
	   	 	FOR n IN cur_aptgrp LOOP
	   	 	  Client_Text_IO.PUT_LINE(v_file_handle,'Airport Group,'||n.ag_group_name||','||n.ag_incexcl);
	   	 	  k := 0;
					FOR p IN cur_aptgrp_sel_crit(n.ag_selbyid) LOOP
						k := k + 1;
						if p.agc_incexcl = 'I' then
  								v_agc_inc_exc_ind := 'Include All';
  					elsif p.agc_incexcl = 'X' then
  								v_agc_inc_exc_ind := 'Exclude All';
  					elsif p.agc_incexcl = 'R' then
  								v_agc_inc_exc_ind := 'By Rules (see below)';
						elsif p.agc_incexcl = 'N' then
  								v_agc_inc_exc_ind := 'Reference Only';
  					else
  								v_agc_inc_exc_ind := 'Apply Default Criteria';
  					end if;
						IF k = 1 THEN
						  Client_Text_IO.PUT_LINE(v_file_handle,',Record Type, Selection Rule');
	   	 	  		Client_Text_IO.PUT_LINE(v_file_handle,','||p.agc_record_type_descr||','||v_agc_inc_exc_ind);
						ELSE
						  Client_Text_IO.PUT_LINE(v_file_handle,','||p.agc_record_type_descr||','||v_agc_inc_exc_ind);
						END IF;	
						kk := 0;
						FOR q IN cur_aptgrp_sel_crit1(p.agc_select_by_id) LOOP --(n.g_selbyid) LOOP
						  if q.agcc_inc_excl_ind = 'I' then
  								v_agc_rule_ind := 'Apply';
  						elsif q.agcc_inc_excl_ind = 'X' then
  								v_agc_rule_ind := 'Do Not Apply';
  						end if;

						 select COUNT(select_by_id)
						   into ln_rec_count
							 from selection_criteria_value
		 					where select_by_id = q.agcc_sel_by_id;
		 					IF ln_rec_count > 0 THEN
		 						 kk := 0;
		 						 FOR r IN cur_aptgrp_sel_crit_val(q.agcc_sel_by_id) LOOP
		 								kk := kk + 1;
		 								IF kk = 1 THEN
		 										Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||r.agccv_value_descr||' '||r.agccv_value||','||v_agc_rule_ind);
								 		ELSE
												Client_Text_IO.PUT_LINE(v_file_handle,',,'||r.agccv_value_descr||' '||r.agccv_value||','||v_agc_rule_ind);
										END IF;
								 END LOOP;
		 					ELSE	 	  
						 		 kk := kk + 1;	
						 		 IF kk = 1 THEN
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',Rules,'||q.agcc_crit_desc||','||v_agc_rule_ind);
						 		 ELSE
						 	  	  Client_Text_IO.PUT_LINE(v_file_handle,',,'||q.agcc_crit_desc||','||v_agc_rule_ind);
						 	   END IF;
						 	END IF;		
						END LOOP;
					END LOOP;					
	   	 END LOOP;
	   END IF;
	  
	  -- Airport List	  	
	  select count(a.select_by_id)
	    into ln_aptgrp_lst_cnt
			from select_by_airport_group a, airport_to_select b
		 where a.navdb_id = :navdb.navdb_id
			 and a.select_by_id = b.select_by_id;
		
		IF NVL(ln_aptgrp_lst_cnt,0) = 0 THEN
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Airport Group - Airport List,'||'None Selected');
		ELSE
			 Client_Text_IO.PUT_LINE(v_file_handle,' ');
			 Client_Text_IO.PUT_LINE(v_file_handle,'Airport Group - Airport List');
			  FOR n IN cur_aptgrp_lst LOOP
	   	 		IF NVL(ln_group_name,'$') = n.group_name THEN
	   	 			 ln_group_name := n.group_name;
	   	 		ELSE	 
	   	 			ln_group_name := n.group_name;
	   	 	  	Client_Text_IO.PUT_LINE(v_file_handle,'Group Name,'||n.group_name);
	   	 	  	Client_Text_IO.PUT_LINE(v_file_handle,'Airports,Ident, Icao, ATA/IATA, Name, Std/Tld');
	   	 	  END IF;	
	   	 	  FOR p IN cur_apt_lst(n.al_airport_ident, n.al_airport_icao) LOOP
							Client_Text_IO.PUT_LINE(v_file_handle,','||n.al_airport_ident||','||n.al_airport_icao||','||p.ata_iata_designator||','||p.airport_name||','||p.type);
					END LOOP;					
	   	 END LOOP;
	   END IF;
		FOR u IN cur_inc_exc_list LOOP
			Client_Text_IO.PUT_LINE(v_file_handle,' ');
			Client_Text_IO.PUT_LINE(v_file_handle,'Select Records by List');
			if u.lv_incexcl = 'I' then
  		ls_incexcl := 'to be INCLUDED';
  		elsif u.lv_incexcl = 'X' then
  		ls_incexcl := 'to be EXCLUDED';
  		end if;
	  	--FOR v IN cur_rec_type(u.select_by_id) LOOP
	  		Client_Text_IO.PUT_LINE(v_file_handle,','||u.record_type_descr||','||ls_incexcl);
	  		ls_label := NULL;
	  		FOR w IN cur_rec_type(u.lv_rectypecode) LOOP
	  			 IF ls_label is NULL THEN
	  			 		ls_label :=  w.identifier_label;
	  			 ELSE		                            
	  			 	  ls_label :=  ls_label||','||w.identifier_label;
	  			 END IF;	  
	  		END LOOP;	 		
	  		IF ls_label is NOT NULL THEN
	  				Client_Text_IO.PUT_LINE(v_file_handle,',,'||ls_label);
	  		END IF;		
	  		ls_value := NULL;
	  		FOR x IN cur_inc_exc_lst_val(u.select_by_id, u.lv_rectypecode) LOOP
	  			 ln_cur_seq := x.lv_seq;
					 IF ls_value IS NOT NULL AND NVL(ln_cur_seq,0) <> NVL(ln_prev_seq,10000) THEN
							Client_Text_IO.PUT_LINE(v_file_handle,','||ls_value);
	  			 		ls_value := NULL;
        	 END IF;

	  			 IF ls_value IS NULL THEN
	  			 	  ls_value := x.lv_seq||','||x.lv_value;
	  			 ELSE
							ls_value := ls_value||','||x.lv_value;
	  			 END IF;	  
	  			 ln_prev_seq := x.lv_seq;	  			 
	  	END LOOP;
	  	IF ls_value IS NOT NULL THEN
				 Client_Text_IO.PUT_LINE(v_file_handle,','||ls_value);
	  		ls_value := NULL;
      END IF;
		END LOOP;
	  Client_Text_IO.PUT_LINE(v_file_handle,'');
	  Client_Text_IO.PUT_LINE(v_file_handle,''); 
		Client_Text_IO.FClose(v_file_handle);	
		Message('Report generated Successfully.',No_Acknowledge);
  END IF;
  END Export_Selection_Criteria;	
  -- End Fix SCR -- 05684 -- Venkat M 18-May-2020

END;

 populateGenCriteriaValue:
--Begin fix SCR 7426.09 --Madhu 
PROCEDURE populate_gen_criteria_value IS
	v_type_code number;
	v_limit     number;
	
	PROCEDURE apply_the_check(p_block varchar2 := 'GEN_CRITERIA_SUB_TYPE') is		
		v_value      varchar2(100) := name_in(p_block||'.real_value');
		v_real_value varchar2(1000);
		v_ind        varchar2(1);
	BEGIN
		BEGIN
				SELECT 'Y' INTO v_ind
 				FROM navdb_general_criteria_value
 				WHERE value = v_value
 				AND CRITERIA_ID = :general_criteria.criteria_id
 				AND navdb_id  = :navdb.navdb_id; 		
	 			:control_block.did := 'N';
 		EXCEPTION
 			WHEN no_data_found THEN
 			v_ind := 'N';
 		END;
 		copy(v_ind,p_block||'.CHK'); 		
 	END;
	
BEGIN		
		
		clear_block;
		first_record;
			:GEN_CRITERIA_SUB_TYPE.real_value := 'A';
			:GEN_CRITERIA_SUB_TYPE.value := 'A - Category A Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'B';
			:GEN_CRITERIA_SUB_TYPE.value := 'B - Category B Only';
			apply_the_check;
			next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'C';
			:GEN_CRITERIA_SUB_TYPE.value := 'C - Category C Only';
			apply_the_check;	
	 		next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'D';
			:GEN_CRITERIA_SUB_TYPE.value := 'D - Category D Only';
			apply_the_check;
			next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'E';
			:GEN_CRITERIA_SUB_TYPE.value := 'E - Category E Only';
			apply_the_check;
			next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'F';
			:GEN_CRITERIA_SUB_TYPE.value := 'F - Category A, B Only';
			apply_the_check;
			next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'G';
			:GEN_CRITERIA_SUB_TYPE.value := 'G - Category C, D Only';
			apply_the_check;
			next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'I';
			:GEN_CRITERIA_SUB_TYPE.value := 'I - Category A, B, C';
			apply_the_check;
			next_record;

			:GEN_CRITERIA_SUB_TYPE.real_value := 'J';
			:GEN_CRITERIA_SUB_TYPE.value := 'J - Category A, B, C, D';
			apply_the_check;
			next_record;
		
			:GEN_CRITERIA_SUB_TYPE.real_value := 'K';
			:GEN_CRITERIA_SUB_TYPE.value := 'K - Category A, B, C, D, E';
			apply_the_check;
			NEXT_RECORD;			
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'L';
			:GEN_CRITERIA_SUB_TYPE.value := 'L - Category D, E Only';
			apply_the_check;
			NEXT_RECORD;	
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'H';
			:GEN_CRITERIA_SUB_TYPE.value := 'H - Category H (Heli) Only';
			apply_the_check;
			next_record;
--65347			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'M';
			:GEN_CRITERIA_SUB_TYPE.value := 'M - Category B, C Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'N';
			:GEN_CRITERIA_SUB_TYPE.value := 'N - Category C, D, E Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'O';
			:GEN_CRITERIA_SUB_TYPE.value := 'O - Category B, C, D, E Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'P';
			:GEN_CRITERIA_SUB_TYPE.value := 'P - Not Limited';
			apply_the_check;
			next_record;
--SCR 6146--Madhu--20-Jan-2021			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'Q';
			:GEN_CRITERIA_SUB_TYPE.value := 'Q - Turbojet and Turboprop Only';
			apply_the_check;
			next_record;
--SCR 6146--Madhu--20-Jan-2021
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'R';
			:GEN_CRITERIA_SUB_TYPE.value := 'R - Turbojet Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'S';
			:GEN_CRITERIA_SUB_TYPE.value := 'S - Turboprop Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'T';
			:GEN_CRITERIA_SUB_TYPE.value := 'T - Prop Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'U';
			:GEN_CRITERIA_SUB_TYPE.value := 'U - Turboprop and Prop';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'V';
			:GEN_CRITERIA_SUB_TYPE.value := 'V - Non-Turbojets Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'W';
			:GEN_CRITERIA_SUB_TYPE.value := 'W - Jets Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'X';
			:GEN_CRITERIA_SUB_TYPE.value := 'X - Non-Jets Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := 'Y';
			:GEN_CRITERIA_SUB_TYPE.value := 'Y - Pistons Only';
			apply_the_check;
			next_record;
			
			:GEN_CRITERIA_SUB_TYPE.real_value := '-';
			:GEN_CRITERIA_SUB_TYPE.value := 'Blank(-) Category Not Provided';
			apply_the_check;
--65347			
			IF :parameter.work_type != 'VIEW' THEN
				Set_Item_Property('GEN_CRITERIA_SUB_TYPE.DONE',ENABLED,Property_True);
				Set_Item_Property('GEN_CRITERIA_SUB_TYPE.CHECK',ENABLED,Property_True);
				Set_Item_Property('GEN_CRITERIA_SUB_TYPE.CLEAR',ENABLED,Property_True);
			ELSE
				Set_Item_Property('GEN_CRITERIA_SUB_TYPE.DONE',ENABLED,Property_False);
				Set_Item_Property('GEN_CRITERIA_SUB_TYPE.CHECK',ENABLED,Property_False);
				Set_Item_Property('GEN_CRITERIA_SUB_TYPE.CLEAR',ENABLED,Property_False);
			END IF;
			
			
			:control_block.GEN_CRITERIA_CAN := get_canvas_property('SEL_CAN',topmost_tab_page);
			first_record;

END;			
--End fix SCR 7426.09 --Madhu 			

 checkListsRecVal:
  --Begin Fix SCR 7259.01  --Venkat M 14-SEP-2017
PROCEDURE CHECK_LISTS_REC_VAL IS
	v_value   varchar2(1000):= null;
	v_timer_id TIMER;
BEGIN	
	--IF (:PARAMETER.SAVE_BUTTON = 0 or p_valid = 0)THEN  --SAVE/CANCEL BUTTON
    FOR i in 1..:DATATYP_RAD.list_no LOOP
		  v_value := name_in('lists.value_'||to_char(i));
		  IF v_value IS NULL THEN
			-- Allows blank value in Include(I) list for both Runway(3) and Enroute(4) Transition for SID(91) and STAR(92).
			-- Allows blank value in Exclude(X) list either Runway(3) or Enroute(4) Transition for SID(91) and STAR(92).  
			  IF :DATATYP_RAD.RECORD_TYPE_CODE IN ( 91, 92 ) AND i IN ( 3, 4 ) 
				   AND ( CASE 
  							WHEN :DATATYP_RAD.LIST_VAL = 'I' THEN 1
  							WHEN :DATATYP_RAD.LIST_VAL = 'X' AND ( name_in('lists.value_'||to_char(3)) IS NOT NULL OR name_in('lists.value_'||to_char(4)) IS NOT NULL )  THEN 1 		
  					    ELSE 0
  					   END ) = 1
			  THEN
				  NULL; 
			  ELSE
				  --:PARAMETER.LISTS_ITEM := 'lists.value_'||to_char(i);
				  --:PARAMETER.LISTS_RECORD := :SYSTEM.CURSOR_RECORD;
				  --v_timer_id := create_timer('LISTS_REC_VAL',1); --populate orc_id from fms_orc table    
 				  dsp_msg('Please enter value completely for the record.');
 				  --:control_block.did := 'N';
 				  raise form_trigger_failure;
			  END IF; 
		  END IF;
	  END LOOP;
	--END IF;
  END;
  --End Fix SCR 7259.01  --Venkat M 14-SEP-2017

 populateSourceAg:
--  Begin Fix -- SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
PROCEDURE POPULATE_source_ag IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
BEGIN    
	
	-- delete the old group
	rg := find_group('source_ag'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   

	rg := create_group_from_query('source_ag','
		select  group_name rlabel,group_name rvalue
  	from select_by_airport_group
  	where navdb_id = '''||:navdb.navdb_id||'''   
  	order by 1 asc' );  
  	
  -- populate the group
	nn := populate_group(rg);        
	if nn <> 0 then
		IF nn = 1403 THEN
			NULL;
		ELSE  
			dsp_msg('Populate group had error '||to_char(nn)); 
		END IF;       
	end if;
	populate_list('control_block.source_ag',rg);
	
END;	

--  End Fix - SCR 7260.01 - Ashish Niranjan - 30-Nov-2017



 populateTargetAg:
--  Begin Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
PROCEDURE POPULATE_target_ag IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
BEGIN    
	
	-- delete the old group
	rg := find_group('target_ag'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   

	rg := create_group_from_query('target_ag','
		select  group_name rlabel,group_name rvalue
  	from select_by_airport_group
  	where navdb_id = '''||:navdb.navdb_id||'''
  	minus
  	select  group_name rlabel,group_name rvalue
  	from select_by_airport_group
  	where navdb_id = '''||:navdb.navdb_id||'''
  	and group_name = '''||:control_block.source_ag||'''   
  	order by 1 asc' );  
  	
  -- populate the group
	nn := populate_group(rg);        
	if nn <> 0 then  
		IF nn = 1403 THEN
			NULL;
		ELSE  
			dsp_msg('Populate group had error '||to_char(nn)); 
		END IF;        
	end if;
	populate_list('control_block.target_ag',rg);
	
END;	

--  End Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017



 populateSourceGeoArea:
-- Start Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
PROCEDURE POPULATE_source_geo_area IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
BEGIN    
	
	-- delete the old group
	rg := find_group('source_geo_area'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   

	rg := create_group_from_query('source_geo_area','
		select  geo_area_name rlabel,geo_area_name rvalue
  	from select_by_geographic_area
  	where navdb_id = '''||:navdb.navdb_id||'''
  	union all
  	select  area_code rlabel,area_code rvalue
  	from select_by_area
  	where navdb_id = '''||:navdb.navdb_id||'''
  	union all   
  	select  icao_code rlabel,icao_code rvalue
  	from select_by_icao
  	where navdb_id = '''||:navdb.navdb_id||'''
  	order by 1 asc' );    --Fix SCR 5310.01 - Ashwin Valluri - 01-Sep-2020
  	
  -- populate the group
	nn := populate_group(rg);        
	if nn <> 0 then  
		IF nn = 1403 THEN
			NULL;
		ELSE  
			dsp_msg('Populate group had error '||to_char(nn)); 
		END IF;        
	end if;
	populate_list('control_block.source_geo_area',rg);
	
END;
-- End Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017

 populateTargetGeoArea:
--Start Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
PROCEDURE POPULATE_target_geo_area IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
BEGIN    
	
	-- delete the old group
	rg := find_group('target_geo_area'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;   
	rg := create_group_from_query('target_geo_area','
		(select  geo_area_name rlabel,geo_area_name rvalue
  	from select_by_geographic_area
  	where navdb_id = '''||:navdb.navdb_id||'''
  	union all
  	select  area_code rlabel,area_code rvalue
  	from select_by_area
  	where navdb_id = '''||:navdb.navdb_id||'''
  	union all
  	select  icao_code rlabel,icao_code rvalue
  	from select_by_icao
  	where navdb_id = '''||:navdb.navdb_id||''')
  	minus
  	(select  geo_area_name rlabel,geo_area_name rvalue
  	from select_by_geographic_area
  	where navdb_id = '''||:navdb.navdb_id||'''
  	and geo_area_name = '''||:control_block.source_geo_area||'''
  	union all
  	select  area_code rlabel,area_code rvalue
  	from select_by_area
  	where navdb_id = '''||:navdb.navdb_id||'''
  	and area_code = '''||:control_block.source_geo_area||'''
  	union all
  	select  icao_code rlabel,icao_code rvalue
  	from select_by_icao
  	where navdb_id = '''||:navdb.navdb_id||'''
  	and icao_code = '''||:control_block.source_geo_area||''')    
  	order by 1 asc' );  --Fix SCR 5310.01 - Ashwin Valluri - 01-Sep-2020
  	
  -- populate the group
	nn := populate_group(rg);        
	if nn <> 0 then  
		IF nn = 1403 THEN
			NULL;
		ELSE  
			dsp_msg('Populate group had error '||to_char(nn)); 
		END IF;         
	end if;
	populate_list('control_block.target_geo_area',rg);
	
END;	

--End Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017





 populateCrateInd:
-- Begin Fix SCR 7899.04- Ashish - 16-Jul-2018
 	 /* This function returns CREATE_IND value of fms delivery_format_media*/
FUNCTION POPULATE_CRATE_IND(v_fms_id varchar2, v_format_media_type varchar2)
RETURN VARCHAR2 IS
v_crate_ind VARCHAR2(1);
BEGIN
   IF v_fms_id IS NOT NULL
   AND v_format_media_type IS NOT NULL THEN 
  SELECT crate_ind INTO v_crate_ind 
    FROM fms_delivery_format_media
	 WHERE fms_id = v_fms_id
         and format_media_type = v_format_media_type;
  END IF;
 RETURN v_crate_ind; 
  EXCEPTION	
	WHEN no_data_found THEN
   RETURN NULL;
	WHEN OTHERS THEN
	dsp_msg(sqlerrm);
  END;
-- End Fix SCR 7899.04- Ashish - 16-Jul-2018

 updateNewNavdbOrc:
-- BEGIN FIX -- SCR 7699.01 - SHRIKANT K -- 11-01-2019
PROCEDURE UPDATE_NEW_NAVDB_ORC
IS
   CURSOR GET_ORC_NEW
   IS
        SELECT F_ORC.DMR_ID,
               F_ORC.DEFAULT_APPLY_IND,
               F_ORC.FMS_ID,
               --NVL (F_ORC.DEFAULT_APPLY_IND, 'N') APPLY_IND,
               'N' APPLY_IND,
               ORC.DMR_DESCR,
               NULL              
          FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
         WHERE     F_ORC.FMS_ID = :Navdb.FMS_ID
               AND ORC.DMR_ID = F_ORC.DMR_ID
               AND F_ORC.DM_ORC_IND = 'ORC'
               AND F_ORC.DEFAULT_APPLY_IND = 'Y'                       
      ORDER BY 1;

/*   CURSOR fms_orc_cur
   IS
      SELECT F_ORC.DMR_ID,
             F_ORC.DEFAULT_APPLY_IND,
             F_ORC.FMS_ID,
             DMR_DESCR
        FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
       WHERE     F_ORC.FMS_ID = :Navdb.FMS_ID
             AND F_ORC.DMR_ID = ORC.DMR_ID
             AND F_ORC.DM_ORC_IND = 'ORC'
             AND F_ORC.DEFAULT_APPLY_IND = 'Y';
*/

   TYPE orc_array IS TABLE OF VARCHAR2 (6)
                        INDEX BY BINARY_INTEGER;

   orc_tab      ORC_ARRAY;
   i_idx        NUMBER := 0;

   n_orc        navdb_orc.orc_id%TYPE;

   ls_sqlerrm   VARCHAR2 (240);
   ls_sqlcode   NUMBER;
BEGIN
   FOR rec IN GET_ORC_NEW
   LOOP
      i_idx := i_idx + 1;
      orc_tab (i_idx) := rec.dmr_id;
   END LOOP;


   IF orc_tab.COUNT > 0
   THEN
      FOR i IN 1 .. orc_tab.COUNT
      LOOP
         INSERT INTO navdb_orc
              VALUES (orc_tab (i),
                      :NavDB.NavDB_ID,
                      NULL,
                      :global.dcr_number,
                      USER,
                      SYSDATE,
                      'Y');
      END LOOP;
   /*    FOR rec IN GET_ORC_NEW LOOP
           IF rec.default_apply_ind = 'Y' THEN
               INSERT INTO navdb_orc VALUES (rec.dmr_id, :NavDB.NavDB_ID, NULL, :global.dcr_number, USER, SYSDATE, 'Y');
           END IF;
       END LOOP;
   ELSE
           FOR rec IN fms_orc_cur LOOP
               IF rec.default_apply_ind = 'Y' THEN
                   INSERT INTO navdb_orc VALUES (rec.dmr_id, :NavDB.NavDB_ID, NULL, :global.dcr_number, USER, SYSDATE, 'Y');
               END IF;

       END LOOP;
   */
   END IF;

   FORMS_DDL ('COMMIT');
EXCEPTION
   WHEN OTHERS
   THEN
      FORMS_DDL ('ROLLBACK');
      ls_sqlerrm := SQLERRM;
      ls_sqlcode := SQLCODE;
      dsp_msg ('ORC Creation Failed due to ' || ls_sqlcode || ' : ' || ls_sqlerrm);
END;
-- END FIX -- SCR 7699.01 - SHRIKANT K -- 11-01-2019

 enableDisableDsfVerUpdate:
--BEGIN SCR 07380 - Koti - 19-Apr-2022
PROCEDURE ENABLE_DISABLE_DSF_VER_UPDATE IS
v_no_dsf number;
BEGIN
       SELECT count(1)
        INTO v_no_dsf 
        FROM FLIGHT_MANAGEMENT_SYSTEM
       WHERE FMS_ID = NVL(:NAVDB.FMS_ID,FMS_ID)
         AND DBSIGN_VER = 'NONE';
   if v_no_dsf = 0 then 
      set_item_property('NAVDB.DBSIGN_VER',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.DBSIGN_VER',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.DBSIGN_VER',UPDATE_ALLOWED, PROPERTY_TRUE);
      set_item_property('NAVDB.DBSIGN_VER',QUERYABLE, PROPERTY_TRUE);
   else   
      set_item_property('NAVDB.DBSIGN_VER',INSERT_ALLOWED, PROPERTY_FALSE); 
      set_item_property('NAVDB.DBSIGN_VER',UPDATE_ALLOWED, PROPERTY_FALSE);
      set_item_property('NAVDB.DBSIGN_VER',ENABLED, PROPERTY_FALSE);
   end if;
END;
--END SCR 07380 - Koti - 19-Apr-2022


 enableDisableBrgaIdent:
-- Begin Fix SCR 65351 - Venkat M - 26-Feb-2020
PROCEDURE Enable_disable_brga_ident IS
v_count  number;
BEGIN
	   SELECT count(fms_id) INTO v_count FROM flight_management_system WHERE fms_id = nvl(:navdb.fms_id,fms_id) --Fix SCR 6172- Ashish- 10-Aug
     and binary_format_type in('B00','B10','B20','B31'); 
   IF v_count > 0 THEN
   	  set_item_property('NAVDB.BRGA_IDENT',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.BRGA_IDENT',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.BRGA_IDENT',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.BRGA_IDENT',UPDATE_ALLOWED, PROPERTY_TRUE);
      set_item_property('NAVDB.BRGA_IDENT',QUERYABLE, PROPERTY_TRUE); --Fix SCR 6172- Ashish- 10-Aug
   ELSE
    	
       --set_item_property('NAVDB.BRGA_IDENT',INSERT_ALLOWED, PROPERTY_FALSE); 
      -- set_item_property('NAVDB.BRGA_IDENT',UPDATE_ALLOWED, PROPERTY_FALSE);
   	  -- set_item_property('NAVDB.BRGA_IDENT',ENABLED, PROPERTY_FALSE);
   	   set_item_property('NAVDB.BRGA_IDENT',visible, PROPERTY_FALSE);   	 
   END IF;
END;
-- End Fix SCR 65351 - Venkat M - 26-Feb-2020


 callCopyTldPrc:
--SCR 5582 -- 29-SEP-2020
PROCEDURE call_copy_tld_prc IS

	cursor get_table is
  select table_name,
         decode(substr(table_name,5),'AIRPORT',1,'HELIPORT',2,'VHF',3,'RUNWAY',4,
         'AIRPORT_WAYPOINT',5,'HELI_WAYPOINT',6,'ENROUTE_WAYPOINT',7,
         'AIRPORT_NDB',8,'HELI_NDB',9,'ENROUTE_NDB',10,
         'LOCALIZER',11,'HELI_LOCALIZER',12,'MLS',13,'HELI_MLS',14,'GLS',15,'MSA',16,'HELI_MSA',17,
         'SID',18,'STAR',19,'APPROACH',20,'HELI_SID',21,'HELI_STAR',22,'HELI_APPROACH',23,
         'AIRPORT_PATH_POINT',24,'HELI_PATH_POINT',25,
         'ENROUTE_AIRWAY',26,'COMPANY_ROUTE',27,'PREFERRED_ROUTE',28,
         'AIRPORT_COMM',29,'HELI_COMM',30,'FIR_UIR',31,'ENROUTE_COMM',32,
         'RESTR_AIRSPACE',33,'CONTRL_AIRSPACE',34,'GRID_MORA',35,100) VREL_ORDER
  from   all_tab_columns
  where  owner = 'CPT'
  and    table_name like 'TLD%'
  and    column_name = 'VALIDATE_IND'
  and    (table_name not like '%LEG' and
          table_name not like '%SEGMENT' and
          table_name not like '%REPL_TIME' and
          table_name not like '%VIA' and
          table_name not like '%SEQ' and
          table_name not like '%ADDL_ALT_DEST' and
          table_name not like '%ALT_EXCL%' and
          table_name not like '%REF_PREF_RTE' and
          table_name not like '%NOTE_RESTR_NOTE')
  order by 2;
  v_num_all       number;
  v_num_inhouse   number;
  v_num_suppl     number;
  --v_data_type     varchar2(50);
  ls_out_house VARCHAR2(1):='N';
  ln_Button NUMBER;
	pl_id       ParamList;
	ln_Out NUMBER:=0;
	ln_In NUMBER:=0;
	
BEGIN
  
  for crec in get_table loop
    	forms_utilities.count_tailored_records('pl_'||crec.table_name,
                     :control_block.proc_cycle,
                     :global.data_supplier,
                     :navdb.navdb_id,
                     v_num_inhouse,
                     v_num_all,
                     v_num_suppl);
    	/*if v_num_suppl > 0 then                          
    		ls_out_house := 'Y';
    		exit;
    	end if;*/
    	ln_Out := ln_Out+v_num_suppl;
    	ln_In := ln_In+v_num_inhouse;
  end loop;

	pl_id := Get_Parameter_List('openform'); 
	IF NOT Id_Null(pl_id) THEN 
		Destroy_Parameter_List(pl_id); 
	END IF;   	
	pl_id := Create_Parameter_List('openform');
	Add_Parameter(pl_id, 'RECORD_TYPE',TEXT_PARAMETER,'A');
	Add_Parameter(pl_id, 'WORK_TYPE',TEXT_PARAMETER,'DATA');
	Add_Parameter(pl_id, 'LIBRARY_ACCESS',TEXT_PARAMETER,'PRE-LIBRARY');


	IF ln_Out > 0 AND ln_In > 0 THEN
	  ln_Button:= DISPLAY_ALERT.MORE_BUTTONs('S','Copy SC and Tailored Data',
	 					  ''''||:copy_navdb.new_navdb ||''' selection copied from '''||
	 					  :navdb.navdb_id||'''.'||CHR(10)||' Combination of Tailored Data Exists. Do you want to Copy? '||CHR(10)||
	 					  'Yes: Will take you to Copy Tailored Data form'||chr(10)||
	 					  'No: No Copy Needed ',
	 					  'Yes','No');
		IF ln_Button = 1 THEN
	 		open_form( 'copy_tailored_data' ,activate ,session ,share_library_data ,pl_id);
	 	ELSE
	 		dsp_msg (  '''' || :copy_navdb.new_navdb || ''' data has been successfully copied from ''' || :navdb.navdb_id || '''.' || CHR (10) || 'Please query the new NAVDB data and check it.');
	 	END IF;
	
	ELSIF ln_Out > 0 AND ln_In = 0 THEN
		ln_Button:= DISPLAY_ALERT.MORE_BUTTONs('S','Copy SC and Tailored Data',
	 					  ''''||:copy_navdb.new_navdb ||''' selection copied from '''||
	 					  :navdb.navdb_id||'''.'||CHR(10)||' Only OUT-HOUSE Tailored Data Exists. Do you want to Copy? '||CHR(10)||
	 					  'Yes: Will take you to Copy Tailored Data form'||chr(10)||
	 					  'No: No Copy Needed',
	 					  'Yes','No');
			IF ln_Button = 1 THEN
				--GO_ITEM ('copy_navdb.new_navdb');
				open_form( 'copy_tailored_data' ,activate ,session ,share_library_data ,pl_id);
			ELSE
				dsp_msg (  '''' || :copy_navdb.new_navdb || ''' data has been successfully copied from ''' || :navdb.navdb_id || '''.' || CHR (10) || 'Please query the new NAVDB data and check it.');
			END IF;
	
	ELSIF ln_Out = 0 AND ln_In > 0 THEN
		ln_Button:= DISPLAY_ALERT.MORE_BUTTONs('S','Copy SC and Tailored Data',
	 					  ''''||:copy_navdb.new_navdb ||''' selection copied from '''||
	 					  :navdb.navdb_id||'''.'||CHR(10)||' Tailored Data Exists. Do you want to Copy? '||CHR(10)||
	 					  'Yes: Will take you to Copy Tailored Data form'||chr(10)||
	 					  'No: No Copy Needed',
	 					  'Yes','No');
			IF ln_Button = 1 THEN
				--GO_ITEM ('copy_navdb.new_navdb');
				open_form( 'copy_tailored_data' ,activate ,session ,share_library_data ,pl_id);
			ELSE
				dsp_msg (  '''' || :copy_navdb.new_navdb || ''' data has been successfully copied from ''' || :navdb.navdb_id || '''.' || CHR (10) || 'Please query the new NAVDB data and check it.');
			END IF;
	ELSE
		dsp_msg (  '''' || :copy_navdb.new_navdb || ''' data has been successfully copied from ''' || :navdb.navdb_id || '''.' || CHR (10) || 'Please query the new NAVDB data and check it.');
	END IF;	
  
END;
--SCR 5582 -- 29-SEP-2020

 enableDisableCmc:
-- Start Fix SCR 6172- Ashish- 10-Aug
PROCEDURE enable_disable_cmc IS
	v_count  number;
Begin
	Select count(*)
	  Into v_count
	  From flight_management_system 
	 Where fms_id = nvl(:navdb.fms_id,fms_id)
	 and binary_format_type = 'CMC';

	IF v_count>0 THEN
		Set_Item_Property('navdb.cmc_customer_name',Enabled,Property_True);
		Set_Item_Property('navdb.cmc_customer_name',Insert_Allowed,Property_True);
		Set_Item_Property('navdb.cmc_customer_name',Update_Allowed,Property_True);
		set_item_property('NAVDB.cmc_customer_name',QUERYABLE, PROPERTY_TRUE);
		Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Visible,Property_True);
		Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Enabled,Property_True);
		Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Insert_Allowed,Property_True);
		Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Update_Allowed,Property_True);
		set_item_property('NAVDB.CMC_DEPENDENT_NAVDB',QUERYABLE, PROPERTY_TRUE); 
	ELSE
		
		Set_Item_Property('navdb.cmc_customer_name',Enabled,Property_False);
	--	Set_Item_Property('navdb.cmc_customer_name',Visible,Property_False);
		Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Visible,Property_False);
	END IF;
END;
--END Fix SCR 6172- Ashish- 10-Aug

 populateDsfVersion:
-- BEGIN SCR 07380 - Koti - 19-Apr-2022
PROCEDURE POPULATE_DSF_VERSION IS
	rg recordgroup;       
	nn number;
	rquery varchar2(600); 
BEGIN
	-- delete the old group  
	rg := find_group('dsfversions'); 
	if not id_null(rg) then
		delete_group(rg);
	end if;
	-- create list
	rg := create_group_from_query('dsfversions','select dbsign_ver rlabel, dbsign_ver rvalue from cptsc.dbsign_versions order by 1 asc' );
	-- populate the group
	nn := populate_group(rg);   
	if nn <> 0 then  
		dsp_msg('Populate group had error '||to_char(nn));        
	end if;
	populate_list('NAVDB.DBSIGN_VER',rg);
	
END;
--END SCR 07380 - Koti - 19-Apr-2022

 checkDsfVersion:
-- BEGIN SCR 07380 - Koti - 19-Apr-2022
PROCEDURE CHECK_DSF_VERSION IS
	ln_cnt Number;
BEGIN
	IF :NAVDB.DBSIGN_VER <> NVL(:NAVDB.DBSIGN_VER_L,'$') THEN	
 		SELECT COUNT(1)
		  INTO ln_cnt
		  FROM FLIGHT_MANAGEMENT_SYSTEM
		 WHERE FMS_ID = :NAVDB.FMS_ID
		   AND DBSIGN_VER = :NAVDB.DBSIGN_VER;
		 If ln_cnt = 0 Then
		 	 If display_alert.more_buttons (
	        'S',  'DSF Version Change', 'Selected DSF Version is different from FMS configured DSF version. Do you want to proceed?',
	        'Yes',  'No') = '2' THEN
	     		Raise form_trigger_failure;
	  	 End If;
		 End If;
	END IF;
END;
-- END SCR 07380 - Koti - 19-Apr-2022

 displayAlert:
PACKAGE BODY display_alert IS

-- Procedure ONE_BUTTON will display a one button allert
   procedure one_button 
    		(in_type		in	varchar2,
    		 in_title		in 	varchar2,
    		 in_message	in	varchar2) is
     begin
  		if in_type = 'S' then
    		alert_id := find_alert('stop_alert');
  		elsif in_type = 'C' then
    		alert_id := find_alert('caution_alert');
    	elsif in_type = 'F' then								--Added for the Fix SCR -06944 -Priyanka
    		alert_id := find_alert('FMS_ALERT');	--Added for the Fix SCR -06944 -Priyanka
  		else
    		alert_id := find_alert('note_alert');
  		end if;
  		set_alert_property(alert_id, TITLE, in_title);
  		set_alert_property(alert_id, ALERT_MESSAGE_TEXT,in_message);
  		button_num := show_alert(alert_id);  
     end one_button;
          
-- Function MORE_BUTTONS will display a three button alert
--           returning L if the left button was selected,
--                     C if the center button was selected or
--                     R if the right button was selected 
   Function more_buttons 
    		(in_type		in	varchar2,
    		 in_title		in 	varchar2,
    		 in_message	in	varchar2,
    		 in_label1  in  varchar2 := 'Yes',
    		 in_label2  in  varchar2 := 'No',
    		 in_label3  in  varchar2 := '') 
     Return number is
     begin
--  Find Alert     	
  		if in_type = 'S' then
    		alert_id := find_alert('stop_alert');
  		elsif in_type = 'C' then
    		alert_id := find_alert('caution_alert');
    	elsif in_type = 'F' then								--Added for the Fix SCR -06944 -Priyanka
    		alert_id := find_alert('FMS_ALERT');	--Added for the Fix SCR -06944 -Priyanka
  		else
    		alert_id := find_alert('note_alert');
  		end if;
		--  Set properties
      set_alert_button_property(alert_id, ALERT_BUTTON1, LABEL, in_label1);
      set_alert_button_property(alert_id, ALERT_BUTTON2, LABEL, in_label2);      
      set_alert_button_property(alert_id, ALERT_BUTTON3, LABEL, in_label3);            
  		set_alert_property(alert_id, TITLE, in_title);
  		set_alert_property(alert_id, ALERT_MESSAGE_TEXT,in_message);
  		button_num := show_alert(alert_id); 
		--  Reset button labels 
      set_alert_button_property(alert_id, ALERT_BUTTON1, LABEL, 'O.K.');
      set_alert_button_property(alert_id, ALERT_BUTTON2, LABEL, '');
      set_alert_button_property(alert_id, ALERT_BUTTON3, LABEL, '');
		-- Check button selected and return appropriate value
  		if button_num = ALERT_BUTTON1 then
  			return(1);
  		elsif button_num = ALERT_BUTTON2 then
  			return(2);
  		else
  			return(3);
  		end if;
     end more_buttons;      
END;


FormlevelTriggers:
 whenValidateItem:
-- Begin Fix - SCR 3693 - Sesha 
	:NAVDB.NOTES:=:CUSTOMER_INFO.NOTES;
-- End Fix - SCR 3693 - Sesha 

 whenNewItemInstance:
list_values;

 whenListChanged:
--Begin Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016
IF :SAVE_SELECTIONS.ACTION = 'S' THEN
	:SAVE_SELECTIONS.SSC_ID := SSC_ID_SEQ.NEXTVAL;
	:SAVE_SELECTIONS.TYPE := 'MANUAL';
	:SAVE_SELECTIONS.CYCLE := :GLOBAL.Processing_Cycle; 
	:SAVE_SELECTIONS.CREATED_ON := SYSDATE;
	--
	GO_ITEM ('SAVE_SELECTIONS.NAME');
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 			 Property_True);	
ELSIF :SAVE_SELECTIONS.ACTION = 'L' THEN
	:SAVE_SELECTIONS.TYPE := '';
	:SAVE_SELECTIONS.CYCLE := ''; 
	:SAVE_SELECTIONS.CREATED_ON := '';	
	:SAVE_SELECTIONS.ACTION := '';
	SET_CANVAS_PROPERTY ('SEL_CAN', Topmost_Tab_Page, 'MAIN');
	Go_Item('NavDB.NavDB_ID');
	Clear_Form; 
	INITIALIZE_FORM; 
	--
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
	--
	DECLARE
		pl_id       ParamList;
	BEGIN
		pl_id := Get_Parameter_List('openform');
		IF NOT Id_Null(pl_id) THEN 
			Destroy_Parameter_List(pl_id); 
		END IF;
		pl_id := Create_Parameter_List('openform');
		Add_Parameter(pl_id, 'Navdb_Id',TEXT_PARAMETER,:Navdb.Navdb_Id);
		Add_Parameter(pl_id, 'Data_Supplier',TEXT_PARAMETER,:Navdb.Data_Supplier);
		Add_Parameter(pl_id, 'Cycle',TEXT_PARAMETER,:Save_Selections.Cycle);
		open_form( lower('LOAD_SELECTIONS') ,activate ,no_session ,share_library_data);
	END;
	--
ELSE
	:SAVE_SELECTIONS.TYPE := '';
	:SAVE_SELECTIONS.NAME := '';
	:SAVE_SELECTIONS.CYCLE := ''; 
	:SAVE_SELECTIONS.COMMENTS := '';	
	:SAVE_SELECTIONS.CREATED_ON := '';
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
END IF;
--End Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016

 whenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.PACIFIC_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$PACIFIC',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Pacific East Region.');
	  		--east
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'S90000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N20000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N75000000','E180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'S90000000','E180000000');

				-- Begin Fix SCR 7887.01 -- Venkat M 03-FEB-2019
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,50,'S90000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,60,'S90000000','W180000000');
	  		-- End Fix SCR 7887.01 -- Venkat M 03-FEB-2019
	  		--west
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,70,'N75000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,80,'N10000000','W100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,90,'S90000000','W100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,100,'S90000000','W180000000');
	  			  		
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.PACIFIC_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$PACIFIC'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.PACIFIC_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.PACIFIC_GEO := :PARAMETER.PACIFIC_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.PACIFIC_GEO = 'Y' then
		:CONTROL_BLOCK.PACIFIC_GEO := 'N';
	elsif :CONTROL_BLOCK.PACIFIC_GEO = 'N' then
		:CONTROL_BLOCK.PACIFIC_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 keyNextItem:
Go_Item('FIND_IATA');	-- Fix - SCR 6944.00 - Eswar KC 

 keyDelrec:
if :system.cursor_block = 'CONTROL_BLOCK' then
	null;
else
	delete_record;
	Enable_disable_profile; -- SCR 4763 - Eswar KC	
	Enable_disable_valerie_IND; -- SCR 4777 - Eswar KC - 08-Mar-2010
  ENABLE_DISABLE_DSF_VER_UPDATE; -- SCR 07380 - Koti - 19-Apr-2022
  Enable_disable_brga_ident; 		  -- Fix - SCR 65351 - Venkat M - 26-FEB-2020  
end if;	

-- Begin Fix - SCR 5669 -Devi -- 24-AUG-2012

IF :SYSTEM.CURSOR_BLOCK= 'GEOGRAPHIC_AREA_POINT' 
	THEN
	 REFRESH_GEO_COUNT;
			IF 	(:SELECT_BY_GEOGRAPHIC_AREA.geo_count < 3 OR
			 (:SELECT_BY_GEOGRAPHIC_AREA.geo_count = 3 AND
			  :GEOGRAPHIC_AREA_POINT.latitude is null)) 
			  THEN
				dsp_msg('Minimum three Geographic Area Points are required for a Geo Area.');  
				raise form_trigger_failure;
			END IF;
END IF;

-- Begin Fix - SCR 5669 -Devi -- 24-AUG-2012

 onPopulateDetails:
--
-- Begin default relation declare section
--
DECLARE
  recstat     VARCHAR2(20) := :System.record_status;   
  startitm    VARCHAR2(61) := :System.cursor_item;   
  rel_id      Relation;
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  IF ( recstat = 'NEW' or recstat = 'INSERT' ) THEN   
    RETURN;
  END IF;
  --
  -- Begin HELIPORT_TO_SELECT detail program section
  --
  IF ( (:SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID is not null) ) THEN   
    rel_id := Find_Relation('SELECT_BY_HELIPORT_GROUP.SELECT_BY_HELIP_HELIPORT_TO_SE');   
    Query_Master_Details(rel_id, 'HELIPORT_TO_SELECT');   
  END IF;
  --
  -- End HELIPORT_TO_SELECT detail program section
  --

  IF ( :System.cursor_item <> startitm ) THEN     
     Go_Item(startitm);     
     Check_Package_Failure;     
  END IF;
END;
--
-- End default relation program section
--


 preBlock:
if :system.form_status = 'CHANGED' then
	if not id_null(find_timer('delete_geo_alarm')) then
		raise form_trigger_failure;
	end if;
end if;		

 postRecord:
-- Begin Fix - SCR 3693 - Sesha 
if :system.form_status = 'CHANGED' then
	:control_block.did := 'Y';
else
	:control_block.did := NULL;  --mvr SCR 7623
end if;
-- End Fix - SCR 3693 - Sesha 



 keyCommit:
if :system.form_status = 'CHANGED' then
	COMMIT_FORM;
	if :system.form_status != 'CHANGED' then
		QUERY_BLOCK_RECORDS('STD_HELIPORT');
	end if;	
end if;

 postQuery:
-- Start Fix SCR 7899.04 - Ashish N- 20-JUL-2018
DECLARE
	ls_Crate VARCHAR2(1);	
BEGIN
	:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND := :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB; -- Fix SCR 7899.04 - Ashish N- 20-JUL-2018
	ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	IF ls_Crate = 'Y' THEN
  set_item_instance_property('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', current_record,visual_attribute,'FORMAT_MEDIA_TYPE');
	END IF;
END;
-- End Fix SCR 7899.04 - Ashish N- 20-JUL-2018

 whenValidateRecord:
NULL;

 postInsert:
display_alert.one_button('S','Default SC','Default Selection Criteria is created for New Heliport Group.'); --Fix SCR 7273 --Madhu--29-AUG-2017
create_default_criteria(null,null,null,null,:SELECT_BY_HELIPORT_GROUP.select_by_id,'H');


 whenNewRecordInstance:
-- Start Fix SCR 7899.04 - Ashish N- 20-JUL-2018
DECLARE
	ls_Crate VARCHAR2(1);	
BEGIN
--	:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND := :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB; -- Fix SCR 7899.04 - Ashish N- 20-JUL-2018
	ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	IF ls_Crate = 'Y' THEN
  set_item_instance_property('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', current_record,visual_attribute,'FORMAT_MEDIA_TYPE');
	END IF;
END;
-- End Fix SCR 7899.04 - Ashish N- 20-JUL-2018

 onError:
DECLARE
   msgnum NUMBER       := error_CODE; 
   msgtxt VARCHAR2(80) := error_TEXT; 
   msgtyp VARCHAR2(3)  := error_TYPE; 
   v_timer_id TIMER;
BEGIN 
   Set_Application_Property(cursor_style,'DEFAULT');
   IF (msgnum = 40400 or msgnum = 40406 or msgnum = 40407) THEN 
      Message('Changes saved successfully'); 
   ELSIF msgnum in (41051, 40350, 47316, 40353,40401) then  -- scr 7773
   	  null;
   ELSIF msgnum = 41050 and :parameter.work_type = 'VIEW' then
   	  null;
   ELSIF msgnum in (40401, 40405) THEN 
      null;
   ELSIF msgnum = 40100 then
   		clear_message;
   		message('At the first record.');
   ELSIF msgnum = 40735 and msgtxt like '%01031%' then
   		clear_message;
   		dsp_msg(msgtxt||' Insufficient privileges. ');
   ELSIF msgnum in (40508,40509) then
   		dsp_msg(msgtxt||chr(10)||chr(10)||
   		'Please check the exact error message from the "Display Error" in the "HELP" menu');
   		--raise form_trigger_failure; 
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
  ELSIF msgnum IN (40200) THEN -- 41050
   	IF :parameter.upd_rec = 'Y' THEN
   		IF :parameter.work_type != 'VIEW' THEN
				DECLARE
				   v_nAllow_update   NUMBER := 0;
				   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
				   v_cBlock          VARCHAR2 (30) := :SYSTEM.cursor_block;
				BEGIN
				      IF :SYSTEM.record_status NOT IN ('NEW', 'INSERT') THEN
				         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
				         IF v_nAllow_update = 1 THEN
				            :PARAMETER.UPD_REC := 'N';
				            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
					         ELSE
					            :PARAMETER.UPD_REC := 'Y';
					            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
					            dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
					         END IF;
				      END IF;
				END;

   		END IF;
   	END IF;	
--End Fix - SCR 5820 - Eswar KC - 29-Jan-2013    				
  --SCR 7259 23-aug-2017
  --check 15-sep-2017
   ELSIF  :system.cursor_block = 'LISTS' and msgnum = 40102 AND :parameter.REC_CREATE = 'N' THEN
      --raise form_trigger_failure;
      v_timer_id := create_timer('LISTS',1); --populate orc_id from fms_orc table    
      -- till here 7259
   ELSE 
      display_alert.one_button('S','Error',msgtyp||'-'||TO_CHAR(msgnum)||': '||msgtxt); 
      --raise form_trigger_failure;
   END IF; 
END; 


 whenNewBlockInstance:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
		if :datatyp_rad.record_type_descr like 'CONTROLLED AIRSPACE' then
	 			populate_sua_rules('UC');
	 	elsif :datatyp_rad.record_type_descr like 'RESTRICTED AIRSPACE' then
	 			populate_sua_rules('UR');
	 	end if;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 keyExeqry:
declare
	ls_string varchar2(4000);  --Fix SCR 7762.01 -- Venkat M 10-Sep-2018
begin
if :system.cursor_block in ('CONTROL_BLOCK','SELECTION','DATATYP_RAD','RULES','SINGLE_VAL','MULT_VAL','LISTS') then
	dsp_msg('Execute query is not available in this block.');
	raise form_trigger_failure;
end if;
if :system.cursor_block in ('STD_HELIPORT','STD_AIRPORT','ICAO','AREA_CODE') then
	delete_group_row('Select_Group',ALL_ROWS);
elsif :system.cursor_block in ('SELECT_BY_AREA','SELECT_BY_ICAO','AIRPORT_TO_SELECT','HELIPRT_TO_SELECT') then
	delete_group_row('DeSelect_Group',ALL_ROWS);
end if;
if :system.cursor_block in ('AREA_CODE','ICAO','STD_AIRPORT','STD_HELIPORT','SELECT_BY_AREA','SELECT_BY_ICAO','AIRPORT_TO_SELECT','HELIPORT_TO_SELECT') then
	QUERY_BLOCK_RECORDS(:system.cursor_block,'KEY_EXE');	
else
	--Fix SCR 7762.01 VENKAT M --10-Sep-2018
	ls_string := GET_BLOCK_PROPERTY('NAVDB',DEFAULT_WHERE);
	IF :parameter.work_type != 'VIEW' THEN
	 		--:NAVDB.DATA_SUPPLIER := :GLOBAL.DATA_SUPPLIER;
	 		IF ls_string IS NULL THEN
	 			 ls_string := ' DATA_SUPPLIER = :GLOBAL.DATA_SUPPLIER ';
	 		ELSE
	 			 ls_string := ls_string||' AND DATA_SUPPLIER = :GLOBAL.DATA_SUPPLIER ';
	 		END IF;
	ELSE
		 NULL;
	END IF;	 
	IF ls_string is NULL THEN
		ls_string := NULL;
	ELSE
	  ls_string := ls_string||' AND';
	END IF;	  
	IF :parameter.TYPE_OF_LOGON = 'C' THEN
		  ls_string := RTRIM(ls_string,'AND');--||' FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE IS NULL) '; --Fix SCR 8027--Madhu -- 8051
	ELSIF :parameter.TYPE_OF_LOGON = 'D' THEN
		  ls_string := ls_string||' FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = ''DDC'') ';
	ELSIF :parameter.TYPE_OF_LOGON = 'O' THEN
	 	  ls_string := ls_string||' FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = ''OBS'') ';
	ELSIF :parameter.TYPE_OF_LOGON = 'R' THEN
	 	  ls_string := ls_string||' FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = ''CRH'') ';
	ELSIF :parameter.TYPE_OF_LOGON = 'A' THEN
	 	  ls_string := ls_string||' FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = ''ATD'') ';
	END IF;
	set_block_property('NAVDB',DEFAULT_WHERE,ls_string);
  --END Fix SCR 7762.01

	check_to_commit('EXECUTE_QUERY');  --Fix - SCR 5820 - Madhu - 15-Feb-2013
	corept_execute_query;	

	--Fix SCR 7159 --Harikrishna--22-Mar-2017--Added to disable the Export data functionality.
	set_menu_item_property( rtrim('Tools')||'.'||ltrim('Export_Data') ,ENABLED ,PROPERTY_FALSE); 
	
	--Begin Fix SCR 7762.01 -- Venkat M  --11-Sep-2018
  IF :parameter.work_type = 'VIEW' THEN
		BEGIN
			SELECT MAX(processing_cycle) INTO :control_block.proc_cycle
				FROM pl_std_airport
				WHERE data_supplier = :NAVDB.DATA_SUPPLIER;
		EXCEPTION
			WHEN no_data_found THEN
				:control_block.proc_cycle := :global.processing_cycle;
		END;
	END IF;  	
	-- Till here SCR 7762.01 -- Venkat M
end if;

Enable_disable_profile; -- SCR 4763 - Eswar KC
Enable_disable_valerie_IND; -- SCR 4777 - Eswar KC - 08-Mar-2010
ENABLE_DISABLE_DSF_VER_UPDATE; -- SCR 07380 - Koti - 19-Apr-2022
Enable_disable_brga_ident; 			-- Fix - SCR 65351 - Venkat M - 26-FEB-2020
/********************************************/
/********************************************/
-- Updated for Plotting Function under scr 2304.00
                    
if :system.mode = 'NORMAL'  
	     and NVL(get_block_property(NAME_IN(':system.current_block'),QUERY_HITS),'0') >=1 THEN
					set_item_property('CONTROL_BLOCK.PLOT',VISIBLE, PROPERTY_TRUE); -- MOD
					set_item_property('CONTROL_BLOCK.PLOT',ENABLED, PROPERTY_TRUE); -- MOD
					set_item_property('CONTROL_BLOCK.GEARTH',VISIBLE, PROPERTY_TRUE); --Fix SCR 6088 --Madhu--11-Mar-2014
					set_item_property('CONTROL_BLOCK.GEARTH',ENABLED, PROPERTY_TRUE);	--Fix SCR 6088 --Madhu--11-Mar-2014	
 ELSe
 			  set_item_property('CONTROL_BLOCK.PLOT',VISIBLE, PROPERTY_FALSE); -- MOD
 			  set_item_property('CONTROL_BLOCK.GEARTH',VISIBLE, PROPERTY_FALSE);--Fix SCR 6088 --Madhu--11-Mar-2014
 end if;
 
:global.table_name :='AIRPORT';
:global.data_type :='AIRPORT';
/********************************************/
/********************************************/
END;


 keyNxtrec:
if :system.cursor_block = 'CONTROL_BLOCK' then
	null;
else
	next_record;
end if;	

 keyEntqry:
if :system.cursor_block in ('CONTROL_BLOCK','SELECTION','DATATYP_RAD','RULES','SINGLE_VAL','MULT_VAL','LISTS') then
	dsp_msg('Enter query is not available in this block.');
	raise form_trigger_failure;
end if;
if :system.cursor_block = 'NAVDB' then
	:control_block.world_geo := 'N';
	set_item_instance_property('CONTROL_BLOCK.WORLD_GEO', current_record,visual_attribute,'PLAIN');
end if;
if :system.cursor_block = 'STD_AIRPORT' then
	:std_airport.RUNWAY_LENGTH := null;
	:std_airport.surface_code := null;
	:std_airport.FOUR_ALPHA_TERMINAL := 'N';
end if;	

Enable_disable_profile; 							-- Fix - SCR 4763.00 - Eswar KC
Enable_disable_valerie_IND; 					-- Fix - SCR 4777.00 - Eswar KC - 08-Mar-2010
:CONTROL_BLOCK.ORC_APPLIED := NULL; 	-- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
ENABLE_DISABLE_DSF_VER_UPDATE;        -- SCR 07380 - Koti - 19-Apr-2022
Enable_disable_brga_ident; 					  -- Fix - SCR 65351 - Venkat M - 26-FEB-2020
enable_disable_cmc; ----Fix SCR 6172- Ashish- 10-Aug
 /*  	  set_item_property('NAVDB.UNSIGNED_DB',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.UNSIGNED_DB',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.UNSIGNED_DB',UPDATE_ALLOWED, PROPERTY_TRUE);
      set_item_property('NAVDB.PROFILE_NUMBER',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.PROFILE_NUMBER',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.PROFILE_NUMBER',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.PROFILE_NUMBER',UPDATE_ALLOWED, PROPERTY_TRUE);
   	  set_item_property('NAVDB.BRGA_IDENT',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.BRGA_IDENT',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.BRGA_IDENT',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.BRGA_IDENT',UPDATE_ALLOWED, PROPERTY_TRUE);
   	  set_item_property('NAVDB.GEN_VALERIE',visible, PROPERTY_TRUE);   	
   	  set_item_property('NAVDB.GEN_VALERIE',ENABLED, PROPERTY_TRUE);
      set_item_property('NAVDB.GEN_VALERIE',INSERT_ALLOWED, PROPERTY_TRUE); 
      set_item_property('NAVDB.GEN_VALERIE',UPDATE_ALLOWED, PROPERTY_TRUE);      
        */    
--clear_block;
--Begin Fix -- SCR 5820 -- Madhu --15-Feb-2013
IF :system.mode = 'NORMAL' AND :parameter.work_type != 'VIEW' THEN
	check_to_commit('ENTER_QUERY');
END IF;
--End Fix -- SCR 5820 -- Madhu --15-Feb-2013
corept_enter_query;
if :system.mode = 'NORMAL' then
	unset_query_menu_items;
end if;


 whenButtonPressed:
if :system.cursor_block = 'WEBUTIL' then 
	next_block;
end if;
WebUtil_Core.ShowBeans(false);

 preQuery:
begin
	select 'Y' into :control_block.WORLD_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = 'WORLD'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.WORLD_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.WORLD_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.WORLD_GEO', current_record,visual_attribute,'PLAIN');
end;

--Begin Fix SCR 7887.01 -- Venkat M -- 06-Dec-2018
begin
	select 'Y' into :control_block.AFRICA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$AFRICA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.AFRICA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.AFRICA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.AFRICA_GEO', current_record,visual_attribute,'PLAIN');
end;

--dsp_msg('pre query :control_block.EUROPE_GEO '||:control_block.EUROPE_GEO);

begin
	select 'Y' into :control_block.EUROPE_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$EUROPE'
	and navdb_id = :NAVDB.NAVDB_ID;
	
	--dsp_msg('post query :control_block.EUROPE_GEO '||:control_block.EUROPE_GEO);
	
	set_item_instance_property('CONTROL_BLOCK.EUROPE_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	--dsp_msg('no data found');
	:control_block.EUROPE_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.EUROPE_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.EURASIA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$EURASIA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.EURASIA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.EURASIA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.EURASIA_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.MIDDLE_EAST_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$MIDDLE_EAST'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.MIDDLE_EAST_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.MIDDLE_EAST_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.MIDDLE_EAST_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.NORTH_AMERICA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$NORTH_AMERICA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.NORTH_AMERICA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.NORTH_AMERICA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.NORTH_AMERICA_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.SOUTH_AMERICA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$SOUTH_AMERICA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.SOUTH_AMERICA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.SOUTH_AMERICA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.SOUTH_AMERICA_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.PACIFIC_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$PACIFIC'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.PACIFIC_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.PACIFIC_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.PACIFIC_GEO', current_record,visual_attribute,'PLAIN');
end;
--End Fix SCR 7887.01 -- Venkat M -- 06-Dec-2018

 whenCreateRecord:

:geographic_area_point.sequence_number := :system.trigger_record*10;
:SELECT_BY_GEOGRAPHIC_AREA.geo_count := :SELECT_BY_GEOGRAPHIC_AREA.geo_count + 1;


 whenRemoveRecord:
IF :GEOGRAPHIC_AREA_POINT.SEQUENCE_NUMBER IS NOT NULL THEN
	:SELECT_BY_GEOGRAPHIC_AREA.geo_count := :SELECT_BY_GEOGRAPHIC_AREA.geo_count - 1;
END IF;

 postBlock:
--Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
--:control_block.apt_ident_temp:=:control_block.airport_ident; --Fix -SCR 5694 - Devi - 01-Oct-2012
--:control_block.apt_icao_temp:=:control_block.airport_icao;   --Fix -SCR 5694 - Devi - 01-Oct-2012
:control_block.airport_ident:=null;
:control_block.airport_icao:=null;
:control_block.heliport_ident:=null;
:control_block.heliport_icao:=null;
:control_block.ata_iata_designator:=null; --Fix SCR 7647 --Madhu
--End Fix SCR 0087 -- Madhu -- 16-Mar-2012

 preUpdate:
		CHECK_TO_COMMIT('UPDATE'); 	--Fix - SCR 5820 - Eswar KC - 12-Feb-2013

 keyClrblk:
dsp_msg('Clear Block Option is not allowed for this block');--Fix SCR 87 -- Madhu --19-Mar-2012

 onCheckDeleteMaster:
--
-- Begin default relation declare section
--
DECLARE
  Dummy_Define CHAR(1);
  --
  -- Begin HELIPORT_TO_SELECT detail declare section
  --
  CURSOR HELIPORT_TO_SELECT_cur IS      
    SELECT 1 FROM AIRPORT_TO_SELECT A     
    WHERE A.SELECT_BY_ID = :SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID;
  --
  -- End HELIPORT_TO_SELECT detail declare section
  --
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  --
  -- Begin HELIPORT_TO_SELECT detail program section
  --
  OPEN HELIPORT_TO_SELECT_cur;     
  FETCH HELIPORT_TO_SELECT_cur INTO Dummy_Define;     
  IF ( HELIPORT_TO_SELECT_cur%found ) THEN     
    Message('Cannot delete master record when matching detail records exist.');     
    CLOSE HELIPORT_TO_SELECT_cur;     
    RAISE Form_Trigger_Failure;     
  END IF;
  CLOSE HELIPORT_TO_SELECT_cur;
  --
  -- End HELIPORT_TO_SELECT detail program section
  --
END;
--
-- End default relation program section
--


 whenMouseClick:
click_detail_radio;

 whenMouseDoubleclick:
click_detail_radio;

 whenMouseEnter:
dsp_msg('enabled/not '|| get_Item_Property('DATATYP_RAD.SELECT_ALL',ENABLED));

 keyDown:
null;

 keyUp:
--Fix SCR 7259 15-Aug-2017 Venkat M
declare
	v_timer_id 	timer;
	cst_ms	 CONSTANT   NUMBER(2) := 1;
begin	
IF :SYSTEM.CURSOR_RECORD = 1 THEN
	NULL;
ELSE
	PREVIOUS_RECORD;
END IF;	
-- till here
end;
--Fix SCR 7259 15-Aug-2017 Venkat M

 whenRadioChanged:
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
	IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
	ELSE
			DECLARE
			   ln_Allow_update   NUMBER := 0;
			   lc_Navdb_Block    VARCHAR2 (30) := 'NAVDB';
			   v_button number;
			BEGIN	
		   	ln_Allow_update := check_valid_navdb (:global.processing_cycle, :global.dcr_number, :NAVDB.DATA_SUPPLIER, Name_In (lc_Navdb_Block || '.navdb_id'));
		   	IF ln_Allow_update = 1 THEN
									
					 :parameter.upd_rec := 'N';
		       Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
		       --Start SCR 7420.01 Ashish N 07-Jul-2017
		        IF :select_all_rules.ixrrd != 'N' and :parameter.flag != 'Y' THEN
								v_button :=	display_alert.more_buttons ('S','Change Selection Criteria ',
							 		'You are going to change the Selections. Please check and Confirm.'||chr(10)||
							 		'Please pick your choice carefully:'||chr(10)||chr(10),'Change','Cancel');
						IF v_button = 1 THEN
						--Set the flag here to Y
							:parameter.flag := 'Y';
							
						  Go_Block('DATATYP_RAD');
							FIRST_RECORD;
							
						  IF :select_all_rules.ixrrd = 'I' THEN							  -- Set Include All 
								LOOP
								  :datatyp_rad.options := 'I';
								  click_datatyp_radio;
									EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
									NEXT_RECORD;
								END LOOP;							
							ELSIF :select_all_rules.ixrrd = 'X' THEN							-- Set Exclude All 
								LOOP
								  :datatyp_rad.options := 'X';
								  click_datatyp_radio;
									EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
									NEXT_RECORD;
								END LOOP;							
							ELSIF :select_all_rules.ixrrd = 'R' THEN							-- Set Ref Only All 
								if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
									dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
								else
									LOOP
									  :datatyp_rad.options := 'N';
						        click_datatyp_radio;
										EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
										NEXT_RECORD;
									END LOOP;		
								end if;		
							ELSIF :select_all_rules.ixrrd = 'D' THEN							-- Set Default All 
									LOOP
									  :datatyp_rad.options := 'D';
						        click_datatyp_radio;
										EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
										NEXT_RECORD;
									END LOOP;			
									:parameter.flag := 'N';   --SCR 7420.01 Ashish N 07-JUL-2017
							ELSE 
								 NULL;																				  -- select_all_rules.ixrrd Is 'None'
							END IF;
							FIRST_RECORD;
							:parameter.flag := 'N'; -- --SCR 7420.01 Ashish N 07-JUL-2017
						ELSE
							--set the flag to N here	
							:parameter.flag := 'N';	
						  :SELECT_ALL_RULES.IXRRD := :SELECT_ALL_RULES.OLD_IXRRD;
						  	END IF;
						END IF;
			   ELSE   
			      :parameter.upd_rec := 'Y';
			      Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
			      Dsp_Action_Msg ('U',NULL, name_in('global.dcr_number'),:global.processing_cycle,name_in(lc_Navdb_Block||'.navdb_id'));
						RAISE Form_Trigger_Failure;         
			   END IF;   
			   :parameter.flag := 'N';	----SCR 7420.01 Ashish N 07-JUL-2017
			   --End SCR 7420.01 Ashish N 07-JUL-2017 
			END;	
END IF;
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016

 whenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 onMessage:
DECLARE
   msgnum NUMBER       := MESSAGE_CODE; 
   msgtxt VARCHAR2(80) := MESSAGE_TEXT; 
   msgtyp VARCHAR2(3)  := MESSAGE_TYPE; 
BEGIN 
	Set_Application_Property(cursor_style,'DEFAULT');
   IF (msgnum = 40400 or msgnum = 40406 or msgnum = 40407) THEN 
     CLEAR_MESSAGE;
     Message('Record has been saved successfully'); 
   ELSIF msgnum in (41051,40350,47316,40353,40401) then  -- scr 7773
   	  null;
   ELSIF msgnum in (40401, 40405) THEN 
      null;
   ELSE 
      display_alert.one_button('S','Error',msgtyp||'-'||TO_CHAR(msgnum)||': '||msgtxt); 
      raise form_trigger_failure;
   END IF; 
END; 

 keyNxtblk:
null;


 keyPrvblk:
null;

 keyClrfrm:
null;

 keyCrerec:
if :system.cursor_block in ('CONTROL_BLOCK','DATATYP_RAD','RULES','COPY_NAVDB','SINGLE_VAL',
	'RECORD_SUB_TYPE','SELECTION','RUNWAY_SURFACE','NAVDB_ORC') then
	null;
else
	DECLARE
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
   cur_rec VARCHAR2(5);  --SCR 7259 Venkat M -15-Aug-2017
	BEGIN
		  IF :SYSTEM.CURSOR_BLOCK = 'LISTS' THEN            	  
       	 :PARAMETER.REC_CREATE := 'Y';
      END IF; 	 

    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
            Set_Block_Property (:SYSTEM.cursor_block, UPDATE_ALLOWED, PROPERTY_TRUE);
            CREATE_RECORD;
            --SCR 7259  23-aug-2017 new record creation
         ELSE
            :PARAMETER.UPD_REC := 'Y';
            Set_Block_Property (:SYSTEM.cursor_block, UPDATE_ALLOWED, PROPERTY_FALSE);
            dsp_action_msg ('I',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
						RAISE Form_Trigger_Failure;         
         END IF;
END;
end if;	

 keyDuprec:
declare
	v_block varchar2(30) := :system.cursor_block;
	v_id    number;
begin
	if :system.cursor_block in ('CONTROL_BLOCK','DATATYP_RAD','RULES','COPY_NAVDB','SINGLE_VAL','SELECTION') then
		null;
	else	
		duplicate_record;
		if v_block in ('SELECT_BY_GEOGRAPHIC_AREA','SELECT_BY_AREA','SELECT_BY_ICAO','SELECT_BY_AIRPORT_GROUP','SELECT_BY_HELIPORT_GROUP') then
			select select_by_id_seq.NEXTVAL into v_id from dual;
			copy(v_id,v_block||'.SELECT_BY_ID');
		elsif v_block = 'GEOGRAPHIC_AREA_POINT' then
			:GEOGRAPHIC_AREA_POINT.SEQUENCE_NUMBER := :system.trigger_record*10;
		elsif v_block in ('LISTS','MULT_VAL') then	
			copy(:system.trigger_record,v_block||'.SEQ');
		end if;
	end if;	
end;	
	


 keyPrvrec:
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
IF :SYSTEM.Cursor_Block = 'CONTROL_BLOCK' THEN
    NULL;
ELSE
    PREVIOUS_RECORD;
END IF;
-- End Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

 keyExit:
DECLARE
    ls_Form_Id     FORMMODULE;
    ls_Data_type   VARCHAR2(30);
   ls_process_id WEBUTIL_HOST.process_id;
BEGIN 
    ls_Form_Id    := FIND_FORM( lower('NAVDB_SETUP'));
    ls_Data_type  := TO_CHAR(ls_Form_Id.ID);
		
		if :parameter.work_type != 'VIEW' then
			Set_Application_Property(cursor_style,'DEFAULT');
			if :system.cursor_block in ('RULES','SINGLE_VAL','MULT_VAL','LISTS') then
				dsp_msg('You must back to the main record then to exit the form.');
				raise form_trigger_failure;
			end if;
	-- Begin Fix - SCR 3215 - Sesha - 05-Dec-2008	
		/*if (:system.cursor_block = 'AIRPORT_TO_SELECT' and :system.cursor_record = 1)
				or :system.cursor_block = 'STD_AIRPORT' then
			if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME is not null and :AIRPORT_TO_SELECT.AIRPORT_IDENT is null then
				dsp_msg('Please select at lease one airport for group '''||:SELECT_BY_AIRPORT_GROUP.GROUP_NAME||'''');
				if :system.mode = 'ENTER-QUERY' then
					exit_form;
				end if;
				raise form_trigger_failure;
			end if;
		end if;*/
 	-- End Fix - SCR 3215 - Sesha - 05-Dec-2008
	-- Begin Fix - SCR 3215 - Neelima - 01-Sep-2010
	/*	if (:system.cursor_block = 'HELIPORT_TO_SELECT' and :system.cursor_record = 1)
				or :system.cursor_block = 'STD_HELIPORT' then
			if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME is not null and :HELIPORT_TO_SELECT.HELIPORT_IDENT is null then
				dsp_msg('Please select at lease one Heliport for group '''||:SELECT_BY_HELIPORT_GROUP.GROUP_NAME||'''');
				if :system.mode = 'ENTER-QUERY' then
					exit_form;
				end if;
				raise form_trigger_failure;
			end if;
		end if;*/
		-- End Fix - SCR 3215 - Neelima - 01-Sep-2010
			if :system.cursor_block = 'GEOGRAPHIC_AREA_POINT' and 
				(:SELECT_BY_GEOGRAPHIC_AREA.geo_count < 3 or
				 (:SELECT_BY_GEOGRAPHIC_AREA.geo_count = 3 and
				  :GEOGRAPHIC_AREA_POINT.latitude is null)) then
				dsp_msg('Please enter at least three Geographic Area Points.');
				raise form_trigger_failure;
			END IF;
			if get_group_row_count(find_group('Refresh_AAL_Group')) > 0 then
				dsp_msg('Airport Airway Low must be refreshed before exit because of the new entry in the Airport List. Click the Refresh Airport Airway Low button to start.');
				raise form_trigger_failure;
			end if;	
		end if;
		
	   IF Plot_Global_Pkg.ltab_Process_ID.COUNT >= 1 THEN
	       
	       FOR plot_exe_no IN Plot_Global_Pkg.ltab_Process_ID.FIRST..Plot_Global_Pkg.ltab_Process_ID.LAST
	       LOOP
	          IF Plot_Global_Pkg.ltab_Process_ID(plot_exe_no).ls_DataType = ls_Data_type THEN
	             --Plot_Global_Pkg.Exit_CorePTDU_Plot(Plot_Global_Pkg.ltab_Process_ID(plot_exe_no).ln_Process_ID);
             ls_process_id.handle :=TO_number(Plot_Global_Pkg.ltab_Process_ID(plot_exe_no).ln_Process_ID);
             --FORMS11g PITSS
             WEBUTIL_HOST.Terminate_Process(ls_process_id);
	          END IF;   
	      END LOOP; 
	   
	   END IF;
  --Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
		IF :SYSTEM.FORM_STATUS = 'CHANGED' and :PARAMETER.WORK_TYPE != 'VIEW' THEN
		  CHECK_TO_COMMIT('EXIT');
		ELSE
			Set_Application_Property(cursor_style,'DEFAULT');
			Exit_form(NO_VALIDATE);
		END IF;
		-- Exit_form(); 
  --End Fix - SCR 5820 - Eswar KC - 29-Jan-2013		
END;		

 onClearDetails:
--
-- Begin default relation program section
--
BEGIN
  Clear_All_Master_Details;
END;
--
-- End default relation program section
--

 whenNewFormInstance:
Initialize_Form;

-- SCR 4763 - Eswar KC - 23-Feb-2010
    set_item_property('NAVDB.PROFILE_NUMBER',ENABLED, PROPERTY_FALSE);
    set_item_property('NAVDB.PROFILE_NUMBER',visible, PROPERTY_FALSE);         
-- SCR 4763 - Eswar KC - 23-Feb-2010
-- SCR 4777 - Eswar KC - 08-Mar-2010
    set_item_property('NAVDB.GEN_VALERIE',ENABLED, PROPERTY_FALSE);
    set_item_property('NAVDB.GEN_VALERIE',visible, PROPERTY_FALSE);         
-- SCR 4777 - Eswar KC - 08-Mar-2010

--Begin SCR 7607.01 --Madhu --02-MAR-2018
BEGIN
	SELECT MAX(processing_cycle) INTO :control_block.proc_cycle
	FROM pl_std_airport
	WHERE data_supplier = :GLOBAL.DATA_SUPPLIER;
EXCEPTION
	WHEN no_data_found THEN
		 :control_block.proc_cycle := :global.processing_cycle;
END;
--End SCR 7607.01 --Madhu --02-MAR-2018

set_fms_id; -- Fix - SCR 6704.01 - Eswar KC - 28-Aug-2015

if :parameter.work_type != 'VIEW' then
	-- Create the Refresh AAL Records Group
	declare
		group_id       recordgroup;
		col1_id        groupcolumn;
		col2_id        groupcolumn;	
	begin		
		group_id := create_group('Refresh_AAL_Group');
		col1_id := Add_group_column(group_id,'airport_ident',char_column,4);
		col2_id := Add_group_column(group_id,'airport_icao',char_column,2);
	end;
	begin
		select processing_cycle into :global.aal_cycle
  	from airport_airway_low
  	where data_supplier = :NAVDB.DATA_SUPPLIER
  	and   rownum = 1;
	exception
		when no_data_found then
		:global.aal_cycle := null;
	end;
end if;
set_block;
if :parameter.work_type = 'VIEW' then
		--Fix SCR 7159 --Harikrishna--22-Mar-2017--Added to disable the Export data functionality.
  	set_menu_item_property( rtrim('Tools')||'.'||ltrim('Export_Data') ,ENABLED ,PROPERTY_FALSE);
	
	set_block_property('SINGLE_VAL',INSERT_ALLOWED, PROPERTY_FALSE);
 	set_block_property('SINGLE_VAL',UPDATE_ALLOWED, PROPERTY_FALSE);
 	set_block_property('SINGLE_VAL',DELETE_ALLOWED, PROPERTY_FALSE);
 	set_item_property('LISTS.DONE_LIST',ENABLED,PROPERTY_FALSE);
 	set_item_property('LISTS.CANCEL_LIST',LABEL,'Go Back');
 	--set_block_property('LISTS',INSERT_ALLOWED, PROPERTY_FALSE);
 	set_block_property('LISTS',UPDATE_ALLOWED, PROPERTY_FALSE);
 	set_block_property('LISTS',DELETE_ALLOWED, PROPERTY_FALSE);
--Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
  set_block_property('CUSTOMER_INFO',UPDATE_ALLOWED, PROPERTY_FALSE);
	set_block_property('CUSTOMER_INFO',DELETE_ALLOWED, PROPERTY_FALSE);
	set_block_property('CUSTOMER_INFO',INSERT_ALLOWED, PROPERTY_FALSE);
--End Fix SCR 0087 -- Madhu -- 16-Mar-2012
	set_item_property('CONTROL_BLOCK.COPY_NAVDB',enabled, PROPERTY_FALSE);
	set_item_property('MULT_VAL.DONE',enabled, PROPERTY_FALSE);
	set_item_property('SINGLE_VAL.DONE',enabled, PROPERTY_FALSE);
	set_item_property('RECORD_SUB_TYPE.DONE',enabled, PROPERTY_FALSE);
	set_item_property('RECORD_SUB_TYPE.CHECK',enabled, PROPERTY_FALSE);
	set_item_property('RECORD_SUB_TYPE.CLEAR',enabled, PROPERTY_FALSE);
	set_item_property('RUNWAY_SURFACE.DONE',enabled, PROPERTY_FALSE);
	set_item_property('RUNWAY_SURFACE.CHECK_ALL_SOFT',enabled, PROPERTY_FALSE);
	set_item_property('RUNWAY_SURFACE.CHECK_ALL_HARD',enabled, PROPERTY_FALSE);
	set_item_property('RUNWAY_SURFACE.CLEAR_ALL_SOFT',enabled, PROPERTY_FALSE);
	set_item_property('RUNWAY_SURFACE.CLEAR_ALL_HARD',enabled, PROPERTY_FALSE);
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );						
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016	
-- Begin Fix - SCR 6503.01 - Eswar KC - 15-Dec-2014
		SET_TAB_PAGE_PROPERTY('SEL_CAN.COPY_NAVDB',Enabled,PROPERTY_FALSE);
		set_item_property('CONTROL_BLOCK.UPDATE_FOCALS',enabled, PROPERTY_FALSE);
		SET_TAB_PAGE_PROPERTY('SEL_CAN.SAVE_LOAD_SEL',Enabled,PROPERTY_FALSE); -- Fix - SCR 6114.01 - Eswar KC
	else
		SET_TAB_PAGE_PROPERTY('SEL_CAN.SAVE_LOAD_SEL',Enabled,PROPERTY_TRUE); -- Fix - SCR 6114.01 - Eswar KC	
		SET_TAB_PAGE_PROPERTY('SEL_CAN.COPY_NAVDB',Enabled,PROPERTY_TRUE);		
		set_item_property('CONTROL_BLOCK.UPDATE_FOCALS',enabled, PROPERTY_TRUE);
-- End Fix - SCR 6503.01 - Eswar KC - 15-Dec-2014
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_TRUE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_TRUE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_TRUE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_TRUE );
	SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_TRUE );	         	
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016		
	set_block_property('SINGLE_VAL',INSERT_ALLOWED, PROPERTY_TRUE);
 	set_block_property('SINGLE_VAL',UPDATE_ALLOWED, PROPERTY_TRUE);
 	set_block_property('SINGLE_VAL',DELETE_ALLOWED, PROPERTY_TRUE);
 	set_item_property('LISTS.DONE_LIST',ENABLED,PROPERTY_TRUE);
 	set_item_property('LISTS.CANCEL_LIST',LABEL,'Cancel');
 	--set_block_property('LISTS',INSERT_ALLOWED, PROPERTY_TRUE);
 	set_block_property('LISTS',UPDATE_ALLOWED, PROPERTY_TRUE);
 	set_block_property('LISTS',DELETE_ALLOWED, PROPERTY_TRUE);
--Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
 	set_block_property('CUSTOMER_INFO',UPDATE_ALLOWED, PROPERTY_TRUE);
  set_block_property('CUSTOMER_INFO',DELETE_ALLOWED, PROPERTY_TRUE);
  set_block_property('CUSTOMER_INFO',INSERT_ALLOWED, PROPERTY_TRUE);
--End Fix SCR 0087 -- Madhu -- 16-Mar-2012  
 	set_item_property('CONTROL_BLOCK.COPY_NAVDB',enabled, PROPERTY_TRUE);
 	set_item_property('MULT_VAL.DONE',enabled, PROPERTY_TRUE);
 	set_item_property('SINGLE_VAL.DONE',enabled, PROPERTY_TRUE);
 	set_item_property('RECORD_SUB_TYPE.DONE',enabled, PROPERTY_TRUE);
	set_item_property('RECORD_SUB_TYPE.CHECK',enabled, PROPERTY_TRUE);
	set_item_property('RECORD_SUB_TYPE.CLEAR',enabled, PROPERTY_TRUE);
	set_item_property('RUNWAY_SURFACE.DONE',enabled, PROPERTY_TRUE);
	set_item_property('RUNWAY_SURFACE.CHECK_ALL_SOFT',enabled, PROPERTY_TRUE);
	set_item_property('RUNWAY_SURFACE.CHECK_ALL_HARD',enabled, PROPERTY_TRUE);
	set_item_property('RUNWAY_SURFACE.CLEAR_ALL_SOFT',enabled, PROPERTY_TRUE);
	set_item_property('RUNWAY_SURFACE.CLEAR_ALL_HARD',enabled, PROPERTY_TRUE);
end if; 	
/*if :NAVDB.DATA_SUPPLIER = 'J' then
	set_item_property('STD_AIRPORT.SURFACE_CODE',enabled,property_true);
	set_item_property('STD_AIRPORT.SURFACE_CODE',visible,property_true);	
else*/ -- Commented for SCR 6510 --Madhu
	set_item_property('STD_AIRPORT.SURFACE_CODE',visible,property_false);	
	set_item_property('STD_AIRPORT.SURFACE_CODE',enabled,property_false);	
--end if;	 -- Commented for SCR 6510 --Madhu

:PARAMETER.SAVE_BUTTON := 1; --scr 7259 -- 15-AUG-2017

POPULATE_FOCAL; 											-- Fix - SCR 3701.00 - Sesha

POPULATE_DSF_VERSION;                 -- SCR 07380 - Koti - 19-Apr-2022

:CONTROL_BLOCK.ORC_APPLIED := NULL; 	-- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

:CONTROL_BLOCK.REP_TYPE := 'P'; -- Venkat M -- SCR 05684.01 -- 21-May-2020

Show_View('SEL_CAN'); 								-- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

 preCommit:
/*
    SCR 0143 --Madhu -- 18-Apr-2012 
    This SCR is Created to bring up all the updates done to this form from baseline version of build 229A to 236
	(SCR no's 5196,3358,5215,5329)
    
*/
/*DECLARE
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
	IF :System.Current_Block != 'NAVDB' THEN 
    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
           -- Set_Block_Property ('LISTS', UPDATE_ALLOWED, PROPERTY_TRUE);
         ELSE
            :PARAMETER.UPD_REC := 'Y';
           -- Set_Block_Property ('LISTS', UPDATE_ALLOWED, PROPERTY_FALSE);
            dsp_action_msg ('I',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
						RAISE Form_Trigger_Failure;         
         END IF;
   END IF;
END;*/
 -- Begin Fix - SCR 5190 - Eswar KC - 2-Aug-2011
	declare
		v_count number;
	
	begin
		select count(fms_id) into v_count from
		       (select fms_id from flight_management_system where fms_id = :navdb.fms_id
		        and binary_format_type like 'K%');
		        
		if v_count > 0 then        
		   if :navdb.profile_number is null then
		   	dsp_msg('Please provide valid profile number');
		   	raise form_trigger_failure;
		   end if;
		end if;  
  end;		
-- End Fix - SCR 5190 - Eswar KC - 2-Aug-2011	
-- Begin Fix - SCR 5329 - Eswar KC -08 Feb 2012
DECLARE
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
BEGIN
   IF :navdb.navdb_id IS NOT NULL
   THEN
      FOR fms_id_rec IN fms_id_cur
      LOOP
         IF fms_id_rec.fms_id = :navdb.fms_id
         THEN
            IF forms_utilities.check_ident_for_alphanum (:navdb.navdb_id)
            THEN
               display_alert.one_button
                  ('S',
                   'Change FMS ID/NavDB ID',
                      'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
                   || CHR (10)
                   || 'Change FMS ID or NavDB ID'
                  );
               RAISE form_trigger_failure;
            END IF;
         END IF;
      END LOOP;
   END IF;
END;

-- End Fix - SCR 5329 - Eswar KC -08 Feb 2012	

--Imran Start CMC SCR 7375.01
Declare
	v_timer_id Timer;
Begin
	
	IF (NVL(:navdb.binary_format_type,'') = 'CMC') THEN
		IF :navdb.cmc_dependent_navdb IS NULL THEN
			dsp_msg(Get_Item_Property('NAVDB.CMC_DEPENDENT_NAVDB',PROMPT_TEXT)||' is required. Please enter ');
			Raise Form_Trigger_Failure;
		ELSIF :navdb.cmc_customer_name IS NULL THEN
			dsp_msg(Get_Item_Property('NAVDB.cmc_customer_name',PROMPT_TEXT)||' is required. Please enter ');
			Raise Form_Trigger_Failure;
		END IF;
		v_timer_id := create_timer('orc_alarm',50); --populate orc_id from fms_orc table    
	  
	END IF;
End;

--Imran End CMC SCR 7375.01

--Start SCR 7899.04 - Ashish N- 20-Jul-2018
	IF :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB IS NULL AND :NAVDB_DELIVERY_FORMAT_MEDIA.NAVDB_ID IS NOT NULL AND :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE IS NOT NULL THEN  --Fix SCR 7948  -Ashish N- 13-AUG-2018
	   :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB := NVL(:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND,'N');
	END IF;
--End SCR 7899.04 - Ashish N- 20-Jul-2018


 whenTimerExpired:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
declare
	cur_blk VARCHAR2(40) := :System.Cursor_Block;
-- Begin Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
/*
	cursor get_orc is
	select a.default_apply_ind, a.orc_id, b.orc_descr from fms_orc a, operator_requested_changes b
	where upper(a.fms_id) = upper(:navdb.fms_id)
	and   b.orc_id = a.orc_id;
*/
	CURSOR GET_ORC IS
	SELECT F_ORC.DMR_ID,
		     F_ORC.DEFAULT_APPLY_IND,
		     F_ORC.FMS_ID,
		     NVL (N_ORC.APPLY_IND, 'N') APPLY_IND,
		     DMR_DESCR
	FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC, NAVDB_ORC N_ORC
	WHERE     F_ORC.FMS_ID = :Navdb.Fms_Id
	       AND F_ORC.DMR_ID = ORC.DMR_ID
	       AND N_ORC.ORC_ID = ORC.DMR_ID
	       AND N_ORC.NAVDB_ID = :Navdb.Navdb_Id
	UNION
	SELECT F_ORC.DMR_ID,
	       F_ORC.DEFAULT_APPLY_IND,
	       F_ORC.FMS_ID,
	       'N' APPLY_IND,
	       ORC.DMR_DESCR
	  FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
	 WHERE F_ORC.FMS_ID IN (SELECT FMS_ID
	                              FROM NAVDB
	                             WHERE NAVDB_ID = :Navdb.Navdb_Id)
	       AND F_ORC.DMR_ID NOT IN (SELECT ORC_ID
	                                  FROM NAVDB_ORC
	                                 WHERE NAVDB_ID = :Navdb.Navdb_Id)
	       AND ORC.DMR_ID = F_ORC.DMR_ID
	ORDER BY 1;
-- End Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
  cur_item varchar2(100) := :system.cursor_item;
  v_cur_block     varchar2(50);
  v_cur_item      varchar2(50);
  v_geo_name      varchar2(50);
begin	
	if not id_null(find_timer('ms_alarm')) then 
		delete_timer('ms_alarm');
		if cur_blk = 'SELECT_BY_GEOGRAPHIC_AREA' then 
			clear_message;
			message('Please Enter Geographic Area Point Details');
			if :SELECT_BY_GEOGRAPHIC_AREA.GEO_AREA_NAME is null then
				go_record(:control_block.cur_record);
			end if;	
			go_item('geographic_area_point.latitude');
		end if;
	end if;	
	--
	if not id_null(find_timer('apt_alarm')) then 	
		delete_timer('apt_alarm');
		if cur_blk = 'SELECT_BY_AIRPORT_GROUP'	then
			go_record(:control_block.cur_record);
			commit_form;
			go_block('AIRPORT_TO_SELECT');
		else
			commit_form;
		end if;
		clear_message;
		--MESSAGE('Enter Airport Details');	-- SCR 3215 - Sesha 	
	end if;
	--
	if not id_null(find_timer('heli_alarm')) then 	
		delete_timer('heli_alarm');
		if cur_blk = 'SELECT_BY_HELIPORT_GROUP'	then
			go_record(:control_block.cur_record);
			commit_form;
			go_block('HELIPORT_TO_SELECT');
		else
			commit_form;
		end if;
		clear_message;
		--MESSAGE('Enter Heliport Details'); -- SCR 3215 - Neelima - 01-Sep-2010
	end if;
	--

	if not id_null(find_timer('orc_alarm')) then
		COMMIT_FORM;
		go_block('NAVDB_ORC');
		CLEAR_BLOCK(NO_VALIDATE); 
  	/* Commented as NAVDB_ORC is made as a Non Data Block; Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
  	loop
  		if :navdb_orc.orc_id is not null then
  			delete_record;
  		else
  			exit;
  		end if;
  	end loop;	
  	*/
	FOR rec IN get_orc LOOP           
		  :navdb_orc.apply_ind := rec.default_apply_ind;
		  :navdb_orc.orc_id := rec.dmr_id;
		  :navdb_orc.Orc_descr := rec.dmr_descr;
		  
		 -- Begin Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
		  IF rec.default_apply_ind = 'Y' THEN
	     	INSERT INTO NAVDB_ORC VALUES ( :NAVDB_ORC.ORC_ID, :NAVDB.NAVDB_ID, NULL,:global.dcr_number,USER,SYSDATE,'Y');		
		  END IF;
		 -- End Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
		  next_record;
  	END LOOP;
  	COMMIT_FORM;
  	first_record;
  	go_item(cur_item);
  	delete_timer('orc_alarm');
  	:navdb.old_fms_id := :navdb.fms_id;  	
	end if;
	--
	if not id_null(find_timer('delete_geo_alarm')) then 	
		if :system.cursor_block not in ('SELECT_BY_GEOGRAPHIC_AREA','GEOGRAPHIC_AREA_POINT') then
			go_block('GEOGRAPHIC_AREA_POINT');
			end if;
		if :system.cursor_block = 'GEOGRAPHIC_AREA_POINT' then
			if :GEOGRAPHIC_AREA_POINT.LATITUDE is not null then
				delete_record;
			end if;
			if :GEOGRAPHIC_AREA_POINT.LATITUDE is not null then
				delete_record;
			end if;
			commit_form;
		end if;	
		if :system.cursor_block != 'SELECT_BY_GEOGRAPHIC_AREA' then
			go_block('SELECT_BY_GEOGRAPHIC_AREA');	
		end if;
		if :SELECT_BY_GEOGRAPHIC_AREA.geo_area_name != :control_block.temp_value then
			first_record;
			loop
				if :SELECT_BY_GEOGRAPHIC_AREA.geo_area_name = :control_block.temp_value then
					exit;
				elsif :system.last_record = 'TRUE' then
					dsp_msg('Error, '''||:control_block.temp_value||''' not found.');
					exit;
					raise form_trigger_failure;
				else
					next_record;
				end if;	
			end loop;	
		end if;
		Delete from Selection_Criteria_Value
			where select_by_id in (select select_by_id
													 	 from navdb_select_criteria
													 	 where geo_area_id = :SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID
													 	 and navdb_id = :navdb.navdb_id);
	  	Delete from navdb_select_criteria
			where geo_area_id = :SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID
			and navdb_id = :navdb.navdb_id;
			DELETE FROM GEOGRAPHIC_AREA_POINT
			WHERE SELECT_BY_ID = :SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID;
	-- Begin Fix - SCR 6595; ARINC20 SCR 4.00 - Eswar KC
      DELETE FROM Navdb_Select_Criteria
       WHERE Geo_Area_Id = :Select_By_Geographic_Area.Select_By_Id
         AND Navdb_Id = :Navdb.Navdb_Id;
	-- End Fix - SCR 6595; ARINC20 SCR 4.00 - Eswar KC 
 			commit;
 		delete_record;
 		commit_form; 		 		
 		delete_timer('delete_geo_alarm');
	end if;
   --Begin fix scr 7259 23-aug-2017
	IF not id_null(find_timer('LISTS')) then
		delete_timer('LISTS');
		go_block('LISTS');
		if not id_null(find_timer('LISTS')) then 	
			delete_timer('LISTS');
		end if;		   	  		
	END IF;
	IF not id_null(find_timer('LISTS_REC_VAL')) then
		delete_timer('LISTS_REC_VAL');
		go_block('LISTS');
		GO_RECORD(:PARAMETER.LISTS_RECORD);
		--GO_ITEM(:PARAMETER.LISTS_ITEM);
		if not id_null(find_timer('LISTS_REC_VAL')) then 	
			delete_timer('LISTS_REC_VAL');
		end if;		   	  		
	END IF;
	--End fix scr 7259 23-aug-2017
end;
-- end Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 whenTabPageChanged:
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
IF :Navdb.Navdb_Id IS NOT NULL THEN
	Hide_View('FOCALS');								-- Fix - SCR 6927.01 - Eswar KC
--Begin fix SCR 7426.09 --Madhu 
	HIDE_VIEW('GEN_CRITERIA_SUB_TYPE'); 
	:control_block.source_ag:=null;
	:control_block.target_ag:=null;
	:control_block.source_geo_area:=null;
	:control_block.target_geo_area:=null;
	
	IF :Parameter.Work_Type != 'VIEW' THEN --Fix SCR 7850.00 - Venkat M - 17-May-2018
	   DECLARE
		   ln_Count NUMBER;
	   BEGIN
		   SELECT count(*) INTO ln_Count FROM navdb_general_criteria_value
  	    WHERE navdb_id = (SELECT navdb_id FROM navdb_general_criteria
  			      						 WHERE criteria_id = 4
  										       AND apply_ind = 'Y'
  										       AND navdb_id = :NAVDB.NAVDB_ID)
  	      AND criteria_id = 4;
  	
  	   IF ln_Count = 0 THEN
  		   UPDATE navdb_general_criteria
  		      SET apply_ind = 'N'
  		    WHERE navdb_id = :NAVDB.NAVDB_ID
  		      AND criteria_id = 4
  		      AND apply_ind = 'Y';
  	   END IF;
  	   FORMS_DDL('commit');
	   EXCEPTION
		   WHEN no_data_found THEN
			   NULL;
	   END;
	END IF;  --SCR 7850.00   
--End fix SCR 7426.09 --Madhu 	
	IF :SYSTEM.Tab_New_Page = 'SELECTIONS' THEN
		 Check_Did ('Main Button Check');
		 Check_Save;
		 check_did('Post Block Check');  --scr 7259 --double error msg fix
		 GO_BLOCK ('datatyp_rad');
		 CLEAR_BLOCK;
		 --Imran Obstacle SCR 6788.01
		 --If it is an Obstacle Supplier then defaultly select World_Geo flag to Y
		 	IF NVL(:PARAMETER.OBS_ENABLED,'N') = 'Y' AND NVL(:control_block.world_geo,'N') != 'Y' THEN
				:control_block.world_geo := 'Y';
				GO_ITEM('control_block.world_geo');
				EXECUTE_TRIGGER('WHEN-CHECKBOX-CHANGED');
		 	END IF;
		 	--Imran Obstacle
		 GO_BLOCK ('SELECTION');
		 SET_ITEM_PROPERTY ('datatyp_rad.options', Enabled, Property_False);
		 SET_ITEM_PROPERTY ('INCALL', Displayed, Property_False);
		 SET_ITEM_PROPERTY ('EXCALL', Displayed, Property_False);
		 SET_ITEM_PROPERTY ('CSV_REPORT', Displayed, Property_False);  --Fix SCR 7259 15-Aug-2017 Venkat M		 		 
		 :SELECT_ALL_RULES.IXRRD := 'N'; 										 -- Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
		 Populate_Selections;
		 POPULATE_source_ag; -- Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
		 POPULATE_source_geo_area; -- Fix SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
		 
			 DECLARE
				V_Nallow_Update   NUMBER := 0;
				V_Cnavdb_Block    VARCHAR2 (30) := 'NAVDB';
			 BEGIN
				IF :Parameter.Work_Type != 'VIEW' THEN
				   V_Nallow_Update := Check_Valid_Navdb (:Global.Processing_Cycle, :Global.Dcr_Number, :NAVDB.DATA_SUPPLIER, NAME_IN (V_Cnavdb_Block || '.navdb_id'));
				   IF V_Nallow_Update = 1 THEN
					  :Parameter.Upd_Rec := 'N';
				   ELSE
					  :Parameter.Upd_Rec := 'Y';
					  SET_ITEM_PROPERTY ('DATATYP_RAD.OPTIONS', Update_Allowed, Property_False);
					  SET_ITEM_PROPERTY ('DATATYP_RAD.OPTIONS', Insert_Allowed, Property_False);
				   END IF;
				END IF;
			 END;
			 
 ELSIF :SYSTEM.Tab_New_Page = 'ORC' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check');  -- Fix SCR 7623 TEST
	 	--	GO_BLOCK ('NAVDB_ORC'); 	-- 7773.04											-- Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
	 -- Corept_Execute_Query; 													-- Fix - SCR 6723.00; ARINC20 SCR 42.00 - Eswar KC
	 -- Begin Fix - SCR 6114.01 - Eswar KC
	 IF :Parameter.Work_Type != 'VIEW' THEN
--		 	SET_ITEM_PROPERTY ('NAVDB_ORC.APPLY_IND', Enabled, Property_True);	-- 7773
			SET_ITEM_PROPERTY ('NAVDB_ORC.APPLY_IND', Update_Allowed, Property_True);
			SET_ITEM_PROPERTY ('NAVDB_ORC.APPLY_IND', Insert_Allowed, Property_True);
	 ELSE
 		 	SET_ITEM_PROPERTY ('NAVDB_ORC.APPLY_IND', Enabled, Property_False);
 		-- 	SET_ITEM_PROPERTY ('NAVDB_ORC.APPLY_IND', Update_Allowed, Property_False); --7773
		--	SET_ITEM_PROPERTY ('NAVDB_ORC.APPLY_IND', Insert_Allowed, Property_False); -- 7773
	 END IF;	
	 -- End Fix - SCR 6114.01 - Eswar KC
	 --GO_BLOCK ('NAVDB_ORC'); 	-- 7773.04
 	 Populate_Orc_Applied;
 	 
 ELSIF :SYSTEM.Tab_New_Page = 'GEO' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check'); -- fix SCR 7426.09 --Madhu 
	 GO_BLOCK ('select_by_geographic_area');
	 Corept_Execute_Query;
 ELSIF :SYSTEM.Tab_New_Page = 'AREA' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check');  --scr 7259 --double error msg fix
	 Create_New_Group ('Select_Group', 1);
	 Create_New_Group ('DeSelect_Group', 1);
	 Query_Block_Records ('SELECT_BY_AREA', 'INITIAL');
	 Query_Block_Records ('AREA_CODE', 'INITIAL');
 ELSIF :SYSTEM.Tab_New_Page = 'ICAO' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check');  --scr 7259 --double error msg fix
	 Create_New_Group ('Select_Group', 1);
	 Create_New_Group ('DeSelect_Group', 1);
	 Query_Block_Records ('SELECT_BY_ICAO', 'INITIAL');
	 Query_Block_Records ('ICAO', 'INITIAL');
 ELSIF :SYSTEM.Tab_New_Page = 'AIRPORT' THEN
 	:control_block.apt_cnt:=0;  --Fix SCR 7016.01 - 21-03-2017- Ashish N
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check');  --SCR 7259 23-Aug-2017-- warning message prompting twice fix
	 Create_New_Group ('Select_Group', 2);
	 Create_New_Group ('DeSelect_Group', 2);
	 Query_Block_Records ('AIRPORT_TO_SELECT', 'INITIAL');
	 Query_Block_Records ('STD_AIRPORT', 'INITIAL');
	 :CONTROL_BLOCK.ATA_IATA_DESIGNATOR := ''; 				 -- Fix - SCR 6944.00 - Eswar KC
	 GO_BLOCK ('SELECT_BY_AIRPORT_GROUP');
		 DECLARE
			V_Nallow_Update   NUMBER := 0;
			V_Cnavdb_Block    VARCHAR2 (30) := 'NAVDB';
		 BEGIN
			IF :Parameter.Work_Type != 'VIEW' THEN
			   V_Nallow_Update := Check_Valid_Navdb (:Global.Processing_Cycle, :Global.Dcr_Number, :NAVDB.DATA_SUPPLIER, NAME_IN (V_Cnavdb_Block || '.navdb_id'));
			   IF V_Nallow_Update = 1 THEN
				  :Parameter.Upd_Rec := 'N';
				  SET_BLOCK_PROPERTY('SELECT_BY_AIRPORT_GROUP', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('SELECT_BY_AIRPORT_GROUP.GROUP_NAME', Insert_Allowed, Property_True);
				  SET_BLOCK_PROPERTY('AIRPORT_TO_SELECT', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHK', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHK', Insert_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHECK_ALL', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.RESET', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.MOVE', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.SELECT', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.CHECK_ALL', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.RESET', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.SELECT', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.CHK', Insert_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.CHK', Update_Allowed, Property_True);
			   ELSE
				  :Parameter.Upd_Rec := 'Y';
				  SET_BLOCK_PROPERTY('SELECT_BY_AIRPORT_GROUP', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('SELECT_BY_AIRPORT_GROUP.GROUP_NAME', Insert_Allowed, Property_False);
				  SET_BLOCK_PROPERTY('AIRPORT_TO_SELECT', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHK', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHECK_ALL', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.RESET', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.MOVE', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.SELECT', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHK', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('AIRPORT_TO_SELECT.CHK', Insert_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.CHECK_ALL', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.RESET', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.SELECT', Enabled, Property_False);			  
				  SET_ITEM_PROPERTY ('STD_AIRPORT.CHK', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('STD_AIRPORT.CHK', Insert_Allowed, Property_False);
			   END IF;
			END IF;
		 END;
 ELSIF :SYSTEM.Tab_New_Page = 'FORMAT_MEDIA' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 Create_New_Group ('Select_Group', 1);
	 Create_New_Group ('DeSelect_Group', 1);
	 Query_Block_Records ('NAVDB_DELIVERY_FORMAT_MEDIA', 'INITIAL');
	 Query_Block_Records ('FMS_DELIVERY_FORMAT_MEDIA', 'INITIAL');
	 --Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013
		 DECLARE
			V_Nallow_Update   NUMBER := 0;
			V_Cnavdb_Block    VARCHAR2 (30) := 'NAVDB';
		 BEGIN
			IF :Parameter.Work_Type != 'VIEW'
			THEN
			   V_Nallow_Update := Check_Valid_Navdb (:Global.Processing_Cycle, :Global.Dcr_Number, :NAVDB.DATA_SUPPLIER, NAME_IN (V_Cnavdb_Block || '.navdb_id'));
	
			   IF V_Nallow_Update = 1 THEN
				  :Parameter.Upd_Rec := 'N';
				  SET_BLOCK_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.SELECT', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.RESET', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.CHECK_ALL', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.CHK', Update_Allowed, Property_True);
				  --SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Update_Allowed, Property_True);--Fix SCR 4955.01 --Madhu--12-Dec-2014
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Insert_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.BINARY_SIZE', Update_Allowed, Property_True);--Fix SCR 4955.01 --Madhu--12-Dec-2014
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.BINARY_SIZE', Insert_Allowed, Property_True);--Fix SCR 4955.01 --Madhu--12-Dec-2014
				  SET_BLOCK_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.SELECT', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.RESET', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.CHECK_ALL', Enabled, Property_True);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.CHK', Update_Allowed, Property_True);
				  -- SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Insert_Allowed, Property_True);
			   ELSE
				  :Parameter.Upd_Rec := 'Y';
				  SET_BLOCK_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.SELECT', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.RESET', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.CHECK_ALL', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.CHK', Update_Allowed, Property_False);
				  --SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Update_Allowed, Property_False);--Fix SCR 4955.01 --Madhu--12-Dec-2014
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Insert_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.BINARY_SIZE', Update_Allowed, Property_False);--Fix SCR 4955.01 --Madhu--12-Dec-2014
				  SET_ITEM_PROPERTY ('NAVDB_DELIVERY_FORMAT_MEDIA.BINARY_SIZE', Insert_Allowed, Property_False);--Fix SCR 4955.01 --Madhu--12-Dec-2014
				  SET_BLOCK_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.SELECT', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.RESET', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.CHECK_ALL', Enabled, Property_False);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.CHK', Update_Allowed, Property_False);
				  --SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', Insert_Allowed, Property_False);
			   END IF;
			END IF;
		 END;
  --End Fix - SCR 5820 - Eswar KC - 07-Feb-2013
 ELSIF :SYSTEM.Tab_New_Page = 'HELIPORT' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
   check_did('Post Block Check');  --scr 7259 --double error msg fix	 
	 Create_New_Group ('Select_Group', 2);
	 Create_New_Group ('DeSelect_Group', 2);
	 Query_Block_Records ('HELIPORT_TO_SELECT', 'INITIAL');
	 Query_Block_Records ('STD_HELIPORT', 'INITIAL');
	 GO_BLOCK ('SELECT_BY_HELIPORT_GROUP');
 ELSIF :SYSTEM.Tab_New_Page = 'DMR' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
   check_did('Post Block Check');  --scr 7259 --error message prompting	twice and error message
	 GO_BLOCK ('FMS_DMR');
	 Corept_Execute_Query;
 ELSIF :SYSTEM.Tab_New_Page = 'VALIDATE' THEN
		 DECLARE
			V_Messages      VARCHAR2 (32767);  --Fix SCR 7623 -- Venkat M -12-Oct-2017 --from 20000 to 32767 mvr
			V_One_Message   VARCHAR2 (5000);
			V_Seperator     VARCHAR2 (80) := '-- -- -- -- -- Selection Criteria is Valid -- -- -- -- -- --';
			V_Position      NUMBER (10);
			V_Start_With    VARCHAR2 (10);
			ln_Validate_Rec_Cnt NUMBER(10);  --Fix SCR 7623 -- Venkat M --12-OCT-2017
			Rep_Param NUMBER(1):= 1;  -- Fix SCR 6913 - Venkat M 16-FEB-2018
			V_Seperator1    VARCHAR2(80);  --Fix SCR 7257.01 - Venkat M
		 BEGIN
			IF :Control_Block.Did = 'Y' THEN
			   Check_Save;
			END IF;
			Check_Did ('Main Button Check');
			check_did('Post Block Check');  --scr 7259 --error message prompting repeatedly and block is getting cleared off
			GO_BLOCK ('VALIDATION_RESULT');
			CLEAR_BLOCK;
			SET_APPLICATION_PROPERTY (Cursor_Style, 'BUSY');
			V_Seperator1 := V_Seperator;  --Fix SCR 7257.01 - Venkat M
			:Validation_Result.Runtime_Message := 'Selection Validation result for NAVDB ID '''|| :Navdb.Navdb_Id || ''':';
	    Delete from TMP_FOR_LOAD_VLD_TAB;  --Fix SCR 6913 --Venkat M --21-FEB-2018 -Existing records deletion  
			FOR Rec_No IN 1 .. 10 LOOP
			   Selection_Main.Check_Selection_Criteria (:Navdb.Navdb_Id, 'NAVDB_SETUP', V_Messages, Rec_No,Rep_Param);
			   IF V_Messages IS NOT NULL THEN
				  V_Seperator := '-- -- -- -- -- Validation Messages finished -- -- -- -- -- --';
			   END IF;
			   --Begin Fix SCR 7623 -- Venkat M --12-OCT-2017
				 IF length(V_Messages) > 32467 THEN
			   		ln_Validate_Rec_Cnt := length(V_Messages); 
				 END IF;
				 --End Begin Fix SCR 7623 -- Venkat M --12-OCT-2017
				 	
			   WHILE V_Messages IS NOT NULL LOOP
				  IF V_Messages LIKE 'ERROR%' THEN
					 V_Start_With := 'ERROR';
				  ELSIF V_Messages LIKE 'WARNING%' THEN
					 V_Start_With := 'WARNING';
				  END IF;
	
				  V_Messages := RTRIM (LTRIM (V_Messages, V_Start_With));
	
				  IF INSTR (V_Messages, 'WARNING') = 0 THEN
					 V_Position := INSTR (V_Messages, 'ERROR');
				  ELSIF INSTR (V_Messages, 'ERROR') = 0 THEN
					 V_Position := INSTR (V_Messages, 'WARNING');
				  ELSIF INSTR (V_Messages, 'WARNING') < INSTR (V_Messages, 'ERROR') THEN
					 V_Position := INSTR (V_Messages, 'WARNING');
				  ELSIF INSTR (V_Messages, 'WARNING') > INSTR (V_Messages, 'ERROR') THEN
					 V_Position := INSTR (V_Messages, 'ERROR');
				  END IF;
	
				  IF V_Position > 0 THEN
					 V_One_Message := V_Start_With || SUBSTR (V_Messages, 1, V_Position - 1);
					 V_Messages := SUBSTR (V_Messages, V_Position);
				  ELSE
					 V_One_Message := V_Start_With || V_Messages;
					 V_Messages := NULL;
				  END IF;	 
				  IF :Validation_Result.Runtime_Message != V_One_Message THEN
					 NEXT_RECORD;
					 :Validation_Result.Runtime_Message := V_One_Message;
				  END IF;
			   END LOOP;
			END LOOP;
	
			FIRST_RECORD;
			--Begin Fix SCR 7257.01 -24-Apr-2018
			IF V_Seperator = V_Seperator1 THEN
				 :PARAMETER.VLDT_REPORT := 0;
			ELSE
				 :PARAMETER.VLDT_REPORT := 1;
			END IF;
			--End Fix SCR 7257.01 -24-Apr-2018
			:Validation_Result.Runtime_Message := V_Seperator;
			SET_APPLICATION_PROPERTY (Cursor_Style, 'DEFAULT');

			--Begin Fix SCR 7623 -Venkat M 12-Oct-2017  --Modified message SCR 7316
			IF ln_Validate_Rec_Cnt >= 32467 THEN 
					DSP_MSG('Retrieving limited Records. '||
	                'Please click on Report to get detailed validation messages. ');
			END IF;			
			ln_Validate_Rec_Cnt := 0;        
			--End Fix SCR 7623 -Venkat M 12-Oct-2017
			
		 END;
 ELSIF :SYSTEM.Tab_New_Page = 'COPY_NAVDB' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 :Copy_Geo_Arpt_Grp.Data_Supplier := :NAVDB.DATA_SUPPLIER;
	 :Copy_Geo_Arpt_Grp.New_Dcr := :Global.Dcr_Number;     
	 :Copy_Geo_Arpt_Grp.Geo_Area := 'GEO Area';
	 :Copy_Geo_Arpt_Grp.Area_Code := 'Area Code';
	 :Copy_Geo_Arpt_Grp.Icao_Code := 'ICAO Code';
	 :Copy_Geo_Arpt_Grp.Arpt_Grp := 'Airport Group';
	 :Copy_Geo_Arpt_Grp.Geo_Chk := 'N';
	 :Copy_Geo_Arpt_Grp.Ac_Chk := 'N';
	 :Copy_Geo_Arpt_Grp.Ic_Chk := 'N';
	 :Copy_Geo_Arpt_Grp.Ag_Chk := 'N';
	 -- :Copy_Navdb.New_Dcr := :Global.Dcr_Number;							-- Commented - SCR 6946.00 - Eswar KC
	 :Copy_Navdb.New_NavDB := '';															  -- Fix - SCR 6946.00 - Eswar KC			
	 :Copy_Navdb.Data_Supplier := :NAVDB.DATA_SUPPLIER;
	 GO_ITEM ('COPY_NAVDB.NEW_NAVDB');
 ELSIF :SYSTEM.Tab_New_Page = 'GENERAL_CRITERIA' THEN
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check');  --SCR 7259 23-Aug-2017-- warning message prompting twice fix

	 GO_BLOCK ('general_criteria');
	 Corept_Execute_Query;
	 Last_Record;-- fix SCR 7426.09 --Madhu
 
		 DECLARE
			V_Nallow_Update   NUMBER := 0;
			V_Cnavdb_Block    VARCHAR2 (30) := 'NAVDB';
		 BEGIN
			IF :Parameter.Work_Type != 'VIEW' THEN
			   V_Nallow_Update := Check_Valid_Navdb (:Global.Processing_Cycle, :Global.Dcr_Number, :NAVDB.DATA_SUPPLIER, NAME_IN (V_Cnavdb_Block || '.navdb_id'));
	
			   IF V_Nallow_Update = 1 THEN
				  :Parameter.Upd_Rec := 'N';
				  SET_BLOCK_PROPERTY ('GENERAL_CRITERIA', Update_Allowed, Property_True);
			   ELSE
				  :Parameter.Upd_Rec := 'Y';
				  SET_BLOCK_PROPERTY ('GENERAL_CRITERIA', Update_Allowed, Property_False);
			   END IF;
			END IF;
		 END;	 
 ELSIF :SYSTEM.Tab_New_Page = 'CUSTOMER' THEN
  :Parameter.P_Customer_Flag := 'Y';
	 Check_Did ('Main Button Check');
	 Check_Save;
	 check_did('Post Block Check');  --SCR 7259 23-Aug-2017-- warning message prompting twice fix
	 GO_BLOCK ('CUSTOMER_INFO');
	 CLEAR_BLOCK;
	 GO_ITEM ('CUSTOMER_INFO.CUSTOMER_EMAIL_ID');
	 --Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013
		 DECLARE
			V_Nallow_Update   NUMBER := 0;
			V_Cnavdb_Block    VARCHAR2 (30) := 'NAVDB';
		 BEGIN
			IF :Parameter.Work_Type != 'VIEW' THEN
			   V_Nallow_Update := Check_Valid_Navdb (:Global.Processing_Cycle, :Global.Dcr_Number, :NAVDB.DATA_SUPPLIER, NAME_IN (V_Cnavdb_Block || '.navdb_id'));
	
			   IF V_Nallow_Update = 1 THEN
				  :Parameter.Upd_Rec := 'N';
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.CUSTOMER_EMAIL_ID', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.CUSTOMER_EMAIL_ID', Insert_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.NOTES', Update_Allowed, Property_True);
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.NOTES', Insert_Allowed, Property_True);
			   ELSE
				  :Parameter.Upd_Rec := 'Y';
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.CUSTOMER_EMAIL_ID', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.CUSTOMER_EMAIL_ID', Insert_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.NOTES', Update_Allowed, Property_False);
				  SET_ITEM_PROPERTY ('CUSTOMER_INFO.NOTES', Insert_Allowed, Property_False);
			   END IF;
			END IF;
		 END;
  --End Fix - SCR 5820 - Eswar KC - 07-Feb-2013
	--Begin Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016 
  ELSIF :SYSTEM.Tab_New_Page = 'SAVE_LOAD_SEL' THEN 
   	Check_Did ('Main Button Check');
   	Check_Save;
    check_did('Post Block Check');  --scr 7259 --navigating without prompting any message
		:SAVE_SELECTIONS.TYPE := '';
		:SAVE_SELECTIONS.CYCLE := ''; 
		:SAVE_SELECTIONS.NAME := '';
		:SAVE_SELECTIONS.COMMENTS := '';
		:SAVE_SELECTIONS.CREATED_ON := '';
		:SAVE_SELECTIONS.ACTION := '';	
		SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
		SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
		SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
		SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
		SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
  --End Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016 	
  --Begin SCR 7259 23-Aug-2017--no warning message on pressing MAIN Tab cursor is in include/exclude list
  ELSIF :SYSTEM.Tab_New_Page = 'MAIN' THEN
  	check_did('Post Block Check');  
  -- Till here scr 7259	
  END IF;
ELSE  
	 Dsp_Msg ('Please execute a query first.');
	 SET_CANVAS_PROPERTY ('SEL_CAN', Topmost_Tab_Page, 'MAIN');
	 GO_ITEM ('navdb.navdb_id');
END IF;
-- End Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

BlocklevelTriggers:
 navdbwhenValidateItem:
--Begin Fix SCR 65351 - Venkat M - 26-FEB-2020
DECLARE
v_count  NUMBER;
BEGIN
   SELECT count(fms_id) 
     INTO v_count 
     FROM flight_management_system 
    WHERE fms_id = :NAVDB.FMS_ID 
      AND binary_format_type IN('B00','B10','B20','B31'); 
   IF v_count > 0 THEN 
		  --	IF REGEXP_INSTR (:NAVDB.BRGA_IDENT, '[^-|0-9|A-Z| |/|.|,|+|)|(|'']')>0 THEN
				IF REGEXP_INSTR (:NAVDB.BRGA_IDENT, '[^-|0-9|A-Z| |.|'']')>0 THEN  -- SCR 05808
					--dsp_msg('For BRGA Ident allowed alphabets [A-Z], Number [0-9] and special char as [0-9].[A-Z],[,],[.],[/],[+],[-],[(],[)],[''] ');
					dsp_msg('For BRGA Ident allowed alphabets [A-Z], Number [0-9] and special char as [.],[-],[\SPC] ');  --SCR 05808
					raise form_trigger_failure;
	 			ELSE
 					--:NAVDB.BRGA_IDENT :=	TRIM(:NAVDB.BRGA_IDENT);  -- SCR 05868
 					NULL;
	 			END IF;
   END IF;
END;
--End Fix SCR 65351 - Venkat M - 26-FEB-2020




 navdbwhenNewItemInstance:
/*
    SCR 0143 --Madhu -- 18-Apr-2012 
    This SCR is Created to bring up all the updates done to this form from baseline version of build 229A to 236
	(SCR no's 5196,3358,5215,5329)
    
*/
-- Begin Fix - SCR 5329 - Eswar KC -19 Jan 2012
   IF :navdb.fms_id IS NULL
   THEN
      :navdb.fms_id := NULL;
   END IF;
-- End Fix - SCR 5329 - Eswar KC -19 Jan 2012

 navdbwhenListChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
IF :NAVDB.SECONDARY_FOCAL IS NULL THEN	
	 :NAVDB.SF_EMAIL_FLAG := 'N';
END IF;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016

 navdbwhenCheckboxChanged:
-- Begin Fix - SCR 4777 - Eswar KC - 08-Mar-2010
if :NAVDB.GEN_VALERIE = 'Y' then
	set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'PLAIN');
end if;	
-- End  Fix - SCR 4777 - Eswar KC - 08-Mar-2010

 navdbkeyNextItem:
go_item('navdb.profile_number'); -- Eswar KC - SCR 4763

 navdbkeyDelrec:
declare
	v_button number(1) := 0;
	v_button_delete_all number(1) := 0;
	v_out    varchar2(300) := 'OK';
	cursor primary_cur is 
  	select 'x' 
  	from GENERATED_NAVDB
    where NAVDB_ID = :NAVDB.NAVDB_ID;
  	primary_dummy  char(1);
begin	

	CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);-- Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	if :NAVDB.NAVDB_ID is not null then
		open primary_cur;
    fetch primary_cur into primary_dummy;
    	if ( primary_cur%found ) then
    		v_button_delete_all := 1;     			     		
    	end if;
    close primary_cur;
    if 	v_button_delete_all = 1 then
    	if:global.is_admin = 'N' then
     		dsp_msg('This NAVDB_ID has been generated at least once, only person who has ADMIN privilege can delete it.');
     		raise form_trigger_failure;
     	elsif :global.is_admin = 'Y' then
     		v_button_delete_all := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE NAVDB',
 							'This NAVDB_ID has been generated at least once. Delete this record will delete all the criteria and generation histories of this NAVDB ID.'||chr(10)||
 							'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');    		
    		if v_button_delete_all = 2 then
 					raise form_trigger_failure;
    		else
					v_out := delete_generated_NAVDB;			
				end if;
    	end if;
    elsif v_button_delete_all = 0 then
			v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE NAVDB',
 								'Delete this record will delete all the criteria related with this NAVDB ID.'||chr(10)||
 								'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
 			if v_button = 2 then
 				raise form_trigger_failure;
 			end if;
		end if;		
		if v_out = 'OK' then
			Set_Application_Property(cursor_style,'BUSY');
			navdb_util.delete_navdb(:navdb.navdb_id,v_out);
			Set_Application_Property(cursor_style,'DEFAULT');
		end if;
		--
		if v_out = 'OK' then
			delete_record;
 			commit_form;
 			delete_record;--Fix SCR 6510.01--Madhu--18-Feb-2015
 			commit_form;
 			dsp_msg('All records have been deleted succesfully.');
 		else	
			dsp_msg('Error when delete:'||chr(10)||v_out);
 		end if;	
 	else
 		delete_record;		
 	end if;				
END;

 navdbonPopulateDetails:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
-- Begin default relation declare section
--
DECLARE
  recstat     VARCHAR2(20) := :System.record_status;   
  startitm    VARCHAR2(61) := :System.cursor_item;   
  rel_id      Relation;
  cursor get_fms_orc is 
    select unique dmr_id from FMS_DMR where upper(FMS_ID) = upper(:NAVDB.FMS_ID)
    minus
    select unique orc_id from NAVDB_ORC where NAVDB_ID = :NAVDB.navdb_id;
  cursor get_navdb_orc is
    select unique orc_id from NAVDB_ORC where NAVDB_ID = :NAVDB.navdb_id
    minus
    select unique dmr_id from FMS_DMR where upper(FMS_ID) = upper(:NAVDB.FMS_ID);  	
	v_default_ind varchar2(1);
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  IF ( recstat = 'NEW' or recstat = 'INSERT' ) THEN   
    RETURN;
  END IF;
  --
  -- Begin NAVDB_DELIVERY_FORMAT_MEDIA detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_NAVDB_DELIVERY');   
    Query_Master_Details(rel_id, 'NAVDB_DELIVERY_FORMAT_MEDIA');   
  END IF;
  --
  -- End NAVDB_DELIVERY_FORMAT_MEDIA detail program section
  --
  --
  -- Begin FMS_DMR detail program section
  --
  IF ( (:NAVDB.FMS_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_FMS_DMR');   
    Query_Master_Details(rel_id, 'FMS_DMR');   
  END IF;
  --
  -- End FMS_DMR detail program section
  --
  /* -- Commented as NAVDB_ORC is made as Non Data Block - Fix - SCR 6723.00;ARINC20 SCR 42.00 - Eswar KC
  -- Begin NAVDB_ORC detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_NAVDB_ORC');   
    Query_Master_Details(rel_id, 'NAVDB_ORC');   
  END IF;
  --
  -- End NAVDB_ORC detail program section
  --
  */
  --
  -- Begin SELECT_BY_HELIPORT_GROUP detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_SELECT_BY_HELIPORT_GROUP');   
    Query_Master_Details(rel_id, 'SELECT_BY_HELIPORT_GROUP');   
  END IF;
  --
  -- End SELECT_BY_HELIPORT_GROUP detail program section
  --
  --
  -- Begin SELECT_BY_AREA detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_SELECT_BY_AREA');   
    Query_Master_Details(rel_id, 'SELECT_BY_AREA');   
  END IF;
  --
  -- End SELECT_BY_AREA detail program section
  --
  --
  -- Begin CUSTOMER_NAVDB detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_CUSTOMER_NAVDB');   
    Query_Master_Details(rel_id, 'CUSTOMER_NAVDB');   
  END IF;
  --
  -- End CUSTOMER_NAVDB detail program section
  --
  --
  -- Begin SELECT_BY_ICAO detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_SELECT_BY_ICAO');   
    Query_Master_Details(rel_id, 'SELECT_BY_ICAO');   
  END IF;
  --
  -- End SELECT_BY_ICAO detail program section
  --
  --
  -- Begin SELECT_BY_GEOGRAPHIC_AREA detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_SELECT_BY_GEOG');   
    Query_Master_Details(rel_id, 'SELECT_BY_GEOGRAPHIC_AREA');   
  END IF;
  --
  -- End SELECT_BY_GEOGRAPHIC_AREA detail program section
  --
  --
  -- Begin SELECT_BY_AIRPORT_GROUP detail program section
  --
  IF ( (:NAVDB.NAVDB_ID is not null) ) THEN   
    rel_id := Find_Relation('NAVDB.NAVDB_SELECT_BY_AIRPORT_GROUP');   
    Query_Master_Details(rel_id, 'SELECT_BY_AIRPORT_GROUP');   
  END IF;
  --
  -- End SELECT_BY_AIRPORT_GROUP detail program section
  --

  IF ( :System.cursor_item <> startitm ) THEN     
     Go_Item(startitm);     
     Check_Package_Failure;     
  END IF;
END;
--
-- End default relation program section
-- end Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018


 navdbpreBlock:
if :control_block.did = 'Y'  and id_null(find_timer('orc_alarm')) then
	check_save;
end if;	
check_did('Main Button Check');
set_button_property('NONE');
 -- SHOW_VIEW('MAIN'); 			-- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

declare
	v_count number(10);
begin
  select count(*) into v_count
  from fms_dmr		-- Fix;Changed to fms_orc instead navdb_orc - scr 6629.01 - Eswar KC -- SCR 7773 - 28-AUG-2018(CHANGED TABLE NAME FROM FMS_ORC TO FMS_DMR)
  where fms_id = NVL(:navdb.fms_id,'$$$');
  if v_count = 0 then
  -- hide_view('ORC'); 			-- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
		SET_TAB_PAGE_PROPERTY('SEL_CAN.ORC',Enabled,PROPERTY_FALSE);		
  else	  
   -- show_view('ORC'); 		-- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
		SET_TAB_PAGE_PROPERTY('SEL_CAN.ORC',Enabled,PROPERTY_TRUE);
  end if;
end; 


 navdbpostRecord:
if :system.form_status = 'CHANGED' then
		:control_block.did := 'N';
else
	:control_block.did := 'Y';
end if;

 navdbkeyCommit:
-- Begin Fix - SCR 3693 - Sesha 
	:PARAMETER.P_CUSTOMER_FLAG:='N';	
-- End Fix - SCR 3693 - Sesha 

-- Begin Fix - SCR 4763 - Eswar KC
	declare
		v_count number;
		v_count1 number;
	begin
		select count(fms_id) into v_count from
		       (select fms_id from flight_management_system where fms_id = :navdb.fms_id
		        and binary_format_type like 'K%');
		        
		if v_count > 0 then        
		   if :navdb.profile_number is null then
		   			   	go_item('navdb.profile_number');
		   		--	   	list_values;
		   	dsp_msg('Please provide valid profile number');
		   	raise form_trigger_failure;
		   end if;
		end if;  
end;		
-- End Fix - SCR 4763 - Eswar KC	 
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
	--commit_form;
	IF :PARAMETER.WORK_TYPE = 'VIEW' THEN
	   NULL;
	ELSE
		--Imran CMC SCR 7375.01
		IF (NVL(:navdb.binary_format_type,'') = 'CMC') THEN
			IF :navdb.cmc_dependent_navdb IS NULL THEN
				dsp_msg(Get_Item_Property('NAVDB.CMC_DEPENDENT_NAVDB',PROMPT_TEXT)||' is required. Please enter ');
				Raise Form_Trigger_Failure;
			ELSIF :navdb.cmc_customer_name IS NULL THEN
				dsp_msg(Get_Item_Property('NAVDB.cmc_customer_name',PROMPT_TEXT)||' is required. Please enter ');
				Raise Form_Trigger_Failure;
			END IF;
		END IF;
		--Imran CMC SCR 7375.01
		-- Begin Fix scr 65351 - Venkat M - 26-Feb-2020
		DECLARE
  	  v_count number;
	  BEGIN
  	  select count(fms_id) into v_count from flight_management_system where fms_id = :navdb.fms_id and binary_format_type in('B00','B10','B20','B31'); 
   	  if v_count > 0 then 
  		   if trim(:NAVDB.BRGA_IDENT) IS NULL THEN
  		 	    go_item('NAVDB.BRGA_IDENT');
					  dsp_msg('For BRGA Database, BRGA Ident field cannot be Blank. This field represents short form of customer name(8chars)');
					  raise form_trigger_failure;
   		   end if;
   	  end if;	 
	  END;
	  -- End Fix scr 65351 - Venkat M - 26-Feb-2020
		CHECK_DSF_VERSION; -- SCR 07380 - Koti - 19-Apr-2022
	  CHECK_TO_COMMIT('COMMIT');
	  :PARAMETER.NEW_NAVDB := 'N';
	END IF;
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
:control_block.did := 'Y';

 navdbpostQuery:
:NAVDB.old_fms_id := :navdb.fms_id;
:NAVDB.DBSIGN_VER_L := :NAVDB.DBSIGN_VER; -- SCR 07380 - Koti - 19-Apr-2022
if :NAVDB.PRODUCTION_READY_IND = 'Y' then
	set_item_instance_property('NAVDB.PRODUCTION_READY_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.PRODUCTION_READY_IND', current_record,visual_attribute,'PLAIN');
end if;
-- Begin Fix - SCR 3920 - Sesha 
if :NAVDB.TEST_DB_IND = 'Y' then
	set_item_instance_property('NAVDB.TEST_DB_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.TEST_DB_IND', current_record,visual_attribute,'PLAIN');
end if;
-- End Fix - SCR 3920 - Sesha 
-- Begin Fix - SCR 4763 - Eswar KC 
if :NAVDB.SAAAR_IND = 'Y' then
	set_item_instance_property('NAVDB.SAAAR_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.SAAAR_IND', current_record,visual_attribute,'PLAIN');
end if;	
--

check_profile;
Enable_disable_brga_ident;      --Fix SCR 6172- Ashish- 10-Aug
Enable_disable_valerie_IND; 	  --Fix SCR 6172- Ashish- 10-Aug			
ENABLE_DISABLE_DSF_VER_UPDATE; -- SCR 07380 - Koti - 19-Apr-2022
--
-- End Fix - SCR 4763 - Eswar KC	
-- Begin Fix - SCR 4777 - Eswar KC
if :NAVDB.GEN_VALERIE = 'Y' then
		set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'CHECKED');
else
		set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'PLAIN');
end if;
-- End Fix - SCR 4777 - Eswar KC	
if :navdb.fms_id is not null then
	begin
		select size_units into :size_unit
		from binary_table_size_limits
		where fms_id = :navdb.fms_id
		and table_name = 'NAVDB';
	exception
		when no_data_found then
		:size_unit := null;
	end;
end if;	
--
declare
	cursor get_cust_ident is
		select customer_ident from customer_navdb
		where navdb_id = :navdb.navdb_id;
	v_cust varchar2(200);	
begin
	open get_cust_ident;
	loop
		fetch get_cust_ident into v_cust;
		exit when get_cust_ident%notfound;
		:navdb.customer_ident := :navdb.customer_ident||' '||v_cust;
	end loop;
	close get_cust_ident;
end;
--
if :parameter.WORK_TYPE != 'VIEW' then
	declare
		v_out varchar2(3000);
		cursor new_data_type is
		select record_type_code  
			from fms_data_type
		 where upper(fms_id) = upper(:navdb.fms_id)
		 and selectable_ind = 'Y' -- Fix SCR 06158 - Ashish N- 07-Jan-2022
		minus
		select record_type_code  
			from NAVDB_SELECT_CRITERIA
		 where navdb_id = :navdb.navdb_id
		   and geo_area_id = -1;
	begin
		NAVDB_UTIL.DELETE_EXTRA_NAVDB_SELECTION(:NAVDB.navdb_id,v_out);
		if v_out = 'OK' then
			null;
		else
			dsp_msg(v_out);
		end if;
		-- Create default criterias for the new data types
		for rec in new_data_type loop
			create_default_new_criteria(rec.record_type_code);
		end loop;
	end;
end if;
--Imran CMC - SCR 7375.01
Begin
	Select binary_format_type
	  Into :navdb.binary_format_type
	  From flight_management_system 
	 Where fms_id = :navdb.fms_id;
Exception
	When Others Then
		Null;
End;
IF NVL(:navdb.binary_format_type,'') = 'CMC' THEN
	Set_Item_Property('navdb.cmc_customer_name',Enabled,Property_True);
	Set_Item_Property('navdb.cmc_customer_name',Insert_Allowed,Property_True);
	Set_Item_Property('navdb.cmc_customer_name',Update_Allowed,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Visible,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Enabled,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Insert_Allowed,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Update_Allowed,Property_True);
ELSE
	Set_Item_Property('navdb.cmc_customer_name',Enabled,Property_False);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Visible,Property_False);
END IF;
--Imran CMC - SCR 7375.01

--added Imran SCR 7751
Declare
	ln_gen_crtr_exists Varchar2(1);
Begin
	
	Begin
		Select 'Y'
			Into ln_gen_crtr_exists
			From FMS_GENERAL_CRITERIA	fgc
		 Where fgc.fms_id = :navdb.fms_id
		 	 And RowNum = 1;
	Exception
		When No_Data_Found Then
			ln_gen_crtr_exists := 'N';
	End;
	
	IF ln_gen_crtr_exists != 'Y' Then
		Set_Tab_Page_Property('GENERAL_CRITERIA',Enabled,Property_False);
	ELSE
		Set_Tab_Page_Property('GENERAL_CRITERIA',Enabled,Property_True);
	END IF;
End;
--added Imran SCR 7751

:parameter.DUP_LISTS_REC := 0; --FIX SCR 7259.01 15-Aug-2017 --Venkat M				

--Begin Fix SCR 7762.01 -- Venkat M --11-SEP-2018
IF :NAVDB.DATA_SUPPLIER_NAME IS NULL THEN
	BEGIN
	SELECT DATA_SUPPLIER_NAME
	  INTO :NAVDB.DATA_SUPPLIER_NAME
	  FROM DATA_SUPPLIER
	 WHERE DATA_SUPPLIER = :NAVDB.DATA_SUPPLIER;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		:NAVDB.DATA_SUPPLIER_NAME := NULL;
	END;	
END IF;	
IF :parameter.work_type = 'VIEW' THEN
	  IF :GLOBAL.DATA_SUPPLIER <> :NAVDB.DATA_SUPPLIER THEN
			set_item_instance_property('NAVDB.DATA_SUPPLIER_NAME', current_record,visual_attribute,'SUPPLIER');	
		END IF;	
END IF;	

--End SCR 7762.01

 navdbwhenValidateRecord:
if :system.record_status not in ('QUERY') then
	if :NAVDB.Data_Supplier is null then
		:NAVDB.Data_Supplier := :GLOBAL.DATA_SUPPLIER;
		
	end if;		
	if id_null(find_timer('orc_alarm')) then
  	if :navdb.GNS_NAV_ID is null and :navdb.FMS_ID is not null and :system.form_status != 'QUERY' then
			declare
				v_get number(1) := 0;
			begin	
				select 1 into v_get
				from flight_management_system
				where upper(fms_id) = upper(:navdb.FMS_ID)
				and upper(fms_descr) like '%GNS%';
				if v_get = 1 then
					dsp_msg('This is a GNS type Navdb. Please enter the GNS ID.');
					raise form_trigger_failure;
				end if;
			exception
				when no_data_found then
				null;
			end;
  	end if;  	
	end if;	
	if :system.record_status in ('NEW','INSERT') then
		:NAVDB.create_dcr_number := :global.dcr_number;
		:control_block.world_geo := 'N';
		set_item_instance_property('CONTROL_BLOCK.WORLD_GEO', current_record,visual_attribute,'PLAIN');
	else
		:NAVDB.update_dcr_number := :global.dcr_number;	
	end if;	
end if;


 navdbpostInsert:
begin
		insert into customer(customer_ident) 
		values (:navdb.navdb_id);
exception
	when others then
	if sqlcode = -1 then
	  null;
	end if;
end;	 
insert into customer_navdb(navdb_id,customer_ident)
values (:navdb.navdb_id,:navdb.navdb_id);
-- Begin - SCR 4337 - Eswar KC -12 MAR 2009 
Declare
	cursor Format_Media_Type_cur is 
	  select format_media_type 
	  from FMS_DELIVERY_FORMAT_MEDIA
	  where upper(fms_id) = upper(:navdb.fms_id);
	v_format_media_type varchar2(50);  
Begin
		open Format_Media_Type_cur;
	 	 	loop
 	 	 		fetch Format_Media_Type_cur into v_format_media_type;
 	 	 		exit when Format_Media_Type_cur%notfound; 
         INSERT INTO  NAVDB_DELIVERY_FORMAT_MEDIA
                   (NAVDB_ID,FORMAT_MEDIA_TYPE)--,QUANTITY,CREATE_DCR_NUMBER,UPDATE_DCR_NUMBER)
         VALUES(:navdb.navdb_id,v_format_media_type);
    		end loop;
 	 	 close Format_Media_Type_cur;	
End;
-- End - SCR 4337 - Eswar KC -12 MAR 2009
create_default_criteria(-1,null,null,null,null);

 navdbwhenNewRecordInstance:
-- Begin Fix - SCR 3480 - Sesha - 27-Aug-2008
if :navdb.sort_order = 'Y' then
	 :navdb.sort_order:='N';
end if;	
if nvl(:navdb.sort_order,'N') = 'N' then
	 -- Set_LOV_Property('FMSID',GROUP_NAME,'FMSID');
	 set_fms_id; -- Fix - SCR 6704.01 - Eswar KC - 28-Aug-2015
end if;	
-- End Fix - SCR 3480 - Sesha - 27-Aug-2008
SET_CANVAS_PROPERTY ('SEL_CAN', Topmost_Tab_Page, 'MAIN'); 									 -- SCR 6503.01 - Eswar KC - 11-Nov-2014
Hide_View('FOCALS'); 																												 -- SCR 6927.01 - Eswar KC - 08-Dec-2015			
--Begin fix SCR 7426.09 --Madhu 
HIDE_VIEW('GEN_CRITERIA_SUB_TYPE');
DECLARE
		ln_Count NUMBER;
	BEGIN
		SELECT count(*) INTO ln_Count FROM navdb_general_criteria_value
  	WHERE navdb_id = (SELECT navdb_id FROM navdb_general_criteria
  										WHERE criteria_id = 4
  										AND apply_ind = 'Y'
  										AND navdb_id = :NAVDB.NAVDB_ID)
  	AND criteria_id = 4;
  	
  	IF ln_Count = 0 THEN
  		UPDATE navdb_general_criteria
  		SET apply_ind = 'N'
  		WHERE navdb_id = :NAVDB.NAVDB_ID
  		AND criteria_id = 4
  		AND apply_ind = 'Y';
  	END IF;
  	FORMS_DDL('commit');
	EXCEPTION
		WHEN no_data_found THEN
			NULL;
	END; 
--End fix SCR 7426.09 --Madhu 
	Enable_disable_profile; 																										 -- SCR 4763.00 - Eswar KC - 01-Mar-2010
	Enable_disable_valerie_IND; 																								 -- SCR 4777.00 - Eswar KC - 08-Mar-2010
	ENABLE_DISABLE_DSF_VER_UPDATE;                                               -- SCR 07380 - Koti - 19-Apr-2022
	Enable_disable_brga_ident; --Fix SCR 6172- Ashish- 10-Aug
	enable_disable_cmc;        --Fix SCR 6172- Ashish- 10-Aug
Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR',DISPLAYED,PROPERTY_FALSE); -- SCR 6503.01 - Eswar KC - 29-Oct-2014
Set_Radio_Button_Property('SELECT_ALL_RULES.IXRRD','DEFAULT',ENABLED,PROPERTY_FALSE);   -- SCR 6983.00 - Eswar KC - 06-Jun-2016
--Begin Fix SCR 5820 --Eswar --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN
	DECLARE
	   v_nAllow_update   NUMBER := 0;
	   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	   v_cBlock          VARCHAR2 (30) := :SYSTEM.cursor_block;
	BEGIN
	      IF :SYSTEM.record_status NOT IN ('NEW', 'INSERT') THEN
	         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
	         IF v_nAllow_update = 1 THEN
	            :PARAMETER.UPD_REC := 'N';
	            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
		         ELSE
		            :PARAMETER.UPD_REC := 'Y';
		            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
		         END IF;
	      END IF;
	END;
END IF;
--End Fix SCR 5820 --Eswar --15-Feb-2013	
	
	
	



 navdbonError:
--Begin Fix - SCR 5918.04 - Eswar KC - 13-May-2013
DECLARE
   msgnum NUMBER       := error_CODE; 
BEGIN 
   Set_Application_Property(cursor_style,'DEFAULT');
   IF msgnum = 40209 THEN 
      DSP_MSG('Must be of the form 99.999.');
      raise form_trigger_failure;
   END IF; 
END; 
--End Fix - SCR 5918.04 - Eswar KC - 13-May-2013

 navdbOrcwhenCheckboxChanged:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data_Manipulation_Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
-- Begin Fix - SCR 6946.00 - Eswar KC - 10-Jun-2016
 IF Check_Valid_Navdb(:Global.Processing_Cycle, :Global.Dcr_Number,:NAVDB.DATA_SUPPLIER,:Navdb.Navdb_Id) = 1 THEN
    :PARAMETER.UPD_REC := 'N';
   
 ELSE
    :NAVDB_ORC.APPLY_IND := :NAVDB_ORC.APPLY_IND_D;
    :PARAMETER.UPD_REC := 'Y';
    
    Dsp_Action_Msg ('I',Null, Name_In('GLOBAL.dcr_number'),:Global.Processing_Cycle,:Navdb.Navdb_Id);
 END IF;
-- End Fix - SCR 6946.00 - Eswar KC - 10-Jun-2016
-- Begin Fix - SCR 5918.04 - Eswar KC - 13-may-2013
IF :NAVDB_ORC.ORC_ID = 'OR028' THEN
			DECLARE
			v_nCnt NUMBER;	
			BEGIN
			   SELECT COUNT (DMR_ID)
			     INTO v_nCnt
			     FROM FMS_DMR
			    WHERE  DMR_ID = 'OR028' AND FMS_ID = :NAVDB.FMS_ID;
			    
				 IF v_nCnt > 0 AND :NAVDB.RNP IS NULL THEN
				 	DSP_MSG('RNP is required for ORC ''OR028'', Please provide.');
				 	:NAVDB_ORC.APPLY_IND := 'N';
				 	forms_ddl('Commit');
				 	RAISE FORM_TRIGGER_FAILURE;
				 END IF;
			END;
ELSE
		IF :NAVDB_ORC.APPLY_IND = 'Y' THEN
			set_item_instance_property('NAVDB_ORC.APPLY_IND', current_record,visual_attribute,'CHECKED');
			:NAVDB_ORC.UPDATE_DCR_NUMBER := :global.dcr_number; 
			 																												-- Fix - SCR 6946.00 - Eswar KC
			INSERT INTO NAVDB_ORC(ORC_ID,NAVDB_ID,CREATE_DCR_NUMBER,UPDATE_DCR_NUMBER,CREATED_BY,CREATED_ON,APPLY_IND) 
			VALUES ( :NAVDB_ORC.ORC_ID, :NAVDB.NAVDB_ID, NULL,:global.dcr_number,USER,SYSDATE,'Y');		-- Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
		ELSE
			set_item_instance_property('NAVDB_ORC.APPLY_IND', current_record,visual_attribute,'PLAIN');
			:NAVDB_ORC.UPDATE_DCR_NUMBER := ''; 	
		 					  																													-- Fix - SCR 6946.00 - Eswar KC
			DELETE FROM NAVDB_ORC WHERE ORC_ID = :NAVDB_ORC.ORC_ID AND NAVDB_ID = :NAVDB.NAVDB_ID;													-- Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
		END IF;	
		COMMIT_FORM;
    :NAVDB_ORC.APPLY_IND_D := :NAVDB_ORC.APPLY_IND;         																													-- Fix - SCR 6946.00 - Eswar KC
END IF;
-- End Fix - SCR 5918.04 - Eswar KC - 13-may-2013
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
IF :NAVDB_ORC.ORC_ID IS NOT NULL THEN
	IF :NAVDB_ORC.APPLY_IND = 'Y' THEN
		IF :CONTROL_BLOCK.ORC_APPLIED IS NOT NULL THEN
			:CONTROL_BLOCK.ORC_APPLIED := RTRIM(:CONTROL_BLOCK.ORC_APPLIED,',')||','||:NAVDB_ORC.ORC_ID;
		ELSE
			:CONTROL_BLOCK.ORC_APPLIED := :NAVDB_ORC.ORC_ID;
		END IF;
	ELSE
	  DELETE_ONE_ORC (:NAVDB_ORC.ORC_ID);		
	END IF;
END IF;
-- End Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
-- END Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 navdbOrckeyDelrec:
null;

 navdbOrcpostQuery:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
begin
	select dmr_descr into :NAVDB_ORC.ORC_DESCR
	from DATA_MANIPULATION_ROUTINE
	where DMR_ID = :NAVDB_ORC.ORC_ID;
exception
	when others then
	:NAVDB_ORC.ORC_DESCR := null;
end;	
if :NAVDB_ORC.APPLY_IND = 'Y' then
	set_item_instance_property('NAVDB_ORC.APPLY_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB_ORC.APPLY_IND', current_record,visual_attribute,'PLAIN');
end if;
--Begin Fix SCR 5820 --Eswar --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN
				DECLARE
				   v_nAllow_update   NUMBER := 0;
				   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
				   v_cBlock          VARCHAR2 (30) := :SYSTEM.cursor_block;
				   v_cApply_Ind			VARCHAR2(1) := :NAVDB_ORC.APPLY_IND;
				BEGIN
				         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
				         IF v_nAllow_update = 1 THEN
				            :PARAMETER.UPD_REC := 'N';
				            Set_Item_Property ('NAVDB_ORC.APPLY_IND', UPDATE_ALLOWED, PROPERTY_TRUE);
				            Set_Item_Property ('NAVDB_ORC.APPLY_IND', INSERT_ALLOWED, PROPERTY_TRUE);

					        ELSE
					            :PARAMETER.UPD_REC := 'Y';
					          Set_Item_Property ('NAVDB_ORC.APPLY_IND', UPDATE_ALLOWED, PROPERTY_FALSE);
				            Set_Item_Property ('NAVDB_ORC.APPLY_IND', INSERT_ALLOWED, PROPERTY_FALSE);
					        END IF;
				END;
END IF;
--End Fix SCR 5820 --Eswar --15-Feb-2013
--END Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 navdbOrcwhenNewBlockInstance:
if :navdb.navdb_id is null then
	go_block('NAVDB');
end if;	

 navdbOrcwhenNewRecordInstance:
if :navdb_orc.orc_id is null and :system.trigger_record != 1 then
	previous_record;
end if;	


 navdbOrckeyExeqry:
NULL;

 navdbOrckeyNxtrec:
NEXT_RECORD;  -- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

 navdbOrckeyEntqry:
NULL; -- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014

 generalCriteriawhenCheckboxChanged:
:general_criteria.old_chk := :general_criteria.chk;
if :general_criteria.chk = 'Y' then
  update navdb_general_criteria
  set apply_ind = 'Y'
  where navdb_id = :NAVDB.NAVDB_ID
  and criteria_id = :general_criteria.criteria_id;
	set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
--Begin fix SCR 7426.09 --Madhu 
	IF :general_criteria.criteria_id = 4 THEN	
			go_block('GEN_CRITERIA_SUB_TYPE');
			populate_gen_criteria_value;
	END IF;
--End fix SCR 7426.09 --Madhu 	
elsif :general_criteria.chk = 'N' then
	declare
		v_count number(3);
		v_button number(1);
	begin
		select count(*) into v_count
		from navdb_general_criteria_value
		where navdb_id = :navdb.navdb_id
		and criteria_id = :general_criteria.criteria_id ;
		if v_count > 0 then	
			 v_button := DISPLAY_ALERT.MORE_BUTTONs('S','UNCHECK CRITERIA',
 								'Uncheck this criteria will also delete all associated criteria values.'||chr(10)||
 								'Please pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
		end if;
		if v_count = 0 or v_button = 1 then
			delete from navdb_general_criteria_value
			where navdb_id = :navdb.navdb_id
			and criteria_id = :general_criteria.criteria_id ;
			--
			update navdb_general_criteria
			set apply_ind = 'N'
			where navdb_id = :NAVDB.NAVDB_ID
  		and criteria_id = :general_criteria.criteria_id;
  		--delete from navdb_general_criteria
			--where navdb_id = :navdb.navdb_id
			--and criteria_id = :general_criteria.criteria_id ;
			HIDE_VIEW('GEN_CRITERIA_SUB_TYPE'); --Fix SCR 7426.09 --Madhu 
			set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CURRENT_RECORD');
		else
			:GENERAL_CRITERIA.chk := 'Y';
		end if;
	end;	
end if;
commit;

 generalCriteriawhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
	 IF :general_criteria.criteria_id = 4 THEN
	 		IF :general_criteria.chk = 'Y' THEN
	 			go_block('GEN_CRITERIA_SUB_TYPE');
				populate_gen_criteria_value;
			END IF;
	 END IF;
--End fix SCR 7426.09 --Madhu 

 generalCriteriapostQuery:
if :CRITERIA_DESCR is not null and :navdb.fms_id is not null then
declare
	v_selectable  varchar2(1);
	v_apply_ind varchar2(1);	
begin	
	select selectable_ind into v_selectable
	--from   Format_General_Criteria fgc	--commented Imran SCR 7751
		From FMS_GENERAL_CRITERIA	fgc	--added Imran SCR 7751
	where  Criteria_id = :GENERAL_CRITERIA.CRITERIA_ID
	and exists (select 1 from flight_management_system
	 			          where fms_id = :navdb.fms_id
	 			          and fms_id   						 = fgc.fms_id);								--added Imran SCR 7751
	 			          /* commented Imran SCR 7751 
	   			        and binary_format_type   = fgc.binary_format_type
	   			        and major_version_number = fgc.major_version_number
	       			    and minor_version_num    = fgc.minor_version_num);	
												7751 End						*/
	if v_selectable = 'Y' then
		begin
			select nvl(apply_ind,' ') into v_apply_ind
			from navdb_general_criteria
			where navdb_id = :navdb.navdb_id
			and criteria_id = :GENERAL_CRITERIA.CRITERIA_ID;
			if v_apply_ind in ('Y','N') then
				:GENERAL_CRITERIA.chk := v_apply_ind;
			end if;  
		exception
			when no_data_found then
				v_apply_ind := '-';   -- '-': no record; ' ': has record with value blank.
		end;
		--
		if v_apply_ind in ('-',' ') then
			begin	
				select 'Y' into :GENERAL_CRITERIA.chk
				--from Format_general_criteria fgc	--commented Imran SCR 7751
					From FMS_GENERAL_CRITERIA	fgc			--added Imran SCR 7751
				where criteria_id = :GENERAL_CRITERIA.CRITERIA_ID
				and DEFAULT_IND = 'Y' 
				and exists (select 1 from flight_management_system
			  	        	where fms_id = :navdb.fms_id
	 			  	      		and fms_id   						 = fgc.fms_id);								--added Imran SCR 7751
	 			  	      	/* Commented Imran SCR 7751	
	 			  	      	and binary_format_type   = fgc.binary_format_type
	 			  	      	and major_version_number = fgc.major_version_number
	     			  	  	and minor_version_num    = fgc.minor_version_num);
	     			  	  			7751 End 	*/
			exception
				when no_data_found then
					:GENERAL_CRITERIA.chk := 'N';
			end;
		end if;	
		--
		if v_apply_ind = '-' then
			insert into navdb_general_criteria (navdb_id,criteria_id, apply_ind)
  		values (:navdb.navdb_id,:general_criteria.criteria_id,:GENERAL_CRITERIA.chk);
		else
			update navdb_general_criteria
			set apply_ind = :GENERAL_CRITERIA.chk
			where navdb_id = :navdb.navdb_id
			and criteria_id = :general_criteria.criteria_id;
		end if;			
	--
	elsif v_selectable = 'N' then		
		begin	
			select 'Y' into :GENERAL_CRITERIA.chk
			--from Format_general_criteria fgc	--Commented Imran 7751
				From FMS_GENERAL_CRITERIA	fgc			--added Imran SCR 7751
			where criteria_id = :GENERAL_CRITERIA.CRITERIA_ID
			and APPLY_IND = 'Y' 
			and exists (select 1 from flight_management_system
	 		          	where fms_id = :navdb.fms_id
	 		          	and fms_id   						 = fgc.fms_id);								--added Imran SCR 7751
	 		          	/* Commented Imran SCR 7751	
	   		        	and binary_format_type   = fgc.binary_format_type
	    		      	and major_version_number = fgc.major_version_number
	     			    	and minor_version_num    = fgc.minor_version_num);
	     			    			End 7751	*/
		exception
			when no_data_found then
				:GENERAL_CRITERIA.chk := 'N';
		end;
	end if;	
	--
	if v_selectable = 'N' then
		set_item_instance_property('GENERAL_CRITERIA.CHK',current_record, update_allowed,property_false);
		set_item_instance_property('GENERAL_CRITERIA.CHK',current_record, visual_attribute,'GREY_OUT');
		set_item_instance_property('GENERAL_CRITERIA.CRITERIA_DESCR',current_record, visual_attribute,'GREY_OUT');
	else
		set_item_instance_property('GENERAL_CRITERIA.CHK',current_record, update_allowed,property_true);
		set_item_instance_property('GENERAL_CRITERIA.CRITERIA_DESCR',current_record, visual_attribute,'CURRENT_RECORD');
		if :GENERAL_CRITERIA.chk = 'Y' then
			set_item_instance_property('GENERAL_CRITERIA.CHK',current_record, visual_attribute,'CHECKED');			
		else
			set_item_instance_property('GENERAL_CRITERIA.CHK',current_record, visual_attribute,'CURRENT_RECORD');	
		end if;
	end if;	
exception
	when no_data_found then
	dsp_msg('Format-General-Criteria table is missing data for General Criteria '''||:GENERAL_CRITERIA.CRITERIA_DESCR||'''.'||
	        'Please correct the data first.');
	raise form_trigger_failure;
	when others then
	dsp_msg(sqlerrm);
	raise form_trigger_failure;
end;	
end if;

 generalCriteriawhenNewRecordInstance:
--Begin Fix SCR 5820 --Eswar --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN
				DECLARE
				   v_nAllow_update   NUMBER := 0;
				   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
				   v_cBlock          VARCHAR2 (30) := :SYSTEM.cursor_block;
				BEGIN
				      IF :SYSTEM.record_status NOT IN ('NEW', 'INSERT') THEN
				         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
				         IF v_nAllow_update = 1 THEN
				            :PARAMETER.UPD_REC := 'N';
				            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_TRUE);
					         ELSE
					            :PARAMETER.UPD_REC := 'Y';
					            Set_Block_Property (v_cBlock, UPDATE_ALLOWED, PROPERTY_FALSE);
					         END IF;
				      END IF;
				END;
END IF;
--End Fix SCR 5820 --Eswar --15-Feb-2013
--Begin fix SCR 7426.09 --Madhu 
IF :General_Criteria.Criteria_ID = 4 THEN
	Set_Item_Property('General_Criteria.Aircraft_Button',ENABLED,Property_True);
ELSE
	Set_Item_Property('General_Criteria.Aircraft_Button',ENABLED,Property_False);
END IF;
--End fix SCR 7426.09 --Madhu 

 selectByGeographicAreawhenValidateItem:
if :SELECT_BY_geographic_area.geo_area_name IS not NULL then
	-- Check if the geo_area_name is unique
	declare
		v_rowid rowid;
	begin	
		select rowid into v_rowid 
		from SELECT_BY_GEOGRAPHIC_AREA
		where geo_area_name = :SELECT_BY_geographic_area.geo_area_name
		and NAVDB_ID = :NAVDB.NAVDB_ID;
		if :SELECT_BY_geographic_area.rowid is null or
		  (v_rowid != :SELECT_BY_geographic_area.rowid) then
			dsp_msg('This Geographic Area Name is already used. Please give a different name');
			raise form_trigger_failure;
		end if;
	exception
		when no_data_found then
			null;
	end;	
end if;

 selectByGeographicAreawhenNewRecordInstance:
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
	new_rec_instance(:SYSTEM.cursor_block,:SYSTEM.Record_Status);
--End Fix - SCR 5820 - Eswar KC - 29-Jan-2013 

:PARAMETER.WORLD_GEO := :CONTROL_BLOCK.WORLD_GEO;--Fix - SCR 5820 - Madhu - 12-Feb-2013

-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
	:PARAMETER.AFRICA_GEO := :CONTROL_BLOCK.AFRICA_GEO;
	:PARAMETER.EUROPE_GEO := :CONTROL_BLOCK.EUROPE_GEO;
	:PARAMETER.MIDDLE_EAST_GEO := :CONTROL_BLOCK.MIDDLE_EAST_GEO;
	:PARAMETER.EURASIA_GEO := :CONTROL_BLOCK.EURASIA_GEO;
	--:PARAMETER.EURASIA_WEST_GEO := :CONTROL_BLOCK.EURASIA_WEST_GEO;
	:PARAMETER.NORTH_AMERICA_GEO := :CONTROL_BLOCK.NORTH_AMERICA_GEO;
	:PARAMETER.SOUTH_AMERICA_GEO := :CONTROL_BLOCK.SOUTH_AMERICA_GEO;
	:PARAMETER.PACIFIC_GEO := :CONTROL_BLOCK.PACIFIC_GEO;
	--:PARAMETER.PACIFIC_WEST_GEO := :CONTROL_BLOCK.PACIFIC_WEST_GEO;
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018	

if :SELECT_BY_GEOGRAPHIC_AREA.GEO_AREA_NAME is not null then
	if :system.form_status = 'QUERY' THEN
		if nvl(:SELECT_BY_GEOGRAPHIC_AREA.geo_count,0) < 3 then
			:SELECT_BY_GEOGRAPHIC_AREA.geo_count := get_block_property('GEOGRAPHIC_AREA_POINT',query_hits);
		end if;
	ELSif :system.form_status = 'CHANGED' then
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013			
		--commit_form; 
		IF :PARAMETER.WORK_TYPE = 'VIEW' then
			NULL;
		ELSE
			CHECK_TO_COMMIT('COMMIT');
		END IF;
--End Fix - SCR 5820 - Eswar KC - 29-Jan-2013
	END IF;	
else
	:SELECT_BY_GEOGRAPHIC_AREA.geo_count := 0;
end if;

 selectByGeographicAreawhenValidateRecord:
if :SELECT_BY_geographic_area.geo_area_name is not null and :system.form_status = 'CHANGED' then
	declare
		cst_ms	 CONSTANT   NUMBER(2) := 50;
		button_value        number;
		v_timer_id          timer;
		v_rowid rowid;	
	begin
		-- Check if the geo_area_name is unique
		begin	
			select rowid into v_rowid 
			from SELECT_BY_GEOGRAPHIC_AREA
			where geo_area_name = :SELECT_BY_geographic_area.geo_area_name
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_geographic_area.rowid is null or
		  	(v_rowid != :SELECT_BY_geographic_area.rowid) then
				dsp_msg('This Geographic Area Name is already used. Please give a different name');
				raise form_trigger_failure;
			end if;
		exception
			when no_data_found then
				null;
		end;	
		--
		:control_block.cur_record := :system.cursor_record;
		if :SELECT_BY_GEOGRAPHIC_AREA.geo_count = 0 then
			:SELECT_BY_GEOGRAPHIC_AREA.geo_count := 1; 
			if not id_null(find_timer('ms_alarm')) then 	
				delete_timer('ms_alarm');
			end if;
			v_timer_id := create_timer('ms_alarm',cst_ms); 
		end if;
	end;
end if;

 selectByGeographicAreapreQuery:
begin
	select 'Y' into :control_block.WORLD_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = 'WORLD'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.WORLD_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.WORLD_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.WORLD_GEO', current_record,visual_attribute,'PLAIN');
end;

--Begin Fix SCR 7887.01 -- Venkat M -- 06-Dec-2018
begin
	select 'Y' into :control_block.AFRICA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$AFRICA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.AFRICA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.AFRICA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.AFRICA_GEO', current_record,visual_attribute,'PLAIN');
end;

--dsp_msg('pre query :control_block.EUROPE_GEO '||:control_block.EUROPE_GEO);

begin
	select 'Y' into :control_block.EUROPE_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$EUROPE'
	and navdb_id = :NAVDB.NAVDB_ID;
	
	--dsp_msg('post query :control_block.EUROPE_GEO '||:control_block.EUROPE_GEO);
	
	set_item_instance_property('CONTROL_BLOCK.EUROPE_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	--dsp_msg('no data found');
	:control_block.EUROPE_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.EUROPE_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.EURASIA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$EURASIA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.EURASIA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.EURASIA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.EURASIA_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.MIDDLE_EAST_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$MIDDLE_EAST'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.MIDDLE_EAST_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.MIDDLE_EAST_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.MIDDLE_EAST_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.NORTH_AMERICA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$NORTH_AMERICA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.NORTH_AMERICA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.NORTH_AMERICA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.NORTH_AMERICA_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.SOUTH_AMERICA_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$SOUTH_AMERICA'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.SOUTH_AMERICA_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.SOUTH_AMERICA_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.SOUTH_AMERICA_GEO', current_record,visual_attribute,'PLAIN');
end;

begin
	select 'Y' into :control_block.PACIFIC_GEO
	from select_by_geographic_area
	where rtrim(geo_area_name) = '$PACIFIC'
	and navdb_id = :NAVDB.NAVDB_ID;
	set_item_instance_property('CONTROL_BLOCK.PACIFIC_GEO', current_record,visual_attribute,'CHECKED');
exception
	when no_data_found then
	:control_block.PACIFIC_GEO := 'N';
	set_item_instance_property('CONTROL_BLOCK.PACIFIC_GEO', current_record,visual_attribute,'PLAIN');
end;
--End Fix SCR 7887.01 -- Venkat M -- 06-Dec-2018

 selectByGeographicAreapostInsert:
display_alert.one_button('S','Default SC','Default Selection Criteria is created for New Geo Area.'); --Fix SCR 7273 --Madhu--29-AUG-2017
create_default_criteria(:SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID,null,null,null,null);

 selectByGeographicAreakeyDelrec:
DECLARE
  v_button     number(1);
  v_count number;
BEGIN
 	if :system.record_status in ('CHANGED','QUERY') then
 		CHECK_DEL_REC(:system.cursor_block,:system.record_status); -- Fix - SCR 5820 - Eswar KC - 29-Jan-2013
 		v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
 				'Delete current record will also delete its geographic points and associated criterias.'||chr(10)||
 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
 		IF v_button = 1 then
 			Delete from Selection_Criteria_Value
			where select_by_id in (select select_by_id
													 	 from navdb_select_criteria
													 	 where geo_area_id = :SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID
													 	 and navdb_id = :navdb.navdb_id);
	  	--
			Delete from navdb_select_criteria
			where geo_area_id = :SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID
			and navdb_id = :navdb.navdb_id;
			--												 
 			DELETE FROM GEOGRAPHIC_AREA_POINT
			WHERE SELECT_BY_ID = :SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID;
 			-- 
 			commit;
 			delete_record;
 			commit_form;
 		else
 			raise form_trigger_failure;
 		end if;
 	else
 		delete_record;		
 	end if;
  
END;

 selectByGeographicAreaonPopulateDetails:
--
-- Begin default relation declare section
--
DECLARE
  recstat     VARCHAR2(20) := :System.record_status;   
  startitm    VARCHAR2(61) := :System.cursor_item;   
  rel_id      Relation;
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  IF ( recstat = 'NEW' or recstat = 'INSERT' ) THEN   
    RETURN;
  END IF;
  --
  -- Begin GEOGRAPHIC_AREA_POINT detail program section
  --
  IF ( (:SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_ID is not null) ) THEN   
    rel_id := Find_Relation('SELECT_BY_GEOGRAPHIC_AREA.SELECT_BY_GEOGR_GEOGRAPHIC_ARE');   
    Query_Master_Details(rel_id, 'GEOGRAPHIC_AREA_POINT');   
  END IF;
  --
  -- End GEOGRAPHIC_AREA_POINT detail program section
  --

  IF ( :System.cursor_item <> startitm ) THEN     
     Go_Item(startitm);     
     Check_Package_Failure;     
  END IF;
END;
--
-- End default relation program section
--


 geographicAreaPointwhenValidateItem:
-- Call v_longitude in UTIL1 to validate the longitude
if util1.v_longitude(:geographic_area_point.longitude) > 0 then
	dsp_msg('Invalid Longitude');
	raise form_trigger_failure;
end if;
	


 geographicAreaPointwhenCreateRecord:

:geographic_area_point.sequence_number := :system.trigger_record*10;
:SELECT_BY_GEOGRAPHIC_AREA.geo_count := :SELECT_BY_GEOGRAPHIC_AREA.geo_count + 1;


 geographicAreaPointwhenNewBlockInstance:
--Begin Fix - SCR 5820 - Eswar KC - 29-Jan-2013
new_rec_instance(:SYSTEM.cursor_block,:SYSTEM.Record_Status);
--End Fix - SCR 5820 - Eswar KC - 29-Jan-2013 

if :SELECT_BY_GEOGRAPHIC_AREA.GEO_AREA_NAME is null then
		GO_BLOCK('SELECT_BY_GEOGRAPHIC_AREA');
	raise form_trigger_failure;
else
	
	first_record;
	if :GEOGRAPHIC_AREA_POINT.SEQUENCE_NUMBER is not null and 
		:GEOGRAPHIC_AREA_POINT.LATITUDE is null then
		:SELECT_BY_GEOGRAPHIC_AREA.GEO_COUNT := 1;
	elsif
		:GEOGRAPHIC_AREA_POINT.SEQUENCE_NUMBER is null then
		:SELECT_BY_GEOGRAPHIC_AREA.GEO_COUNT := 0;
	end if;	
	:control_block.temp_value := :SELECT_BY_GEOGRAPHIC_AREA.geo_area_name;
END IF;

 geographicAreaPointwhenRemoveRecord:
IF :GEOGRAPHIC_AREA_POINT.SEQUENCE_NUMBER IS NOT NULL THEN
	:SELECT_BY_GEOGRAPHIC_AREA.geo_count := :SELECT_BY_GEOGRAPHIC_AREA.geo_count - 1;
END IF;

 geographicAreaPointkeyCommit:

:Parameter.Seq := 'Y'; --Fix SCR 7645 - 09-Jul-2018 - Ashish N
if :SELECT_BY_GEOGRAPHIC_AREA.GEO_AREA_NAME is not null then
-- Begin Fix -- SCR 3761 - Sesha	
	REFRESH_GEO_COUNT;              
-- End Fix -- SCR 3761 - Sesha	
	if :SELECT_BY_GEOGRAPHIC_AREA.geo_count < 3 or
			(:SELECT_BY_GEOGRAPHIC_AREA.geo_count = 3 and
			:GEOGRAPHIC_AREA_POINT.latitude is null) then
		dsp_msg('Please enter at least three Geographic Area Points.');
		raise form_trigger_failure;
	end if;
	if :system.form_status = 'CHANGED' then
	check_to_commit('COMMIT');--Fix - SCR 5820 - Madhu - 12-Feb-2013
	end if;	
end if;	




 geographicAreaPointpostBlock:
-- Begin Fix -- SCR 5669 -Devi -- 14-Aug-2012
DECLARE
 	v_Button number;
 	v_Errmsg VARCHAR2(200);
 	v_Errcode NUMBER;
BEGIN
  IF  :parameter.work_type != 'VIEW'  
 THEN
 -- End Fix -- SCR 5669 -Devi -- 14-Aug-2012			
   	if id_null(find_timer('delete_geo_alarm')) then 	
			if :SELECT_BY_GEOGRAPHIC_AREA.GEO_AREA_NAME is not null then
				if :SELECT_BY_GEOGRAPHIC_AREA.geo_count < 3 or
						(:SELECT_BY_GEOGRAPHIC_AREA.geo_count = 3 and
						:GEOGRAPHIC_AREA_POINT.latitude is null) then 
						 v_Button := DISPLAY_ALERT.MORE_BUTTONS('S','Geo Record Count',
  								'Do you want to delete this Geo_Area at all?'||chr(10)||chr(10),
  								'Delete','Keep'); 							-- Fix -- SCR 5669 -Devi -- 14-Aug-2012 --Assigned existing statment to v_Button variable.
								IF v_Button = 1                   -- Fix -- SCR 5669 -Devi -- 14-Aug-2012									
  							THEN															-- Fix -- SCR 5669 -Devi -- 14-Aug-2012
  								 DECLARE
											v_timer_id timer;
									 BEGIN				
											v_timer_id := create_timer('delete_geo_alarm',30);
									 END;
					  		ELSIF v_Button =  2 							-- Fix -- SCR 5669 -Devi -- 14-Aug-2012
  								THEN
  								dsp_msg('Please enter at least three Geographic Area Points.');
								 raise form_trigger_failure;
  				      ELSE 
  								dsp_msg('Please enter at least three Geographic Area Points.');
								  raise form_trigger_failure;
						 
						END IF;  														-- Fix -- SCR 5669 -Devi -- 14-Aug-2012			
  	 	end if;
  	end if;
 	end if;	
END IF;	   																				-- Fix -- SCR 5669 -Devi -- 14-Aug-2012
-- Begin Fix -- SCR 5669 -Devi -- 16-Aug-2012
EXCEPTION
       WHEN OTHERS THEN
            IF sqlerrm like '%100501%' THEN
         		raise form_trigger_failure;    
            ELSE
            	  v_Errmsg := sqlerrm;
          			v_Errcode := sqlcode;
          			dsp_msg('Error '||v_Errcode||': '|| substr(v_Errmsg ,1,200));
         			  raise form_trigger_failure;
         		END IF;	  
-- End Fix -- SCR 5669 -Devi -- 16-Aug-2012
END;

 geographicAreaPointpreUpdate:
		CHECK_TO_COMMIT('UPDATE'); 	--Fix - SCR 5820 - Eswar KC - 12-Feb-2013

 geographicAreaPointkeyDelrec:
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
 IF :SYSTEM.record_status IN ('CHANGED','QUERY') THEN
    CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);
    DELETE_RECORD;
 ELSE
     DELETE_RECORD;
 END IF;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013	

 selectByAreawhenValidateItem:
if :SELECT_BY_AREA.AREA_CODE IS NULL then
  message( 'Please enter the AREA Code' );
  raise form_trigger_failure;
else
	-- Check if the AREA code is unique
	declare
		v_rowid rowid;
		v_count number;
	begin	
		begin
			select rowid into v_rowid 
			from SELECT_BY_AREA
			where AREA_CODE = :SELECT_BY_AREA.AREA_CODE
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_AREA.rowid is null or
		  	(v_rowid != :SELECT_BY_AREA.rowid) then
				dsp_msg('This is a duplicated AREA Code.');
				raise form_trigger_failure;
			end if;
			exception
			when no_data_found then
				null;
		end;	
		--
		select count(*) into v_count
		from AREA_CODE
		where AREA_CODE = :SELECT_BY_AREA.AREA_CODE;
		if v_count = 0 then
			dsp_msg('This is not a valid AREA Code.');
			raise form_trigger_failure;
		end if;	
	end;
end if;

 selectByAreawhenCheckboxChanged:

if :system.mode = 'NORMAL' then
	SET_GROUP('SELECT_BY_AREA','DeSelect_Group',:SELECT_BY_AREA.chk,:SELECT_BY_AREA.SELECT_BY_ID);
else
	:select_by_area.chk := 'N';
end if;	

 selectByAreawhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('SELECT_BY_AREA','DeSelect_Group');
end if;	

 selectByAreakeyCommit:
if :system.form_status = 'CHANGED' then
	if :SELECT_BY_AREA.AREA_CODE IS NOT NULL then
		declare
			v_rowid rowid;
			v_count number;
		begin	
			begin
				select rowid into v_rowid 
				from SELECT_BY_AREA
				where AREA_CODE = :SELECT_BY_AREA.AREA_CODE
				and NAVDB_ID = :NAVDB.NAVDB_ID;
				if :SELECT_BY_AREA.rowid is null or
		  		(v_rowid != :SELECT_BY_AREA.rowid) then
					dsp_msg('This is a duplicated AREA Code.');
					raise form_trigger_failure;
				end if;
			exception
				when no_data_found then
					null;
			end;
			--
			select count(*) into v_count
			from AREA_CODE
			where AREA_CODE = :SELECT_BY_AREA.AREA_CODE;
			if v_count = 0 then
				dsp_msg('This is not a valid AREA Code.');
				raise form_trigger_failure;
			end if;	
		end;			
	end if;
	COMMIT_FORM;
	QUERY_BLOCK_RECORDS('AREA_CODE');
end if;

 selectByAreawhenNewBlockInstance:
if get_group_row_count(find_group('Select_Group')) > 0 then
	DSP_MSG('You have checked at lease one AREA code.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked AREA.'||chr(10)||
					'Click the ''Reset'' button to clear all the check(s)');
	if :SELECT_BY_AREA.CHK = 'Y' then
		:SELECT_BY_AREA.CHK := 'N';
		SET_GROUP('SELECT_BY_AREA','DeSelect_Group',:SELECT_BY_AREA.chk,:SELECT_BY_AREA.SELECT_BY_ID);
	end if;	
	go_block('AREA_CODE');
else
	QUERY_BLOCK_RECORDS('AREA_CODE','INITIAL');
	GO_BLOCK('SELECT_BY_AREA');
/*	set_item_property('SELECT_BY_AREA.SELECT',enabled,property_true);
	set_item_property('SELECT_BY_AREA.RESET',enabled,property_true);
	set_item_property('SELECT_BY_AREA.CHECK_ALL',enabled,property_true);
	set_item_property('AREA_CODE.SELECT',enabled,property_false);
	set_item_property('AREA_CODE.RESET',enabled,property_false);
	set_item_property('AREA_CODE.CHECK_ALL',enabled,property_false);*/
	
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013
DECLARE
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
            Set_Block_Property ('AREA_CODE', UPDATE_ALLOWED, PROPERTY_TRUE);
            Set_Block_Property ('SELECT_BY_AREA', UPDATE_ALLOWED, PROPERTY_TRUE);
            Set_Block_Property ('SELECT_BY_AREA', INSERT_ALLOWED, PROPERTY_TRUE);
            Set_Item_Property ( 'AREA_CODE.CHECK_ALL', ENABLED, PROPERTY_TRUE);
            Set_Item_Property ( 'AREA_CODE.RESET', ENABLED, PROPERTY_TRUE);
            Set_Item_Property ( 'SELECT_BY_AREA.CHECK_ALL', ENABLED, PROPERTY_TRUE);
            Set_Item_Property ( 'SELECT_BY_AREA.RESET', ENABLED, PROPERTY_TRUE);            
         ELSE
            :PARAMETER.UPD_REC := 'Y';
             
            Set_Block_Property ('AREA_CODE', UPDATE_ALLOWED, PROPERTY_FALSE);
            Set_Block_Property ('SELECT_BY_AREA', UPDATE_ALLOWED, PROPERTY_FALSE);
            Set_Block_Property ('SELECT_BY_AREA', INSERT_ALLOWED, PROPERTY_FALSE);
            Set_Item_Property ( 'AREA_CODE.CHECK_ALL', ENABLED, PROPERTY_FALSE);
            Set_Item_Property ( 'AREA_CODE.RESET', ENABLED, PROPERTY_FALSE);
            Set_Item_Property ( 'SELECT_BY_AREA.CHECK_ALL', ENABLED, PROPERTY_FALSE);
            Set_Item_Property ( 'SELECT_BY_AREA.RESET', ENABLED, PROPERTY_FALSE); 
         END IF;
   END IF;
END;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013
end if;

 selectByAreakeyDelrec:
IF :system.record_status in ('NEW','INSERT') then
	if :select_by_area.chk = 'Y' then
		SET_GROUP('SELECT_BY_AREA','DeSelect_Group','N',:SELECT_BY_AREA.SELECT_BY_ID);
	end if;
	delete_record;
ELSE	
	CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);--Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	IF DISPLAY_ALERT.MORE_BUTTONs('S','DELETE SELECTED AREA',
 			'Delete the current AREA Code will also delete all associated criterias.'||chr(10)||
 			'Please pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel') = 1 THEN
 		if :select_by_area.chk = 'Y' then
			SET_GROUP('SELECT_BY_AREA','DeSelect_Group','N',:SELECT_BY_AREA.SELECT_BY_ID);
		end if;
 		Delete from Selection_Criteria_Value
		where select_by_id in (select select_by_id
												 	 from navdb_select_criteria
												 	 where AREA_code_id = :SELECT_BY_AREA.SELECT_BY_ID
												 	 and navdb_id = :navdb.navdb_id);
	  --
		Delete from navdb_select_criteria
		where AREA_code_id = :SELECT_BY_AREA.SELECT_BY_ID
		and navdb_id = :navdb.navdb_id;
		--
		COMMIT;
    DELETE_RECORD;
 		COMMIT_FORM;

		QUERY_BLOCK_RECORDS('AREA_CODE');
	END IF; 	
END IF;

 selectByAreapostInsert:
create_default_criteria(null,:SELECT_BY_AREA.SELECT_BY_ID,null,null,null);

 areaCodewhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('AREA_CODE','Select_Group',:AREA_CODE.chk,:AREA_CODE.AREA_CODE);
else
	:area_code.chk := 'N';
end if;	

 areaCodewhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('AREA_CODE','Select_Group');
end if;	

 areaCodewhenNewBlockInstance:
check_save('SELECT_BY_AREA');
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one AREA code.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked AREA.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :AREA_CODE.CHK = 'Y' then
		:AREA_CODE.CHK := 'N';
		SET_GROUP('AREA_CODE','Select_Group',:AREA_CODE.chk,:AREA_CODE.AREA_CODE);
	end if;
	go_block('SELECT_BY_AREA');
else
	QUERY_BLOCK_RECORDS('SELECT_BY_AREA','INITIAL');
	GO_BLOCK('AREA_CODE');
-- Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
	if :parameter.work_type = 'VIEW' then	
		set_item_property('AREA_CODE.SELECT',enabled,property_false);
		set_item_property('AREA_CODE.RESET',enabled,property_false);
		set_item_property('AREA_CODE.CHECK_ALL',enabled,property_false);
		set_item_property('SELECT_BY_AREA.SELECT',enabled,property_false);
		set_item_property('SELECT_BY_AREA.RESET',enabled,property_false);
		set_item_property('SELECT_BY_AREA.CHECK_ALL',enabled,property_false);
	else
-- End Fix SCR 0087 -- Madhu -- 16-Mar-2012
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
		DECLARE
		   v_nAllow_update   NUMBER := 0;
		   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		BEGIN
		   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
		         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
		         IF v_nAllow_update = 1 THEN
		            :PARAMETER.UPD_REC := 'N';
		            Set_Block_Property ('AREA_CODE', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Block_Property ('SELECT_BY_AREA', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Item_Property ( 'AREA_CODE.CHECK_ALL', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'AREA_CODE.RESET', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'SELECT_BY_AREA.CHECK_ALL', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'SELECT_BY_AREA.RESET', ENABLED, PROPERTY_TRUE);            
		         ELSE
		            :PARAMETER.UPD_REC := 'Y';
		            Set_Block_Property ('AREA_CODE', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Block_Property ('SELECT_BY_AREA', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Item_Property ( 'AREA_CODE.CHECK_ALL', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'AREA_CODE.RESET', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'SELECT_BY_AREA.CHECK_ALL', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'SELECT_BY_AREA.RESET', ENABLED, PROPERTY_FALSE); 
		         END IF;
		   END IF;
		END;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	end if;--Fix SCR 0087 -- Madhu -- 16-Mar-2012
end if;

 selectByIcaowhenValidateItem:
if :SELECT_BY_ICAO.ICAO_CODE IS NULL then
  message( 'Please enter the ICAO Code' );
  raise form_trigger_failure;
else
	-- Check if the icao code is unique
	declare
		v_rowid rowid;
		v_count number;
	begin	
		begin
			select rowid into v_rowid 
			from SELECT_BY_ICAO
			where ICAO_CODE = :SELECT_BY_ICAO.ICAO_CODE
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_ICAO.rowid is null or
		  	(v_rowid != :SELECT_BY_ICAO.rowid) then
				dsp_msg('This is a duplicated ICAO Code.');
				raise form_trigger_failure;
			end if;
			exception
			when no_data_found then
				null;
		end;	
		--
		select count(*) into v_count
		from ICAO
		where ICAO_CODE = :SELECT_BY_ICAO.ICAO_CODE;
		if v_count = 0 then
			dsp_msg('This is not a valid ICAO Code.');
			raise form_trigger_failure;
		end if;	
	end;
end if;

 selectByIcaowhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('SELECT_BY_ICAO','DeSelect_Group',:SELECT_BY_ICAO.chk,:SELECT_BY_ICAO.SELECT_BY_ID);
else
	:select_by_icao.chk := 'N';
end if;	

 selectByIcaowhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('SELECT_BY_ICAO','DeSelect_Group');
end if;	

 selectByIcaokeyDelrec:
IF :system.record_status in ('NEW','INSERT') then
	if :SELECT_BY_ICAO.chk = 'Y' then
		SET_GROUP('SELECT_BY_ICAO','DeSelect_Group','N',:SELECT_BY_ICAO.SELECT_BY_ID);
	end if;
	delete_record;	
ELSE
  CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);-- Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	IF DISPLAY_ALERT.MORE_BUTTONs('S','DELETE SELECTED ICAO',
 			'Delete the current ICAO Code will also delete all associated criterias.'||chr(10)||
 			'Please pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel') = 1 THEN
 		if :SELECT_BY_ICAO.chk = 'Y' then
			SET_GROUP('SELECT_BY_ICAO','DeSelect_Group','N',:SELECT_BY_ICAO.SELECT_BY_ID);
		end if;
 		Delete from Selection_Criteria_Value
		where select_by_id in (select select_by_id
												 	 from navdb_select_criteria
												 	 where icao_code_id = :SELECT_BY_ICAO.SELECT_BY_ID
												 	 and navdb_id = :navdb.navdb_id);
	  --
		Delete from navdb_select_criteria
		where icao_code_id = :SELECT_BY_ICAO.SELECT_BY_ID
		and navdb_id = :navdb.navdb_id;
		--
		COMMIT;
		
    DELETE_RECORD;
 		COMMIT_FORM;
 	
		QUERY_BLOCK_RECORDS('ICAO');
	END IF;
END IF;	

 selectByIcaokeyCommit:
if :system.form_status = 'CHANGED' then
	if :SELECT_BY_ICAO.ICAO_CODE IS NOT NULL then
		declare
			v_rowid rowid;
			v_count number;
		begin	
			begin
				select rowid into v_rowid 
				from SELECT_BY_ICAO
				where ICAO_CODE = :SELECT_BY_ICAO.ICAO_CODE
				and NAVDB_ID = :NAVDB.NAVDB_ID;
				if :SELECT_BY_ICAO.rowid is null or
		  		(v_rowid != :SELECT_BY_ICAO.rowid) then
					dsp_msg('This is a duplicated ICAO Code.');
					raise form_trigger_failure;
				end if;
			exception
				when no_data_found then
					null;
			end;
			--
			select count(*) into v_count
			from ICAO
			where ICAO_CODE = :SELECT_BY_ICAO.ICAO_CODE;
			if v_count = 0 then
				dsp_msg('This is not a valid ICAO Code.');
				raise form_trigger_failure;
			end if;	
		end;			
	end if;
	COMMIT_FORM;
	QUERY_BLOCK_RECORDS('ICAO');
end if;

 selectByIcaowhenNewBlockInstance:
if get_group_row_count(find_group('Select_Group')) > 0 then
	DSP_MSG('You have checked at lease one ICAO code.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked ICAO.'||chr(10)||
					'Click the ''Reset'' button to clear all the check(s)');
	if :SELECT_BY_ICAO.CHK = 'Y' then
		:SELECT_BY_ICAO.CHK := 'N';
		SET_GROUP('SELECT_BY_ICAO','DeSelect_Group',:SELECT_BY_ICAO.chk,:SELECT_BY_ICAO.SELECT_BY_ID);
	end if;	
	go_block('ICAO');
else	
	QUERY_BLOCK_RECORDS('ICAO','INITIAL');
	GO_BLOCK('SELECT_BY_ICAO');
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
		DECLARE
		   v_nAllow_update   NUMBER := 0;
		   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		BEGIN
		   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
		         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
		         IF v_nAllow_update = 1 THEN
		            :PARAMETER.UPD_REC := 'N';
		            Set_Block_Property ('ICAO', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Block_Property ('SELECT_BY_ICAO', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Block_Property ('SELECT_BY_ICAO', INSERT_ALLOWED, PROPERTY_TRUE);
		            Set_Item_Property ( 'ICAO.CHECK_ALL', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'ICAO.RESET', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.CHECK_ALL', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.RESET', ENABLED, PROPERTY_TRUE);            
		         ELSE
		            :PARAMETER.UPD_REC := 'Y';
		            Set_Block_Property ('ICAO', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Block_Property ('SELECT_BY_ICAO', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Block_Property ('SELECT_BY_ICAO', INSERT_ALLOWED, PROPERTY_FALSE);
		            Set_Item_Property ( 'ICAO.CHECK_ALL', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'ICAO.RESET', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.CHECK_ALL', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.RESET', ENABLED, PROPERTY_FALSE); 
		         END IF;
		   END IF;
		END;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013		
end if;	

 selectByIcaopostInsert:
create_default_criteria(null,null,:SELECT_BY_ICAO.SELECT_BY_ID,null,null);

 icaowhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('ICAO','Select_Group',:ICAO.chk,:ICAO.ICAO_CODE);
else
	:icao.chk := 'N';
end if;	

 icaowhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('ICAO','Select_Group');
end if;	

 icaowhenNewBlockInstance:
check_save('SELECT_BY_ICAO');
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one ICAO code.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked ICAO.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :ICAO.CHK = 'Y' then
		:ICAO.CHK := 'N';
		SET_GROUP('ICAO','Select_Group',:ICAO.chk,:ICAO.ICAO_CODE);
	end if;
	go_block('SELECT_BY_ICAO');
else	
	QUERY_BLOCK_RECORDS('SELECT_BY_ICAO','INITIAL');
	GO_BLOCK('ICAO');
-- Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
	if :parameter.work_type = 'VIEW' then	
		set_item_property('ICAO.SELECT',enabled,property_false);
		set_item_property('ICAO.RESET',enabled,property_false);
		set_item_property('ICAO.CHECK_ALL',enabled,property_false);
		set_item_property('SELECT_BY_ICAO.SELECT',enabled,property_false);
		set_item_property('SELECT_BY_ICAO.RESET',enabled,property_false);
		set_item_property('SELECT_BY_ICAO.CHECK_ALL',enabled,property_false);
	else
--End Fix SCR 0087 -- Madhu -- 16-Mar-2012
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
		DECLARE
		   v_nAllow_update   NUMBER := 0;
		   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		BEGIN
		   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
		         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
		         IF v_nAllow_update = 1 THEN
		            :PARAMETER.UPD_REC := 'N';
		            Set_Block_Property ('ICAO', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Block_Property ('SELECT_BY_ICAO', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Item_Property ( 'ICAO.CHECK_ALL', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'ICAO.RESET', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.CHECK_ALL', ENABLED, PROPERTY_TRUE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.RESET', ENABLED, PROPERTY_TRUE);            
		         ELSE
		            :PARAMETER.UPD_REC := 'Y';
		            Set_Block_Property ('ICAO', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Block_Property ('SELECT_BY_ICAO', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Item_Property ( 'ICAO.CHECK_ALL', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'ICAO.RESET', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.CHECK_ALL', ENABLED, PROPERTY_FALSE);
		            Set_Item_Property ( 'SELECT_BY_ICAO.RESET', ENABLED, PROPERTY_FALSE); 
		         END IF;
		   END IF;
		END;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013			
	end if;--Fix SCR 0087 -- Madhu -- 16-Mar-2012
end if;	

 selectByAirportGroupwhenValidateItem:
if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME IS not NULL then
	-- Check if the GROUP_NAME is unique
	declare
		v_rowid rowid;
	begin	
		select rowid into v_rowid 
		from SELECT_BY_AIRPORT_GROUP
		where GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME
		and NAVDB_ID = :NAVDB.NAVDB_ID;
		if :SELECT_BY_AIRPORT_GROUP.rowid is null or
		  (v_rowid != :SELECT_BY_AIRPORT_GROUP.rowid) then
			dsp_msg('This GROUP_NAME is already used. Please give a different name');
			raise form_trigger_failure;
		end if;
	exception
		when no_data_found then
			null;
	end;	
end if;

 selectByAirportGroupwhenListChanged:
-- Begin Fix - SCR 4184 - Eswar KC - 24-Sep-2012
 IF :SYSTEM.record_status = 'CHANGED' THEN
    DECLARE
       v_ind   CHAR (1);
    	 ln_Count NUMBER; --Fix SCR 6002 -- Madhu - 02-AUG-2013
    	 v_ind1 VARCHAR(1); --Fix SCR 7202 -- Venkat - 16-JUL-2017
    	 ln_rec_count NUMBER; -- Fix SCR 7202 -- Venkat - 16-JUL-2017
    BEGIN
 			--Begin Fix SCR 6002 -- Madhu - 02-AUG-2013      
       SELECT COUNT(*) INTO ln_Count
		   FROM navdb_select_criteria
		   WHERE airport_group_id = :select_by_airport_group.select_by_id;
       
       IF ln_Count = 0 THEN
       	create_default_criteria(null,null,null,:SELECT_BY_AIRPORT_GROUP.select_by_id,null,'T');
       END IF;
 			--End Fix SCR 6002 -- Madhu - 02-AUG-2013      
       SELECT NVL (include_exclude_ind, 'I'), include_exclude_ind  ----Fix SCR 7202 - Venkat - 16-JUL-2017
         INTO v_ind, v_ind1
         FROM select_by_airport_group
        WHERE select_by_id = :select_by_airport_group.select_by_id;
        
       IF v_ind = 'I' AND :select_by_airport_group.include_exclude_ind = 'X' THEN
       	
       	   --Begin Fix -SCR 7202 - Venkat M -07-JUN-2017
       	  IF v_ind1 = 'I' THEN
       	  BEGIN
       	   DELETE FROM bck_selection_criteria_value
				            WHERE select_by_id IN (SELECT select_by_id
				                                  FROM bck_navdb_select_criteria
				                                 WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                   AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                             FROM SELECT_BY_AIRPORT_GROUP 
				                                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
       	  EXCEPTION
       	  	WHEN OTHERS THEN
       	  	NULL;
       	  END;	
					COMMIT;
					 
				  BEGIN
				   DELETE FROM bck_navdb_select_criteria
				         WHERE navdb_id = :NAVDB.NAVDB_ID 
				           --AND parent_select_by_id IS NOT NULL 
				           AND AIRPORT_GROUP_ID =	(SELECT SELECT_BY_ID 
                  			                     FROM SELECT_BY_AIRPORT_GROUP 
                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
          EXCEPTION
       	    WHEN OTHERS THEN
       	    NULL;
       	  END; 
       	  COMMIT;
       	   
				   INSERT INTO bck_navdb_select_criteria (select_by_id,
				                												  navdb_id,
								                                  record_type_code,
																			            criteria_id,
																			            parent_select_by_id,
																			            geo_area_id,
																			            area_code_id,
																			            icao_code_id,
																			            airport_group_id,
																			            heliport_group_id,
																			            include_exclude_ind,
                                                  create_dcr_number)
				                                  SELECT  select_by_id,
				                												  navdb_id,
								                                  record_type_code,
																			            criteria_id,
																			            parent_select_by_id,
																			            geo_area_id,
																			            area_code_id,
																			            icao_code_id,
																			            airport_group_id,
																			            heliport_group_id,
																			            include_exclude_ind,
                                                  create_dcr_number
				                                     FROM navdb_select_criteria
				                                    WHERE navdb_id = :NAVDB.NAVDB_ID 
			                          --	          AND parent_select_by_id IS NOT NULL 
				                                      AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID 
                  		                       FROM SELECT_BY_AIRPORT_GROUP 
                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
					 COMMIT;                          
					 INSERT INTO bck_selection_criteria_value (select_by_id,
					                                           value_seq,
					                                           value_descr,
					                                           value,
					                                           create_dcr_number)
					 			                              SELECT select_by_id,
					                                           value_seq,
					                                           value_descr,
					                                           value,
					                                           create_dcr_number
					                                      FROM selection_criteria_value
				                                       WHERE select_by_id IN (SELECT select_by_id
				                                        FROM bck_navdb_select_criteria
				                                       WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                         AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                                   FROM SELECT_BY_AIRPORT_GROUP 
				                                                                  WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                                    AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
					 COMMIT;
					END IF;					 
					 --End Fix -SCR 7202 - Venkat M -07-JUN-2017

				  DELETE FROM selection_criteria_value
				         WHERE select_by_id IN (SELECT select_by_id
				                                  FROM navdb_select_criteria
				                                 WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                   AND airport_group_id = 
				                                 (SELECT SELECT_BY_ID 
				                                    FROM SELECT_BY_AIRPORT_GROUP 
				                                   WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                     AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
                                 
				  COMMIT;          
				  DELETE FROM navdb_select_criteria
				         WHERE navdb_id = :NAVDB.NAVDB_ID 
				           AND parent_select_by_id IS NOT NULL 
				           AND AIRPORT_GROUP_ID =
               				(SELECT SELECT_BY_ID 
                  			 FROM SELECT_BY_AIRPORT_GROUP 
                        WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                          AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
					COMMIT;
					-- Begin Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
		      UPDATE navdb_select_criteria
		         SET include_exclude_ind = 'X'
		       WHERE airport_group_id = :select_by_airport_group.select_by_id;
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',     ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES',   ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',     ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_FALSE );
          -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE',  ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE',  ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',     ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT',  ENABLED, PROPERTY_FALSE );						
					-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016	
          COMMIT;          	
       		-- End Fix - SCR 6063 - Eswar KC - 18-Aug-2013
       ELSIF     v_ind = 'X' AND :select_by_airport_group.include_exclude_ind = 'I' THEN
					--SCR 7202 Commented by Venkat M 07-JUN-2017 
          /*UPDATE navdb_select_criteria
             SET include_exclude_ind = 'D'
           WHERE airport_group_id = :select_by_airport_group.select_by_id;
            
          UPDATE navdb_select_criteria
             SET include_exclude_ind = 'I'
           WHERE airport_group_id = :select_by_airport_group.select_by_id
             AND RECORD_TYPE_CODE IN (10,15);*/

					--Begin Fix -SCR 7202 - Venkat M -07-JUN-2017
       	  SELECT COUNT(*) 
       	    INTO ln_rec_count
       	    FROM bck_navdb_select_criteria
				   WHERE navdb_id = :NAVDB.NAVDB_ID 
				   --AND parent_select_by_id IS NOT NULL 
				     AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID 
                                       FROM SELECT_BY_AIRPORT_GROUP 
                                      WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                        AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
       	  IF ln_rec_count > 0 THEN
       	     DELETE FROM navdb_select_criteria
		          WHERE include_exclude_ind = 'X'
		            AND airport_group_id = :select_by_airport_group.select_by_id;
		         COMMIT;  
				     INSERT INTO navdb_select_criteria (select_by_id,
				                										  navdb_id,
								                              record_type_code,
																			        criteria_id,
																			        parent_select_by_id,
																			        geo_area_id,
																			        area_code_id,
																			        icao_code_id,
																			        airport_group_id,
																			        heliport_group_id,
																			        include_exclude_ind,
                                              create_dcr_number)
				                              SELECT  select_by_id,
				                										  navdb_id,
								                              record_type_code,
																			        criteria_id,
																			        parent_select_by_id,
																			        geo_area_id,
																			        area_code_id,
																			        icao_code_id,
																			        airport_group_id,
																			        heliport_group_id,
																			        include_exclude_ind,
                                              create_dcr_number 
				                                 FROM bck_navdb_select_criteria
				                                WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                --AND parent_select_by_id IS NOT NULL 
				                                 AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID 
                  		                                             FROM SELECT_BY_AIRPORT_GROUP 
                                                                  WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                                                    AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
					   COMMIT;                          
					   INSERT INTO selection_criteria_value (select_by_id,
					                                       value_seq,
					                                       value_descr,
					                                       value,
					                                       create_dcr_number)
					 			                          SELECT select_by_id,
					                                       value_seq,
					                                       value_descr,
					                                       value,
					                                       create_dcr_number
					                                  FROM bck_selection_criteria_value
				                                   WHERE select_by_id IN (SELECT select_by_id
				                                                            FROM bck_navdb_select_criteria
				                                                           WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                                             AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                                                       FROM SELECT_BY_AIRPORT_GROUP 
				                                                                                      WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                                                        AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
            COMMIT;				 

       	    BEGIN
       	     DELETE FROM bck_selection_criteria_value
				            WHERE select_by_id IN (SELECT select_by_id
				                                  FROM bck_navdb_select_criteria
				                                 WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                   AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                             FROM SELECT_BY_AIRPORT_GROUP 
				                                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
       	    EXCEPTION
       	  	 WHEN OTHERS THEN
       	  	  NULL;
       	    END;	
					  COMMIT;
					 
				    BEGIN
				     DELETE FROM bck_navdb_select_criteria
				         WHERE navdb_id = :NAVDB.NAVDB_ID 
				           --AND parent_select_by_id IS NOT NULL 
				           AND AIRPORT_GROUP_ID =	(SELECT SELECT_BY_ID 
                  			                     FROM SELECT_BY_AIRPORT_GROUP 
                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
            EXCEPTION
       	     WHEN OTHERS THEN
       	      NULL;
       	    END; 
       	    COMMIT;
            
       	  ELSE
            UPDATE navdb_select_criteria
               SET include_exclude_ind = 'D'
             WHERE airport_group_id = :select_by_airport_group.select_by_id;
            COMMIT;
            UPDATE navdb_select_criteria
               SET include_exclude_ind = 'I'
             WHERE airport_group_id = :select_by_airport_group.select_by_id
               AND RECORD_TYPE_CODE IN (10,15);
             COMMIT;  
          END IF;      
         --End Fix -SCR 7202 - Venkat M -07-JUN-2017    
         -- Begin Fix - SCR 6063 - Eswar KC - 18-Aug-2013   
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',     ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES',   ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',     ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_TRUE );                  
				 -- End Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
         -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_TRUE );	         	
         -- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016	
         	
      END IF;
     --END IF; 
	 	 COMMIT;
    END;
 END IF;
-- End Fix - SCR 4184 - Eswar KC - 24-Sep-2012 

 selectByAirportGroupwhenNewBlockInstance:
check_save('AIRPORT_TO_SELECT');
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	delete_group_row('DeSelect_Group',ALL_ROWS);	
elsif get_group_row_count(find_group('Select_Group')) > 0 then
	delete_group_row('Select_Group',ALL_ROWS);
end if;
QUERY_BLOCK_RECORDS('STD_AIRPORT','INITIAL');
QUERY_BLOCK_RECORDS('AIRPORT_TO_SELECT','INITIAL');
-- Begin Fix - SCR 3215 - Sesha - 05-Dec-2008
/*if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME is not null and :AIRPORT_TO_SELECT.AIRPORT_IDENT is null then
	dsp_msg('Please select at lease one airport for group '''||:SELECT_BY_AIRPORT_GROUP.GROUP_NAME||'''');
	raise form_trigger_failure;
end if;*/
-- End Fix - SCR 3215 - Sesha - 05-Dec-2008
GO_BLOCK('SELECT_BY_AIRPORT_GROUP');
--:CONTROL_BLOCK.AIRPORT_FRAME_TEXT := 'Available Standard Airports in cycle '||:global.processing_cycle;  
--Begin SCR 7607 --Madhu
IF :global.processing_cycle > :control_block.proc_cycle THEN

	:CONTROL_BLOCK.AIRPORT_FRAME_TEXT := 'Available Standard Airports in cycle '||:control_block.proc_cycle;
		set_item_property('CONTROL_BLOCK.AIRPORT_FRAME_TEXT',foreground_color,'r255g69b0');
ELSE
	:CONTROL_BLOCK.AIRPORT_FRAME_TEXT := 'Available Standard Airports in cycle '||:global.processing_cycle;
	set_item_property('CONTROL_BLOCK.AIRPORT_FRAME_TEXT',foreground_color,'black');
END IF;
--End SCR 7607 --Madhu
:control_block.apt_cnt:=0; -- Fix SCR 7016.01 - 22-03-2017- Ashish N
hide_view('SELECT_FROM_GROUPS');

 selectByAirportGrouponPopulateDetails:
--
-- Begin default relation declare section
--
DECLARE
  recstat     VARCHAR2(20) := :System.record_status;   
  startitm    VARCHAR2(61) := :System.cursor_item;   
  rel_id      Relation;
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  IF ( recstat = 'NEW' or recstat = 'INSERT' ) THEN   
    RETURN;
  END IF;
  --
  -- Begin AIRPORT_TO_SELECT detail program section
  --
  IF ( (:SELECT_BY_AIRPORT_GROUP.SELECT_BY_ID is not null) ) THEN   
    set_block_property('AIRPORT_TO_SELECT',default_where,'');  -- Mod
    rel_id := Find_Relation('SELECT_BY_AIRPORT_GROUP.SELECT_BY_AIRPO_AIRPORT_TO_SEL');   
    Query_Master_Details(rel_id, 'AIRPORT_TO_SELECT');   
  END IF;
  --
  -- End AIRPORT_TO_SELECT detail program section
  --

  IF ( :System.cursor_item <> startitm ) THEN     
     Go_Item(startitm);     
     Check_Package_Failure;     
  END IF;
END;
--
-- End default relation program section
--


 selectByAirportGroupkeyDelrec:
DECLARE
  v_button     number(1);
BEGIN
 	if :system.record_status in ('CHANGED','QUERY') then
 		CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);-- Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
 		v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE AIRPORT GROUP',
 		'Delete this record will also delete all selected airports and associated criterias.'||chr(10)||
 		'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
 		IF v_button = 1 then
 			Delete from Selection_Criteria_Value
			where select_by_id in (select select_by_id
													 	 from navdb_select_criteria
													 	 where airport_group_id = :SELECT_BY_AIRPORT_GROUP.SELECT_BY_ID
													 	 and navdb_id = :navdb.navdb_id);
	  	--
			Delete from navdb_select_criteria
			where airport_group_id = :SELECT_BY_AIRPORT_GROUP.SELECT_BY_ID
			and navdb_id = :navdb.navdb_id;
			--												 
 			DELETE FROM AIRPORT_TO_SELECT
   		WHERE SELECT_BY_ID = :SELECT_BY_AIRPORT_GROUP.SELECT_BY_ID;
 			--
 			commit;
    DELETE_RECORD;
 		COMMIT_FORM;

 		else
 			raise form_trigger_failure;
 		end if;
 	else
 		delete_record;
 	end if;
END;

 selectByAirportGroupwhenValidateRecord:
if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME IS not NULL then
	-- Check if the GROUP_NAME is unique
	declare
		v_rowid rowid;
		apt_ms	 CONSTANT   NUMBER(2) := 50;
		v_apt_timer_id  timer;
	begin	
	begin
				select rowid into v_rowid 
			from SELECT_BY_AIRPORT_GROUP
			where GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_AIRPORT_GROUP.rowid is null or
		  	(v_rowid != :SELECT_BY_AIRPORT_GROUP.rowid) then
				dsp_msg('This GROUP_NAME is already used. Please give a different name');
				raise form_trigger_failure;
			end if;
		exception
			when no_data_found then
				null;
		end;
		:control_block.cur_record := :system.cursor_record;
		if :airport_to_select.airport_ident is null then
			if not id_null(find_timer('apt_alarm')) then 	
				delete_timer('apt_alarm');
			end if;	 
			v_apt_timer_id := create_timer('apt_alarm',apt_ms);
		end if;
	end;
end if;

 selectByAirportGrouppostInsert:
display_alert.one_button('S','Default SC','Default Selection Criteria is created for New Airport Group.');--Fix SCR 7273 --Madhu--29-AUG-2017
create_default_criteria(null,null,null,:SELECT_BY_AIRPORT_GROUP.select_by_id,null,'T');
-- Begin Fix - SCR 4184 -  Eswar KC - 25-Sep-2012
IF :SYSTEM.record_status = 'INSERT' AND :select_by_airport_group.include_exclude_ind = 'X'  THEN
   UPDATE navdb_select_criteria
     SET include_exclude_ind = :select_by_airport_group.include_exclude_ind
   WHERE airport_group_id = :select_by_airport_group.select_by_id;   	
END IF;         
-- End Fix - SCR 4184 -  Eswar KC - 25-Sep-2012

 selectFromGroupswhenNewBlockInstance:
-- Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
if name_in(':global.moving_group') = 'airport' then 
  :control_block.select_group:='Select the Move to Airport Group';
else
	:control_block.select_group:='Select the Move to Heliport Group';
end if;
-- End Fix SCR 0087 -- Madhu -- 16-Mar-2012


 airportToSelectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('AIRPORT_TO_SELECT','DeSelect_Group');
end if;	


 airportToSelectwhenValidateItem:
-- Begin Fix - SCR 6944.01 - Eswar KC
IF :system.record_status != 'QUERY' THEN
		IF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NULL AND :AIRPORT_TO_SELECT.IATA_CODE IS NOT NULL THEN  
		   --
		   BEGIN
		       SELECT airport_ident, airport_icao
		         INTO :AIRPORT_TO_SELECT.AIRPORT_IDENT, :AIRPORT_TO_SELECT.AIRPORT_ICAO
		         FROM pl_std_airport
		        WHERE processing_cycle = :control_block.proc_cycle --:global.processing_cycle --7607
		          AND data_supplier = :NAVDB.DATA_SUPPLIER
		          AND NVL(ata_iata_designator,'$$$') = :AIRPORT_TO_SELECT.IATA_CODE;
		           
		        check_airport(:AIRPORT_TO_SELECT.AIRPORT_IDENT,null,'RECORD');   
		   EXCEPTION
		       WHEN Too_Many_Rows THEN
		         Dsp_Msg('Multiple Airports Exists with IATA '''||:AIRPORT_TO_SELECT.IATA_CODE||'''');
		       WHEN No_Data_Found THEN
		         Dsp_Msg('No Airport Exists with IATA '''||:AIRPORT_TO_SELECT.IATA_CODE||'''');
		       WHEN Others THEN
		         Dsp_Msg(sqlerrm);
		   END; 
		   --
		ELSIF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NOT NULL AND :AIRPORT_TO_SELECT.IATA_CODE IS NULL THEN
			IF :AIRPORT_TO_SELECT.AIRPORT_ICAO IS NULL THEN
				 check_airport(:AIRPORT_TO_SELECT.AIRPORT_IDENT,null,'RECORD');
			END IF;   	
		END IF;   
END IF;
-- End Fix - SCR 6944.01 - Eswar KC

 airportToSelectwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('AIRPORT_TO_SELECT','DeSelect_Group',:AIRPORT_TO_SELECT.chk,:AIRPORT_TO_SELECT.AIRPORT_IDENT,:AIRPORT_TO_SELECT.AIRPORT_ICAO);
else
	:airport_to_select.chk := 'N';
end if;	

 airportToSelectwhenNewBlockInstance:

if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME is null then
	GO_BLOCK('SELECT_BY_AIRPORT_GROUP');
	raise form_trigger_failure;
END IF;
:control_block.apt_cnt_temp:=get_group_row_count(find_group('Select_Group')); --Fix SCR 7016.01 - 21-03-2017- Ashish N
if get_group_row_count(find_group('Select_Group')) > 0 then
		DSP_MSG('You have checked at lease one Airport data.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked Airport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :AIRPORT_TO_SELECT.CHK = 'Y' then
		:AIRPORT_TO_SELECT.CHK := 'N';
		SET_GROUP('AIRPORT_TO_SELECT','DeSelect_Group',:AIRPORT_TO_SELECT.CHK,:AIRPORT_TO_SELECT.AIRPORT_IDENT,:AIRPORT_TO_SELECT.AIRPORT_ICAO);
	end if;	
	:control_block.apt_cnt:= :control_block.apt_cnt_temp;  --Fix SCR 7016.01 - 21-03-2017- Ashish N
	go_block('STD_AIRPORT');
else	
	QUERY_BLOCK_RECORDS('STD_AIRPORT','INITIAL');
	GO_BLOCK('AIRPORT_TO_SELECT');
-- Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012	
	if :parameter.work_type = 'VIEW' then
		set_item_property('AIRPORT_TO_SELECT.SELECT',enabled,property_false);	
		set_item_property('AIRPORT_TO_SELECT.RESET',enabled,property_false);
		set_item_property('AIRPORT_TO_SELECT.CHECK_ALL',enabled,property_false);
		set_item_property('AIRPORT_TO_SELECT.MOVE',enabled,property_false);
		set_item_property('STD_AIRPORT.SELECT',enabled,property_false);
		set_item_property('STD_AIRPORT.RESET',enabled,property_false);
		set_item_property('STD_AIRPORT.CHECK_ALL',enabled,property_false);
	end if;

end if;

hide_view('SELECT_FROM_GROUPS');

 airportToSelectwhenValidateRecord:
-- Begin Fix - SCR 6944.01 - Eswar KC
IF :system.record_status != 'QUERY' THEN
			IF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NULL AND :AIRPORT_TO_SELECT.IATA_CODE IS NOT NULL THEN  
			   --
			   BEGIN
			       SELECT airport_ident, airport_icao
			         INTO :AIRPORT_TO_SELECT.AIRPORT_IDENT, :AIRPORT_TO_SELECT.AIRPORT_ICAO
			         FROM pl_std_airport
			        WHERE processing_cycle = :control_block.proc_cycle --:global.processing_cycle --7607 --Madhu
			          AND data_supplier = :NAVDB.DATA_SUPPLIER
			          AND NVL(ata_iata_designator,'$$$') = :AIRPORT_TO_SELECT.IATA_CODE;
			           
			        check_airport(:AIRPORT_TO_SELECT.AIRPORT_IDENT,null,'RECORD');   
			   EXCEPTION
			       WHEN Too_Many_Rows THEN
			         Dsp_Msg('Multiple Airports Exists with IATA '''||:AIRPORT_TO_SELECT.IATA_CODE||'''');
			       WHEN No_Data_Found THEN
			         Dsp_Msg('No Airport Exists with IATA '''||:AIRPORT_TO_SELECT.IATA_CODE||'''');
			       WHEN Others THEN
			         Dsp_Msg(sqlerrm);
			   END; 
			   --
			ELSIF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NOT NULL AND :AIRPORT_TO_SELECT.IATA_CODE IS NULL THEN
				IF :AIRPORT_TO_SELECT.AIRPORT_ICAO IS NULL THEN
					 check_airport(:AIRPORT_TO_SELECT.airport_ident,null,'RECORD');
				END IF;   	
			END IF;   
			--
			IF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NULL THEN
				Dsp_Msg('Please Enter Airport Ident');
				Raise Form_Trigger_Failure;
			ELSE
					IF :AIRPORT_TO_SELECT.airport_ident IS NOT NULL AND 
						 :AIRPORT_TO_SELECT.airport_icao IS NULL Then
						check_airport(:AIRPORT_TO_SELECT.airport_ident,null,'RECORD'); 
					END IF;
			END IF;	
			--			
END IF;
-- End Fix - SCR 6944.01 - Eswar KC
if :AIRPORT_TO_SELECT.airport_ident is not null and :system.record_status != 'QUERY' then
	check_airport(:AIRPORT_TO_SELECT.airport_ident,:AIRPORT_TO_SELECT.airport_icao,'RECORD');
end if;
if :AIRPORT_TO_SELECT.AIRPORT_ICAO is null then
	dsp_msg('Airport Icao is required, please enter.');
	raise form_trigger_failure;
end if;
if :system.record_status in ('NEW','INSERT') and :global.aal_cycle is not null then
	Declare
		v_ident      varchar2(4) := rtrim(:AIRPORT_TO_SELECT.AIRPORT_IDENT);
		v_icao       varchar2(2) := rtrim(:AIRPORT_TO_SELECT.AIRPORT_ICAO);
		v_row          number := 0;		
		v_exist        number := 0;
		total_rows     number := 0;	
	Begin	
		if v_ident||v_icao is not null then
			total_rows := get_group_row_count('Refresh_AAL_Group');
			begin
				select 1 into v_exist
				from airport_to_select a, select_by_airport_group b, navdb c
				where a.airport_ident = v_ident
				and   a.airport_icao = v_icao
				and   a.select_by_id = b.select_by_id
				and   b.navdb_id = c.navdb_id
				and   c.data_supplier = :navdb.data_supplier
				and rownum = 1;				
			exception
				when no_data_found then
				v_exist := 0;
			end;	
			if v_exist = 0 then	
				add_group_row('Refresh_AAL_Group', end_of_group);
				v_row := total_rows + 1;
				set_group_char_cell('Refresh_AAL_Group.airport_ident', v_row, v_ident);
				set_group_char_cell('Refresh_AAL_Group.airport_icao', v_row, v_ICAO);
			end if;	
			if v_row > 0 then
				set_item_property('DISPLAY_ITEM_BLOCK.REFRESH_AIRPORT_AIRWAY_LOW',visible,PROPERTY_TRUE);
 				set_item_property('DISPLAY_ITEM_BLOCK.REFRESH_AIRPORT_AIRWAY_LOW',ENABLED, PROPERTY_TRUE);
			end if;
		end if;	
	End;	
End if;	

 airportToSelectkeyDelrec:
declare
	cur_record varchar2(4) := :system.cursor_record; --Fix SCR 6988 - Ashish N - 06-Apr-2016
	total_rows number := get_group_row_count('Refresh_AAL_Group');
begin	
	if :AIRPORT_TO_SELECT.chk = 'Y' then
		SET_GROUP('AIRPORT_TO_SELECT','DeSelect_Group','N',:AIRPORT_TO_SELECT.AIRPORT_IDENT,:AIRPORT_TO_SELECT.AIRPORT_ICAO); 	 	
	end if;
	--	
	for i in 1..total_rows loop
		if get_group_char_cell('Refresh_AAL_Group.airport_ident',i) = :AIRPORT_TO_SELECT.AIRPORT_IDENT and 
			 get_group_char_cell('Refresh_AAL_Group.airport_icao',i) = :AIRPORT_TO_SELECT.AIRPORT_ICAO then
			 delete_group_row('Refresh_AAL_Group',i);
			 if total_rows = 1 then
			 	 set_item_property('DISPLAY_ITEM_BLOCK.REFRESH_AIRPORT_AIRWAY_LOW',ENABLED, PROPERTY_FALSE);
			 	 set_item_property('DISPLAY_ITEM_BLOCK.REFRESH_AIRPORT_AIRWAY_LOW',visible,PROPERTY_FALSE); 				 
			 end if;
			exit;		
		end if;	
	end loop;
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);
	DELETE_RECORD;
	COMMIT_FORM;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	QUERY_BLOCK_RECORDS('STD_AIRPORT');
	go_block('AIRPORT_TO_SELECT');
	go_record(cur_record);
end;	

 airportToSelectkeyCommit:
if :system.form_status = 'CHANGED' then
	check_to_commit('COMMIT');
	if :system.form_status != 'CHANGED' then
		QUERY_BLOCK_RECORDS('STD_AIRPORT');
	end if;	
end if;

 airportToSelectpostQuery:
--Begin Fix - SCR 5825 - Ayodya Ch - 20 Nov 2012
:airport_to_select.iata_code := populate_iatacode(:airport_to_select.airport_ident,:airport_to_select.airport_icao); 
-- End Fix - SCR 5825 - Ayodya Ch - 20 Nov 2012

 stdAirportwhenCheckboxChanged:
if :system.mode = 'ENTER-QUERY' then
	if :STD_AIRPORT.FOUR_ALPHA_TERMINAL = 'Y' then
		set_item_instance_property('STD_AIRPORT.FOUR_ALPHA_TERMINAL', current_record, visual_attribute, 'CHECKED');
	else
		set_item_instance_property('STD_AIRPORT.FOUR_ALPHA_TERMINAL', current_record, visual_attribute, 'PLAIN');
	end if;	
else
	if :STD_AIRPORT.FOUR_ALPHA_TERMINAL = 'Y' then
		:STD_AIRPORT.FOUR_ALPHA_TERMINAL := 'N';
	else			
		:STD_AIRPORT.FOUR_ALPHA_TERMINAL := 'Y';
	end if;
end if;	


 stdAirportwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('STD_AIRPORT','Select_Group');
end if;	

 stdAirportwhenNewBlockInstance:
set_menu_item_property( rtrim('Record')||'.'||ltrim('Clear') ,ENABLED ,PROPERTY_FALSE);
if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME is null then
	GO_BLOCK('SELECT_BY_AIRPORT_GROUP');
	raise form_trigger_failure;
END IF;
if id_null(find_timer('apt_alarm')) then 	
	check_save('AIRPORT_TO_SELECT');
end if;	
:control_block.apt_cnt_temp:=get_group_row_count(find_group('DeSelect_Group'));  --Fix SCR 7016.01 -21-03-2017- Ashish N
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one Airport Data.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked Airport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :STD_AIRPORT.CHK = 'Y' then
		:STD_AIRPORT.CHK := 'N';
		SET_GROUP('STD_AIRPORT','Select_Group',:STD_AIRPORT.chk,:STD_AIRPORT.AIRPORT_IDENT,:STD_AIRPORT.AIRPORT_ICAO);
	end if;
		:control_block.apt_cnt:=:control_block.apt_cnt_temp;   --7016.01
	go_block('AIRPORT_TO_SELECT');
else	
	QUERY_BLOCK_RECORDS('AIRPORT_TO_SELECT','INITIAL');
	GO_BLOCK('STD_AIRPORT');
--Begin Fix SCR 0087 -- Madhu -- 16-Mar_2012

	if :parameter.work_type = 'VIEW' then
		set_item_property('AIRPORT_TO_SELECT.SELECT',enabled,property_false);	
		set_item_property('AIRPORT_TO_SELECT.RESET',enabled,property_false);
		set_item_property('AIRPORT_TO_SELECT.CHECK_ALL',enabled,property_false);
		set_item_property('AIRPORT_TO_SELECT.MOVE',enabled,property_false);
		set_item_property('STD_AIRPORT.SELECT',enabled,property_false);
		set_item_property('STD_AIRPORT.RESET',enabled,property_false);
		set_item_property('STD_AIRPORT.CHECK_ALL',enabled,property_false);
--	else
-- End Fix SCR 0087 -- Madhu -- 16-Mar_2012	

--null;			
	end if;--Fix SCR 0087 -- Madhu -- 16-Mar_2012
end if;
hide_view('SELECT_FROM_GROUPS');

 stdAirportpostQuery:
:std_airport.FOUR_ALPHA_TERMINAL := :control_block.COPY_4_ALPHA_TERMINAL;
:std_airport.RUNWAY_LENGTH := :control_block.copy_RUNWAY_LENGTH;
:std_airport.surface_code := :control_block.COPY_SURFACE_CODE;
if :STD_AIRPORT.FOUR_ALPHA_TERMINAL = 'Y' then
	set_item_instance_property('STD_AIRPORT.FOUR_ALPHA_TERMINAL', current_record, visual_attribute, 'CHECKED');
else
	set_item_instance_property('STD_AIRPORT.FOUR_ALPHA_TERMINAL', current_record, visual_attribute, 'PLAIN');
end if;	
--Begin SCR 7136--Madhu--15-SEP-2016
DECLARE
	ln_app NUMBER;
	ln_sid NUMBER;
	ln_star NUMBER;
BEGIN
	SELECT count(*) INTO ln_app 
	FROM pl_std_approach
	WHERE data_supplier = :navdb.data_supplier AND 
	validate_ind in ('Y','O') AND 
	processing_cycle = nvl(:control_block.proc_cycle,:global.processing_cycle)
	AND airport_ident =:std_airport.airport_ident;
	
	SELECT count(*) INTO ln_sid 
	FROM pl_std_sid
	WHERE data_supplier = :navdb.data_supplier AND 
	validate_ind in ('Y','O') AND 
	processing_cycle = nvl(:control_block.proc_cycle,:global.processing_cycle)
	AND airport_ident =:std_airport.airport_ident;
	
	SELECT count(*) INTO ln_star 
	FROM pl_std_star
	WHERE data_supplier = :navdb.data_supplier AND 
	validate_ind in ('Y','O') AND 
	processing_cycle = nvl(:control_block.proc_cycle,:global.processing_cycle)
	AND airport_ident =:std_airport.airport_ident;
	
	
	IF ln_app > 0 THEN
		:std_airport.app_flag := 'Y';
	END IF;
	
	IF ln_sid > 0 THEN
		:std_airport.sid_flag := 'Y';
	END IF;
		
	IF ln_star > 0 THEN
		:std_airport.star_flag := 'Y';
	END IF;
	
END;
--End SCR 7136--Madhu--15-SEP-2016

 stdAirportkeyClrblk:
dsp_msg('Clear Block Option is not allowed for this block');--Fix SCR 87 -- Madhu --19-Mar-2012

 stdAirportpostBlock:
--Begin Fix -- SCR 0087 -- Madhu -- 24-Apr-2012
:STD_AIRPORT.RUNWAY_LENGTH:=NULL;
:STD_AIRPORT.SURFACE_CODE:=NULL;
:STD_AIRPORT.FOUR_ALPHA_TERMINAL:='N';
--End Fix -- SCR 0087 -- Madhu -- 24-Apr-2012


 selectByHeliportGroupwhenValidateItem:
if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME IS not NULL then
	-- Check if the GROUP_NAME is unique
	declare
		v_rowid rowid;
	begin	
		select rowid into v_rowid 
		from SELECT_BY_HELIPORT_GROUP
		where GROUP_NAME = :SELECT_BY_HELIPORT_GROUP.GROUP_NAME
		and NAVDB_ID = :NAVDB.NAVDB_ID;
		if :SELECT_BY_HELIPORT_GROUP.rowid is null or
		  (v_rowid != :SELECT_BY_HELIPORT_GROUP.rowid) then
			dsp_msg('This GROUP_NAME is already used. Please give a different name');
			raise form_trigger_failure;
		end if;
	exception
		when no_data_found then
			null;
	end;	
end if;

 selectByHeliportGroupwhenListChanged:
-- Begin Fix - SCR 6113 - Madhu--14-Jan-2016  
 IF :SYSTEM.record_status = 'CHANGED' THEN
    DECLARE
       v_ind   CHAR (1);
    	 ln_Count NUMBER; 
    BEGIN
 
       SELECT count(*) INTO ln_Count
		   FROM navdb_select_criteria
		   WHERE heliport_group_id = :select_by_heliport_group.select_by_id;
       
       IF ln_Count = 0 THEN
       	create_default_criteria(null,null,null,null,:SELECT_BY_HELIPORT_GROUP.select_by_id,'H');
       	COMMIT;	
       END IF;
    		
       SELECT NVL (include_exclude_ind, 'I')
         INTO v_ind
         FROM select_by_heliport_group
        WHERE select_by_id = :select_by_heliport_group.select_by_id;
			
				IF v_ind = 'I' AND :select_by_heliport_group.include_exclude_ind = 'X' THEN
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'X'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
				 ELSIF v_ind = 'X' AND :select_by_heliport_group.include_exclude_ind = 'I' THEN 
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'I'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
		       -- Begin Fix - SCR 05944 - Ashish N -02-Dec-2020
		        ELSIF v_ind = 'X' AND :select_by_heliport_group.include_exclude_ind IS NULL THEN 
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'I'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
		       ELSIF v_ind = 'I' AND :select_by_heliport_group.include_exclude_ind IS NULL THEN 
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'I'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
		       -- End Fix - SCR 05944 - Ashish N -02-Dec-2020
		    END IF;
		END;
 END IF;
-- End Fix - SCR 6113 - Madhu--14-Jan-2016 	

 selectByHeliportGroupwhenNewBlockInstance:
check_save('HELIPORT_TO_SELECT');
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	delete_group_row('DeSelect_Group',ALL_ROWS);	
elsif get_group_row_count(find_group('Select_Group')) > 0 then
	delete_group_row('Select_Group',ALL_ROWS);
end if;
QUERY_BLOCK_RECORDS('STD_HELIPORT','INITIAL');
QUERY_BLOCK_RECORDS('HELIPORT_TO_SELECT','INITIAL');
-- Begin Fix - SCR 3215 - Neelima - 01-Sep-2010
/*If :SELECT_BY_HELIPORT_GROUP.GROUP_NAME is not null and :HELIPORT_TO_SELECT.HELIPORT_IDENT is null then
	dsp_msg('Please select at lease one heliport for group '''||:SELECT_BY_HELIPORT_GROUP.GROUP_NAME||'''');
	raise form_trigger_failure;
end if;*/
-- End Fix - SCR 3215 - Neelima - 01-Sep-2010
GO_BLOCK('SELECT_BY_HELIPORT_GROUP');
--:CONTROL_BLOCK.HELIPORT_FRAME_TEXT := 'Available Standard Heliports in cycle '||:global.processing_cycle;-- Fix - SCR 0087 - Madhu - 13-Apr-2012
--Begin SCR 7607 --Madhu
IF :global.processing_cycle > :control_block.proc_cycle THEN

	:CONTROL_BLOCK.HELIPORT_FRAME_TEXT := 'Available Standard Heliports in cycle '||:control_block.proc_cycle;
		set_item_property('CONTROL_BLOCK.HELIPORT_FRAME_TEXT',foreground_color,'r255g69b0');
ELSE
	:CONTROL_BLOCK.HELIPORT_FRAME_TEXT := 'Available Standard Heliports in cycle '||:global.processing_cycle;
	set_item_property('CONTROL_BLOCK.HELIPORT_FRAME_TEXT',foreground_color,'black');
END IF;
--End SCR 7607 --Madhu
set_item_property('STD_HELIPORT.SELECT',enabled,property_false);
set_item_property('STD_HELIPORT.RESET',enabled,property_false);
set_item_property('STD_HELIPORT.CHECK_ALL',enabled,property_false);
set_item_property('HELIPORT_TO_SELECT.SELECT',enabled,property_false);
set_item_property('HELIPORT_TO_SELECT.RESET',enabled,property_false);
set_item_property('HELIPORT_TO_SELECT.CHECK_ALL',enabled,property_false);
set_item_property('HELIPORT_TO_SELECT.MOVE',enabled,property_false);
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013
		DECLARE
		   v_nAllow_update   NUMBER := 0;
		   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		BEGIN
		   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
		         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
		         IF v_nAllow_update = 1 THEN
		            :PARAMETER.UPD_REC := 'N';
		            Set_Block_Property ('SELECT_BY_HELIPORT_GROUP', UPDATE_ALLOWED, PROPERTY_TRUE);
		            Set_Block_Property ('SELECT_BY_HELIPORT_GROUP', INSERT_ALLOWED, PROPERTY_TRUE);
		         ELSE
		            :PARAMETER.UPD_REC := 'Y';
		            Set_Block_Property ('SELECT_BY_HELIPORT_GROUP', UPDATE_ALLOWED, PROPERTY_FALSE);
		            Set_Block_Property ('SELECT_BY_HELIPORT_GROUP', INSERT_ALLOWED, PROPERTY_FALSE);
		         END IF;
		   END IF;
		END;	
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
hide_view('SELECT_FROM_GROUPS');

 selectByHeliportGrouponPopulateDetails:
--
-- Begin default relation declare section
--
DECLARE
  recstat     VARCHAR2(20) := :System.record_status;   
  startitm    VARCHAR2(61) := :System.cursor_item;   
  rel_id      Relation;
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  IF ( recstat = 'NEW' or recstat = 'INSERT' ) THEN   
    RETURN;
  END IF;
  --
  -- Begin HELIPORT_TO_SELECT detail program section
  --
  IF ( (:SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID is not null) ) THEN   
    rel_id := Find_Relation('SELECT_BY_HELIPORT_GROUP.SELECT_BY_HELIP_HELIPORT_TO_SE');   
    Query_Master_Details(rel_id, 'HELIPORT_TO_SELECT');   
  END IF;
  --
  -- End HELIPORT_TO_SELECT detail program section
  --

  IF ( :System.cursor_item <> startitm ) THEN     
     Go_Item(startitm);     
     Check_Package_Failure;     
  END IF;
END;
--
-- End default relation program section
--


 selectByHeliportGroupkeyDelrec:
DECLARE
  v_button     number(1);
BEGIN

	CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);-- Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
 	if :system.record_status in ('CHANGED','QUERY') then
 		v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE HELIPORT GROUP',
 		'Delete this record will also delete all selected HELIPORTs and associated criterias.'||chr(10)||
 		'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
 		IF v_button = 1 then
 			Delete from Selection_Criteria_Value
			where select_by_id in (select select_by_id
													 	 from navdb_select_criteria
													 	 where HELIPORT_group_id = :SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID
													 	 and navdb_id = :navdb.navdb_id);
	  	--
			Delete from navdb_select_criteria
			where HELIPORT_group_id = :SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID
			and navdb_id = :navdb.navdb_id;
			--												 
 			DELETE FROM HELIPORT_TO_SELECT
   		WHERE SELECT_BY_ID = :SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID;
 			--
 			commit;
 			delete_record;
 			commit_form;
 		else
 			raise form_trigger_failure;
 		end if;
 	else
 		delete_record;
 	end if;
END;

 selectByHeliportGroupwhenValidateRecord:
if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME IS not NULL then
	-- Check if the GROUP_NAME is unique
	declare
		v_rowid rowid;
		heli_ms	 CONSTANT   NUMBER(2) := 50;
		v_heli_timer_id  timer;
	begin	
		begin
			select rowid into v_rowid 
			from SELECT_BY_HELIPORT_GROUP
			where GROUP_NAME = :SELECT_BY_HELIPORT_GROUP.GROUP_NAME
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_HELIPORT_GROUP.rowid is null or
		  	(v_rowid != :SELECT_BY_HELIPORT_GROUP.rowid) then
				dsp_msg('This GROUP_NAME is already used. Please give a different name');
				raise form_trigger_failure;
			end if;
		exception
			when no_data_found then
				null;
		end;
		:control_block.cur_record := :system.cursor_record;
		if :heliport_to_select.heliport_ident is null then
			if not id_null(find_timer('heli_alarm')) then 	
				delete_timer('heli_alarm');
			end if;	 
			v_heli_timer_id := create_timer('heli_alarm',heli_ms);
		end if;
	end;
end if;

 selectByHeliportGrouppostInsert:
display_alert.one_button('S','Default SC','Default Selection Criteria is created for New Heliport Group.'); --Fix SCR 7273 --Madhu--29-AUG-2017
create_default_criteria(null,null,null,null,:SELECT_BY_HELIPORT_GROUP.select_by_id,'H');


 selectByHeliportGrouponCheckDeleteMaster:
--
-- Begin default relation declare section
--
DECLARE
  Dummy_Define CHAR(1);
  --
  -- Begin HELIPORT_TO_SELECT detail declare section
  --
  CURSOR HELIPORT_TO_SELECT_cur IS      
    SELECT 1 FROM AIRPORT_TO_SELECT A     
    WHERE A.SELECT_BY_ID = :SELECT_BY_HELIPORT_GROUP.SELECT_BY_ID;
  --
  -- End HELIPORT_TO_SELECT detail declare section
  --
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  --
  -- Begin HELIPORT_TO_SELECT detail program section
  --
  OPEN HELIPORT_TO_SELECT_cur;     
  FETCH HELIPORT_TO_SELECT_cur INTO Dummy_Define;     
  IF ( HELIPORT_TO_SELECT_cur%found ) THEN     
    Message('Cannot delete master record when matching detail records exist.');     
    CLOSE HELIPORT_TO_SELECT_cur;     
    RAISE Form_Trigger_Failure;     
  END IF;
  CLOSE HELIPORT_TO_SELECT_cur;
  --
  -- End HELIPORT_TO_SELECT detail program section
  --
END;
--
-- End default relation program section
--


 heliportToSelectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('HELIPORT_TO_SELECT','DeSelect_Group');
end if;	


 heliportToSelectwhenValidateItem:
if :HELIPORT_TO_SELECT.HELIPORT_ident is not null and :system.record_status != 'QUERY' and
	:HELIPORT_TO_SELECT.HELIPORT_icao is null then
	check_HELIPORT(:HELIPORT_TO_SELECT.HELIPORT_ident,null,'RECORD');
end if;	

 heliportToSelectwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('HELIPORT_TO_SELECT','DeSelect_Group',:HELIPORT_TO_SELECT.chk,:HELIPORT_TO_SELECT.HELIPORT_IDENT,:HELIPORT_TO_SELECT.HELIPORT_ICAO);
else
	:HELIPORT_to_select.chk := 'N';
end if;	

 heliportToSelectwhenNewBlockInstance:
if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME is null then
	GO_BLOCK('SELECT_BY_HELIPORT_GROUP');
	raise form_trigger_failure;
END IF;
if get_group_row_count(find_group('Select_Group')) > 0 then
	DSP_MSG('You have checked at lease one HELIPORT data.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked HELIPORT.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :HELIPORT_TO_SELECT.CHK = 'Y' then
		:HELIPORT_TO_SELECT.CHK := 'N';
		SET_GROUP('HELIPORT_TO_SELECT','DeSelect_Group',:HELIPORT_TO_SELECT.CHK,:HELIPORT_TO_SELECT.HELIPORT_IDENT,:HELIPORT_TO_SELECT.HELIPORT_ICAO);
	end if;	
	go_block('STD_HELIPORT');
else	
	QUERY_BLOCK_RECORDS('STD_HELIPORT','INITIAL');
	GO_BLOCK('HELIPORT_TO_SELECT');
	if :parameter.work_type = 'VIEW' then
		set_item_property('HELIPORT_TO_SELECT.SELECT',enabled,property_false);
		set_item_property('HELIPORT_TO_SELECT.RESET',enabled,property_false);
		set_item_property('HELIPORT_TO_SELECT.CHECK_ALL',enabled,property_false);
		set_item_property('HELIPORT_TO_SELECT.MOVE',enabled,property_false);
		set_item_property('STD_HELIPORT.SELECT',enabled,property_false);
		set_item_property('STD_HELIPORT.RESET',enabled,property_false);
		set_item_property('STD_HELIPORT.CHECK_ALL',enabled,property_false);
	else
		set_item_property('HELIPORT_TO_SELECT.SELECT',enabled,property_true);
		set_item_property('HELIPORT_TO_SELECT.RESET',enabled,property_true);
		set_item_property('HELIPORT_TO_SELECT.CHECK_ALL',enabled,property_true);
		set_item_property('HELIPORT_TO_SELECT.MOVE',enabled,property_true);
		set_item_property('STD_HELIPORT.SELECT',enabled,property_false);
		set_item_property('STD_HELIPORT.RESET',enabled,property_false);
		set_item_property('STD_HELIPORT.CHECK_ALL',enabled,property_false);
DECLARE
   v_nAllow_update   NUMBER := 0;
   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';
            Set_Block_Property ('HELIPORT_TO_SELECT', UPDATE_ALLOWED, PROPERTY_TRUE);
            Set_Block_Property ('HELIPORT_TO_SELECT', INSERT_ALLOWED, PROPERTY_TRUE);
           
            Set_Item_Property ( 'HELIPORT_TO_SELECT.CHECK_ALL', ENABLED, PROPERTY_TRUE);
            Set_Item_Property ( 'HELIPORT_TO_SELECT.RESET', ENABLED, PROPERTY_TRUE);
            Set_Item_Property ( 'HELIPORT_TO_SELECT.MOVE', ENABLED, PROPERTY_TRUE);
            Set_Item_Property ( 'HELIPORT_TO_SELECT.SELECT', ENABLED, PROPERTY_TRUE);            
         ELSE
            :PARAMETER.UPD_REC := 'Y';
            Set_Block_Property ('HELIPORT_TO_SELECT', UPDATE_ALLOWED, PROPERTY_FALSE);
            Set_Block_Property ('HELIPORT_TO_SELECT', INSERT_ALLOWED, PROPERTY_FALSE);
           
            Set_Item_Property ( 'HELIPORT_TO_SELECT.CHECK_ALL', ENABLED, PROPERTY_FALSE);
            Set_Item_Property ( 'HELIPORT_TO_SELECT.RESET', ENABLED, PROPERTY_FALSE);
            Set_Item_Property ( 'HELIPORT_TO_SELECT.MOVE', ENABLED, PROPERTY_FALSE);
            Set_Item_Property ( 'HELIPORT_TO_SELECT.SELECT', ENABLED, PROPERTY_FALSE);
         END IF;
   END IF;
END;	
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013 		
	end if;
end if;
hide_view('SELECT_FROM_GROUPS');

 heliportToSelectwhenValidateRecord:
if :HELIPORT_TO_SELECT.HELIPORT_ident is not null and :system.record_status != 'QUERY' then
	check_HELIPORT(:HELIPORT_TO_SELECT.HELIPORT_ident,:HELIPORT_TO_SELECT.HELIPORT_icao,'RECORD');
end if;
if :HELIPORT_TO_SELECT.HeliPORT_ICAO is null then
	dsp_msg('Heliport Icao is required, please enter.');
	raise form_trigger_failure;
end if;	

 heliportToSelectkeyDelrec:
declare
	cur_record varchar2(4) := :system.cursor_record; --Fix SCR 6988 - Ashish N - 06-Apr-2016
begin	
	if :HELIPORT_TO_SELECT.chk = 'Y' then
		SET_GROUP('HELIPORT_TO_SELECT','DeSelect_Group','N',:HELIPORT_TO_SELECT.HELIPORT_IDENT,:HELIPORT_TO_SELECT.HELIPORT_ICAO); 	 	
	end if;

	CHECK_DEL_REC(:SYSTEM.cursor_block,:SYSTEM.record_status);-- Fix - SCR 5820 - Eswar KC - 07-Feb-2013	
	delete_record;
	commit_form;
	QUERY_BLOCK_RECORDS('STD_HELIPORT');
	go_block('HELIPORT_TO_SELECT');
	go_record(cur_record);
end;	

 heliportToSelectkeyCommit:
if :system.form_status = 'CHANGED' then
	COMMIT_FORM;
	if :system.form_status != 'CHANGED' then
		QUERY_BLOCK_RECORDS('STD_HELIPORT');
	end if;	
end if;

 stdHeliportwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('STD_HELIPORT','Select_Group',:STD_HELIPORT.chk,:STD_HELIPORT.TERMINAL_IDENT,:STD_HELIPORT.TERMINAL_ICAO);
else
	:std_HELIPORT.chk := 'N';
end if;	

 stdHeliportwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('STD_HELIPORT','Select_Group');
end if;	

 stdHeliportkeyClrblk:
dsp_msg('Clear Block Option is not allowed for this block');--Fix SCR 87 -- Madhu --19-Mar-2012

 stdHeliportwhenNewBlockInstance:
if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME is null then
	GO_BLOCK('SELECT_BY_HELIPORT_GROUP');
	raise form_trigger_failure;
END IF;

if id_null(find_timer('heli_alarm')) then 	-- Fix - SCR 6933 - Eswar KC - reverted back to "apt_alarm" from "heli_alarm"-- SCR 6113--Madhu--changed 'apt_alarm' to 'heli_alarm'
	check_save('HELIPORT_TO_SELECT');
end if;	
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one Heliport Data.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked Heliport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :STD_HELIPORT.CHK = 'Y' then
		:STD_HELIPORT.CHK := 'N';
		SET_GROUP('STD_HELIPORT','Select_Group',:STD_HELIPORT.chk,:STD_HELIPORT.TERMINAL_IDENT,:STD_HELIPORT.TERMINAL_ICAO);
	end if;
	go_block('HELIPORT_TO_SELECT');
else	
	QUERY_BLOCK_RECORDS('HELIPORT_TO_SELECT','INITIAL');
	GO_BLOCK('STD_HELIPORT');
-- Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
	if :parameter.work_type = 'VIEW' then
		set_item_property('HELIPORT_TO_SELECT.SELECT',enabled,property_false);
		set_item_property('HELIPORT_TO_SELECT.RESET',enabled,property_false);
		set_item_property('HELIPORT_TO_SELECT.CHECK_ALL',enabled,property_false);
		set_item_property('HELIPORT_TO_SELECT.MOVE',enabled,property_false);
		set_item_property('STD_HELIPORT.SELECT',enabled,property_false);
		set_item_property('STD_HELIPORT.RESET',enabled,property_false);
		set_item_property('STD_HELIPORT.CHECK_ALL',enabled,property_false);
	else
-- End Fix SCR 0087 -- Madhu -- 16-Mar-2012
--Begin Fix - SCR 5820 - Eswar KC - 07-Feb-2013				
	DECLARE
	   v_nAllow_update   NUMBER := 0;
	   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
	   IF :PARAMETER.WORK_TYPE != 'VIEW' THEN
	         v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
	         IF v_nAllow_update = 1 THEN
	            :PARAMETER.UPD_REC := 'N';
	            Set_Block_Property ('STD_HELIPORT', UPDATE_ALLOWED, PROPERTY_TRUE);
	            Set_Block_Property ('STD_HELIPORT', INSERT_ALLOWED, PROPERTY_TRUE);
	            
	            Set_Item_Property('STD_HELIPORT.RESET',ENABLED,PROPERTY_TRUE);
	            Set_Item_Property('STD_HELIPORT.CHECK_ALL',ENABLED,PROPERTY_TRUE);
	            Set_Item_Property('STD_HELIPORT.SELECT',ENABLED,PROPERTY_TRUE);
	            
	         ELSE
	            :PARAMETER.UPD_REC := 'Y';
	            Set_Block_Property ('STD_HELIPORT', UPDATE_ALLOWED, PROPERTY_FALSE);
	            Set_Block_Property ('STD_HELIPORT', INSERT_ALLOWED, PROPERTY_FALSE);
	            
	            Set_Item_Property('STD_HELIPORT.RESET',ENABLED,PROPERTY_FALSE);
		    			Set_Item_Property('STD_HELIPORT.CHECK_ALL',ENABLED,PROPERTY_FALSE);
	            Set_Item_Property('STD_HELIPORT.SELECT',ENABLED,PROPERTY_FALSE);
	         END IF;
	   END IF;
	END;
--End Fix - SCR 5820 - Eswar KC - 07-Feb-2013		
end if;-- Fix SCR 0087 -- Madhu -- 16-Mar-2012
end if;
hide_view('SELECT_FROM_GROUPS');

 selectionwhenListChanged:

:control_block.airway_sbi := null;
:control_block.airport_sbi := null;
:SELECT_ALL_RULES.IXRRD := 'N';   -- Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
:SELECT_ALL_RULES.OLD_IXRRD := :SELECT_ALL_RULES.IXRRD; -- Fix -SCR 7420.01 - Ashish N - 07-Jul-2017 

go_block('datatyp_rad');
clear_block;

IF :SELECTION.selections in ('S','G','A','I','R','H')then   
 	set_item_property('datatyp_rad.options',enabled,property_false);
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016 	
ELSE
	set_item_property('datatyp_rad.options',enabled,property_true);
--Begin Fix SCR 5820 --Madhu --15-Feb-2013
	IF :PARAMETER.UPD_REC = 'N' THEN
		Set_Item_Property ( 'DATATYP_RAD.OPTIONS', UPDATE_ALLOWED, PROPERTY_TRUE); 
		Set_Item_Property ( 'DATATYP_RAD.OPTIONS', INSERT_ALLOWED, PROPERTY_TRUE);
	END IF;
--End Fix SCR 5820 --Madhu --15-Feb-2013
	DECLARE
		v_type   varchar2(1) := 'E';
		v_count  number(3);
		ln_Inc_Exc_Cnt NUMBER; -- Fix - SCR 6503.01 - Eswar KC 
  BEGIN
  	begin
  		select 'T' into v_type
			from select_by_airport_group
			where select_by_id = :selection.selections;
  	exception
  		when no_data_found then
  		begin
  			select 'H' into v_type
				from select_by_heliport_group
				where select_by_id = :selection.selections;
  		exception
  			when no_data_found then
  			begin
  				select 'I' into v_type
					from select_by_icao
					where select_by_id = :selection.selections;
  			exception
  				when no_data_found then
  				begin
  					select 'G' into v_type
  					from select_by_geographic_area
  					where select_by_id = :selection.selections;
  				exception
  					when no_data_found then
  					v_type := 'E';
  				end;	
  			end;	
  		end;	
  	end;
  	--
  	populate_datatyp_descr(v_type);
  	first_record;
	-- Begin Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
	   IF v_type = 'T' THEN
	      SELECT COUNT (*)
	        INTO v_count
	        FROM navdb_select_criteria sel
	       WHERE sel.airport_group_id = :SELECTION.selections
           AND sel.navdb_id = :navdb.navdb_id
           AND sel.parent_select_by_id IS NULL
           AND sel.record_type_code = 10;
	
	      IF v_count = 0 THEN
	         -- If No Selected Criteria, Insert Initial Value Into Navdb_Select_Criteria For Airport Data Type
	         CREATE_DATATYP_CRITERIA ( TO_NUMBER (RTRIM (LTRIM (:SELECTION.selections))), 10);
	      END IF;
	   END IF;
	-- End Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
		 -- Begin Fix - SCR 6503.01 - Eswar KC
		IF :SELECTION.selections = -1 THEN 
        Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR', DISPLAYED, PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR', ENABLED,   PROPERTY_TRUE);
	      --Start Fix SCR 7259.01 12-MAY-2017 Venkat M
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', DISPLAYED, PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', ENABLED,   PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', NAVIGABLE,   PROPERTY_TRUE);        
	      Set_Item_Property('DATATYP_RAD.SELECT_ALL', UPDATE_ALLOWED,   PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', INSERT_ALLOWED,   PROPERTY_TRUE);
	      --End Fix SCR 7259.01 12-MAY-2017 Venkat M        
        Set_Radio_Button_Property('SELECT_ALL_RULES.IXRRD','DEFAULT',ENABLED, PROPERTY_FALSE); --  SCR 6983.00 - Eswar KC - 06-Jun-2016
        
		ELSE
        Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR', DISPLAYED, PROPERTY_FALSE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', DISPLAYED, PROPERTY_FALSE);  --Fix SCR 7259 15-Aug-2017  --Venkat M        
        Set_Radio_Button_Property('SELECT_ALL_RULES.IXRRD','DEFAULT',ENABLED, PROPERTY_TRUE);  --  SCR 6983.00 - Eswar KC - 06-Jun-2016
		END IF;
		 -- End Fix - SCR 6503.01 - Eswar KC

  	LOOP -- For each displayed data type:
 			select count(*) into v_count
  		from navdb_select_criteria sel
  		where (sel.geo_area_id = :SELECTION.selections OR
						 sel.area_code_id = :SELECTION.selections OR
			   		 sel.icao_code_id = :SELECTION.selections OR
			   		 sel.airport_group_id = :SELECTION.selections OR
			   		 sel.heliport_group_id = :SELECTION.selections)
			and sel.navdb_id = :navdb.navdb_id
			and sel.parent_select_by_id is null
			and sel.record_type_code = :datatyp_rad.record_type_code;

			if v_count = 0 then 
				-- IF NO SELECTED CRITERIA, INSERT INITIAL VALUE 'N'/'D' INTO NAVDB_SELECT_CRITERIA
				CREATE_DATATYP_CRITERIA(to_number(rtrim(ltrim(:SELECTION.selections))), :datatyp_rad.record_type_code);				
			END IF;
			-- GET the select_by_id INTO DAT_SEL, include_exclude_ind into OPTIONS
			if :DATATYP_RAD.RECORD_TYPE_CODE is not null then

			-- Begin Fix - SCR 4184 - Eswar KC - 21-Sep-2012	
		   :parameter.inc_exc_ind := get_inc_exc_ind (TO_NUMBER (RTRIM (LTRIM (:selection.selections))));
		   IF :PARAMETER.INC_EXC_IND = 'X' THEN
		      :DataTyp_Rad.options := 'X';
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',   ENABLED, PROPERTY_FALSE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES', ENABLED, PROPERTY_FALSE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',   ENABLED, PROPERTY_FALSE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_FALSE );
       -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );
			 -- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016			      
		-- BEGIN FIX - SCR 6051 - KIRAN P - 27-AUG-2013
			/*   UPDATE NAVDB_SELECT_CRITERIA
		         SET INCLUDE_EXCLUDE_IND = :DataTyp_Rad.options
		       WHERE AIRPORT_GROUP_ID = TO_NUMBER (RTRIM (LTRIM (:SELECTION.SELECTIONS)));
		      COMMIT;
		  */
	 -- END FIX - SCR 6051 - KIRAN P - 27-AUG-2013		      
		   ELSE
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',   ENABLED, PROPERTY_TRUE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES', ENABLED, PROPERTY_TRUE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',   ENABLED, PROPERTY_TRUE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_TRUE ); 
       -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
		   	IF :parameter.work_type = 'VIEW' THEN
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );        
        ELSE
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_TRUE );	         	
        END IF;  
       -- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016		        
		      POPULATE_DATATYP_OPTION;
		   END IF;
		  -- End Fix - SCR 4184 - Eswar KC - 21-Sep-2012 
			end if;			
		 -- Begin Fix - SCR 6503.01 - Eswar KC
		   IF :SELECTION.SELECTIONS = -1 THEN
		      Populate_Default_Inc_Exc_ind ('DATATYP_RAD', 'INC_EXC_INDICATOR');
		      SELECT COUNT (*)
		        INTO ln_Inc_Exc_Cnt                   
		        FROM Select_Criteria
		       WHERE Processing_Order = 30              -- check if it has a list rule
		         AND Record_Type_Code = :DATATYP_RAD.RECORD_TYPE_CODE;
		      IF ln_Inc_Exc_Cnt = 0 THEN
		         SET_ITEM_INSTANCE_PROPERTY ('DATATYP_RAD.INC_EXC_INDICATOR', CURRENT_RECORD, VISUAL_ATTRIBUTE, 'INC_EXC_NONE');                    
		         :DATATYP_RAD.INC_EXC_INDICATOR := NULL;
		      END IF;
		   END IF;
		 -- End Fix - SCR 6503.01 - Eswar KC
			exit when :system.last_record = 'TRUE';
			next_record;
 	  END LOOP;
		first_record;
  END;  	 
END IF;  			


 datatypRadwhenMouseClick:
-- Begin Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha
-- click_datatyp_radio;
if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
	dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
else	
--Begin SCR 5820 --Madhu --14-Feb-2013
	DECLARE
	   v_nAllow_update   NUMBER := 0;
	   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
	-- Begin Fix SCR 5891.02 -- Madhu--19-Mar-2013	
		IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
		ELSE
	--End Fix SCR 5891.02 -- Madhu--19-Mar-2013
	    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
     IF v_nAllow_update = 1 THEN
        :PARAMETER.UPD_REC := 'N';
        Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
        --:parameter.flag := 'Y';
        click_datatyp_radio;
     ELSE
        :PARAMETER.UPD_REC := 'Y';
        Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
        dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				RAISE Form_Trigger_Failure;         
     END IF;
    END IF;
	END;
--End SCR 5820 --Madhu --14-Feb-2013
end if; 
-- End Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha		

 datatypRadwhenMouseDoubleclick:
-- Begin Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha
-- click_datatyp_radio;
if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
	dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
else	
--Begin SCR 5820 --Madhu --14-Feb-2013
	DECLARE
	   v_nAllow_update   NUMBER := 0;
	   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
	 --Begin Fix SCR 5891.02 -- Madhu--19-Mar-2013   
	   IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
		 ELSE
	--End Fix SCR 5891.02 -- Madhu--19-Mar-2013
	    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
     IF v_nAllow_update = 1 THEN
     		Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
        :PARAMETER.UPD_REC := 'N';
        click_datatyp_radio;
     ELSE
        :PARAMETER.UPD_REC := 'Y';
        Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
        dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				RAISE Form_Trigger_Failure;         
     END IF;
		END IF;
	END;
--End SCR 5820 --Madhu --14-Feb-2013
end if; 
-- End Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha	

 datatypRadwhenButtonPressed:
Export_Csv.Export_File;


 datatypRadwhenMouseEnter:
dsp_msg('enabled/not '|| get_Item_Property('DATATYP_RAD.SELECT_ALL',ENABLED));

 datatypRadwhenCheckboxChanged:
--Begin Fix SCR 7259 22-Aug-2017
IF :DATATYP_RAD.INC_EXC_INDICATOR IN ('I','X','B') THEN
	 --:DATATYP_RAD.SELECT_ALL := 'N';
	 IF GET_ITEM_PROPERTY('DATATYP_RAD.CSV_REPORT',VISIBLE)= 'FALSE' THEN
	    SET_ITEM_PROPERTY('DATATYP_RAD.CSV_REPORT',DISPLAYED,PROPERTY_TRUE);  --Fix SCR 7259 15-Aug-2017 --Venkat M
	 END IF;   
ELSE
	:DATATYP_RAD.SELECT_ALL := 'N';
	DSP_MSG('Please select the Checkbox with Include/Exclude values for Report Generation');
END IF;	 
--End Fix SCR 7259 22-Aug-2017

 datatypRadwhenNewRecordInstance:
IF :SELECTION.selections in ('S','G','A','I','R','H')then
	null;
else	   
	if :DATATYP_RAD.RECORD_TYPE_CODE is null then
		if :DATATYP_RAD.RECORD_TYPE_DESCR like '--%' then
			null;
		else	
			if :system.trigger_record != 1 then
				previous_record;
			else
				null;
			end if;	
		end if;	
	else
		declare
			v_count number(3);
		begin	
			if :SELECTION.selections = '-1' then
				SET_RADIO_BUTTON_PROPERTY ('DATATYP_RAD.OPTIONS','DEFAULT',ENABLED,PROPERTY_FALSE);
				SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );  -- Fix - SCR 6983.00 - Eswar KC
				Populate_Default_Inc_Exc_ind ('DATATYP_RAD', 'INC_EXC_INDICATOR'); 													-- Fix - SCR 6503.01 - Eswar KC
				 /*--SCR 7259 22-AUG-2017
				IF :DATATYP_RAD.INC_EXC_INDICATOR IN ('I','X','B') THEN
					 --SET_ITEM_INSTANCE_PROPERTY('DATATYP_RAD.SELECT_ALL',CURRENT_RECORD,NAVIGABLE,PROPERTY_TRUE); 
           SET_ITEM_INSTANCE_PROPERTY('DATATYP_RAD.SELECT_ALL',CURRENT_RECORD, ENABLED,   PROPERTY_TRUE);
           SET_ITEM_INSTANCE_PROPERTY('DATATYP_RAD.SELECT_ALL',CURRENT_RECORD, NAVIGABLE,   PROPERTY_TRUE);        
	         SET_ITEM_INSTANCE_PROPERTY('DATATYP_RAD.SELECT_ALL',CURRENT_RECORD, UPDATE_ALLOWED,   PROPERTY_TRUE);
           SET_ITEM_INSTANCE_PROPERTY('DATATYP_RAD.SELECT_ALL',CURRENT_RECORD, INSERT_ALLOWED,   PROPERTY_TRUE);					 
				END IF;	 
				--scr 7259
				*/
				select count(*) into v_count
				from select_criteria
				where processing_order = 30 -- check if it has a list rule
				and record_type_code = :datatyp_rad.record_type_code;
				if v_count = 0 then
					-- No list rule
					set_item_property('INCALL',displayed,property_false);
					set_item_property('EXCALL',displayed,property_false);
					set_item_property('CSV_REPORT',displayed,property_false);  --Fix SCR 7259 15-Aug-2017 --Venkat M
				else
					set_item_property('INCALL',displayed,property_true);
					set_item_property('EXCALL',displayed,property_true);
					--Begin Fix SCR 7259 15-Aug-2017 --Venkat M
					set_item_property('CSV_REPORT',displayed,property_true);  
					set_item_property('CSV_REPORT',enabled,property_true);  
					--End Fix SCR 7259 15-Aug-2017 --Venkat M										
					set_item_property('INCALL',enabled,property_true);
					set_item_property('EXCALL',enabled,property_true);
					-- Get list number
  				select count(*) into :DATATYP_RAD.list_no
  				from record_identifier
  				where record_type_code = :datatyp_rad.record_type_code;
  			end if;
			else
		-- Begin Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
		   IF :parameter.inc_exc_ind = 'X' THEN
		      SET_RADIO_BUTTON_PROPERTY ('DATATYP_RAD.OPTIONS','DEFAULT',enabled,property_false);
		   ELSE
		      SET_RADIO_BUTTON_PROPERTY ('DATATYP_RAD.OPTIONS','DEFAULT',enabled,property_true);
		   END IF;
		-- End Fix - SCR 4184 - Eswar KC  - 10 Sep 2012
			 set_item_property('INCALL',displayed,property_false);
			 set_item_property('EXCALL',displayed,property_false);
       set_item_property('CSV_REPORT',displayed,property_false);  --Fix SCR 7259 15-Aug-2017 --Venkat M
			end if;	
		end;
	end if;		
end if;		

 ruleswhenMouseClick:
click_detail_radio;

 ruleswhenMouseDoubleclick:
click_detail_radio;

 ruleswhenButtonPressed:
DECLARE
	cursor navcur is
		select include_exclude_ind
		from 	navdb_select_criteria A, select_criteria B
		where A.criteria_id = B.criteria_id
		and A.parent_select_by_id = :datatyp_rad.select_by_id;
BEGIN
	:GLOBAL.DETAIL_OPTION := 'N';
	for rec in navcur loop 
	  IF rec.include_exclude_ind = 'I' THEN
	  	:GLOBAL.DETAIL_OPTION := 'R';
	  ELSE
	  	NULL;
	  END IF;
	end loop;
END;
--
IF :GLOBAL.DETAIL_OPTION = 'N' THEN
	IF :DATATYP_RAD.OLD_OPTION != 'R' THEN
		:DATATYP_RAD.OPTIONS := :DATATYP_RAD.OLD_OPTION;
	ELSE
		if :control_block.sel_hdr like 'NAVDB Default%' then
			:DATATYP_RAD.OPTIONS := 'N';
		else
			:DATATYP_RAD.OPTIONS := 'D';
		end if;	
	END IF;
	UPDATE_DATATYP_VALUE(:DATATYP_RAD.OPTIONS);	
END IF;
:DATATYP_RAD.OLD_OPTION := :DATATYP_RAD.OPTIONS;
:control_block.did := 'Y';
hide_view('rules');
go_block('SELECTION');

 ruleswhenNewRecordInstance:
if :rules.SELECT_BY_ID is null then
	if :system.trigger_record != 1 then
		previous_record;
	else
		null;
	end if;
end if;	

 ruleswhenNewBlockInstance:
declare
	cursor sel_cur is
		select decode(:SELECTION.selections,'-1','NAVDB Default')
		from dual
		union
		select decode(geo.select_by_id,:SELECTION.selections,geo.GEO_AREA_NAME)
		from select_by_geographic_area geo
		union
		select decode(area.select_by_id,:SELECTION.selections,area.AREA_CODE)
		from select_by_area area
		union
		select decode(icao.select_by_id,:SELECTION.selections,icao.icao_CODE)
		from select_by_icao icao
		union
		select decode(agrp.select_by_id,:SELECTION.selections,agrp.group_name)
		from select_by_airport_group agrp
		union
		select decode(hgrp.select_by_id,:SELECTION.selections,hgrp.group_name)
		from select_by_heliport_group hgrp;
begin
	open sel_cur;
	fetch sel_cur into :control_block.sel_hdr;
	close sel_cur;
	:control_block.sel_hdr := rtrim(:control_block.sel_hdr)||' Criteria Rules For '||rtrim(:datatyp_rad.record_type_descr);
end;

 singleValwhenButtonPressed:
if :rules.old_list = 'I' and :single_val.old_value is null then	
	:rules.list := 'N';
else	
	:rules.list := :rules.old_list;
end if;	
:CONTROL_BLOCK.did := 'Y';
hide_view('single');
go_block('rules');

 singleValpostBlock:
check_did('Post Block Check');

 singleValkeyDown:
null;

 multValwhenButtonPressed:
first_record;
if :rules.old_list = 'I' and :single_val.single is null then	
	:rules.list := 'N';
else	
	:rules.list := :rules.old_list;
end if;	
:control_block.did := 'Y';
hide_view('MULTIPLE');
go_block('rules');

 multValpostBlock:
check_did('Post Block Check');

 recordSubTypewhenCheckboxChanged:
if :RECORD_SUB_TYPE.value is null then
	:RECORD_SUB_TYPE.chk := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :RECORD_SUB_TYPE.chk = 'Y' then
		:RECORD_SUB_TYPE.chk := 'N';
	elsif :RECORD_SUB_TYPE.chk = 'N' then
		:RECORD_SUB_TYPE.chk := 'Y';
	end if;
end if;	

 recordSubTypewhenButtonPressed:
first_record;
loop
	:RECORD_SUB_TYPE.chk := 'N';
	exit when :system.last_record = 'TRUE';
	next_record;
end loop;
first_record;

 recordSubTypepostBlock:
check_did('Post Block Check');

 genCriteriaSubTypewhenCheckboxChanged:
--Begin fix SCR 7426.09 --Madhu 
IF :GEN_CRITERIA_SUB_TYPE.value IS NULL THEN
	:GEN_CRITERIA_SUB_TYPE.chk := 'N';
END IF;
IF :parameter.work_type = 'VIEW' THEN
	IF :GEN_CRITERIA_SUB_TYPE.chk = 'Y' THEN
		:GEN_CRITERIA_SUB_TYPE.chk := 'N';
	ELSIF :GEN_CRITERIA_SUB_TYPE.chk = 'N' THEN
		:GEN_CRITERIA_SUB_TYPE.chk := 'Y';
	END IF;
END IF;	
:control_block.did := 'N';
:control_block.GEN_CRITERIA_CAN := get_canvas_property('SEL_CAN',topmost_tab_page);
--End fix SCR 7426.09 --Madhu 

 genCriteriaSubTypewhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
first_record;
LOOP
	:GEN_CRITERIA_SUB_TYPE.chk := 'N';
	EXIT WHEN :system.last_record = 'TRUE';
	next_record;
END LOOP;
first_record;
--End fix SCR 7426.09 --Madhu 

 genCriteriaSubTypepostBlock:
check_did('Post Block Check');-- fix SCR 7426.09 --Madhu 
	

 appSubTypewhenCheckboxChanged:
if :APP_SUB_TYPE.real_value is null then
	:APP_SUB_TYPE.chk := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :APP_SUB_TYPE.chk = 'Y' then
		:APP_SUB_TYPE.chk := 'N';
	elsif :APP_SUB_TYPE.chk = 'N' then
		:APP_SUB_TYPE.chk := 'Y';
	end if;
end if;	

 appSubTypewhenButtonPressed:
first_record;
loop
	:APP_SUB_TYPE.chk := 'N';
	:APP_SUB_TYPE.LIMIT_PRIORITY := null;
	exit when :system.last_record = 'TRUE';
	next_record;
end loop;
first_record;

 appSubTypepostBlock:
check_did('Post Block Check');
	

 runwaySurfacewhenCheckboxChanged:
if :RUNWAY_SURFACE.HARD_VALUE is null then
	:RUNWAY_SURFACE.HARD_CHK := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :RUNWAY_SURFACE.HARD_CHK = 'Y' then
		:RUNWAY_SURFACE.HARD_CHK := 'N';
	elsif :RUNWAY_SURFACE.HARD_CHK = 'N' then
		:RUNWAY_SURFACE.HARD_CHK := 'Y';
	end if;
end if;	

 runwaySurfacewhenButtonPressed:
first_record;
:rules.list := :rules.old_list;
:control_block.did := 'Y';
hide_view('SELECT_RUNWAY_SURFACE');
go_block('rules');

 runwaySurfacepostBlock:
check_did('Post Block Check');
	

 runwaySurfacewhenNewBlockInstance:
DECLARE
	group_id      recordgroup;
	COLUMN_NAME_1 VARCHAR2(50);
	COLUMN_NAME_2 VARCHAR2(50);
BEGIN
	GROUP_ID := find_group('RUNWAY_SURFACE');
	COLUMN_NAME_1 := 'RUNWAY_SURFACE.SOFT';
	COLUMN_NAME_2 := 'RUNWAY_SURFACE.HARD';
	clear_block;
	first_record;
	for i in 1..get_group_row_count(GROUP_ID) loop
 		:RUNWAY_SURFACE.SOFT_VALUE := get_group_char_cell(COLUMN_NAME_1,i);
 		:RUNWAY_SURFACE.HARD_VALUE := get_group_char_cell(COLUMN_NAME_2,i);
 		if :RUNWAY_SURFACE.SOFT_VALUE is not null then
 			begin
 				select 'Y' into :RUNWAY_SURFACE.SOFT_CHK
 				from selection_criteria_value
 				where value = :RUNWAY_SURFACE.SOFT_VALUE
 				and select_by_id = :rules.select_by_id
 				and value_descr = :RULES.SELECTED_RULES;
 			exception
 				when no_data_found then
 				:RUNWAY_SURFACE.SOFT_CHK := 'N';
 			end;
		end if;
		if :RUNWAY_SURFACE.HARD_VALUE is not null then
			begin
 				select 'Y' into :RUNWAY_SURFACE.hard_chk
 				from selection_criteria_value
 				where value = :RUNWAY_SURFACE.HARD_VALUE
 				and select_by_id = :rules.select_by_id
 				and value_descr = :RULES.SELECTED_RULES;
 			exception
 				when no_data_found then
 				:RUNWAY_SURFACE.hard_chk := 'N';
 			end;
 		end if;
 		next_record;
	end loop;
	first_record;	
END;


 listswhenValidateItem:
check_length(7);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_7 <> :LISTS.VALUE_D_7 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_7 <> :LISTS.VALUE_D_7 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listswhenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN --Fix SCR 5891.02 -- Madhu--19-Mar-2013
	DECLARE
	   	v_nAllow_update   NUMBER := 0;
	    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
		     IF :PARAMETER.UPD_REC = 'Y' THEN
		     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				 END IF;
	END;		
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013

 listswhenButtonPressed:
--Begin SCR 5470 -- Shrikant K- 04-Mar- 2020
Declare
	v_Button number(1);
	v_count number(10);
Begin 	
	   :control_block.did := 'Y';
  if :parameter.work_type != 'VIEW' then
  --	dsp_msg('Please Confirm before Deletion');
  		v_Button := display_alert.more_buttons ('S','Delete All Selection Criterias',
			'Are you sure. you want to delete all the records'||chr(10),'OK','Cancel');
			if v_Button = 1 then
				
				Select max(value_seq) into v_count from selection_criteria_value
				where select_by_id= :control_block.list_s_id;
				
				delete from selection_criteria_value
				where select_by_id= :control_block.list_s_id;	
				
				delete from navdb_select_criteria
				where select_by_id = :control_block.list_s_id;
				
				commit;
				Message('Total '||v_count||' rows Deleted');				
	  		go_block('DATATYP_RAD');
			else
				null;
			end if;
	--	clear_block('LISTS');
  end if;

End;
--End SCR 5470 -- Shrikant K- 04-Mar- 2020



 listspostBlock:
check_did('Post Block Check');

 listswhenNewBlockInstance:
/*
    SCR 0143 --Madhu -- 18-Apr-2012 
    This SCR is Created to bring up all the updates done to this form from baseline version of build 229A to 236
	(SCR no's 5196,3358,5215,5329)
    
*/
DECLARE
	v_lable 				VARCHAR2 (30); 
	v_length 				NUMBER (10);
	p_x     				NUMBER (10);
	p_width 				NUMBER (10);
	v_nAllow_update NUMBER := 0;							--Fix SCR 5820 --Madhu --15-Feb-2013
	v_cNavdb_Block  VARCHAR2 (30) := 'NAVDB';	--Fix SCR 5820 --Madhu --15-Feb-2013

  CURSOR labelhdr_disp ( P_NUM NUMBER) IS
     SELECT identifier_label, identifier_length
       FROM record_identifier
      WHERE record_type_code = :datatyp_rad.record_type_code
        AND display_order = P_NUM;
BEGIN
	clear_block;
	--
   FOR i IN 2 .. 7
   LOOP
      IF i > :DATATYP_RAD.list_no THEN
         SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), ENABLED, PROPERTY_FALSE);
         SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), VISIBLE, PROPERTY_FALSE);
      ELSE
         SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), VISIBLE,PROPERTY_TRUE);
         SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), ENABLED,PROPERTY_TRUE);
         SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), NAVIGABLE,PROPERTY_TRUE);
         -- Begin Fix SCR 5820 --Madhu --15-Feb-2013
        IF :parameter.work_type != 'VIEW' THEN
         v_nAllow_update :=CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));

         IF v_nAllow_update = 1 THEN
            :PARAMETER.UPD_REC := 'N';

            SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), INSERT_ALLOWED, PROPERTY_TRUE);
            SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), UPDATE_ALLOWED, PROPERTY_TRUE);
         ELSE
            :PARAMETER.UPD_REC := 'Y';

            SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), INSERT_ALLOWED, PROPERTY_FALSE);
            SET_ITEM_PROPERTY ('lists.value_' || TO_CHAR (i), UPDATE_ALLOWED, PROPERTY_FALSE);
         END IF;
       END IF;
      --End Fix SCR 5820 --Madhu --15-Feb-2013
      END IF;
   END LOOP;

   p_x     := GET_ITEM_PROPERTY ('lists.value_' || :DATATYP_RAD.list_no, x_pos);
   p_width := GET_ITEM_PROPERTY ('lists.value_' || :DATATYP_RAD.list_no, width);
   --Ashwin
   SET_ITEM_PROPERTY ('lists.dcr_number',X_POS,p_x + p_width + 1 );
   
    p_x     := GET_ITEM_PROPERTY ('lists.dcr_number', x_pos);
   p_width := GET_ITEM_PROPERTY ('lists.dcr_number', width);
   --Ashwin
   SET_BLOCK_PROPERTY ('LISTS', BLOCKSCROLLBAR_X_POS, p_x + p_width);
   --
   IF :DATATYP_RAD.LIST_VAL = 'I' THEN
      :control_block.listhdr := 'NAVDB Default -- ' || RTRIM (:datatyp_rad.record_type_descr) || ' -- Include Lists';
   ELSE
      :control_block.listhdr := 'NAVDB Default -- ' || RTRIM (:datatyp_rad.record_type_descr) || ' -- Exclude Lists';
   END IF;
   --
   FOR i IN 1 .. :DATATYP_RAD.list_no
   LOOP
      OPEN labelhdr_disp (i);
      FETCH labelhdr_disp  INTO v_lable, v_length;

      SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), PROMPT_TEXT, v_lable);
      --set_item_property('VALUE_'||to_Char(i),max_length,v_length);  CAN NOT SET ITEM THE MAX LENGTH
      COPY (v_length, 'CONTROL_BLOCK.LENGTH_' || TO_CHAR (i));

      IF :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'AIRPORT_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'RUNWAY' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'RUNWAY_LIST');
    -- Begin Fix - SCR 5196 - VenkatReddy S - 23-Aug-2011.
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT NDB' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'AIRPORT_NDB_LIST');
    -- End Fix -    SCR 5196 - VenkatReddy S - 23-Aug-2011.
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'HELIPORT_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE HOLDING' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'ENROUTE_HOLDING_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT HOLDING' THEN                      --Fix SCR 7886.01- Ashish N 18-Jan-2019    
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'AIRPORT_HOLDING_LIST');  --Fix SCR 7886.01- Ashish N 18-Jan-2019
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'APPROACH' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'APPROACH_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'SIDS' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'SID_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'STARS' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'STAR_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'AIRPORT WAYPOINT' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME,  'AIRPORT_WAYPOINT_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE NAVAID' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'VHF_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'GLS' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'GLS_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE NDB' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'ENROUTE_NDB_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE AIRWAY' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'AIRWAY_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'ENROUTE WAYPOINT' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i),  LOV_NAME, 'ENROUTE_WAYPOINT_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT APPROACH' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'HELI_APPROACH_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT SID' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i),  LOV_NAME, 'HELI_SID_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'HELIPORT STAR' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i),  LOV_NAME,  'HELI_STAR_LIST');
    -- Begin Fix - SCR 5215 - VenkatReddy S - 26-Sept-2011.
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'RESTRICTED AIRSPACE' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i),  LOV_NAME, 'RESTRICTED_AIRSPACE_LIST');
      ELSIF :DATATYP_RAD.RECORD_TYPE_DESCR = 'CONTROLLED AIRSPACE' THEN
         SET_ITEM_PROPERTY ('VALUE_' || TO_CHAR (i), LOV_NAME, 'CONTRL_AIRSPACE_LIST');
      END IF;
    -- End Fix -    SCR 5215 - VenkatReddy S - 26-Sept-2011.
      CLOSE labelhdr_disp;
   END LOOP;
   --
   POPULATE_INC_EXC_LISTS (:DATATYP_RAD.LIST_VAL);
   :control_block.did := 'N';
   :PARAMETER.REC_COUNT := 0;  --Fix SCR 7259 15-Aug-2017 --Venkat M
   :PARAMETER.KEY_DOWN_UP := 0; --Fix SCR 7259 --17-Aug-17
   :PARAMETER.P_SEARCH_FIELD := NULL; -- SCR 7259 -23-AUG-2017
   :PARAMETER.REC_CNT_IE := 0; --SCR 7259 
   :PARAMETER.SAVE_BUTTON := 0; --SCR 7259 
END;




 listskeyDelrec:
--Begin Fix SCR 5820 --Madhu --15-Feb-2013
IF :PARAMETER.UPD_REC = 'Y' THEN
	dsp_action_msg ('D',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in('navdb.navdb_id'));
ELSIF :PARAMETER.UPD_REC = 'N' THEN
	DELETE_RECORD;
	:PARAMETER.DUP_LISTS_REC := 0;	--Fix SCR 7259 15-Aug-2017 Venkat M	
END IF;
--End Fix SCR 5820 --Madhu --15-Feb-2013

 listskeyDown:
--FIX SCR 7259 15-Aug-2017 Venkat M
declare
	v_timer_id 	timer;
	cst_ms	 CONSTANT   NUMBER(2) := 1;
begin	
IF :LISTS.VALUE_1 IS NOT NULL THEN
	NEXT_RECORD;
END IF;
END;
--Fix SCR 7259 15-Aug-2017 Venkat M

 listskeyUp:
--Fix SCR 7259 15-Aug-2017 Venkat M
declare
	v_timer_id 	timer;
	cst_ms	 CONSTANT   NUMBER(2) := 1;
begin	
IF :SYSTEM.CURSOR_RECORD = 1 THEN
	NULL;
ELSE
	PREVIOUS_RECORD;
END IF;	
-- till here
end;
--Fix SCR 7259 15-Aug-2017 Venkat M

 listswhenNewRecordInstance:
If (Get_Record_Property(:System.Trigger_Record,:System.Trigger_Block,STATUS) = 'NEW' AND :lists.dcr_number IS NULL) Then
	:lists.dcr_number := :global.dcr_number;
	Set_Record_Property(:System.Trigger_Record,:System.Trigger_Block,STATUS,NEW_STATUS);
End If;


 copyNavdbwhenValidateItem:
-- Begin Fix - SCR 5329 - Eswar KC -08 Feb 2012
DECLARE
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
        
BEGIN
   IF :copy_navdb.new_navdb IS NOT NULL
   THEN
      FOR fms_id_rec IN fms_id_cur
      LOOP
         IF fms_id_rec.fms_id = :navdb.fms_id
         THEN
            IF forms_utilities.check_ident_for_alphanum (:copy_navdb.new_navdb)
            THEN
               display_alert.one_button
                  ('S',
                   'Change NavDB ID',
                      'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
                   || CHR (10)
                   || 'Change NavDB ID.'
                  );
               RAISE form_trigger_failure;
            END IF;
         END IF;
      END LOOP;
   END IF;		
END;
-- End Fix - SCR 5329 - Eswar KC -08 Feb 2012

	 




 copyNavdbwhenNewItemInstance:
-- Begin Fix - SCR 6946.00 - Eswar KC - 18-Jun-2016
	DECLARE 
		ls_Return BOOLEAN;
		ln_DCR 		NUMBER;
		ln_Flag   NUMBER; -- Fix - SCR 7415 - Eswar KC
	BEGIN 
		-- Begin Fix - SCR 7415 - Eswar KC
		ln_Flag := VALIDATE_NAVDB (:Global.Dcr_Number,:Global.Processing_Cycle,:NAVDB.DATA_SUPPLIER,:Navdb.Navdb_Id); -- Fix - SCR 7415 - Eswar KC
		IF ln_Flag != 1 THEN 
		-- Fix - SCR 7415 - Eswar KC
			SELECT DISTINCT DCR_Number 
			  INTO ln_DCR 
			  FROM Search_by_Navdb_Assignee
			 WHERE NavDB_ID = :Copy_Navdb.New_Navdb
			   AND DCR_overall_status = 'OPEN'
			   AND Data_Supplier = :NAVDB.DATA_SUPPLIER;
				
			:Copy_Navdb.New_DCR := ln_DCR;
			Next_Item;
		-- Begin Fix - SCR 7415 - Eswar KC
		ELSE
			:Copy_Navdb.New_DCR := :Global.Dcr_Number;
		END IF;
		-- End Fix - SCR 7415 - Eswar KC
			
	EXCEPTION
		WHEN no_data_found THEN
			Dsp_Msg('No Open DCR exists for '||:Copy_Navdb.New_Navdb);            
			:Copy_Navdb.New_DCR := '';
		WHEN others THEN
			ls_Return := Show_Lov('DCR_LIST'); 
			IF NOT ls_Return THEN 
				dsp_msg('Please select a DCR from the List.'); 
				RAISE Form_Trigger_Failure; 
			END IF; 
	END;
-- End Fix - SCR 6946.00 - Eswar KC - 18-Jun-2016

 copyNavdbwhenButtonPressed:
:copy_navdb.new_navdb := null;
:copy_navdb.new_cust  := null;
--show_view('MAIN'); 	-- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
SET_CANVAS_PROPERTY('SEL_CAN', TOPMOST_TAB_PAGE, 'MAIN' ); -- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
Hide_View('FOCALS'); -- Fix - SCR 6927.01 - Eswar KC	
go_item('navdb.navdb_id');


 copyNavdbkeyDown:
null;

 copyNavdbwhenValidateRecord:
NULL;

 copyGeoArptGrpwhenValidateItem:
-- Begin Fix - SCR 5329 - Eswar KC -08 Feb 2012
DECLARE
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
BEGIN
   IF :copy_navdb.new_navdb IS NOT NULL
   THEN
      FOR fms_id_rec IN fms_id_cur
      LOOP
         IF fms_id_rec.fms_id = :navdb.fms_id
         THEN
            IF forms_utilities.check_ident_for_alphanum (:copy_navdb.new_navdb)
            THEN
               display_alert.one_button
                  ('S',
                   'Change NavDB ID',
                      'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
                   || CHR (10)
                   || 'Change NavDB ID.'
                  );
               RAISE form_trigger_failure;
            END IF;
         END IF;
      END LOOP;
   END IF;
END;
-- End Fix - SCR 5329 - Eswar KC -08 Feb 2012

 copyGeoArptGrpwhenButtonPressed:
go_block('COPY_GEO_ARPT_GRP');
:COPY_GEO_ARPT_GRP.GEO_CHK := 'Y';
:COPY_GEO_ARPT_GRP.AC_CHK  := 'Y';
:COPY_GEO_ARPT_GRP.IC_CHK  := 'Y';
:COPY_GEO_ARPT_GRP.AG_CHK  := 'Y';


 fmsDmrpostQuery:
if :fms_dmr.dmr_descr is null and :fms_dmr.dmr_id is not null then
	begin
		select dmr_descr into :fms_dmr.dmr_descr
		  from Data_Manipulation_Routine
		 where dmr_id = :fms_dmr.dmr_id;
	exception
		when no_data_found then
		null;
	end;	
end if;	


 customerInfowhenValidateItem:
-- Begin Fix - SCR 3693 - Sesha 
	:NAVDB.NOTES:=:CUSTOMER_INFO.NOTES;
-- End Fix - SCR 3693 - Sesha 

 customerInfowhenCheckboxChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
If :CUSTOMER_INFO.CUSTOMER_EMAIL_ID IS NULL Then
	Dsp_Msg('Please Enter valid Customer e-mail Id.');
	:CUSTOMER_INFO.CUST_EMAIL_FLAG := 'N';
	Go_Item('CUSTOMER_INFO.CUSTOMER_EMAIL_ID');	
End If;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016





 customerInfopostRecord:
-- Begin Fix - SCR 3693 - Sesha 
if :system.form_status = 'CHANGED' then
	:control_block.did := 'Y';
else
	:control_block.did := NULL;  --mvr SCR 7623
end if;
-- End Fix - SCR 3693 - Sesha 



 navdbDeliveryFormatMediawhenCheckboxChanged:
-- Start Fix SCR 7899.04- Ashish N - 20-Jul-2018
DECLARE
	ls_Crate VARCHAR2(1);	
BEGIN
	ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	IF ls_Crate = 'N' THEN
		IF :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND = 'Y' THEN
		:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND := 'N';
		dsp_msg('Selected Media Type cannot be Crated');
		RAISE Form_Trigger_Failure;
		END IF; 
		--Start SCR 7960.01 - Ashish N - 20-AUG-2018
	ELSE
	  	IF :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND = 'Y' THEN
	  		dsp_msg('Selected Media Type is enabled for Crated');
	  		ELSE
					null;		
	  		END IF;
	  -- END SCR 7960.01 - Ashish N - 20-AUG-2018
	END IF;
END;

IF nvl(:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB,'-') != :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND THEN
	:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB := :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND;
END IF;
-- End Fix SCR 7899.04- Ashish N - 20-Jul-2018
commit_form; --Fix SCR 7960.01 -Ashish N- 09-MAY-2018

 navdbDeliveryFormatMediawhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('NAVDB_DELIVERY_FORMAT_MEDIA','DeSelect_Group');
end if;	



 navdbDeliveryFormatMediawhenNewBlockInstance:
/*
If :NAVDB_DELIVERY_FORMAT_MEDIA.Format_Media_Type IS Null Then 
	go_block('FMS_DELIVERY_FORMAT_MEDIA');
	raise form_trigger_failure;
end if;*/

if get_group_row_count(find_group('Select_Group')) > 0 then
	DSP_MSG('You have checked at lease one Format Media.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked Format Media.'||chr(10)||
					'Click the ''Reset'' button to clear all the check(s)');
	if :NAVDB_DELIVERY_FORMAT_MEDIA.CHK = 'Y' then
		:NAVDB_DELIVERY_FORMAT_MEDIA.CHK := 'N';
		SET_GROUP('NAVDB_DELIVERY_FORMAT_MEDIA','DeSelect_Group',:NAVDB_DELIVERY_FORMAT_MEDIA.chk,:NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	end if;	
	go_block('FMS_DELIVERY_FORMAT_MEDIA');
else	
	QUERY_BLOCK_RECORDS('FMS_DELIVERY_FORMAT_MEDIA','INITIAL');
	GO_BLOCK('NAVDB_DELIVERY_FORMAT_MEDIA');
--Begin SCR 0087 -- Madhu -- 16-Mar-2012
	if :parameter.work_type = 'VIEW' then 
		set_item_property('FMS_DELIVERY_FORMAT_MEDIA.SELECT',enabled,property_false);
	  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.SELECT',enabled,property_false);
	  set_item_property('FMS_DELIVERY_FORMAT_MEDIA.CHECK_ALL',enabled,property_false);
	  set_item_property('FMS_DELIVERY_FORMAT_MEDIA.RESET',enabled,property_false);
	  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.CHECK_ALL',enabled,property_false);
	  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.RESET',enabled,property_false);
	else
--End SCR 0087 -- Madhu -- 16-Mar-2012
		null;
          		
	end if;
end if;	


 navdbDeliveryFormatMediawhenNewRecordInstance:
-- Start Fix SCR 7899.04 - Ashish N- 20-JUL-2018
DECLARE
	ls_Crate VARCHAR2(1);	
BEGIN
--	:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND := :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB; -- Fix SCR 7899.04 - Ashish N- 20-JUL-2018
	ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	IF ls_Crate = 'Y' THEN
  set_item_instance_property('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', current_record,visual_attribute,'FORMAT_MEDIA_TYPE');
	END IF;
END;
-- End Fix SCR 7899.04 - Ashish N- 20-JUL-2018

 navdbDeliveryFormatMediapostQuery:
-- Start Fix SCR 7899.04 - Ashish N- 20-JUL-2018
DECLARE
	ls_Crate VARCHAR2(1);	
BEGIN
	:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND := :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB; -- Fix SCR 7899.04 - Ashish N- 20-JUL-2018
	ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	IF ls_Crate = 'Y' THEN
  set_item_instance_property('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', current_record,visual_attribute,'FORMAT_MEDIA_TYPE');
	END IF;
END;
-- End Fix SCR 7899.04 - Ashish N- 20-JUL-2018

 fmsDeliveryFormatMediawhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('FMS_DELIVERY_FORMAT_MEDIA','Select_Group',:FMS_DELIVERY_FORMAT_MEDIA.chk,:FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
else
	:FMS_DELIVERY_FORMAT_MEDIA.chk := 'N';
end if;	

 fmsDeliveryFormatMediawhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('FMS_DELIVERY_FORMAT_MEDIA','Select_Group');
end if;	




 fmsDeliveryFormatMediawhenNewBlockInstance:
check_save('NAVDB_DELIVERY_FORMAT_MEDIA');
/*If :NAVDB_DELIVERY_FORMAT_MEDIA.Format_Media_Type IS Null Then
	set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.CHK',enabled,property_false);
Else
  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.CHK',enabled,property_true);	
End if;*/

if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one Format Media.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked Format Media.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	if :FMS_DELIVERY_FORMAT_MEDIA.CHK = 'Y' then
		:FMS_DELIVERY_FORMAT_MEDIA.CHK := 'N';
		SET_GROUP('FMS_DELIVERY_FORMAT_MEDIA','Select_Group',:FMS_DELIVERY_FORMAT_MEDIA.chk,:FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	end if;
	go_block('NAVDB_DELIVERY_FORMAT_MEDIA');
else	
	QUERY_BLOCK_RECORDS('NAVDB_DELIVERY_FORMAT_MEDIA','INITIAL');
	GO_BLOCK('FMS_DELIVERY_FORMAT_MEDIA');
--Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
	if :parameter.work_type = 'VIEW' then 
		set_item_property('FMS_DELIVERY_FORMAT_MEDIA.SELECT',enabled,property_false);
	  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.SELECT',enabled,property_false);
	  set_item_property('FMS_DELIVERY_FORMAT_MEDIA.CHECK_ALL',enabled,property_false);
	  set_item_property('FMS_DELIVERY_FORMAT_MEDIA.RESET',enabled,property_false);
	  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.CHECK_ALL',enabled,property_false);
	  set_item_property('NAVDB_DELIVERY_FORMAT_MEDIA.RESET',enabled,property_false);
	else
-- End Fix SCR 0087 -- Madhu -- 16-Mar-2012
 null;
end if;--Fix SCR 0087 -- Madhu -- 16-Mar-2012
end if;	


 suaRuleswhenButtonPressed:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
first_record;
loop
	:SUA_RULES.chk := 'N';
	exit when :system.last_record = 'TRUE';
	next_record;
end loop;
first_record;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 suaRulespostBlock:
check_did('Post Block Check'); -- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 suaRuleswhenNewBlockInstance:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
		if :datatyp_rad.record_type_descr like 'CONTROLLED AIRSPACE' then
	 			populate_sua_rules('UC');
	 	elsif :datatyp_rad.record_type_descr like 'RESTRICTED AIRSPACE' then
	 			populate_sua_rules('UR');
	 	end if;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 controlBlockwhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.PACIFIC_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$PACIFIC',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Pacific East Region.');
	  		--east
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'S90000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N20000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N75000000','E180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'S90000000','E180000000');

				-- Begin Fix SCR 7887.01 -- Venkat M 03-FEB-2019
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,50,'S90000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,60,'S90000000','W180000000');
	  		-- End Fix SCR 7887.01 -- Venkat M 03-FEB-2019
	  		--west
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,70,'N75000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,80,'N10000000','W100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,90,'S90000000','W100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,100,'S90000000','W180000000');
	  			  		
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.PACIFIC_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$PACIFIC'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.PACIFIC_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.PACIFIC_GEO := :PARAMETER.PACIFIC_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.PACIFIC_GEO = 'Y' then
		:CONTROL_BLOCK.PACIFIC_GEO := 'N';
	elsif :CONTROL_BLOCK.PACIFIC_GEO = 'N' then
		:CONTROL_BLOCK.PACIFIC_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockwhenButtonPressed:
Export_Csv.Export_vldt_tab_rep;  --Fix SCR 6913 - Venkat M 16-FEB-2018

 controlBlockwhenListChanged:
populate_target_geo_area;

 controlBlockkeyNextItem:
Go_Item('FIND_IATA');	-- Fix - SCR 6944.00 - Eswar KC 

 controlBlockpreBlock:
if :system.form_status = 'CHANGED' then
	if not id_null(find_timer('delete_geo_alarm')) then
		raise form_trigger_failure;
	end if;
end if;		

 controlBlockpostBlock:
--Begin Fix SCR 0087 -- Madhu -- 16-Mar-2012
--:control_block.apt_ident_temp:=:control_block.airport_ident; --Fix -SCR 5694 - Devi - 01-Oct-2012
--:control_block.apt_icao_temp:=:control_block.airport_icao;   --Fix -SCR 5694 - Devi - 01-Oct-2012
:control_block.airport_ident:=null;
:control_block.airport_icao:=null;
:control_block.heliport_ident:=null;
:control_block.heliport_icao:=null;
:control_block.ata_iata_designator:=null; --Fix SCR 7647 --Madhu
--End Fix SCR 0087 -- Madhu -- 16-Mar-2012

 selectAllRuleswhenRadioChanged:
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
	IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
	ELSE
			DECLARE
			   ln_Allow_update   NUMBER := 0;
			   lc_Navdb_Block    VARCHAR2 (30) := 'NAVDB';
			   v_button number;
			BEGIN	
		   	ln_Allow_update := check_valid_navdb (:global.processing_cycle, :global.dcr_number, :NAVDB.DATA_SUPPLIER, Name_In (lc_Navdb_Block || '.navdb_id'));
		   	IF ln_Allow_update = 1 THEN
									
					 :parameter.upd_rec := 'N';
		       Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
		       --Start SCR 7420.01 Ashish N 07-Jul-2017
		        IF :select_all_rules.ixrrd != 'N' and :parameter.flag != 'Y' THEN
								v_button :=	display_alert.more_buttons ('S','Change Selection Criteria ',
							 		'You are going to change the Selections. Please check and Confirm.'||chr(10)||
							 		'Please pick your choice carefully:'||chr(10)||chr(10),'Change','Cancel');
						IF v_button = 1 THEN
						--Set the flag here to Y
							:parameter.flag := 'Y';
							
						  Go_Block('DATATYP_RAD');
							FIRST_RECORD;
							
						  IF :select_all_rules.ixrrd = 'I' THEN							  -- Set Include All 
								LOOP
								  :datatyp_rad.options := 'I';
								  click_datatyp_radio;
									EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
									NEXT_RECORD;
								END LOOP;							
							ELSIF :select_all_rules.ixrrd = 'X' THEN							-- Set Exclude All 
								LOOP
								  :datatyp_rad.options := 'X';
								  click_datatyp_radio;
									EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
									NEXT_RECORD;
								END LOOP;							
							ELSIF :select_all_rules.ixrrd = 'R' THEN							-- Set Ref Only All 
								if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
									dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
								else
									LOOP
									  :datatyp_rad.options := 'N';
						        click_datatyp_radio;
										EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
										NEXT_RECORD;
									END LOOP;		
								end if;		
							ELSIF :select_all_rules.ixrrd = 'D' THEN							-- Set Default All 
									LOOP
									  :datatyp_rad.options := 'D';
						        click_datatyp_radio;
										EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
										NEXT_RECORD;
									END LOOP;			
									:parameter.flag := 'N';   --SCR 7420.01 Ashish N 07-JUL-2017
							ELSE 
								 NULL;																				  -- select_all_rules.ixrrd Is 'None'
							END IF;
							FIRST_RECORD;
							:parameter.flag := 'N'; -- --SCR 7420.01 Ashish N 07-JUL-2017
						ELSE
							--set the flag to N here	
							:parameter.flag := 'N';	
						  :SELECT_ALL_RULES.IXRRD := :SELECT_ALL_RULES.OLD_IXRRD;
						  	END IF;
						END IF;
			   ELSE   
			      :parameter.upd_rec := 'Y';
			      Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
			      Dsp_Action_Msg ('U',NULL, name_in('global.dcr_number'),:global.processing_cycle,name_in(lc_Navdb_Block||'.navdb_id'));
						RAISE Form_Trigger_Failure;         
			   END IF;   
			   :parameter.flag := 'N';	----SCR 7420.01 Ashish N 07-JUL-2017
			   --End SCR 7420.01 Ashish N 07-JUL-2017 
			END;	
END IF;
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016

 incExcAptwhenButtonPressed:
-- Begin Fix - SCR 6959.01 - Eswar KC
DECLARE
	ln_Sel_by_id_inc_exc NAVDB_SELECT_CRITERIA.SELECT_BY_ID%TYPE;
	ln_cnt 							 NUMBER := 0; 
BEGIN	
	GO_BLOCK('inc_exc_apt');
	FIRST_RECORD;
	LOOP
		IF :INC_EXC_APT.CHK = 'Y' THEN
-- Begin Fix - SCR 7054.00 - Eswar KC

			SELECT DISTINCT nsc.select_by_id -- Added DISTINCT under SCR 7069-Madhu-5-May-2016
			  INTO ln_Sel_by_id_inc_exc
			  FROM navdb_select_criteria nsc,
	                       selection_criteria_value scv
	                 WHERE nsc.select_by_id = scv.select_by_id
	                   AND nsc.navdb_id = :NAVDB.Navdb_Id
	                   AND nsc.geo_area_id = -2
	                   AND nsc.include_exclude_ind = :inc_exc_apt.inc_exc_ind 
	                   AND nsc.record_type_code = :inc_exc_apt.record_type_code
	                   AND scv.VALUE IN (:inc_exc_apt.airport_ident);
-- End Fix - SCR 7054.00 - Eswar KC

				DELETE FROM selection_criteria_value
	      			WHERE (select_by_id, value_seq) IN
	               (SELECT scv.select_by_id, scv.value_seq
	                  FROM navdb_select_criteria nsc,
	                       selection_criteria_value scv
	                 WHERE nsc.select_by_id = scv.select_by_id
	                   AND nsc.navdb_id = :NAVDB.Navdb_Id
	                   AND nsc.geo_area_id = -2
	                   AND nsc.include_exclude_ind = :inc_exc_apt.inc_exc_ind 
	                   AND nsc.record_type_code = :inc_exc_apt.record_type_code
	                   AND scv.VALUE IN (:inc_exc_apt.airport_ident)
	                       ) ;
-- Begin Fix - SCR 7054.00 - Eswar KC
	    ln_cnt := 0;                    
			SELECT COUNT(1) 
			  INTO ln_cnt 
			  FROM selection_criteria_value
			 WHERE select_by_id = ln_Sel_by_id_inc_exc; 
			IF ln_cnt = 0 THEN
				DELETE FROM navdb_select_criteria
				       WHERE navdb_id = :NAVDB.Navdb_Id
				         AND geo_area_id = -2
				         AND select_by_id = ln_Sel_by_id_inc_exc;
			END IF;	
-- End Fix - SCR 7054.00 - Eswar KC
		END IF;
	  EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
	  NEXT_RECORD;
	END LOOP;
	COMMIT;
	Dsp_Msg('Selected Airport(s) is/are removed from Inc/Exc lists.');
	HIDE_VIEW('inc_exc_apt_can'); 
	GO_ITEM('airport_to_select.airport_ident');
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			Dsp_Msg('Error:-'||SQLCODE||'-'||SUBSTR(SQLERRM,1,200));
			HIDE_VIEW('inc_exc_apt_can'); 
			GO_ITEM('airport_to_select.airport_ident');
END;
-- End Fix - SCR 6959.01 - Eswar KC


 displayItemBlockwhenNewItemInstance:
list_values;

 displayItemBlockwhenButtonPressed:


 saveSelectionswhenListChanged:
--Begin Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016
IF :SAVE_SELECTIONS.ACTION = 'S' THEN
	:SAVE_SELECTIONS.SSC_ID := SSC_ID_SEQ.NEXTVAL;
	:SAVE_SELECTIONS.TYPE := 'MANUAL';
	:SAVE_SELECTIONS.CYCLE := :GLOBAL.Processing_Cycle; 
	:SAVE_SELECTIONS.CREATED_ON := SYSDATE;
	--
	GO_ITEM ('SAVE_SELECTIONS.NAME');
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 			 Property_True);	
ELSIF :SAVE_SELECTIONS.ACTION = 'L' THEN
	:SAVE_SELECTIONS.TYPE := '';
	:SAVE_SELECTIONS.CYCLE := ''; 
	:SAVE_SELECTIONS.CREATED_ON := '';	
	:SAVE_SELECTIONS.ACTION := '';
	SET_CANVAS_PROPERTY ('SEL_CAN', Topmost_Tab_Page, 'MAIN');
	Go_Item('NavDB.NavDB_ID');
	Clear_Form; 
	INITIALIZE_FORM; 
	--
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
	--
	DECLARE
		pl_id       ParamList;
	BEGIN
		pl_id := Get_Parameter_List('openform');
		IF NOT Id_Null(pl_id) THEN 
			Destroy_Parameter_List(pl_id); 
		END IF;
		pl_id := Create_Parameter_List('openform');
		Add_Parameter(pl_id, 'Navdb_Id',TEXT_PARAMETER,:Navdb.Navdb_Id);
		Add_Parameter(pl_id, 'Data_Supplier',TEXT_PARAMETER,:Navdb.Data_Supplier);
		Add_Parameter(pl_id, 'Cycle',TEXT_PARAMETER,:Save_Selections.Cycle);
		open_form( lower('LOAD_SELECTIONS') ,activate ,no_session ,share_library_data);
	END;
	--
ELSE
	:SAVE_SELECTIONS.TYPE := '';
	:SAVE_SELECTIONS.NAME := '';
	:SAVE_SELECTIONS.CYCLE := ''; 
	:SAVE_SELECTIONS.COMMENTS := '';	
	:SAVE_SELECTIONS.CREATED_ON := '';
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
END IF;
--End Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016

 saveSelectionswhenButtonPressed:
--Begin Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016
	IF :SAVE_SELECTIONS.NAME IS NULL THEN
		Dsp_Msg('Please provide Selection Name.');
		Go_Item('SAVE_SELECTIONS.NAME');
		Raise Form_Trigger_Failure;	
	END IF;
	

	DECLARE
		ln_Cnt 		NUMBER;
		ln_SSC_ID	NUMBER;
		ln_button NUMBER := 1;
		ls_status VARCHAR2(4000) := NULL;
	BEGIN
			  
		SELECT COUNT(*) INTO ln_Cnt 
		  FROM B_NAVDB
		 WHERE NAME = :SAVE_SELECTIONS.NAME
		   AND NavDB_ID = :NavDB.NavDB_ID
		   AND CYCLE = :GLOBAL.Processing_Cycle; 
	  
		IF ln_Cnt > 0 THEN
			SELECT SSC_ID INTO ln_SSC_ID
			  FROM B_NAVDB
			 WHERE NAME = :SAVE_SELECTIONS.NAME
			   AND NavDB_ID = :NavDB.NavDB_ID
			   AND CYCLE = :GLOBAL.Processing_Cycle; 

		  ln_button := 
		   			display_alert.more_buttons 
										( 
										 'S','Save-Load Selections',
		             		 'Selection Criteria with Name '||:SAVE_SELECTIONS.NAME||' already exits. '|| CHR (10)||
		             		 'Select an option: ',
		             		 'Overwrite','Cancel' 
									  );	                  
	
	     IF ln_button = 1 THEN
			 		ls_status := 
			 				delete_selections(ln_SSC_ID, :NavDB.NavDB_ID);		
			 END IF;																									
		END IF;	

		IF ln_button = 1 AND ls_status IS NOT NULL THEN
    	 Dsp_Msg('Deletion of Selections is unsuccessful with Error - '||ls_status);				
		ELSIF ln_button = 1 AND ls_status IS NULL THEN
				SELECT ssc_id_seq.nextval INTO ln_SSC_ID FROM Dual;
			  
			  ls_status := 
			  			save_selections.save_selection_criteria(	pn_iSSC_Id          =>  ln_SSC_ID, 
																												ps_iName            =>  :SAVE_SELECTIONS.NAME, 
																												ps_iNavDB           =>  :NavDB.NavDB_ID, 
																												ps_iCYCLE           =>  :GLOBAL.Processing_Cycle, 
																												ps_iSEQ_NUM         =>  NULL, 
																												ps_iRUN_NUM         =>  NULL, 
																												ps_iType            =>  'M',  
																												ps_iComments        =>  :SAVE_SELECTIONS.COMMENTS, 
																												ps_iCREATED_BY      =>  :SAVE_SELECTIONS.CREATED_BY, 
																												ps_iCREATED_ON      =>  :SAVE_SELECTIONS.CREATED_ON,
																												ps_iapproved_status =>  'N'  
	  																								 );	
	      IF ls_status = 'O.K.' THEN
	      	Dsp_Msg('Selections saved Successfully.'); 
	      	Go_Item('NavDB.NavDB_ID');
	      ELSE
	      	Dsp_Msg('Selections are not saved due to error '||ls_status);
	      END IF;
		END IF;
-- 7773 - SHRIKANT K		
	EXCEPTION
	WHEN OTHERS THEN
	DSP_MSG(SQLERRM||' '||SQLCODE);
	NULL;
-- 7773 SHRIKANT K
END;
--End Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016

 webutilwhenButtonPressed:
if :system.cursor_block = 'WEBUTIL' then 
	next_block;
end if;
WebUtil_Core.ShowBeans(false);

 webutilwhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

ItemlevelTriggers:
 navdbnavdbIdwhenValidateItem:
/*
    SCR 0143 --Madhu -- 18-Apr-2012 
    This SCR is Created to bring up all the updates done to this form from baseline version of build 229A to 236
	(SCR no's 5196,3358,5215,5329)
    
*/
DECLARE
  nav_id	VARCHAR2(20);
  v_new_cust varchar2(3);
BEGIN
  if :NAVDB.NAVDB_ID IS  not NULL then
 	--IF :SYSTEM.RECORD_STATUS = 'INSERT' THEN
 		if length(:NAVDB.NAVDB_ID) > 3 then
  		dsp_msg('Currently, a NAVDB_ID shall be same to a Customer_id; it can not exceed 3 characters.');
  		raise form_trigger_failure;
  	else	
 			SELECT COUNT(*)	INTO  nav_id
  		FROM navdb
  		WHERE navdb_id = :navdb.navdb_id;
   		IF nav_id <> '0' THEN
   			dsp_msg('This NavDB ID is Already Exists. Please Enter A New NavDB ID.');
   			RAISE FORM_TRIGGER_FAILURE;
   		ELSE
   			BEGIN
  	 			select customer_ident into v_new_cust
					from customer
					where customer_ident = :navdb.navdb_id;
					:PARAMETER.NEW_NAVDB := 'Y';--Fix SCR 5820 --Madhu--20-Feb-2013
				EXCEPTION
					when no_data_found then
					if display_alert.more_buttons('S','No Customer Found',
							'Customer with name '''||:navdb.navdb_id||''' does not exist. '||chr(10)||
							'Do you want to generate this customer?',
					  	'Yes', 'No') = '2' then
						dsp_msg('Please enter a correct NAVDB ID');
 						:NAVDB.navdb_id := null;
 						raise form_trigger_failure;
					ELSE
						:PARAMETER.NEW_NAVDB := 'Y';--Fix SCR 5820 --Madhu--18-Feb-2013
 					end if;	
				END;			
   		END IF;
   	end if;	
  end if;
END;
-- Begin Fix - SCR 5329 - Eswar KC -19 Jan 2012
If :NAVDB.FMS_ID is not NULL
	Then 
	:NAVDB.FMS_ID := NULL;
End IF;
-- End Fix - SCR 5329 - Eswar KC -19 Jan 2012







 navdbfmsIdwhenValidateItem:
DECLARE
	cursor record_cur is 
		select record_type_code 
		from   fms_data_type
		where  upper(fms_id) = upper(:navdb.fms_id)
		and selectable_ind = 'Y'; --Fix SCR 06158 - Ashish N- 21-Jan-2022
  cursor extra_rectype_code is 
  	select record_type_code  
			from fms_data_type
		 where upper(fms_id) = upper(:navdb.fms_id)
		 and selectable_ind = 'Y' --Fix SCR 06158 - Ashish N- 21-Jan-2022
		minus
		select record_type_code  
			from fms_data_type
		 where upper(fms_id) = upper(:navdb.old_fms_id)
		 and selectable_ind = 'Y'; --Fix SCR 06158 - Ashish N- 21-Jan-2022

-- Begin Fix - SCR 4337 - Eswar KC -12 MAR 2009 
	cursor Format_Media_Type_cur is 
	  select format_media_type 
	  from FMS_DELIVERY_FORMAT_MEDIA
	  where upper(fms_id) = upper(:navdb.fms_id);
	v_format_media_type varchar2(50);  
-- End Fix - SCR 4337 - Eswar KC -12 MAR 2009  
-- Begin Fix - SCR 5329 - Eswar KC -19 Jan 2012
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
  ln_button					NUMBER;         
-- End Fix - SCR 5329 - Eswar KC -19 Jan 2012
	button_val        number := 0;
  datatyp_chk       varchar2(3);
  v_timer_id        timer;
  v_count           number(5);
  v_new_record_code number(4);
  ls_fms_usable			VARCHAR2(1); -- Fix SCR 7194
  v_reccnt NUMBER := 0;  --SCR 7789 -- Shrikant K
BEGIN
--Begin Fix SCR 7202.01 --Code Commented Venkat M 26-JUN-2017
/*	-- Begin Fix - SCR 7284.01 - Eswar KC - 30-May-2017
		DECLARE
			ln_Cnt_LOA_Flag	NUMBER := 0;			
		BEGIN
			SELECT count(loa_flag) INTO ln_Cnt_LOA_Flag
			  FROM flight_management_system
			 WHERE 1 = 1
			   AND loa_flag = 'Y'
			   AND fms_id = :navdb.fms_id;
			   			   		
			IF ln_Cnt_LOA_Flag = 0 THEN
				Dsp_Msg('FMS ID '''''||:navdb.fms_id||''''' is not covered by the LOA.');
			END IF;	
		END;
	-- End Fix - SCR 7284.01 - Eswar KC - 30-May-2017	
*/
--End Fix SCR 7202.01 --Venkat M 26-JUN-2017
	
  -- Begin Fix - SCR 5329 - Eswar KC -19 Jan 2012
		BEGIN
		   IF :navdb.fms_id IS NOT NULL THEN
		      FOR fms_id_rec IN fms_id_cur LOOP
		         IF fms_id_rec.fms_id = :navdb.fms_id THEN
		            IF forms_utilities.check_ident_for_alphanum (:navdb.navdb_id) THEN
		               IF :SYSTEM.record_status = 'INSERT' THEN
		                  ln_button :=
		                     display_alert.more_buttons
		                        ('S',
		                         'Change FMS ID/NavDB ID',
		                            'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
		                         || CHR (10)
		                         || 'Do you want to change FMS ID or NavDB ID.',
		                         'FMS ID',
		                         'NavDB ID'
		                        );
		
		                  IF ln_button = 1 THEN
		                     SET_ITEM_PROPERTY ('NAVDB.FMS_ID',
		                                        required,
		                                        property_true
		                                       );
		                     RAISE form_trigger_failure;
		                  ELSE
		                     SET_ITEM_PROPERTY ('NAVDB.FMS_ID',
		                                        required,
		                                        property_false
		                                       );
		                  END IF;
		               ELSIF :SYSTEM.record_status = 'CHANGED' THEN
		                  display_alert.one_button
		                     ('S',
		                      'Change FMS ID',
		                         'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
		                      || CHR (10)
		                      || 'Change FMS ID.'
		                     );
		                  SET_ITEM_PROPERTY ('NAVDB.FMS_ID', required, property_true);
		                  RAISE form_trigger_failure;
		               END IF;
		            END IF;
		         END IF;
		      END LOOP;
		   END IF;
		   SET_ITEM_PROPERTY ('NAVDB.FMS_ID', required, property_true);
		END;
  -- End Fix - SCR 5329 - Eswar KC -19 Jan 2012	
  
  IF :SYSTEM.record_status = 'CHANGED' OR :SYSTEM.record_status = 'INSERT' THEN 	
		IF UPPER(:Parameter.DB_INST_NAME) <> 'ENGR' THEN --Fix SCR 7194 --Madhu --8-Feb-2017  
	  	SELECT NVL(usable,'$') INTO ls_fms_usable
	  	FROM flight_management_system
	  	WHERE fms_id = :NAVDB.fms_id;
	  	
	  	IF ls_fms_usable = 'E' THEN
	  		dsp_msg ('FMS ''' || :NAVDB.fms_id || ''' is an Engineering FMS_ID, you cannot use it. ' || CHR (10)
	                 || 'Please press F9 to display FMS ID List.');
				RAISE form_trigger_failure;
	  	END IF;
	  
		END IF;
	END IF;

	if :NAVDB.FMS_ID is not null then
  	open record_cur;
  	fetch record_cur into datatyp_chk;
  	if datatyp_chk is null then
  		dsp_error('This FMS ID Is Not Configured!');
    	IF :navdb.OLD_fms_id IS NOT NULL THEN
    		:navdb.fms_id := :navdb.OLD_fms_id;
    	END IF;	
    	raise form_trigger_failure;
    else
	    -- Begin Fix - SCR 7202.01 - Venkat M - 26-JUN-2017
		  DECLARE
			ln_Cnt_LOA_Flag	NUMBER := 0;			
		  BEGIN
			   SELECT count(loa_flag) INTO ln_Cnt_LOA_Flag
			     FROM flight_management_system
			    WHERE 1 = 1
			      AND loa_flag = 'Y'
			      AND fms_id = :navdb.fms_id;
			   			   		
			   IF ln_Cnt_LOA_Flag = 0 THEN
				    Dsp_Msg('FMS ID '''''||:navdb.fms_id||''''' is not covered by the LOA.');
			   END IF;	
		  END;
	    -- End Fix - SCR 7202.01 - Venkat M - 26-JUN-2017	    		    		
    	if :navdb.OLD_fms_id IS NOT NULL then
    		if :navdb.OLD_fms_id != :navdb.fms_id THEN   		
   				button_val := DISPLAY_ALERT.MORE_BUTTONs('S','Change FMS ID',
 								'Record Types in the old but not the new part number, their criteiras are going to be deleted.'||chr(10)||
 								'Record Types in the new but not the old part number, their default criterias are going to be created.',
 								'OK','Cancel');		
   				if button_val = 1 then
   					select count(*) into v_count from (
   		 				select record_type_code  
			 				from fms_data_type
			 				where upper(fms_id) = upper(:navdb.old_fms_id)
			 				and selectable_ind = 'Y' --Fix SCR 06158 - Ashish N- 23-Jan-2022
			 				minus
			 				select record_type_code  
			 				from fms_data_type
			 				where upper(fms_id) = upper(:navdb.fms_id)
			 				and selectable_ind = 'Y'); --Fix SCR 06158 - Ashish N- 23-Jan-2022
   					if v_count > 0 then
   						delete_selection_criterias;	
   						/* Commented for SCR 7151
						delete_navdb_orc; 																				  -- Fix - SCR 6723.00;ARINC20 SCR 42.00 - Eswar KC
   						SET_TAB_PAGE_PROPERTY('SEL_CAN.ORC',Enabled,PROPERTY_TRUE);	-- Fix - SCR 6723.00;ARINC20 SCR 42.00 - Eswar KC 
							v_timer_id := create_timer('orc_alarm',50); 								-- populate orc_id from fms_orc table
						*/
   					end if;   					
					 --Begin Fix SCR 7151 --Madhu--01-Aug-2016
						update_navdb_orc; --Fix SCR 7166 --Madhu -- 22-AUG-2016																				  
   						SET_TAB_PAGE_PROPERTY('SEL_CAN.ORC',Enabled,PROPERTY_TRUE);	 
						--v_timer_id := create_timer('orc_alarm',50);  
					-- End Fix SCR 7151 --Madhu --01-Aug-2016 	
   					open extra_rectype_code;
				 	 	loop
				 	 		fetch extra_rectype_code into v_new_record_code;
				 	 		exit when extra_rectype_code%notfound;
				 	 		create_default_new_criteria(v_new_record_code);
				 	 	end loop;	
				 	  close extra_rectype_code;
			 	  -- Begin Fix - SCR 4337 - Eswar KC -12 MAR 2009  
            DELETE FROM NAVDB_DELIVERY_FORMAT_MEDIA  
    				WHERE NAVDB_ID = :NAVDB.NAVDB_ID;      
       		 	 open Format_Media_Type_cur;
				 	 	 	loop
				 	 	 		fetch Format_Media_Type_cur into v_format_media_type;
				 	 	 		exit when Format_Media_Type_cur%notfound; 
                INSERT INTO  NAVDB_DELIVERY_FORMAT_MEDIA
                       (NAVDB_ID,FORMAT_MEDIA_TYPE)--,QUANTITY,CREATE_DCR_NUMBER,UPDATE_DCR_NUMBER)
                 VALUES(:navdb.navdb_id,v_format_media_type);
           		end loop;
				 	 	 close Format_Media_Type_cur;	
				 	 	 
          	--End Fix - SCR 4337 - Eswar KC -12 MAR 2009  
			 		  -- BEGIN FIX -- SCR 7789.01 - SHRIKANT K - 27-11-2018		
							 	IF :NAVDB.FMS_ID IS NOT NULL THEN
									 	 SELECT COUNT(REC.RECORD_TYPE_CODE)
	 								   INTO v_reccnt
   				           FROM FMS_DATA_TYPE FDT,
             				      RECORD_TYPE REC
              	     WHERE FDT.RECORD_TYPE_CODE = REC.RECORD_TYPE_CODE
               	 	   AND FDT.FMS_ID = :NAVDB.FMS_ID
                	   AND REC.RECORD_TYPE_CODE IN ('133','140','150','160')
                	   AND FDT.REQUIRED_IND = 'Y'; -- FIX SCR 05448 -Ashish N- 27-APR-2020
     						  IF v_reccnt > 0 THEN
  	 	 							dsp_msg('This FMS ID requires "Fuel_Policy/APF" ');
    							END IF; 	 	
    						 END IF;
						-- END FIX -- SCR 7789.01 - SHRIKANT K - 27-11-2018	
 				 		:NAVDB.PRODUCTION_READY_IND := 'N';
					 	set_item_instance_property('NAVDB.PRODUCTION_READY_IND', current_record,visual_attribute,'PLAIN');	
					 	dsp_msg('Please check all the criterias before you set the Production Ready Indicator.');
					else 	  	
					  :navdb.fms_id := :navdb.old_fms_id;
					end if;
				end if;	 
			else
    	--BEGIN FIX -- SCR 7789.01 - SHRIKANT K - 27-11-2018	
    				  	 IF :NAVDB.FMS_ID IS NOT NULL THEN
									 	 SELECT COUNT(REC.RECORD_TYPE_CODE)
	 								   INTO v_reccnt
   				           FROM FMS_DATA_TYPE FDT,
             				      RECORD_TYPE REC
              	     WHERE FDT.RECORD_TYPE_CODE = REC.RECORD_TYPE_CODE
               	 	   AND FDT.FMS_ID = :NAVDB.FMS_ID
                	   AND REC.RECORD_TYPE_CODE IN ('133','140','150','160')
                	   AND FDT.REQUIRED_IND = 'Y'; -- FIX SCR 05448 -Ashish N- 27-APR-2020
     						  IF v_reccnt > 0 THEN
  	 	 							dsp_msg('This FMS ID requires "Fuel_Policy/APF" ');
    							END IF; 	 	
    						 END IF;
			-- END FIX -- SCR 7789.01 - SHRIKANT K - 27-11-2018	    
    	  IF (NVL(:navdb.binary_format_type,'') != 'CMC') THEN	--Imran CMC SCR 7375.01 
    	  	-- The timer below is called in PRE-COMMIT trigger for CMC DB
    	  	--since cmc cust_nm and dependent_navdb mandatory checks in pre commit trg 
    	  	--are failed due to commit called in trigger below
    	  	v_timer_id := create_timer('orc_alarm',50); --populate orc_id from fms_orc table    
    	  END IF;
    	end if;
    end if;	
    close record_cur;
    begin
			select size_units into :size_unit
			from binary_table_size_limits
			where fms_id = :navdb.fms_id
			and table_name = 'NAVDB';
		exception
			when no_data_found then
			:size_unit := null;
		end;
  end if;
END;
:navdb.old_fms_id := :navdb.fms_id;
check_profile; --  SCR 4763 - Eswar KC - 22-Feb-2010
--Imran CMC - SCR 7276
Begin
	Select binary_format_type Into :navdb.binary_format_type From flight_management_system Where fms_id = :navdb.fms_id;
Exception
	When Others Then
		:navdb.binary_format_type := NULL;
End;

IF NVL(:navdb.binary_format_type,'') = 'CMC' THEN
	Set_Item_Property('navdb.cmc_customer_name',Enabled,Property_True);
	Set_Item_Property('navdb.cmc_customer_name',Insert_Allowed,Property_True);
	Set_Item_Property('navdb.cmc_customer_name',Update_Allowed,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Visible,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Enabled,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Insert_Allowed,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Update_Allowed,Property_True);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',ITEM_IS_VALID,Property_False );
ELSE
	:navdb.CMC_DEPENDENT_NAVDB := NULL;
	:navdb.cmc_customer_name := NULL;
	Set_Item_Property('navdb.cmc_customer_name',Enabled,Property_False);
	Set_Item_Property('navdb.CMC_DEPENDENT_NAVDB',Visible,Property_False);
END IF;
--Imran CMC - SCR 7276
-- Begin Fix - SCR 65351 - Venkat M - 26-FEB-2020
if :parameter.work_type != 'VIEW' then
DECLARE
	v_count number;
	BEGIN
    select count(fms_id) into v_count from flight_management_system where fms_id = NVL(:navdb.fms_id,fms_id) and binary_format_type in('B00','B10','B20','B31');
  if v_count > 0 then 
  set_item_property('NAVDB.BRGA_IDENT',visible, PROPERTY_TRUE); 
  set_item_property('NAVDB.BRGA_IDENT',ENABLED, PROPERTY_TRUE);  
  Set_Item_Property('NAVDB.BRGA_IDENT',Insert_Allowed,Property_True);
	Set_Item_Property('NAVDB.BRGA_IDENT',Update_Allowed,Property_True);
	Set_Item_Property('NAVDB.BRGA_IDENT',Delete_Allowed,Property_True);
  ELSE
  set_item_property('NAVDB.BRGA_IDENT',ENABLED, PROPERTY_FALSE); 
  set_item_property('NAVDB.BRGA_IDENT',visible, PROPERTY_FALSE);	
  END IF;
	END;
 -- BEGIN SCR 07380 - Koti - 19-Apr-2022
 DECLARE
    v_count number;
    ls_dbsign_ver Varchar2(30);
 BEGIN
      BEGIN
      SELECT DBSIGN_VER Into ls_dbsign_ver FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_ID = :navdb.fms_id;
      EXCEPTION
      WHEN OTHERS THEN
      ls_dbsign_ver := 'NONE';
      END;
      	IF ls_dbsign_ver != 'NONE' THEN
        set_item_property('NAVDB.DBSIGN_VER',ENABLED, PROPERTY_TRUE);  
        Set_Item_Property('NAVDB.DBSIGN_VER',INSERT_ALLOWED,PROPERTY_TRUE);
        Set_Item_Property('NAVDB.DBSIGN_VER',UPDATE_ALLOWED,PROPERTY_TRUE);
        Set_Item_Property('NAVDB.DBSIGN_VER',DELETE_ALLOWED,PROPERTY_TRUE);
        Else   
      	set_item_property('NAVDB.DBSIGN_VER',INSERT_ALLOWED, PROPERTY_FALSE); 
      	set_item_property('NAVDB.DBSIGN_VER',UPDATE_ALLOWED, PROPERTY_FALSE);
      	set_item_property('NAVDB.DBSIGN_VER',ENABLED, PROPERTY_FALSE);
        END IF;
    :NAVDB.DBSIGN_VER := ls_dbsign_ver;
 END;
 -- END SCR 07380 - Koti - 19-Apr-2022
END IF;  
-- End Fix - SCR 65351 - Venkat M - 26-FEB-2020


    


 navdbfmsIdwhenNewItemInstance:
/*
    SCR 0143 --Madhu -- 18-Apr-2012 
    This SCR is Created to bring up all the updates done to this form from baseline version of build 229A to 236
	(SCR no's 5196,3358,5215,5329)
    
*/
-- Begin Fix - SCR 5329 - Eswar KC -19 Jan 2012
   IF :navdb.fms_id IS NULL
   THEN
      :navdb.fms_id := NULL;
   END IF;
-- End Fix - SCR 5329 - Eswar KC -19 Jan 2012

 navdbprimaryFocalwhenListChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
IF :NAVDB.PRIMARY_FOCAL IS NULL THEN	
	 :NAVDB.PF_EMAIL_FLAG := 'N';
END IF;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016

 navdbsecondaryFocalwhenListChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
IF :NAVDB.SECONDARY_FOCAL IS NULL THEN	
	 :NAVDB.SF_EMAIL_FLAG := 'N';
END IF;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016

 navdbsortOrderwhenCheckboxChanged:
-- Begin Fix - SCR 3480 - Sesha - 27-Aug-2008
if :NAVDB.SORT_ORDER = 'Y' then
  --Set_LOV_Property('FMSID',GROUP_NAME,'FMSDESC');
  IF UPPER(:Parameter.DB_INST_NAME) = 'ENGR' THEN --Fix SCR 7194 --Madhu--8-Feb-2017
     SET_LOV_PROPERTY ('FMSID', GROUP_NAME, 'FMSDESC_OTHERS');
  ELSE
     SET_LOV_PROPERTY ('FMSID', GROUP_NAME, 'FMSDESC');
  END IF;
else
	-- Set_LOV_Property('FMSID',GROUP_NAME,'FMSID');
	set_fms_id; -- Fix - SCR 6704.01 - Eswar KC - 28-Aug-2015
end if;	
-- Begin Fix - SCR 3480 - Sesha - 27-Aug-2008

	

 navdbproductionReadyIndwhenCheckboxChanged:
if :NAVDB.PRODUCTION_READY_IND = 'Y' then
	set_item_instance_property('NAVDB.PRODUCTION_READY_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.PRODUCTION_READY_IND', current_record,visual_attribute,'PLAIN');
end if;	

 navdbpfEmailFlagwhenCheckboxChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
If :NAVDB.PRIMARY_FOCAL IS NULL Then
	Dsp_Msg('Please select Primary Focal.');
	:NAVDB.PF_EMAIL_FLAG := 'N';
	Go_Item('NAVDB.PRIMARY_FOCAL');	
End If;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016

 navdbsfEmailFlagwhenCheckboxChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
If :NAVDB.SECONDARY_FOCAL IS NULL Then
	Dsp_Msg('Please select Secondary Focal.');
	:NAVDB.SF_EMAIL_FLAG := 'N';
	Go_Item('NAVDB.SECONDARY_FOCAL');	
End If;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016

 navdbstartingCyclewhenValidateItem:
if :NAVDB.STARTING_CYCLE is null then
	:NAVDB.STARTING_CYCLE := :global.processing_cycle;
else
	declare
		v_exist varchar2(1);
	begin
		select 'Y' into v_exist
		from cycle
		where cycle = :navdb.starting_cycle;
	exception
		when no_data_found then
		dsp_msg('Invalid Starting Cycle(not exist in the table CYCLE)');
		raise form_trigger_failure;
	end;
end if;	

 navdbendingCyclewhenValidateItem:
if :ending_cycle is not null then
	declare
		v_exist varchar2(1);
	begin
		select 'Y' into v_exist
		from cycle
		where cycle = :navdb.ENDING_CYCLE;
	  if :starting_cycle is not null then
	  	if :starting_cycle > :ending_cycle then
	  		dsp_msg('Ending cycle must later then the starting cycle.');
	  		raise form_trigger_failure;
	  	end if;
	  end if;	
	exception
		when no_data_found then
		dsp_msg('Invalid Ending Cycle(not exist in the table CYCLE)');
		raise form_trigger_failure;
	end;
end if;	

 navdbrnpwhenValidateItem:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
--Begin Fix - SCR 5918.04 - Eswar KC - 13-May-2013
IF :NAVDB.RNP IS NOT NULL THEN

	IF :NAVDB.RNP >= 0.000 AND :NAVDB.RNP <= 99.000 
		THEN
		NULL;
	ELSE
    DSP_MSG('RNP value should be in between 0.000 to 99.000 nM.');
    :NAVDB.RNP := NULL;
    Raise Form_Trigger_Failure;
	END IF;
ELSE
DECLARE
	v_nCnt NUMBER;
BEGIN

SELECT COUNT (ORC_ID)
  INTO v_nCnt
  FROM NAVDB_ORC
 WHERE ORC_ID = 'OR028' AND APPLY_IND = 'Y' AND NAVDB_ID = :NAVDB.NAVDB_ID;

IF v_nCnt <> 0 THEN
	DSP_MSG ('ORC ''OR028'' is applied and RNP can''t be NULL.');
	RAISE FORM_TRIGGER_FAILURE;
END IF;

END;
END IF;
--End Fix - SCR 5918.04 - Eswar KC - 13-May-2013
--End Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 navdbcmcDependentNavdbwhenValidateItem:
Declare
	l_ind CHAR(1);
Begin
	
	IF :navdb.cmc_dependent_navdb IS NOT NULL THEN
		Select Production_Ready_Ind
			Into l_ind
		  From Navdb
		 Where Navdb_id = :navdb.cmc_dependent_navdb;
		
		If Nvl(l_ind,'N') != 'Y' Then
			dsp_msg('Please enter Production Ready '||Get_Item_Property('NAVDB.CMC_DEPENDENT_NAVDB',PROMPT_TEXT));
			Raise Form_Trigger_Failure;
		End If;
		
	ELSIF (NVL(:navdb.binary_format_type,'') = 'CMC') AND :SYSTEM.CURSOR_ITEM = 'NAVDB.CMC_DEPENDENT_NAVDB' THEN
		dsp_msg(Get_Item_Property('NAVDB.CMC_DEPENDENT_NAVDB',PROMPT_TEXT)||' is required. Please enter ');
		Raise Form_Trigger_Failure;
	END IF;
	
Exception
	When No_Data_Found Then
		dsp_msg('Please enter valid '||Get_Item_Property('NAVDB.CMC_DEPENDENT_NAVDB',PROMPT_TEXT));
		Raise Form_Trigger_Failure;
End;


 navdbtestDbIndwhenCheckboxChanged:
-- Begin Fix -- SCR 3920 -- Sesha 
if :NAVDB.TEST_DB_IND = 'Y' then
	set_item_instance_property('NAVDB.TEST_DB_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.TEST_DB_IND', current_record,visual_attribute,'PLAIN');
end if;	
-- End Fix -- SCR 3920 -- Sesha 

 navdbsaaarIndwhenCheckboxChanged:
-- Begin Fix - SCR 4763 - Eswar KC - 23-Feb-2010
if :NAVDB.SAAAR_IND = 'Y' then
	set_item_instance_property('NAVDB.SAAAR_IND', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.SAAAR_IND', current_record,visual_attribute,'PLAIN');
end if;	
-- End Fix - SCR 4763 - Eswar KC - 23-Feb-2010

 navdbsaaarIndkeyNextItem:
go_item('navdb.profile_number'); -- Eswar KC - SCR 4763

 navdbgenValeriewhenCheckboxChanged:
-- Begin Fix - SCR 4777 - Eswar KC - 08-Mar-2010
if :NAVDB.GEN_VALERIE = 'Y' then
	set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'PLAIN');
end if;	
-- End  Fix - SCR 4777 - Eswar KC - 08-Mar-2010

 navdbdataSupplierwhenValidateItem:
--Begin Fix SCR 7762.01 -- Venkat M 11-SEP-2018
	BEGIN
	SELECT DATA_SUPPLIER_NAME
	  INTO :NAVDB.DATA_SUPPLIER_NAME
	  FROM DATA_SUPPLIER
	 WHERE DATA_SUPPLIER = :NAVDB.DATA_SUPPLIER;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		:NAVDB.DATA_SUPPLIER_NAME := NULL;
	END;	
--End Fix SCR 7762.01 
	 
	  

 navdbcustEmailFlagwhenCheckboxChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
If :NAVDB.SECONDARY_FOCAL IS NULL Then
	Dsp_Msg('Please select Secondary Focal.');
	:NAVDB.SF_EMAIL_FLAG := 'N';
	Go_Item('NAVDB.SECONDARY_FOCAL');	
End If;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016

 navdbadhocwhenCheckboxChanged:
-- Begin Fix - SCR 4777 - Eswar KC - 08-Mar-2010
if :NAVDB.GEN_VALERIE = 'Y' then
	set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'CHECKED');
else
	set_item_instance_property('NAVDB.GEN_VALERIE', current_record,visual_attribute,'PLAIN');
end if;	
-- End  Fix - SCR 4777 - Eswar KC - 08-Mar-2010

 navdbbrgaIdentwhenValidateItem:
--Begin Fix SCR 65351 - Venkat M - 26-FEB-2020
DECLARE
v_count  NUMBER;
BEGIN
   SELECT count(fms_id) 
     INTO v_count 
     FROM flight_management_system 
    WHERE fms_id = :NAVDB.FMS_ID 
      AND binary_format_type IN('B00','B10','B20','B31'); 
   IF v_count > 0 THEN 
		  --	IF REGEXP_INSTR (:NAVDB.BRGA_IDENT, '[^-|0-9|A-Z| |/|.|,|+|)|(|'']')>0 THEN
				IF REGEXP_INSTR (:NAVDB.BRGA_IDENT, '[^-|0-9|A-Z| |.|'']')>0 THEN  -- SCR 05808
					--dsp_msg('For BRGA Ident allowed alphabets [A-Z], Number [0-9] and special char as [0-9].[A-Z],[,],[.],[/],[+],[-],[(],[)],[''] ');
					dsp_msg('For BRGA Ident allowed alphabets [A-Z], Number [0-9] and special char as [.],[-],[\SPC] ');  --SCR 05808
					raise form_trigger_failure;
	 			ELSE
 					--:NAVDB.BRGA_IDENT :=	TRIM(:NAVDB.BRGA_IDENT);  -- SCR 05868
 					NULL;
	 			END IF;
   END IF;
END;
--End Fix SCR 65351 - Venkat M - 26-FEB-2020




 navdbOrcapplyIndwhenCheckboxChanged:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data_Manipulation_Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
-- Begin Fix - SCR 6946.00 - Eswar KC - 10-Jun-2016
 IF Check_Valid_Navdb(:Global.Processing_Cycle, :Global.Dcr_Number,:NAVDB.DATA_SUPPLIER,:Navdb.Navdb_Id) = 1 THEN
    :PARAMETER.UPD_REC := 'N';
   
 ELSE
    :NAVDB_ORC.APPLY_IND := :NAVDB_ORC.APPLY_IND_D;
    :PARAMETER.UPD_REC := 'Y';
    
    Dsp_Action_Msg ('I',Null, Name_In('GLOBAL.dcr_number'),:Global.Processing_Cycle,:Navdb.Navdb_Id);
 END IF;
-- End Fix - SCR 6946.00 - Eswar KC - 10-Jun-2016
-- Begin Fix - SCR 5918.04 - Eswar KC - 13-may-2013
IF :NAVDB_ORC.ORC_ID = 'OR028' THEN
			DECLARE
			v_nCnt NUMBER;	
			BEGIN
			   SELECT COUNT (DMR_ID)
			     INTO v_nCnt
			     FROM FMS_DMR
			    WHERE  DMR_ID = 'OR028' AND FMS_ID = :NAVDB.FMS_ID;
			    
				 IF v_nCnt > 0 AND :NAVDB.RNP IS NULL THEN
				 	DSP_MSG('RNP is required for ORC ''OR028'', Please provide.');
				 	:NAVDB_ORC.APPLY_IND := 'N';
				 	forms_ddl('Commit');
				 	RAISE FORM_TRIGGER_FAILURE;
				 END IF;
			END;
ELSE
		IF :NAVDB_ORC.APPLY_IND = 'Y' THEN
			set_item_instance_property('NAVDB_ORC.APPLY_IND', current_record,visual_attribute,'CHECKED');
			:NAVDB_ORC.UPDATE_DCR_NUMBER := :global.dcr_number; 
			 																												-- Fix - SCR 6946.00 - Eswar KC
			INSERT INTO NAVDB_ORC(ORC_ID,NAVDB_ID,CREATE_DCR_NUMBER,UPDATE_DCR_NUMBER,CREATED_BY,CREATED_ON,APPLY_IND) 
			VALUES ( :NAVDB_ORC.ORC_ID, :NAVDB.NAVDB_ID, NULL,:global.dcr_number,USER,SYSDATE,'Y');		-- Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
		ELSE
			set_item_instance_property('NAVDB_ORC.APPLY_IND', current_record,visual_attribute,'PLAIN');
			:NAVDB_ORC.UPDATE_DCR_NUMBER := ''; 	
		 					  																													-- Fix - SCR 6946.00 - Eswar KC
			DELETE FROM NAVDB_ORC WHERE ORC_ID = :NAVDB_ORC.ORC_ID AND NAVDB_ID = :NAVDB.NAVDB_ID;													-- Fix - SCR 6723;ARINC20 SCR 42.00 - Eswar KC
		END IF;	
		COMMIT_FORM;
    :NAVDB_ORC.APPLY_IND_D := :NAVDB_ORC.APPLY_IND;         																													-- Fix - SCR 6946.00 - Eswar KC
END IF;
-- End Fix - SCR 5918.04 - Eswar KC - 13-may-2013
-- Begin Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
IF :NAVDB_ORC.ORC_ID IS NOT NULL THEN
	IF :NAVDB_ORC.APPLY_IND = 'Y' THEN
		IF :CONTROL_BLOCK.ORC_APPLIED IS NOT NULL THEN
			:CONTROL_BLOCK.ORC_APPLIED := RTRIM(:CONTROL_BLOCK.ORC_APPLIED,',')||','||:NAVDB_ORC.ORC_ID;
		ELSE
			:CONTROL_BLOCK.ORC_APPLIED := :NAVDB_ORC.ORC_ID;
		END IF;
	ELSE
	  DELETE_ONE_ORC (:NAVDB_ORC.ORC_ID);		
	END IF;
END IF;
-- End Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
-- END Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018

 generalCriteriachkwhenCheckboxChanged:
:general_criteria.old_chk := :general_criteria.chk;
if :general_criteria.chk = 'Y' then
  update navdb_general_criteria
  set apply_ind = 'Y'
  where navdb_id = :NAVDB.NAVDB_ID
  and criteria_id = :general_criteria.criteria_id;
	set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
--Begin fix SCR 7426.09 --Madhu 
	IF :general_criteria.criteria_id = 4 THEN	
			go_block('GEN_CRITERIA_SUB_TYPE');
			populate_gen_criteria_value;
	END IF;
--End fix SCR 7426.09 --Madhu 	
elsif :general_criteria.chk = 'N' then
	declare
		v_count number(3);
		v_button number(1);
	begin
		select count(*) into v_count
		from navdb_general_criteria_value
		where navdb_id = :navdb.navdb_id
		and criteria_id = :general_criteria.criteria_id ;
		if v_count > 0 then	
			 v_button := DISPLAY_ALERT.MORE_BUTTONs('S','UNCHECK CRITERIA',
 								'Uncheck this criteria will also delete all associated criteria values.'||chr(10)||
 								'Please pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
		end if;
		if v_count = 0 or v_button = 1 then
			delete from navdb_general_criteria_value
			where navdb_id = :navdb.navdb_id
			and criteria_id = :general_criteria.criteria_id ;
			--
			update navdb_general_criteria
			set apply_ind = 'N'
			where navdb_id = :NAVDB.NAVDB_ID
  		and criteria_id = :general_criteria.criteria_id;
  		--delete from navdb_general_criteria
			--where navdb_id = :navdb.navdb_id
			--and criteria_id = :general_criteria.criteria_id ;
			HIDE_VIEW('GEN_CRITERIA_SUB_TYPE'); --Fix SCR 7426.09 --Madhu 
			set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CURRENT_RECORD');
		else
			:GENERAL_CRITERIA.chk := 'Y';
		end if;
	end;	
end if;
commit;

 generalCriteriaaircraftButtonwhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
	 IF :general_criteria.criteria_id = 4 THEN
	 		IF :general_criteria.chk = 'Y' THEN
	 			go_block('GEN_CRITERIA_SUB_TYPE');
				populate_gen_criteria_value;
			END IF;
	 END IF;
--End fix SCR 7426.09 --Madhu 

 selectByGeographicAreageoAreaNamewhenValidateItem:
if :SELECT_BY_geographic_area.geo_area_name IS not NULL then
	-- Check if the geo_area_name is unique
	declare
		v_rowid rowid;
	begin	
		select rowid into v_rowid 
		from SELECT_BY_GEOGRAPHIC_AREA
		where geo_area_name = :SELECT_BY_geographic_area.geo_area_name
		and NAVDB_ID = :NAVDB.NAVDB_ID;
		if :SELECT_BY_geographic_area.rowid is null or
		  (v_rowid != :SELECT_BY_geographic_area.rowid) then
			dsp_msg('This Geographic Area Name is already used. Please give a different name');
			raise form_trigger_failure;
		end if;
	exception
		when no_data_found then
			null;
	end;	
end if;

 geographicAreaPointlatitudewhenValidateItem:
-- Call v_latitude in UTIL1 to validate the latitude
if util1.v_latitude(:geographic_area_point.latitude) > 0 then
	dsp_msg('Invalid Latitude');
	raise form_trigger_failure;
end if;

 geographicAreaPointlongitudewhenValidateItem:
-- Call v_longitude in UTIL1 to validate the longitude
if util1.v_longitude(:geographic_area_point.longitude) > 0 then
	dsp_msg('Invalid Longitude');
	raise form_trigger_failure;
end if;
	


 selectByAreaareaCodewhenValidateItem:
if :SELECT_BY_AREA.AREA_CODE IS NULL then
  message( 'Please enter the AREA Code' );
  raise form_trigger_failure;
else
	-- Check if the AREA code is unique
	declare
		v_rowid rowid;
		v_count number;
	begin	
		begin
			select rowid into v_rowid 
			from SELECT_BY_AREA
			where AREA_CODE = :SELECT_BY_AREA.AREA_CODE
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_AREA.rowid is null or
		  	(v_rowid != :SELECT_BY_AREA.rowid) then
				dsp_msg('This is a duplicated AREA Code.');
				raise form_trigger_failure;
			end if;
			exception
			when no_data_found then
				null;
		end;	
		--
		select count(*) into v_count
		from AREA_CODE
		where AREA_CODE = :SELECT_BY_AREA.AREA_CODE;
		if v_count = 0 then
			dsp_msg('This is not a valid AREA Code.');
			raise form_trigger_failure;
		end if;	
	end;
end if;

 selectByAreachkwhenCheckboxChanged:

if :system.mode = 'NORMAL' then
	SET_GROUP('SELECT_BY_AREA','DeSelect_Group',:SELECT_BY_AREA.chk,:SELECT_BY_AREA.SELECT_BY_ID);
else
	:select_by_area.chk := 'N';
end if;	

 selectByAreaselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
DECLARE
	group_id     recordgroup := find_group('DeSelect_Group');
	total_rows   number := get_group_row_count(group_id);
	v_AREA_ID    NUMBER;
	v_button     number(1);
BEGIN	
	check_save;	
	if total_rows > 0 then
		v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE SELECTED AREA CODE',
 			'Delete the selected AREA Code will also delete all associated criterias.'||chr(10)||
 			'Please pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
 		IF v_button = 1 then
 			for i in 1..total_rows loop
 				v_AREA_ID := TO_NUMBER(get_group_char_cell('DeSelect_Group.item1',i));
 				Delete from Selection_Criteria_Value
				where select_by_id in (select select_by_id
														 	 from navdb_select_criteria
														 	 where area_code_id = V_AREA_ID
														 	 and navdb_id = :navdb.navdb_id);
	  		--
				Delete from navdb_select_criteria
				where AREA_code_id = V_AREA_ID
				and navdb_id = :navdb.navdb_id;
				--
				Delete from select_by_AREA
				where navdb_id = :navdb.navdb_id
				and SELECT_BY_ID = V_AREA_ID;
 			end loop;
 			COMMIT;
 			Message('Record has been saved successfully');--Fix SCR 0087 -- Madhu -- 16-Mar-2012	
 			delete_group_row(group_id,ALL_ROWS);
 			QUERY_BLOCK_RECORDS('AREA_CODE','INITIAL');
 			QUERY_BLOCK_RECORDS('SELECT_BY_AREA'); 			
 		END IF; 		
 	end if;
END;
end if;

 selectByArearesetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('DeSelect_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('SELECT_BY_AREA');
end if;	

 selectByAreacheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('SELECT_BY_AREA','DeSelect_Group');
end if;	

 areaCodechkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('AREA_CODE','Select_Group',:AREA_CODE.chk,:AREA_CODE.AREA_CODE);
else
	:area_code.chk := 'N';
end if;	

 areaCodeselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
DECLARE
	group_id     recordgroup := find_group('Select_Group');
	total_rows   number := get_group_row_count(group_id);
	v_AREA       varchar2(38);
BEGIN	
	if total_rows > 0 then
		go_block('SELECT_BY_AREA');
		for i in 1..total_rows loop
 			v_AREA := get_group_char_cell('Select_Group.item1',i);
 			if :SELECT_BY_AREA.AREA_CODE is not null then
 				create_record;
 			end if;	
 			:select_by_AREA.AREA_code := v_AREA;
		end loop;
 		delete_group_row(group_id,ALL_ROWS);
 		commit_form;
 		QUERY_BLOCK_RECORDS('AREA_CODE');
		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Selected Area Code.');--Fix SCR 7273--Madhu --29-AUG-2017
	end if;	
END;
end if;

 areaCoderesetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('Select_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('AREA_CODE');
end if;	

 areaCodecheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('AREA_CODE','Select_Group');
end if;	

 selectByIcaoicaoCodewhenValidateItem:
if :SELECT_BY_ICAO.ICAO_CODE IS NULL then
  message( 'Please enter the ICAO Code' );
  raise form_trigger_failure;
else
	-- Check if the icao code is unique
	declare
		v_rowid rowid;
		v_count number;
	begin	
		begin
			select rowid into v_rowid 
			from SELECT_BY_ICAO
			where ICAO_CODE = :SELECT_BY_ICAO.ICAO_CODE
			and NAVDB_ID = :NAVDB.NAVDB_ID;
			if :SELECT_BY_ICAO.rowid is null or
		  	(v_rowid != :SELECT_BY_ICAO.rowid) then
				dsp_msg('This is a duplicated ICAO Code.');
				raise form_trigger_failure;
			end if;
			exception
			when no_data_found then
				null;
		end;	
		--
		select count(*) into v_count
		from ICAO
		where ICAO_CODE = :SELECT_BY_ICAO.ICAO_CODE;
		if v_count = 0 then
			dsp_msg('This is not a valid ICAO Code.');
			raise form_trigger_failure;
		end if;	
	end;
end if;

 selectByIcaochkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('SELECT_BY_ICAO','DeSelect_Group',:SELECT_BY_ICAO.chk,:SELECT_BY_ICAO.SELECT_BY_ID);
else
	:select_by_icao.chk := 'N';
end if;	

 selectByIcaoselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
DECLARE
	group_id     recordgroup := find_group('DeSelect_Group');
	total_rows   number := get_group_row_count(group_id);
	v_icao_ID    NUMBER;
	v_button     number(1);
BEGIN	
	check_save;	
	if total_rows > 0 then
		v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE SELECTED ICAO',
 			'Delete the selected ICAO Code will also delete all associated criterias.'||chr(10)||
 			'Please pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
 		IF v_button = 1 then
 			for i in 1..total_rows loop
 				v_icao_ID := TO_NUMBER(get_group_char_cell('DeSelect_Group.item1',i));
 				Delete from Selection_Criteria_Value
				where select_by_id in (select select_by_id
														 	 from navdb_select_criteria
														 	 where icao_code_id = V_ICAO_ID
														 	 and navdb_id = :navdb.navdb_id);
	  		--
				Delete from navdb_select_criteria
				where icao_code_id = V_ICAO_ID
				and navdb_id = :navdb.navdb_id;
				--
				Delete from select_by_icao
				where navdb_id = :navdb.navdb_id
				and SELECT_BY_ID = v_icao_ID;
 			end loop;
 			COMMIT;
 			Message('Record has been saved successfully');--Fix SCR 0087 -- Madhu -- 16-Mar-2012	
 			delete_group_row(group_id,ALL_ROWS);
 			QUERY_BLOCK_RECORDS('ICAO','INITIAL');
 			QUERY_BLOCK_RECORDS('SELECT_BY_ICAO'); 			
 		END IF; 		 		
 	end if;
END;
end if;

 selectByIcaoresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('DeSelect_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('SELECT_BY_ICAO');
end if;	

 selectByIcaocheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('SELECT_BY_ICAO','DeSelect_Group');
end if;	

 icaochkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('ICAO','Select_Group',:ICAO.chk,:ICAO.ICAO_CODE);
else
	:icao.chk := 'N';
end if;	

 icaoselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	DECLARE
		group_id     recordgroup := find_group('Select_Group');
		total_rows   number := get_group_row_count(group_id);
		v_icao       varchar2(38);
	BEGIN	
		if total_rows > 0 then
			go_block('SELECT_BY_ICAO');
			for i in 1..total_rows loop
 				v_icao := get_group_char_cell('Select_Group.item1',i);
 				if :SELECT_BY_ICAO.ICAO_CODE is not null then
 					create_record;
	 			end if;	
 				:select_by_icao.icao_code := v_icao;
			end loop;
	 		delete_group_row(group_id,ALL_ROWS);
 			commit_form;
 			QUERY_BLOCK_RECORDS('ICAO');
 			display_alert.one_button('S','Default SC','Default Selection Criteria is created for Selected ICAO code.');--Fix SCR 7273--Madhu--29-AUG-2017
	 	end if;	
	END;
end if;	

 icaoresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('Select_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('ICAO');
end if;	

 icaocheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('ICAO','Select_Group');
end if;	

 selectByAirportGroupgroupNamewhenValidateItem:
if :SELECT_BY_AIRPORT_GROUP.GROUP_NAME IS not NULL then
	-- Check if the GROUP_NAME is unique
	declare
		v_rowid rowid;
	begin	
		select rowid into v_rowid 
		from SELECT_BY_AIRPORT_GROUP
		where GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME
		and NAVDB_ID = :NAVDB.NAVDB_ID;
		if :SELECT_BY_AIRPORT_GROUP.rowid is null or
		  (v_rowid != :SELECT_BY_AIRPORT_GROUP.rowid) then
			dsp_msg('This GROUP_NAME is already used. Please give a different name');
			raise form_trigger_failure;
		end if;
	exception
		when no_data_found then
			null;
	end;	
end if;

 selectByAirportGroupincludeExcludeIndwhenListChanged:
-- Begin Fix - SCR 4184 - Eswar KC - 24-Sep-2012
 IF :SYSTEM.record_status = 'CHANGED' THEN
    DECLARE
       v_ind   CHAR (1);
    	 ln_Count NUMBER; --Fix SCR 6002 -- Madhu - 02-AUG-2013
    	 v_ind1 VARCHAR(1); --Fix SCR 7202 -- Venkat - 16-JUL-2017
    	 ln_rec_count NUMBER; -- Fix SCR 7202 -- Venkat - 16-JUL-2017
    BEGIN
 			--Begin Fix SCR 6002 -- Madhu - 02-AUG-2013      
       SELECT COUNT(*) INTO ln_Count
		   FROM navdb_select_criteria
		   WHERE airport_group_id = :select_by_airport_group.select_by_id;
       
       IF ln_Count = 0 THEN
       	create_default_criteria(null,null,null,:SELECT_BY_AIRPORT_GROUP.select_by_id,null,'T');
       END IF;
 			--End Fix SCR 6002 -- Madhu - 02-AUG-2013      
       SELECT NVL (include_exclude_ind, 'I'), include_exclude_ind  ----Fix SCR 7202 - Venkat - 16-JUL-2017
         INTO v_ind, v_ind1
         FROM select_by_airport_group
        WHERE select_by_id = :select_by_airport_group.select_by_id;
        
       IF v_ind = 'I' AND :select_by_airport_group.include_exclude_ind = 'X' THEN
       	
       	   --Begin Fix -SCR 7202 - Venkat M -07-JUN-2017
       	  IF v_ind1 = 'I' THEN
       	  BEGIN
       	   DELETE FROM bck_selection_criteria_value
				            WHERE select_by_id IN (SELECT select_by_id
				                                  FROM bck_navdb_select_criteria
				                                 WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                   AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                             FROM SELECT_BY_AIRPORT_GROUP 
				                                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
       	  EXCEPTION
       	  	WHEN OTHERS THEN
       	  	NULL;
       	  END;	
					COMMIT;
					 
				  BEGIN
				   DELETE FROM bck_navdb_select_criteria
				         WHERE navdb_id = :NAVDB.NAVDB_ID 
				           --AND parent_select_by_id IS NOT NULL 
				           AND AIRPORT_GROUP_ID =	(SELECT SELECT_BY_ID 
                  			                     FROM SELECT_BY_AIRPORT_GROUP 
                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
          EXCEPTION
       	    WHEN OTHERS THEN
       	    NULL;
       	  END; 
       	  COMMIT;
       	   
				   INSERT INTO bck_navdb_select_criteria (select_by_id,
				                												  navdb_id,
								                                  record_type_code,
																			            criteria_id,
																			            parent_select_by_id,
																			            geo_area_id,
																			            area_code_id,
																			            icao_code_id,
																			            airport_group_id,
																			            heliport_group_id,
																			            include_exclude_ind,
                                                  create_dcr_number)
				                                  SELECT  select_by_id,
				                												  navdb_id,
								                                  record_type_code,
																			            criteria_id,
																			            parent_select_by_id,
																			            geo_area_id,
																			            area_code_id,
																			            icao_code_id,
																			            airport_group_id,
																			            heliport_group_id,
																			            include_exclude_ind,
                                                  create_dcr_number
				                                     FROM navdb_select_criteria
				                                    WHERE navdb_id = :NAVDB.NAVDB_ID 
			                          --	          AND parent_select_by_id IS NOT NULL 
				                                      AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID 
                  		                       FROM SELECT_BY_AIRPORT_GROUP 
                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
					 COMMIT;                          
					 INSERT INTO bck_selection_criteria_value (select_by_id,
					                                           value_seq,
					                                           value_descr,
					                                           value,
					                                           create_dcr_number)
					 			                              SELECT select_by_id,
					                                           value_seq,
					                                           value_descr,
					                                           value,
					                                           create_dcr_number
					                                      FROM selection_criteria_value
				                                       WHERE select_by_id IN (SELECT select_by_id
				                                        FROM bck_navdb_select_criteria
				                                       WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                         AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                                   FROM SELECT_BY_AIRPORT_GROUP 
				                                                                  WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                                    AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
					 COMMIT;
					END IF;					 
					 --End Fix -SCR 7202 - Venkat M -07-JUN-2017

				  DELETE FROM selection_criteria_value
				         WHERE select_by_id IN (SELECT select_by_id
				                                  FROM navdb_select_criteria
				                                 WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                   AND airport_group_id = 
				                                 (SELECT SELECT_BY_ID 
				                                    FROM SELECT_BY_AIRPORT_GROUP 
				                                   WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                     AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
                                 
				  COMMIT;          
				  DELETE FROM navdb_select_criteria
				         WHERE navdb_id = :NAVDB.NAVDB_ID 
				           AND parent_select_by_id IS NOT NULL 
				           AND AIRPORT_GROUP_ID =
               				(SELECT SELECT_BY_ID 
                  			 FROM SELECT_BY_AIRPORT_GROUP 
                        WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                          AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
					COMMIT;
					-- Begin Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
		      UPDATE navdb_select_criteria
		         SET include_exclude_ind = 'X'
		       WHERE airport_group_id = :select_by_airport_group.select_by_id;
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',     ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES',   ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',     ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_FALSE );
          -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE',  ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE',  ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',     ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT',  ENABLED, PROPERTY_FALSE );						
					-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016	
          COMMIT;          	
       		-- End Fix - SCR 6063 - Eswar KC - 18-Aug-2013
       ELSIF     v_ind = 'X' AND :select_by_airport_group.include_exclude_ind = 'I' THEN
					--SCR 7202 Commented by Venkat M 07-JUN-2017 
          /*UPDATE navdb_select_criteria
             SET include_exclude_ind = 'D'
           WHERE airport_group_id = :select_by_airport_group.select_by_id;
            
          UPDATE navdb_select_criteria
             SET include_exclude_ind = 'I'
           WHERE airport_group_id = :select_by_airport_group.select_by_id
             AND RECORD_TYPE_CODE IN (10,15);*/

					--Begin Fix -SCR 7202 - Venkat M -07-JUN-2017
       	  SELECT COUNT(*) 
       	    INTO ln_rec_count
       	    FROM bck_navdb_select_criteria
				   WHERE navdb_id = :NAVDB.NAVDB_ID 
				   --AND parent_select_by_id IS NOT NULL 
				     AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID 
                                       FROM SELECT_BY_AIRPORT_GROUP 
                                      WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                        AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
       	  IF ln_rec_count > 0 THEN
       	     DELETE FROM navdb_select_criteria
		          WHERE include_exclude_ind = 'X'
		            AND airport_group_id = :select_by_airport_group.select_by_id;
		         COMMIT;  
				     INSERT INTO navdb_select_criteria (select_by_id,
				                										  navdb_id,
								                              record_type_code,
																			        criteria_id,
																			        parent_select_by_id,
																			        geo_area_id,
																			        area_code_id,
																			        icao_code_id,
																			        airport_group_id,
																			        heliport_group_id,
																			        include_exclude_ind,
                                              create_dcr_number)
				                              SELECT  select_by_id,
				                										  navdb_id,
								                              record_type_code,
																			        criteria_id,
																			        parent_select_by_id,
																			        geo_area_id,
																			        area_code_id,
																			        icao_code_id,
																			        airport_group_id,
																			        heliport_group_id,
																			        include_exclude_ind,
                                              create_dcr_number 
				                                 FROM bck_navdb_select_criteria
				                                WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                --AND parent_select_by_id IS NOT NULL 
				                                 AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID 
                  		                                             FROM SELECT_BY_AIRPORT_GROUP 
                                                                  WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                                                    AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
					   COMMIT;                          
					   INSERT INTO selection_criteria_value (select_by_id,
					                                       value_seq,
					                                       value_descr,
					                                       value,
					                                       create_dcr_number)
					 			                          SELECT select_by_id,
					                                       value_seq,
					                                       value_descr,
					                                       value,
					                                       create_dcr_number
					                                  FROM bck_selection_criteria_value
				                                   WHERE select_by_id IN (SELECT select_by_id
				                                                            FROM bck_navdb_select_criteria
				                                                           WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                                             AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                                                       FROM SELECT_BY_AIRPORT_GROUP 
				                                                                                      WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                                                        AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
            COMMIT;				 

       	    BEGIN
       	     DELETE FROM bck_selection_criteria_value
				            WHERE select_by_id IN (SELECT select_by_id
				                                  FROM bck_navdb_select_criteria
				                                 WHERE navdb_id = :NAVDB.NAVDB_ID 
				                                   AND airport_group_id = (SELECT SELECT_BY_ID 
				                                                             FROM SELECT_BY_AIRPORT_GROUP 
				                                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
				                                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME));
       	    EXCEPTION
       	  	 WHEN OTHERS THEN
       	  	  NULL;
       	    END;	
					  COMMIT;
					 
				    BEGIN
				     DELETE FROM bck_navdb_select_criteria
				         WHERE navdb_id = :NAVDB.NAVDB_ID 
				           --AND parent_select_by_id IS NOT NULL 
				           AND AIRPORT_GROUP_ID =	(SELECT SELECT_BY_ID 
                  			                     FROM SELECT_BY_AIRPORT_GROUP 
                                            WHERE NAVDB_ID = :NAVDB.NAVDB_ID 
                                              AND GROUP_NAME = :SELECT_BY_AIRPORT_GROUP.GROUP_NAME);
            EXCEPTION
       	     WHEN OTHERS THEN
       	      NULL;
       	    END; 
       	    COMMIT;
            
       	  ELSE
            UPDATE navdb_select_criteria
               SET include_exclude_ind = 'D'
             WHERE airport_group_id = :select_by_airport_group.select_by_id;
            COMMIT;
            UPDATE navdb_select_criteria
               SET include_exclude_ind = 'I'
             WHERE airport_group_id = :select_by_airport_group.select_by_id
               AND RECORD_TYPE_CODE IN (10,15);
             COMMIT;  
          END IF;      
         --End Fix -SCR 7202 - Venkat M -07-JUN-2017    
         -- Begin Fix - SCR 6063 - Eswar KC - 18-Aug-2013   
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',     ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES',   ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',     ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_TRUE );                  
				 -- End Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
         -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_TRUE );	         	
         -- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016	
         	
      END IF;
     --END IF; 
	 	 COMMIT;
    END;
 END IF;
-- End Fix - SCR 4184 - Eswar KC - 24-Sep-2012 

 airportToSelectmovewhenButtonPressed:
check_save;
if :system.mode = 'NORMAL' then
	if get_group_row_count(find_group('DeSelect_Group')) = 0 then
		dsp_msg('No airport to move!');
	else
		go_block('SELECT_FROM_GROUPS');
		:global.moving_group := 'airport';
		populate_airport_groups(:global.moving_group);	
	end if;
end if;

 airportToSelectairportIdentwhenValidateItem:
if :AIRPORT_TO_SELECT.airport_ident is not null and :system.record_status != 'QUERY' and
	:AIRPORT_TO_SELECT.airport_icao is null then
	check_airport(:AIRPORT_TO_SELECT.airport_ident,null,'RECORD');
	-- Begin Fix - SCR 6944.01 - Eswar KC
   BEGIN
       SELECT ata_iata_designator
         INTO :AIRPORT_TO_SELECT.IATA_CODE  
         FROM pl_std_airport
        WHERE processing_cycle = :control_block.proc_cycle --:global.processing_cycle --7607 --Madhu
          AND data_supplier = :NAVDB.DATA_SUPPLIER
          AND airport_ident = :AIRPORT_TO_SELECT.AIRPORT_IDENT
          AND airport_icao = :AIRPORT_TO_SELECT.AIRPORT_ICAO;
   EXCEPTION
       WHEN Others THEN
       NULL;
	 END; 	
	-- End Fix - SCR 6944.01 - Eswar KC	
end if;	

 airportToSelectiataCodewhenValidateItem:
-- Begin Fix - SCR 6944.01 - Eswar KC
IF :system.record_status != 'QUERY' THEN
		IF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NULL AND :AIRPORT_TO_SELECT.IATA_CODE IS NOT NULL THEN  
		   --
		   BEGIN
		       SELECT airport_ident, airport_icao
		         INTO :AIRPORT_TO_SELECT.AIRPORT_IDENT, :AIRPORT_TO_SELECT.AIRPORT_ICAO
		         FROM pl_std_airport
		        WHERE processing_cycle = :control_block.proc_cycle --:global.processing_cycle --7607
		          AND data_supplier = :NAVDB.DATA_SUPPLIER
		          AND NVL(ata_iata_designator,'$$$') = :AIRPORT_TO_SELECT.IATA_CODE;
		           
		        check_airport(:AIRPORT_TO_SELECT.AIRPORT_IDENT,null,'RECORD');   
		   EXCEPTION
		       WHEN Too_Many_Rows THEN
		         Dsp_Msg('Multiple Airports Exists with IATA '''||:AIRPORT_TO_SELECT.IATA_CODE||'''');
		       WHEN No_Data_Found THEN
		         Dsp_Msg('No Airport Exists with IATA '''||:AIRPORT_TO_SELECT.IATA_CODE||'''');
		       WHEN Others THEN
		         Dsp_Msg(sqlerrm);
		   END; 
		   --
		ELSIF :AIRPORT_TO_SELECT.AIRPORT_IDENT IS NOT NULL AND :AIRPORT_TO_SELECT.IATA_CODE IS NULL THEN
			IF :AIRPORT_TO_SELECT.AIRPORT_ICAO IS NULL THEN
				 check_airport(:AIRPORT_TO_SELECT.AIRPORT_IDENT,null,'RECORD');
			END IF;   	
		END IF;   
END IF;
-- End Fix - SCR 6944.01 - Eswar KC

 airportToSelectchkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('AIRPORT_TO_SELECT','DeSelect_Group',:AIRPORT_TO_SELECT.chk,:AIRPORT_TO_SELECT.AIRPORT_IDENT,:AIRPORT_TO_SELECT.AIRPORT_ICAO);
else
	:airport_to_select.chk := 'N';
end if;	

 airportToSelectselectwhenButtonPressed:
 IF :SYSTEM.mode = 'NORMAL' THEN
    SET_APPLICATION_PROPERTY (cursor_style, 'BUSY');

    DECLARE
       GROUP_ID            recordgroup := FIND_GROUP ('DeSelect_Group');
       total_rows          NUMBER := GET_GROUP_ROW_COUNT (GROUP_ID);
       v_ident             VARCHAR2 (38);
       v_icao              VARCHAR2 (38);
    -- Begin Fix - SCR 6959.01 - Eswar KC
       ln_cnt              NUMBER := 1;
   -- Added  inc_exc_apt_rec Type as part of SCR 6959.01 - Eswar KC
		   TYPE inc_exc_apt_rec   IS  RECORD
		       (
		          airport_ident    airport_to_select.airport_ident%TYPE,
		          inc_exc_ind      navdb_select_criteria.include_exclude_ind%TYPE,
		          rec_type					record_type.record_type_descr%TYPE,
		          rec_type_code			record_type.record_type_code%TYPE
		        );
		
		   TYPE inc_exc_apt_table IS TABLE OF inc_exc_apt_rec
		                                    INDEX BY BINARY_INTEGER;       
       l_inc_exc_apt_tab   inc_exc_apt_table;
    -- End Fix - SCR 6959.01 - Eswar KC
    BEGIN
       check_save;
       l_inc_exc_apt_tab.delete; 		-- Fix - SCR 6959.01 - Eswar KC
       IF total_rows > 0 THEN
          ln_cnt := 0;
          FOR i IN 1 .. total_rows LOOP
             v_ident := GET_GROUP_CHAR_CELL ('DeSelect_Group.item1', i);
             v_icao  := GET_GROUP_CHAR_CELL ('DeSelect_Group.item2', i);

             DELETE FROM airport_to_select
                   WHERE select_by_id = :select_by_airport_group.select_by_id
                     AND airport_ident = v_ident
                     AND airport_icao = v_icao;

           -- Begin Fix - SCR 6959.01 - Eswar KC
             DECLARE
             	CURSOR NavDB_I_E_CUR(p_NavDB VARCHAR2,p_Ident VARCHAR2) IS
             		SELECT DISTINCT scv.VALUE, nsc.include_exclude_ind,nsc.record_type_code,
             			DECODE(nsc.record_type_code,
             							10, 'AIRPORT',
             							11, 'APT NDB',
             							12, 'APT WAYPOINT',
             							20, 'RUNWAY',
             							37, 'LOCALIZER', 
             							90, 'APPROACH',
             							91, 'SID',
             							92, 'STAR',
             							NULL) Rec_Type
                  FROM selection_criteria_value scv,
                       navdb_select_criteria nsc
                 WHERE scv.select_by_id = nsc.select_by_id
                   AND nsc.navdb_id = p_NavDB 
                   AND nsc.geo_area_id = '-2'
                   AND scv.VALUE = p_Ident; 
             BEGIN
             	
             		OPEN NavDB_I_E_CUR(:navdb.navdb_id,v_ident);
             		LOOP
                	FETCH NavDB_I_E_CUR 
                	INTO l_inc_exc_apt_tab (ln_cnt).airport_ident,
                       l_inc_exc_apt_tab (ln_cnt).inc_exc_ind, 
                       l_inc_exc_apt_tab (ln_cnt).rec_type_code,
                			 l_inc_exc_apt_tab (ln_cnt).rec_type;
                	
                	EXIT WHEN NavDB_I_E_CUR%NOTFOUND;
                ln_cnt := ln_cnt + 1;
                END LOOP;
           		CLOSE NavDB_I_E_CUR;
             EXCEPTION
              WHEN OTHERS THEN

                 ln_cnt := ln_cnt - 1;
                 dsp_msg(SQLERRM);
                 NULL;
             END;
          -- End Fix - SCR 6959.01 - Eswar KC
          END LOOP;
          COMMIT;
          :control_block.apt_cnt:=0;  --Fix SCR 7016.01 -21-03-2017 - Ashish N
          Message ('Record has been saved successfully'); --Fix SCR 0087 -- Madhu -- 16-Mar-2012
          DELETE_GROUP_ROW (group_id,ALL_ROWS);
          QUERY_BLOCK_RECORDS ('STD_AIRPORT', 'INITIAL');
          QUERY_BLOCK_RECORDS ('AIRPORT_TO_SELECT');
       END IF;
    -- Begin Fix - SCR 6959.01 - Eswar KC
       IF l_inc_exc_apt_tab.count > 0 THEN
          SHOW_VIEW ('inc_exc_apt_can');
          GO_BLOCK  ('inc_exc_apt');
          CLEAR_BLOCK(No_Validate);
          FOR i IN l_inc_exc_apt_tab.first .. l_inc_exc_apt_tab.last LOOP
             :inc_exc_apt.chk := 'Y';
             :inc_exc_apt.airport_ident 			:= l_inc_exc_apt_tab (i).airport_ident;
             :inc_exc_apt.inc_exc_ind   			:= l_inc_exc_apt_tab (i).inc_exc_ind;
             :inc_exc_apt.record_type_code   	:= l_inc_exc_apt_tab (i).rec_type_code;
             :inc_exc_apt.record_type   			:= l_inc_exc_apt_tab (i).rec_type;
             NEXT_RECORD;
          END LOOP;
          FIRST_RECORD;
          GO_ITEM ('inc_exc_apt.airport_ident');
       END IF;
    -- End Fix - SCR 6959.01 - Eswar KC
    END;
    SET_APPLICATION_PROPERTY (cursor_style, 'DEFAULT');
 END IF;

 airportToSelectresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	:control_block.apt_cnt:=0;  --Fix SCR 7016.01 -21-03-2017- Ashish N
	delete_group_row('DeSelect_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('AIRPORT_TO_SELECT');
end if;	

 airportToSelectcheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('AIRPORT_TO_SELECT','DeSelect_Group');
end if;	


 stdAirportchkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('STD_AIRPORT','Select_Group',:STD_AIRPORT.chk,:STD_AIRPORT.AIRPORT_IDENT,:STD_AIRPORT.AIRPORT_ICAO);
else
	:std_airport.chk := 'N';
end if;	

 stdAirportfourAlphaTerminalwhenCheckboxChanged:
if :system.mode = 'ENTER-QUERY' then
	if :STD_AIRPORT.FOUR_ALPHA_TERMINAL = 'Y' then
		set_item_instance_property('STD_AIRPORT.FOUR_ALPHA_TERMINAL', current_record, visual_attribute, 'CHECKED');
	else
		set_item_instance_property('STD_AIRPORT.FOUR_ALPHA_TERMINAL', current_record, visual_attribute, 'PLAIN');
	end if;	
else
	if :STD_AIRPORT.FOUR_ALPHA_TERMINAL = 'Y' then
		:STD_AIRPORT.FOUR_ALPHA_TERMINAL := 'N';
	else			
		:STD_AIRPORT.FOUR_ALPHA_TERMINAL := 'Y';
	end if;
end if;	


 stdAirportselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	Set_Application_Property(cursor_style,'BUSY');
	DECLARE
		group_id     recordgroup := find_group('Select_Group');
		total_rows   number := get_group_row_count(group_id);
		v_ident      varchar2(4);
		v_icao       varchar2(2);
	BEGIN	
		if total_rows > 0 then
			go_block('AIRPORT_TO_SELECT');
			for i in 1..total_rows loop
 				v_ident := get_group_char_cell('Select_Group.item1',i);
 				v_icao  := get_group_char_cell('Select_Group.item2',i);
 				if :airport_to_select.airport_ident is not null then
 					create_record;
 				end if;	
 				:airport_to_select.airport_ident := v_ident;
 				:airport_to_select.airport_icao  := v_icao;
 			  :airport_to_select.iata_code     := populate_iatacode(v_ident,v_icao); -- Fix - SCR 5825 - Ayodya Ch - 20 Nov 2012
 			end loop;
 			delete_group_row(group_id,ALL_ROWS); 			
 			commit_form;
 			:control_block.apt_cnt:=0; --Fix SCR 7016.01 -21-03-2017 - Ashish N
 			QUERY_BLOCK_RECORDS('STD_AIRPORT'); 
 			if :std_airport.airport_ident is null then
 				QUERY_BLOCK_RECORDS('STD_AIRPORT','INITIAL');				
 			end if;				
		end if;	
	END;
	Set_Application_Property(cursor_style,'DEFAULT');
end if;	

 stdAirportresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	:control_block.apt_cnt:=0;  --Fix SCR 7016.01 -21-03-2017- Ashish N
	delete_group_row('Select_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('STD_AIRPORT');
end if;	

 stdAirportcheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('STD_AIRPORT','Select_Group');
end if;	

 selectByHeliportGroupgroupNamewhenValidateItem:
if :SELECT_BY_HELIPORT_GROUP.GROUP_NAME IS not NULL then
	-- Check if the GROUP_NAME is unique
	declare
		v_rowid rowid;
	begin	
		select rowid into v_rowid 
		from SELECT_BY_HELIPORT_GROUP
		where GROUP_NAME = :SELECT_BY_HELIPORT_GROUP.GROUP_NAME
		and NAVDB_ID = :NAVDB.NAVDB_ID;
		if :SELECT_BY_HELIPORT_GROUP.rowid is null or
		  (v_rowid != :SELECT_BY_HELIPORT_GROUP.rowid) then
			dsp_msg('This GROUP_NAME is already used. Please give a different name');
			raise form_trigger_failure;
		end if;
	exception
		when no_data_found then
			null;
	end;	
end if;

 selectByHeliportGroupincludeExcludeIndwhenListChanged:
-- Begin Fix - SCR 6113 - Madhu--14-Jan-2016  
 IF :SYSTEM.record_status = 'CHANGED' THEN
    DECLARE
       v_ind   CHAR (1);
    	 ln_Count NUMBER; 
    BEGIN
 
       SELECT count(*) INTO ln_Count
		   FROM navdb_select_criteria
		   WHERE heliport_group_id = :select_by_heliport_group.select_by_id;
       
       IF ln_Count = 0 THEN
       	create_default_criteria(null,null,null,null,:SELECT_BY_HELIPORT_GROUP.select_by_id,'H');
       	COMMIT;	
       END IF;
    		
       SELECT NVL (include_exclude_ind, 'I')
         INTO v_ind
         FROM select_by_heliport_group
        WHERE select_by_id = :select_by_heliport_group.select_by_id;
			
				IF v_ind = 'I' AND :select_by_heliport_group.include_exclude_ind = 'X' THEN
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'X'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
				 ELSIF v_ind = 'X' AND :select_by_heliport_group.include_exclude_ind = 'I' THEN 
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'I'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
		       -- Begin Fix - SCR 05944 - Ashish N -02-Dec-2020
		        ELSIF v_ind = 'X' AND :select_by_heliport_group.include_exclude_ind IS NULL THEN 
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'I'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
		       ELSIF v_ind = 'I' AND :select_by_heliport_group.include_exclude_ind IS NULL THEN 
					 UPDATE navdb_select_criteria
	            SET include_exclude_ind = 'I'
		        WHERE heliport_group_id = :select_by_heliport_group.select_by_id
		          AND record_type_code = 15;
		       COMMIT;
		       -- End Fix - SCR 05944 - Ashish N -02-Dec-2020
		    END IF;
		END;
 END IF;
-- End Fix - SCR 6113 - Madhu--14-Jan-2016 	

 heliportToSelectmovewhenButtonPressed:
check_save;
if :system.mode = 'NORMAL' then
	if get_group_row_count(find_group('DeSelect_Group')) = 0 then
		dsp_msg('Nothing to move!');
	else
		go_block('SELECT_FROM_GROUPS');
		:global.moving_group := 'heliport';
		populate_airport_groups(:global.moving_group);	
	end if;
end if;

 heliportToSelectheliportIdentwhenValidateItem:
if :HELIPORT_TO_SELECT.HELIPORT_ident is not null and :system.record_status != 'QUERY' and
	:HELIPORT_TO_SELECT.HELIPORT_icao is null then
	check_HELIPORT(:HELIPORT_TO_SELECT.HELIPORT_ident,null,'RECORD');
end if;	

 heliportToSelectchkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('HELIPORT_TO_SELECT','DeSelect_Group',:HELIPORT_TO_SELECT.chk,:HELIPORT_TO_SELECT.HELIPORT_IDENT,:HELIPORT_TO_SELECT.HELIPORT_ICAO);
else
	:HELIPORT_to_select.chk := 'N';
end if;	

 heliportToSelectselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	Set_Application_Property(cursor_style,'BUSY');
	DECLARE
		group_id     recordgroup := find_group('DeSelect_Group');
		total_rows   number := get_group_row_count(group_id);
		v_ident      varchar2(38);
		v_icao       varchar2(38);
	BEGIN	
		check_save;
		if total_rows > 0 then
			for i in 1..total_rows loop
 				v_ident := get_group_char_cell('DeSelect_Group.item1',i); 
	 			v_icao := get_group_char_cell('DeSelect_Group.item2',i);
 				Delete from HELIPORT_to_select
				where select_by_id = :select_by_HELIPORT_group.select_by_id
				and HELIPORT_ident = v_ident
				and HELIPORT_icao  = v_icao;
 			end loop;
 			COMMIT;
 			Message('Record has been saved successfully');--Fix SCR 0087 -- Madhu -- 16-Mar-2012
	 		delete_group_row(group_id,ALL_ROWS);
 			QUERY_BLOCK_RECORDS('STD_HELIPORT','INITIAL');
 			QUERY_BLOCK_RECORDS('HELIPORT_TO_SELECT');
		end if;	
	END;
	Set_Application_Property(cursor_style,'DEFAULT');
end if;

 heliportToSelectresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('DeSelect_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('HELIPORT_TO_SELECT');
end if;	

 heliportToSelectcheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('HELIPORT_TO_SELECT','DeSelect_Group');
end if;	


 stdHeliportchkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('STD_HELIPORT','Select_Group',:STD_HELIPORT.chk,:STD_HELIPORT.TERMINAL_IDENT,:STD_HELIPORT.TERMINAL_ICAO);
else
	:std_HELIPORT.chk := 'N';
end if;	

 stdHeliportselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	Set_Application_Property(cursor_style,'BUSY');
	DECLARE
		group_id     recordgroup := find_group('Select_Group');
		total_rows   number := get_group_row_count(group_id);
		v_ident      varchar2(4);
		v_icao       varchar2(2);
	BEGIN	
		if total_rows > 0 then
			go_block('HELIPORT_TO_SELECT');
			for i in 1..total_rows loop
 				v_ident := get_group_char_cell('Select_Group.item1',i);
 				v_icao  := get_group_char_cell('Select_Group.item2',i);
 				if :HELIPORT_to_select.HELIPORT_ident is not null then
 					create_record;
 				end if;	
 				:HELIPORT_to_select.HELIPORT_ident := v_ident;
 				:HELIPORT_to_select.HELIPORT_icao  := v_icao;
 			end loop;
 			delete_group_row(group_id,ALL_ROWS);
 			commit_form;
 			QUERY_BLOCK_RECORDS('STD_HELIPORT');
--Begin SCR 7647 --Madhu --10-Jan-2018
 			IF :std_heliport.terminal_ident IS NULL THEN
 				QUERY_BLOCK_RECORDS('STD_HELIPORT','INITIAL');				
 			END IF;
--End SCR 7647 --Madhu --10-Jan-2018 			
		end if;	
	END;
	Set_Application_Property(cursor_style,'DEFAULT');
end if;	

 stdHeliportresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('Select_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('STD_HELIPORT');
end if;	

 stdHeliportcheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	SEL_ALL('STD_HELIPORT','Select_Group');
end if;	

 selectionselectionswhenListChanged:

:control_block.airway_sbi := null;
:control_block.airport_sbi := null;
:SELECT_ALL_RULES.IXRRD := 'N';   -- Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
:SELECT_ALL_RULES.OLD_IXRRD := :SELECT_ALL_RULES.IXRRD; -- Fix -SCR 7420.01 - Ashish N - 07-Jul-2017 

go_block('datatyp_rad');
clear_block;

IF :SELECTION.selections in ('S','G','A','I','R','H')then   
 	set_item_property('datatyp_rad.options',enabled,property_false);
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
   SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016 	
ELSE
	set_item_property('datatyp_rad.options',enabled,property_true);
--Begin Fix SCR 5820 --Madhu --15-Feb-2013
	IF :PARAMETER.UPD_REC = 'N' THEN
		Set_Item_Property ( 'DATATYP_RAD.OPTIONS', UPDATE_ALLOWED, PROPERTY_TRUE); 
		Set_Item_Property ( 'DATATYP_RAD.OPTIONS', INSERT_ALLOWED, PROPERTY_TRUE);
	END IF;
--End Fix SCR 5820 --Madhu --15-Feb-2013
	DECLARE
		v_type   varchar2(1) := 'E';
		v_count  number(3);
		ln_Inc_Exc_Cnt NUMBER; -- Fix - SCR 6503.01 - Eswar KC 
  BEGIN
  	begin
  		select 'T' into v_type
			from select_by_airport_group
			where select_by_id = :selection.selections;
  	exception
  		when no_data_found then
  		begin
  			select 'H' into v_type
				from select_by_heliport_group
				where select_by_id = :selection.selections;
  		exception
  			when no_data_found then
  			begin
  				select 'I' into v_type
					from select_by_icao
					where select_by_id = :selection.selections;
  			exception
  				when no_data_found then
  				begin
  					select 'G' into v_type
  					from select_by_geographic_area
  					where select_by_id = :selection.selections;
  				exception
  					when no_data_found then
  					v_type := 'E';
  				end;	
  			end;	
  		end;	
  	end;
  	--
  	populate_datatyp_descr(v_type);
  	first_record;
	-- Begin Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
	   IF v_type = 'T' THEN
	      SELECT COUNT (*)
	        INTO v_count
	        FROM navdb_select_criteria sel
	       WHERE sel.airport_group_id = :SELECTION.selections
           AND sel.navdb_id = :navdb.navdb_id
           AND sel.parent_select_by_id IS NULL
           AND sel.record_type_code = 10;
	
	      IF v_count = 0 THEN
	         -- If No Selected Criteria, Insert Initial Value Into Navdb_Select_Criteria For Airport Data Type
	         CREATE_DATATYP_CRITERIA ( TO_NUMBER (RTRIM (LTRIM (:SELECTION.selections))), 10);
	      END IF;
	   END IF;
	-- End Fix - SCR 6063 - Eswar KC - 18-Aug-2013 
		 -- Begin Fix - SCR 6503.01 - Eswar KC
		IF :SELECTION.selections = -1 THEN 
        Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR', DISPLAYED, PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR', ENABLED,   PROPERTY_TRUE);
	      --Start Fix SCR 7259.01 12-MAY-2017 Venkat M
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', DISPLAYED, PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', ENABLED,   PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', NAVIGABLE,   PROPERTY_TRUE);        
	      Set_Item_Property('DATATYP_RAD.SELECT_ALL', UPDATE_ALLOWED,   PROPERTY_TRUE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', INSERT_ALLOWED,   PROPERTY_TRUE);
	      --End Fix SCR 7259.01 12-MAY-2017 Venkat M        
        Set_Radio_Button_Property('SELECT_ALL_RULES.IXRRD','DEFAULT',ENABLED, PROPERTY_FALSE); --  SCR 6983.00 - Eswar KC - 06-Jun-2016
        
		ELSE
        Set_Item_Property('DATATYP_RAD.INC_EXC_INDICATOR', DISPLAYED, PROPERTY_FALSE);
        Set_Item_Property('DATATYP_RAD.SELECT_ALL', DISPLAYED, PROPERTY_FALSE);  --Fix SCR 7259 15-Aug-2017  --Venkat M        
        Set_Radio_Button_Property('SELECT_ALL_RULES.IXRRD','DEFAULT',ENABLED, PROPERTY_TRUE);  --  SCR 6983.00 - Eswar KC - 06-Jun-2016
		END IF;
		 -- End Fix - SCR 6503.01 - Eswar KC

  	LOOP -- For each displayed data type:
 			select count(*) into v_count
  		from navdb_select_criteria sel
  		where (sel.geo_area_id = :SELECTION.selections OR
						 sel.area_code_id = :SELECTION.selections OR
			   		 sel.icao_code_id = :SELECTION.selections OR
			   		 sel.airport_group_id = :SELECTION.selections OR
			   		 sel.heliport_group_id = :SELECTION.selections)
			and sel.navdb_id = :navdb.navdb_id
			and sel.parent_select_by_id is null
			and sel.record_type_code = :datatyp_rad.record_type_code;

			if v_count = 0 then 
				-- IF NO SELECTED CRITERIA, INSERT INITIAL VALUE 'N'/'D' INTO NAVDB_SELECT_CRITERIA
				CREATE_DATATYP_CRITERIA(to_number(rtrim(ltrim(:SELECTION.selections))), :datatyp_rad.record_type_code);				
			END IF;
			-- GET the select_by_id INTO DAT_SEL, include_exclude_ind into OPTIONS
			if :DATATYP_RAD.RECORD_TYPE_CODE is not null then

			-- Begin Fix - SCR 4184 - Eswar KC - 21-Sep-2012	
		   :parameter.inc_exc_ind := get_inc_exc_ind (TO_NUMBER (RTRIM (LTRIM (:selection.selections))));
		   IF :PARAMETER.INC_EXC_IND = 'X' THEN
		      :DataTyp_Rad.options := 'X';
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',   ENABLED, PROPERTY_FALSE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES', ENABLED, PROPERTY_FALSE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',   ENABLED, PROPERTY_FALSE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_FALSE );
       -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );
			 -- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016			      
		-- BEGIN FIX - SCR 6051 - KIRAN P - 27-AUG-2013
			/*   UPDATE NAVDB_SELECT_CRITERIA
		         SET INCLUDE_EXCLUDE_IND = :DataTyp_Rad.options
		       WHERE AIRPORT_GROUP_ID = TO_NUMBER (RTRIM (LTRIM (:SELECTION.SELECTIONS)));
		      COMMIT;
		  */
	 -- END FIX - SCR 6051 - KIRAN P - 27-AUG-2013		      
		   ELSE
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'INC',   ENABLED, PROPERTY_TRUE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'RULES', ENABLED, PROPERTY_TRUE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'REF',   ENABLED, PROPERTY_TRUE );
		      SET_RADIO_BUTTON_PROPERTY ('DataTyp_Rad.options', 'DEFAULT', ENABLED, PROPERTY_TRUE ); 
       -- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
		   	IF :parameter.work_type = 'VIEW' THEN
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_FALSE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_FALSE );        
        ELSE
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'INCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'EXCLUDE', ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'NONE',    ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'REF_ONLY',ENABLED, PROPERTY_TRUE );
          SET_RADIO_BUTTON_PROPERTY ('SELECT_ALL_RULES.IXRRD', 'DEFAULT', ENABLED, PROPERTY_TRUE );	         	
        END IF;  
       -- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016		        
		      POPULATE_DATATYP_OPTION;
		   END IF;
		  -- End Fix - SCR 4184 - Eswar KC - 21-Sep-2012 
			end if;			
		 -- Begin Fix - SCR 6503.01 - Eswar KC
		   IF :SELECTION.SELECTIONS = -1 THEN
		      Populate_Default_Inc_Exc_ind ('DATATYP_RAD', 'INC_EXC_INDICATOR');
		      SELECT COUNT (*)
		        INTO ln_Inc_Exc_Cnt                   
		        FROM Select_Criteria
		       WHERE Processing_Order = 30              -- check if it has a list rule
		         AND Record_Type_Code = :DATATYP_RAD.RECORD_TYPE_CODE;
		      IF ln_Inc_Exc_Cnt = 0 THEN
		         SET_ITEM_INSTANCE_PROPERTY ('DATATYP_RAD.INC_EXC_INDICATOR', CURRENT_RECORD, VISUAL_ATTRIBUTE, 'INC_EXC_NONE');                    
		         :DATATYP_RAD.INC_EXC_INDICATOR := NULL;
		      END IF;
		   END IF;
		 -- End Fix - SCR 6503.01 - Eswar KC
			exit when :system.last_record = 'TRUE';
			next_record;
 	  END LOOP;
		first_record;
  END;  	 
END IF;  			


 datatypRadoptionswhenMouseClick:
-- Begin Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha
-- click_datatyp_radio;
if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
	dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
else	
--Begin SCR 5820 --Madhu --14-Feb-2013
	DECLARE
	   v_nAllow_update   NUMBER := 0;
	   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
	-- Begin Fix SCR 5891.02 -- Madhu--19-Mar-2013	
		IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
		ELSE
	--End Fix SCR 5891.02 -- Madhu--19-Mar-2013
	    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
     IF v_nAllow_update = 1 THEN
        :PARAMETER.UPD_REC := 'N';
        Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
        --:parameter.flag := 'Y';
        click_datatyp_radio;
     ELSE
        :PARAMETER.UPD_REC := 'Y';
        Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
        dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				RAISE Form_Trigger_Failure;         
     END IF;
    END IF;
	END;
--End SCR 5820 --Madhu --14-Feb-2013
end if; 
-- End Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha		

 datatypRadoptionswhenMouseDoubleclick:
-- Begin Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha
-- click_datatyp_radio;
if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
	dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
else	
--Begin SCR 5820 --Madhu --14-Feb-2013
	DECLARE
	   v_nAllow_update   NUMBER := 0;
	   v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
	 --Begin Fix SCR 5891.02 -- Madhu--19-Mar-2013   
	   IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
		 ELSE
	--End Fix SCR 5891.02 -- Madhu--19-Mar-2013
	    v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
     IF v_nAllow_update = 1 THEN
     		Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
        :PARAMETER.UPD_REC := 'N';
        click_datatyp_radio;
     ELSE
        :PARAMETER.UPD_REC := 'Y';
        Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
        dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				RAISE Form_Trigger_Failure;         
     END IF;
		END IF;
	END;
--End SCR 5820 --Madhu --14-Feb-2013
end if; 
-- End Fix -- SCR 3772.00(SAAAR APPROACH) -- Sesha	

 datatypRadincallwhenButtonPressed:
if :DATATYP_RAD.list_no = 0 or :DATATYP_RAD.list_no is null then
	dsp_msg('Sorry, no record identifier is found for '||:DATATYP_RAD.record_type_descr);
	raise form_trigger_failure;
end if;

--Begin SCR 5470 -- Shrikant K- 04-Mar- 2020

				if :datatyp_rad.inc_exc_indicator in ('I','B') then
					set_item_property('LISTS.DELETE_ALL',ENABLED, PROPERTY_TRUE);
				else
					set_item_property('LISTS.DELETE_ALL',ENABLED, PROPERTY_FALSE);
  		  end if;

--End SCR 5470 -- Shrikant K- 04-Mar- 2020
:datatyp_rad.list_val := 'I';
go_block('lists');





 datatypRadexcallwhenButtonPressed:
if :DATATYP_RAD.list_no = 0 or :DATATYP_RAD.list_no is null then
	dsp_msg('Sorry, no record identifier is found for '||:DATATYP_RAD.record_type_descr);
	raise form_trigger_failure;
end if;

--Begin SCR 5470 -- Shrikant K- 04-Mar- 2020
				
				if :datatyp_rad.inc_exc_indicator in ('X','B') then 
					set_item_property('LISTS.DELETE_ALL',ENABLED, PROPERTY_TRUE);
				else
					set_item_property('LISTS.DELETE_ALL',ENABLED, PROPERTY_FALSE);
  		  end if;

--End SCR 5470 -- Shrikant K- 04-Mar- 2020

:datatyp_rad.list_val := 'X';
go_block('lists');



 datatypRadcsvReportwhenButtonPressed:
Export_Csv.Export_File;


 datatypRadselectAllwhenMouseEnter:
dsp_msg('enabled/not '|| get_Item_Property('DATATYP_RAD.SELECT_ALL',ENABLED));

 datatypRadselectAllwhenCheckboxChanged:
--Begin Fix SCR 7259 22-Aug-2017
IF :DATATYP_RAD.INC_EXC_INDICATOR IN ('I','X','B') THEN
	 --:DATATYP_RAD.SELECT_ALL := 'N';
	 IF GET_ITEM_PROPERTY('DATATYP_RAD.CSV_REPORT',VISIBLE)= 'FALSE' THEN
	    SET_ITEM_PROPERTY('DATATYP_RAD.CSV_REPORT',DISPLAYED,PROPERTY_TRUE);  --Fix SCR 7259 15-Aug-2017 --Venkat M
	 END IF;   
ELSE
	:DATATYP_RAD.SELECT_ALL := 'N';
	DSP_MSG('Please select the Checkbox with Include/Exclude values for Report Generation');
END IF;	 
--End Fix SCR 7259 22-Aug-2017

 ruleslistwhenMouseClick:
click_detail_radio;

 ruleslistwhenMouseDoubleclick:
click_detail_radio;

 rulesbackwhenButtonPressed:
DECLARE
	cursor navcur is
		select include_exclude_ind
		from 	navdb_select_criteria A, select_criteria B
		where A.criteria_id = B.criteria_id
		and A.parent_select_by_id = :datatyp_rad.select_by_id;
BEGIN
	:GLOBAL.DETAIL_OPTION := 'N';
	for rec in navcur loop 
	  IF rec.include_exclude_ind = 'I' THEN
	  	:GLOBAL.DETAIL_OPTION := 'R';
	  ELSE
	  	NULL;
	  END IF;
	end loop;
END;
--
IF :GLOBAL.DETAIL_OPTION = 'N' THEN
	IF :DATATYP_RAD.OLD_OPTION != 'R' THEN
		:DATATYP_RAD.OPTIONS := :DATATYP_RAD.OLD_OPTION;
	ELSE
		if :control_block.sel_hdr like 'NAVDB Default%' then
			:DATATYP_RAD.OPTIONS := 'N';
		else
			:DATATYP_RAD.OPTIONS := 'D';
		end if;	
	END IF;
	UPDATE_DATATYP_VALUE(:DATATYP_RAD.OPTIONS);	
END IF;
:DATATYP_RAD.OLD_OPTION := :DATATYP_RAD.OPTIONS;
:control_block.did := 'Y';
hide_view('rules');
go_block('SELECTION');

 singleValdonewhenButtonPressed:
if :parameter.work_type != 'VIEW' then
	if :single_val.single is null then
		message('To exit without saving, use the ''Cancel'' button. To delete the value,'||
						'click ''Cancel'' button then choice the ''N/A'' radio of the rule.');
		dsp_msg('Please enter value.');
		go_item('SINGLE');
		raise form_trigger_failure;
	else
		if :single_val.single = '0' and 
			(:rules.selected_rules like 'INCLUDE LENGTH%' or :rules.selected_rules like 'INCLUDE WIDTH%')  then
			dsp_msg('Sorry, 0 is not a valid value.');
			raise form_trigger_failure;
		end if;	
		if :rules.list != :rules.old_list then
			update navdb_select_criteria 
			set include_exclude_ind = :rules.list
			where select_by_id = :rules.select_by_id;
		end if;		
		--
		delete from selection_criteria_value
		where select_by_id =:rules.select_by_id;
		--
		Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
		values (:rules.select_by_id,1,:rules.selected_rules,:single_val.single);
		:CONTROL_BLOCK.did := 'Y';
		COMMIT;	
	end if;
end if;
--
:rules.old_list := :rules.list;
hide_view('single');
go_block('rules');

 singleValcancelwhenButtonPressed:
if :rules.old_list = 'I' and :single_val.old_value is null then	
	:rules.list := 'N';
else	
	:rules.list := :rules.old_list;
end if;	
:CONTROL_BLOCK.did := 'Y';
hide_view('single');
go_block('rules');

 multValdonewhenButtonPressed:
if :parameter.work_type != 'VIEW' then
	first_record;
	if :mult_val.multiple is null then
		message('To exit without saving, use the ''Cancel'' button. To delete all value(s),'||
						'click ''Cancel'' button then choice the ''N/A'' radio of the rule.');
		dsp_msg('Please enter value.');
		go_item('MULTIPLE');
		raise form_trigger_failure;
	else
		if :rules.list != :rules.old_list then
			update navdb_select_criteria 
			set include_exclude_ind = :rules.list
			where select_by_id = :rules.select_by_id;
		end if;
		--
		delete from selection_criteria_value
		where select_by_id =:rules.select_by_id;
		--
		declare
			v_num number := 0;
		begin		
			LOOP
				v_num := v_num + 1;
				Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
				values (:rules.select_by_id,v_num,:rules.selected_rules,:mult_val.multiple);
 	 			if :system.last_record = 'TRUE' then
  				exit;
  			else
  				next_record;
  			end if;	
			END LOOP;
		end;	
		:control_block.did := 'Y';
		forms_ddl('COMMIT');
	end if;
end if;	
--
:rules.old_list := :rules.list;
hide_view('MULTIPLE');
go_block('rules');

 multValcancelwhenButtonPressed:
first_record;
if :rules.old_list = 'I' and :single_val.single is null then	
	:rules.list := 'N';
else	
	:rules.list := :rules.old_list;
end if;	
:control_block.did := 'Y';
hide_view('MULTIPLE');
go_block('rules');

 recordSubTypechkwhenCheckboxChanged:
if :RECORD_SUB_TYPE.value is null then
	:RECORD_SUB_TYPE.chk := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :RECORD_SUB_TYPE.chk = 'Y' then
		:RECORD_SUB_TYPE.chk := 'N';
	elsif :RECORD_SUB_TYPE.chk = 'N' then
		:RECORD_SUB_TYPE.chk := 'Y';
	end if;
end if;	

 recordSubTypedonewhenButtonPressed:
if :parameter.work_type != 'VIEW' then
	declare
		v_num number := 0;
		v_button number(1);
	begin	
		first_record;
		loop
			if :RECORD_SUB_TYPE.chk = 'Y' then
				v_num := v_num + 1;
			end if;
			exit when :system.last_record = 'TRUE';
			next_record;
		end loop;
		if v_num = 0 then
			v_button := DISPLAY_ALERT.MORE_BUTTONS('S','NO CRITERIA VALUE',
  			'No value is selected, or you deseleted all the value.'||chr(10)||
  			'Are you sure this is what it shall be?'||chr(10),
  			'Yes','Cancel');
  		if v_button = 1 then	
  			delete from selection_criteria_value
				where select_by_id =:rules.select_by_id;
				if :rules.list != :rules.old_list then
					:rules.list := :rules.old_list;
				else
					:rules.list := 'N';
					update navdb_select_criteria 
					set include_exclude_ind = :rules.list
					where select_by_id = :rules.select_by_id;
				end if;	
				:control_block.did := 'Y';
			else
  			raise form_trigger_failure;
			end if;
  	else
  		delete from selection_criteria_value
			where select_by_id =:rules.select_by_id;
			--		
  		first_record;
  		v_num := 0;
  		loop
				if :RECORD_SUB_TYPE.chk = 'Y' then
					v_num := v_num + 1;
					Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
					values (:rules.select_by_id,v_num,
									:rules.selected_rules,:RECORD_SUB_TYPE.real_value);
				end if;
				exit when :system.last_record = 'TRUE';
				next_record;
  		end loop;
  		--
  		if :rules.list != :rules.old_list then
				update navdb_select_criteria 
				set include_exclude_ind = :rules.list
				where select_by_id = :rules.select_by_id;
  		end if;
  		:control_block.did := 'Y';
  	end if;
  	forms_ddl('COMMIT');
	end;
end if;	
--
:rules.old_list := :rules.list;
hide_view('SELECT_SUB_TYPE');
go_block('rules');
		

 recordSubTypecancelwhenButtonPressed:
first_record;
:rules.list := :rules.old_list;
:control_block.did := 'Y';
hide_view('SELECT_SUB_TYPE');
go_block('rules');

 recordSubTypecheckwhenButtonPressed:
first_record;
loop
	exit when rtrim(:RECORD_SUB_TYPE.REAL_VALUE) is null;
	:RECORD_SUB_TYPE.chk := 'Y';
	next_record;
end loop;
first_record;

 recordSubTypeclearwhenButtonPressed:
first_record;
loop
	:RECORD_SUB_TYPE.chk := 'N';
	exit when :system.last_record = 'TRUE';
	next_record;
end loop;
first_record;

 genCriteriaSubTypechkwhenCheckboxChanged:
--Begin fix SCR 7426.09 --Madhu 
IF :GEN_CRITERIA_SUB_TYPE.value IS NULL THEN
	:GEN_CRITERIA_SUB_TYPE.chk := 'N';
END IF;
IF :parameter.work_type = 'VIEW' THEN
	IF :GEN_CRITERIA_SUB_TYPE.chk = 'Y' THEN
		:GEN_CRITERIA_SUB_TYPE.chk := 'N';
	ELSIF :GEN_CRITERIA_SUB_TYPE.chk = 'N' THEN
		:GEN_CRITERIA_SUB_TYPE.chk := 'Y';
	END IF;
END IF;	
:control_block.did := 'N';
:control_block.GEN_CRITERIA_CAN := get_canvas_property('SEL_CAN',topmost_tab_page);
--End fix SCR 7426.09 --Madhu 

 genCriteriaSubTypedonewhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
IF :parameter.work_type != 'VIEW' THEN

DECLARE
   v_num      NUMBER := 0;
   v_button   NUMBER (1);
BEGIN
   FIRST_RECORD;

   LOOP
      IF :GEN_CRITERIA_SUB_TYPE.chk = 'Y' THEN
         v_num := v_num + 1;
      END IF;

      EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
      NEXT_RECORD;
   END LOOP;

   IF v_num = 0 THEN
      v_button :=
         DISPLAY_ALERT.MORE_BUTTONS (
            'S',
            'NO GEN CRITERIA VALUE',
               'No value is selected, or you deseleted all the value.'
            || CHR (10)
            || 'Are you sure this is what it shall be?'
            || CHR (10),
            'Yes',
            'Cancel');

      IF v_button = 1 THEN
         DELETE FROM navdb_general_criteria_value
               WHERE criteria_id = :general_criteria.criteria_id
                     AND navdb_id = :navdb.navdb_id;

         IF :general_criteria.chk != :general_criteria.old_chk THEN
            :general_criteria.chk := :general_criteria.old_chk;
         ELSE
            :general_criteria.chk := 'N';

            UPDATE navdb_general_criteria
               SET apply_ind = :general_criteria.chk
             WHERE criteria_id = :general_criteria.criteria_id
                   AND navdb_id = :navdb.navdb_id;
         END IF;

         :control_block.did := 'Y';
      ELSE
         RAISE form_trigger_failure;
      END IF;
   ELSE
     
      DELETE FROM navdb_general_criteria_value
               WHERE criteria_id = :general_criteria.criteria_id
                     AND navdb_id = :navdb.navdb_id;

       
      --FORMS_DDL ('COMMIT');
      
      --
      FIRST_RECORD;
      v_num := 0;

      LOOP
         IF :GEN_CRITERIA_SUB_TYPE.chk = 'Y' THEN
            v_num := v_num + 1;

            INSERT INTO navdb_general_criteria_value (navdb_id,criteria_id,
                                                  value_sequence,
                                                  value_descr,
                                                  VALUE)
                 VALUES (:navdb.navdb_id,:general_criteria.criteria_id,
                         v_num,
                         :GEN_CRITERIA_SUB_TYPE.value,
                         :GEN_CRITERIA_SUB_TYPE.real_value);
         END IF;

         EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
         NEXT_RECORD;
      END LOOP;

      --
      IF :general_criteria.chk != :general_criteria.old_chk THEN
         UPDATE navdb_general_criteria
            SET apply_ind = :general_criteria.chk
             WHERE criteria_id = :general_criteria.criteria_id
                   AND navdb_id = :navdb.navdb_id;
      END IF;

      :control_block.did := 'Y';
   END IF;

   FORMS_DDL ('COMMIT');
END;

END IF;
--
:control_block.GEN_CRITERIA_CAN := NULL;
:general_criteria.old_chk := :general_criteria.chk;
HIDE_VIEW('GEN_CRITERIA_SUB_TYPE');
GO_BLOCK('general_criteria');
--End fix SCR 7426.09 --Madhu 

 genCriteriaSubTypecancelwhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
DECLARE
	ln_cnt NUMBER;
BEGIN
	
	SELECT COUNT(*) INTO ln_cnt
 				FROM navdb_general_criteria_value
 				WHERE 
 				--value = v_value AND 
 				CRITERIA_ID = :general_criteria.criteria_id
 				AND navdb_id  = :navdb.navdb_id;
 	
 	IF ln_cnt > 0 THEN
		:general_criteria.chk := 'Y';
 	ELSE
 		DELETE FROM navdb_general_criteria_value
			WHERE navdb_id = :navdb.navdb_id
			AND criteria_id = :general_criteria.criteria_id ;
			--
			UPDATE navdb_general_criteria
			SET apply_ind = 'N'
			WHERE navdb_id = :NAVDB.NAVDB_ID
  		AND criteria_id = :general_criteria.criteria_id;
  		first_record;
		LOOP
			:GEN_CRITERIA_SUB_TYPE.chk := 'N';
			EXIT WHEN :system.last_record = 'TRUE';
			next_record;
		END LOOP;
 		:general_criteria.chk := 'N';
 		FORMS_DDL('COMMIT');
 	END IF;
	first_record;
--	:general_criteria.chk := :general_criteria.old_chk;
	:control_block.GEN_CRITERIA_CAN := NULL;
	:control_block.did := 'Y';
	hide_view('GEN_CRITERIA_SUB_TYPE');
	go_block('general_criteria');
END;
--End fix SCR 7426.09 --Madhu 

 genCriteriaSubTypecheckwhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
first_record;
LOOP
	EXIT WHEN rtrim(:GEN_CRITERIA_SUB_TYPE.REAL_VALUE) IS NULL;
	:GEN_CRITERIA_SUB_TYPE.chk := 'Y';
	next_record;
END LOOP;
first_record;
--End fix SCR 7426.09 --Madhu 

 genCriteriaSubTypeclearwhenButtonPressed:
--Begin fix SCR 7426.09 --Madhu 
first_record;
LOOP
	:GEN_CRITERIA_SUB_TYPE.chk := 'N';
	EXIT WHEN :system.last_record = 'TRUE';
	next_record;
END LOOP;
first_record;
--End fix SCR 7426.09 --Madhu 

 appSubTypechkwhenCheckboxChanged:
if :APP_SUB_TYPE.real_value is null then
	:APP_SUB_TYPE.chk := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :APP_SUB_TYPE.chk = 'Y' then
		:APP_SUB_TYPE.chk := 'N';
	elsif :APP_SUB_TYPE.chk = 'N' then
		:APP_SUB_TYPE.chk := 'Y';
	end if;
end if;	

 appSubTypedonewhenButtonPressed:
if :parameter.work_type != 'VIEW' then
	declare
		v_num             number := 0;
		v_button          number(1);
		v_precision_limit number(2);
		v_non_precision_limit number(2);
		v_priority      varchar2(100);
		v_precision     varchar2(1);
		v_message       varchar2(300);
		v_num_precision   number(3) := 0;
		v_num_n_precision number(3) := 0;
--Begin Fix SCR 6177--Madhu--04-Feb-2014
		ls_Stmt VARCHAR2(512);
		ln_Out  NUMBER;
--End Fix SCR 6177--Madhu--04-Feb-2014
	begin	
		first_record;
		loop
			if :APP_SUB_TYPE.VALUE = '------Precision Route Types------' then
				v_precision_limit := :APP_SUB_TYPE.LIMIT_PRIORITY;
				v_precision := 'Y';
				v_priority  := '999';
			elsif :APP_SUB_TYPE.VALUE = '----Non Precision Route Types----' then	
				if v_num_precision = 0 and v_precision_limit is not null then
					v_message := 'Limit is set for the Precision group, but no selected Route Type in this group.';
					exit;
				end if;
				v_non_precision_limit := :APP_SUB_TYPE.LIMIT_PRIORITY;
				v_precision := 'N';
				v_priority  := '999';				
			end if;
			if :APP_SUB_TYPE.chk = 'N' and substr(:APP_SUB_TYPE.VALUE,1,4) != '----' and :APP_SUB_TYPE.LIMIT_PRIORITY is not null then
				v_message := 'Please remove Priority for not selected Route Type.';
				exit;
			end if;	
			if v_precision = 'Y' then
				if :APP_SUB_TYPE.chk = 'Y' then
					v_num_precision := v_num_precision + 1;
					if v_precision_limit is not null and :APP_SUB_TYPE.LIMIT_PRIORITY is null then
						v_message := 'Limit is set for the Precision group, so, Priority is required for the selected Route Type in this group.';
						exit;
					end if;						
				end if;
				if v_precision_limit is null 
					and :APP_SUB_TYPE.chk = 'Y' and :APP_SUB_TYPE.LIMIT_PRIORITY is not null then
					v_message := 'Limit need to be set for the Precision group because Priority is been set for the selected Route Type.';
					exit;
				end if;
			end if;	
			if v_precision = 'N' then
				if :APP_SUB_TYPE.chk = 'Y' then
					v_num_n_precision := v_num_n_precision + 1;
					if v_non_precision_limit is not null and :APP_SUB_TYPE.LIMIT_PRIORITY is null then
						v_message := 'Limit is set for the None Precision group, so, Priority is required for the selected Route Type in this group.';
						exit;
					end if;	
				end if;
				if v_non_precision_limit is null 
					and :APP_SUB_TYPE.chk = 'Y' and :APP_SUB_TYPE.LIMIT_PRIORITY is not null then
					v_message := 'Limit need to be set for the None Precision group because Priority is been set for the selected Route Type.';
					exit;
				end if;
			end if;	
			/*if :APP_SUB_TYPE.chk = 'Y' and :APP_SUB_TYPE.LIMIT_PRIORITY is null then
				v_message := 'There is at least one checked Route Type doesn''t have PRIORITY, please assign it.';
				exit;
			end if;	*/
			if :APP_SUB_TYPE.chk = 'Y' then
				v_num := v_num + 1;
--Begin Fix SCR 6177--Madhu--04-Feb-2014				
				IF :APP_SUB_TYPE.LIMIT_PRIORITY IS NOT NULL THEN
					ls_Stmt := 'SELECT COUNT(*) FROM Dual WHERE '||:APP_SUB_TYPE.LIMIT_PRIORITY||' IN ('||v_priority||')';
					Forms_Utilities.Exe_Query(ls_stmt,ln_Out);
					IF ln_Out > 0 THEN
						v_message := 'The Priority number have to be unique in Precision Route Type group '||
						             'and Non-Precision Route Type group. Please correct it.';
						exit;
					END IF;	
				END IF;
--End Fix SCR 6177--Madhu--04-Feb-2014
				v_priority := v_priority||','||to_char(:APP_SUB_TYPE.LIMIT_PRIORITY);			
				if v_precision = 'Y' then
					:APP_SUB_TYPE.real_value := substr(:APP_SUB_TYPE.real_value,1,1)||
					                            lpad(to_char(v_precision_limit),2,'0')||
					                            lpad(to_char(:APP_SUB_TYPE.LIMIT_PRIORITY),2,'0');
				elsif v_precision = 'N' then	                            
					:APP_SUB_TYPE.real_value := substr(:APP_SUB_TYPE.real_value,1,1)||
					                            lpad(to_char(v_non_precision_limit),2,'0')||
					                            lpad(to_char(:APP_SUB_TYPE.LIMIT_PRIORITY),2,'0');
				end if;	                            
			end if;
			if :system.last_record = 'TRUE' then
				if v_num_n_precision = 0 and v_non_precision_limit is not null then
					v_message := 'Limit is set for the None Precision group, but no selected Route Type in this group.';
				end if;
				exit;
			end if;	
			next_record;
		end loop;		
		if v_message is not null then
			dsp_msg(v_message);
			raise form_trigger_failure;
		end if;	
		first_record;
		if v_num = 0 then
			v_button := DISPLAY_ALERT.MORE_BUTTONS('S','NO CRITERIA VALUE',
  			'No value is selected, or you deseleted all the value.'||chr(10)||
  			'Are you sure this is what it shall be?'||chr(10),
  			'Yes','Cancel');
  		if v_button = 1 then	
  			delete from selection_criteria_value
				where select_by_id =:rules.select_by_id;
				if :rules.list != :rules.old_list then
					:rules.list := :rules.old_list;
				else
					:rules.list := 'N';
					update navdb_select_criteria 
					set include_exclude_ind = :rules.list
					where select_by_id = :rules.select_by_id;
				end if;	
				:control_block.did := 'Y';
			else
  			raise form_trigger_failure;
			end if;
  	else
  		delete from selection_criteria_value
			where select_by_id =:rules.select_by_id;
			--		
  		first_record;
  		v_num := 0;
  		loop
				if :APP_SUB_TYPE.chk = 'Y' then
					v_num := v_num + 1;
					Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
					values (:rules.select_by_id,v_num,:rules.selected_rules,:APP_SUB_TYPE.real_value);
				end if;
				exit when :system.last_record = 'TRUE';
				next_record;
  		end loop;
  		--
  		if :rules.list != :rules.old_list then
				update navdb_select_criteria 
				set include_exclude_ind = :rules.list
				where select_by_id = :rules.select_by_id;
  		end if;
  		:control_block.did := 'Y';
  	end if;
  	forms_ddl('COMMIT');
	end;
end if;	
--
:rules.old_list := :rules.list;
hide_view('SEL_APP_SUB_TYPE');
go_block('rules');
		

 appSubTypecancelwhenButtonPressed:
first_record;
:rules.list := :rules.old_list;
:control_block.did := 'Y';
hide_view('SEL_APP_SUB_TYPE');
go_block('rules');

 appSubTypecheckwhenButtonPressed:
first_record;
loop
	exit when rtrim(:APP_SUB_TYPE.VALUE) is null;
	if :APP_SUB_TYPE.REAL_VALUE is not null then
		:APP_SUB_TYPE.chk := 'Y';
	end if;	
	next_record;
end loop;
first_record;

 appSubTypeclearwhenButtonPressed:
first_record;
loop
	:APP_SUB_TYPE.chk := 'N';
	:APP_SUB_TYPE.LIMIT_PRIORITY := null;
	exit when :system.last_record = 'TRUE';
	next_record;
end loop;
first_record;

 runwaySurfacesoftChkwhenCheckboxChanged:
if :RUNWAY_SURFACE.SOFT_VALUE is null then
	:RUNWAY_SURFACE.SOFT_CHK := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :RUNWAY_SURFACE.SOFT_CHK = 'Y' then
		:RUNWAY_SURFACE.SOFT_CHK := 'N';
	elsif :RUNWAY_SURFACE.SOFT_CHK = 'N' then
		:RUNWAY_SURFACE.SOFT_CHK := 'Y';
	end if;
end if;	

 runwaySurfacecheckAllSoftwhenButtonPressed:
first_record;
loop
	exit when :RUNWAY_SURFACE.SOFT_VALUE is null;
	:RUNWAY_SURFACE.SOFT_CHK := 'Y';
	next_record;
end loop;
first_record;

 runwaySurfaceclearAllSoftwhenButtonPressed:
first_record;
loop
	exit when :RUNWAY_SURFACE.SOFT_VALUE is null;
	:RUNWAY_SURFACE.SOFT_CHK := 'N';
	next_record;
end loop;
first_record;

 runwaySurfacehardChkwhenCheckboxChanged:
if :RUNWAY_SURFACE.HARD_VALUE is null then
	:RUNWAY_SURFACE.HARD_CHK := 'N';
end if;
if :parameter.work_type = 'VIEW' then
	if :RUNWAY_SURFACE.HARD_CHK = 'Y' then
		:RUNWAY_SURFACE.HARD_CHK := 'N';
	elsif :RUNWAY_SURFACE.HARD_CHK = 'N' then
		:RUNWAY_SURFACE.HARD_CHK := 'Y';
	end if;
end if;	

 runwaySurfacecheckAllHardwhenButtonPressed:
first_record;
loop
	exit when :RUNWAY_SURFACE.HARD_VALUE is null;
	:RUNWAY_SURFACE.HARD_CHK := 'Y';
	next_record;
end loop;
first_record;

 runwaySurfaceclearAllHardwhenButtonPressed:
first_record;
loop
	exit when :RUNWAY_SURFACE.HARD_VALUE is null;
	:RUNWAY_SURFACE.HARD_CHK := 'N';
	next_record;
end loop;
first_record;

 runwaySurfacedonewhenButtonPressed:
if :parameter.work_type != 'VIEW' then
	declare
		v_num number := 0;
		v_button number(1);
	begin	
		first_record;
		loop
			if :RUNWAY_SURFACE.SOFT_CHK = 'Y' then
				v_num := v_num + 1;
			end if;
			if :RUNWAY_SURFACE.HARD_CHK = 'Y' then
				v_num := v_num + 1;
			end if; 
			exit when :system.last_record = 'TRUE';
			next_record;
		end loop;
		if v_num = 0 then
			v_button := DISPLAY_ALERT.MORE_BUTTONS('S','NO CRITERIA VALUE',
  			'No value is selected, or you deseleted all the value.'||chr(10)||
  			'Are you sure this is what it shall be?'||chr(10),
  			'Yes','Cancel');
  		if v_button = 1 then	
  			delete from selection_criteria_value
				where select_by_id =:rules.select_by_id;
				if :rules.list != :rules.old_list then
					:rules.list := :rules.old_list;
				else
					:rules.list := 'N';
					update navdb_select_criteria 
					set include_exclude_ind = :rules.list
					where select_by_id = :rules.select_by_id;
				end if;	
				:control_block.did := 'Y';
			else
  			raise form_trigger_failure;
			end if;
  	else
  		delete from selection_criteria_value
			where select_by_id =:rules.select_by_id;
			--		
  		first_record;
  		loop
				if :RUNWAY_SURFACE.SOFT_CHK = 'Y' then
					v_num := v_num + 1;
					Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
					values (:rules.select_by_id,v_num,
									:rules.selected_rules,:RUNWAY_SURFACE.soft_value);
				end if;
				if :RUNWAY_SURFACE.HARD_CHK = 'Y' then
					v_num := v_num + 1;
					Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
					values (:rules.select_by_id,v_num,
									:rules.selected_rules,:RUNWAY_SURFACE.hard_value);
				end if;
				exit when :system.last_record = 'TRUE';
				next_record;
  		end loop;
  		--
  		if :rules.list != :rules.old_list then
				update navdb_select_criteria 
				set include_exclude_ind = :rules.list
				where select_by_id = :rules.select_by_id;
  		end if;
  		:control_block.did := 'Y';
  	end if;
  	forms_ddl('COMMIT');  	
	end;
	null;
end if;
--
:rules.old_list := :rules.list;
hide_view('SELECT_RUNWAY_SURFACE');
go_block('rules');
		

 runwaySurfacecancelwhenButtonPressed:
first_record;
:rules.list := :rules.old_list;
:control_block.did := 'Y';
hide_view('SELECT_RUNWAY_SURFACE');
go_block('rules');

 listsvalue1whenValidateItem:
check_length(1);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_1 <> :LISTS.VALUE_D_1 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record; 
--End SCR 7259.01 venkat

IF :LISTS.VALUE_1 <> :LISTS.VALUE_D_1 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;


 listsvalue1whenNewItemInstance:
--Begin Fix SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN --Fix SCR 5891.02 -- Madhu--19-Mar-2013
	DECLARE
 		v_nAllow_update   NUMBER := 0;
    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
     v_nAllow_update := CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN (v_cNavdb_Block || '.navdb_id'));
     IF v_nAllow_update = 1 THEN
     :PARAMETER.UPD_REC := 'N';	
  	  set_item_property('lists.value_1',INSERT_ALLOWED,property_true);
  		Set_Item_Property ('lists.value_1', UPDATE_ALLOWED, property_true);
     ELSE
        :PARAMETER.UPD_REC := 'Y';
	  	  set_item_property('lists.value_1',INSERT_ALLOWED,property_false);
	  		Set_Item_Property ('lists.value_1', UPDATE_ALLOWED, property_false);
	  		dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
	     END IF;
	END;
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End Fix SCR 5820 --Madhu --15-Feb-2013

 listsvalue2whenValidateItem:
check_length(2);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_2 <> :LISTS.VALUE_D_2 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_2 <> :LISTS.VALUE_D_2 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listsvalue2whenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN--Fix SCR 5891.02 -- Madhu--19-Mar-2013
DECLARE
   	v_nAllow_update   NUMBER := 0;
    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
	     IF :PARAMETER.UPD_REC = 'Y' THEN
	     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
			 END IF;
END;
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013			
				

 listsvalue3whenValidateItem:
check_length(3);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_3 <> :LISTS.VALUE_D_3 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_3 <> :LISTS.VALUE_D_3 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listsvalue3whenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN--Fix SCR 5891.02 -- Madhu--19-Mar-2013
DECLARE
   	v_nAllow_update   NUMBER := 0;
    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
	     IF :PARAMETER.UPD_REC = 'Y' THEN
	     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
			 END IF;
END;		
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013

 listsvalue4whenValidateItem:
check_length(4);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_4 <> :LISTS.VALUE_D_4 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_4 <> :LISTS.VALUE_D_4 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listsvalue4whenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN--Fix SCR 5891.02 -- Madhu--19-Mar-2013
DECLARE
   	v_nAllow_update   NUMBER := 0;
    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
	     IF :PARAMETER.UPD_REC = 'Y' THEN
	     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
			 END IF;
END;
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013

 listsvalue5whenValidateItem:
check_length(5);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_5 <> :LISTS.VALUE_D_5 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_5 <> :LISTS.VALUE_D_5 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listsvalue5whenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN--Fix SCR 5891.02 -- Madhu--19-Mar-2013
DECLARE
   	v_nAllow_update   NUMBER := 0;
    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
	     IF :PARAMETER.UPD_REC = 'Y' THEN
	     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
			 END IF;
END;		
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013

 listsvalue6whenValidateItem:
check_length(6);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_6 <> :LISTS.VALUE_D_6 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_6 <> :LISTS.VALUE_D_6 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listsvalue6whenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN--Fix SCR 5891.02 -- Madhu--19-Mar-2013
DECLARE
   	v_nAllow_update   NUMBER := 0;
    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
BEGIN
	     IF :PARAMETER.UPD_REC = 'Y' THEN
	     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
			 END IF;
END;		
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013

 listsvalue7whenValidateItem:
check_length(7);
--Begin Fix SCR 7259.01 venkat
IF :System.Cursor_Record <> '1' AND :LISTS.VALUE_7 <> :LISTS.VALUE_D_7 THEN
	:parameter.dup_lists := 1;
end if;
:PARAMETER.REC_COUNT := :system.cursor_record;  
--End SCR 7259.01 venkat
IF :LISTS.VALUE_7 <> :LISTS.VALUE_D_7 THEN
	:lists.dcr_number := :global.dcr_number;
END IF;

 listsvalue7whenNewItemInstance:
--Begin SCR 5820 --Madhu --15-Feb-2013
IF :parameter.work_type != 'VIEW' THEN --Fix SCR 5891.02 -- Madhu--19-Mar-2013
	DECLARE
	   	v_nAllow_update   NUMBER := 0;
	    v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
	BEGIN
		     IF :PARAMETER.UPD_REC = 'Y' THEN
		     	dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
				 END IF;
	END;		
END IF;--Fix SCR 5891.02 -- Madhu--19-Mar-2013
--End SCR 5820 --Madhu --15-Feb-2013

 listsnextRecwhenButtonPressed:
-- Begin Fix - SCR 6365.01 - Eswar KC
--SCR 7259 next record search issue fix
DECLARE
LN_REC 	NUMBER;
REC_CNT NUMBER := 0;
BEGIN
  IF :PARAMETER.REC_CNT_IE = 0 OR :PARAMETER.P_SEARCH_FIELD <> :LISTS.SEARCH_FIRST_FIELD THEN
  	:PARAMETER.REC_CNT_IE := 1;
  	:PARAMETER.P_SEARCH_FIELD := :LISTS.SEARCH_FIRST_FIELD;
		 FIRST_RECORD;
		 LOOP
		 	IF :LISTS.VALUE_1 IS NOT NULL AND :LISTS.VALUE_1 = :PARAMETER.P_SEARCH_FIELD THEN--:LISTS.SEARCH_FIRST_FIELD THEN
		 	  --SUCCESS;
		 	  --go_record(:SYSTEM.CURSOR_RECORD);
		 	  GO_ITEM('LISTS.VALUE_1');
		 	  EXIT;
		 	ELSIF :SYSTEM.LAST_RECORD = 'TRUE' THEN
		 		FIRST_RECORD;
		 		GO_ITEM('LISTS.NEXT_REC');
		 		EXIT;
		 	ELSE	
		 		:PARAMETER.REC_CNT_IE := :PARAMETER.REC_CNT_IE + 1;
		 		NEXT_RECORD;	
		 	END IF;
		 END LOOP;
	ELSE
		 	:PARAMETER.REC_CNT_IE := :PARAMETER.REC_CNT_IE + 1;
	     --GO_RECORD(:PARAMETER.REC_CNT_IE);	 	
	     next_record;
	  LOOP
	  	
		 	IF :LISTS.VALUE_1 IS NOT NULL AND :LISTS.VALUE_1 = :PARAMETER.P_SEARCH_FIELD THEN --:LISTS.SEARCH_FIRST_FIELD THEN
		 	  --SUCCESS;
		 	  GO_ITEM('LISTS.VALUE_1');
		 	  :PARAMETER.REC_CNT_IE := :SYSTEM.CURSOR_RECORD;
		 	  EXIT;
		 	ELSIF :LISTS.VALUE_1 IS NULL THEN
		 		PREVIOUS_RECORD;
		 	END IF;	
		 	IF :SYSTEM.LAST_RECORD = 'TRUE' THEN
		 		FIRST_RECORD;
		 		GO_ITEM('LISTS.NEXT_REC');
		 		EXIT;
		 	ELSE	
		 		:PARAMETER.REC_CNT_IE := :PARAMETER.REC_CNT_IE + 1;
		 		NEXT_RECORD;	
		 	END IF;
    END LOOP;
	END IF;
	:LISTS.SEARCH_FIRST_FIELD := :PARAMETER.P_SEARCH_FIELD;
END;
-- End Fix - SCR 6365.01 - Eswar KC

 listsdoneListwhenButtonPressed:
:PARAMETER.SAVE_BUTTON := 1; --scr 7259 -- 15-AUG-2017
:PARAMETER.KEY_DOWN_UP := 0; --Fix SCR 7259 15-Aug-2017 Venkat M
:control_block.did := 'Y';
if :parameter.work_type != 'VIEW' then
--Begin Fix SCR 5962 --Madhu --22-Jul-2013
	-- 23-aug-2017
	IF :PARAMETER.REC_CREATE = 'Y' and :LISTS.VALUE_1 IS NULL THEN
		 DSP_MSG('Insert/Delete the Record first'||:system.cursor_record);
		 RAISE FORM_TRIGGER_FAILURE;
	END IF;	 
	IF CHECK_VALID_NAVDB (:GLOBAL.processing_cycle, :GLOBAL.dcr_number, :NAVDB.DATA_SUPPLIER, NAME_IN ('navdb.navdb_id')) = 1 THEN
		SAVE_INC_EXC_LIST; --Fix SCR 7259 15-Aug-2017 Venkat M
		IF :parameter.DUP_LISTS_REC = 0 THEN
		   DONE_INC_EXC_LISTS;
		   COMMIT;
		   :PARAMETER.REC_CREATE := 'N';  --Fix scr 7259 23-aug-2017
		END IF;   
    --Begin Fix SCR 7259 15-Aug-2017 Venkat M		
		:parameter.dup_lists := 0; 
		:parameter.DUP_LISTS_REC := 0;
		go_block('DATATYP_RAD');		
		--End Fix SCR 7259 15-Aug-2017 Venkat M
	ELSE
		dsp_msg ('Record Cannot be Saved with DCR# '||:GLOBAL.dcr_number||' for NAVDB '||NAME_IN ('navdb.navdb_id'));
	END IF;
--End Fix SCR 5962 --Madhu --22-Jul-2013
ELSE
	go_block('DATATYP_RAD');	--Fix SCR 7259 Venkat M 16-AUG-2017
END IF; 

--go_block('DATATYP_RAD');	  --Fix SCR 7259 --16-Aug-2017


 listscancelListwhenButtonPressed:
declare
	v_value   varchar2(1000):= null;
	v_count   number;
BEGIN
	:PARAMETER.SAVE_BUTTON := 2; --scr 8259 -- 15-AUG-2017
	:control_block.did := 'Y';
	-- Check if any record
	first_record;
	for i in 1..:DATATYP_RAD.list_no LOOP
		v_value := v_value||name_in('lists.value_'||to_char(i));
	end loop;
	if v_value is null and :system.last_record = 'TRUE' then
		select count(*) into v_count 
		from selection_criteria_value
		where select_by_id= :control_block.list_s_id;		
		if v_count = 0 then
			delete from navdb_select_criteria
			where select_by_id = :control_block.list_s_id;
			commit;
		end if;	
	end if;	
	go_block('DATATYP_RAD');
end;	

 listsdeleteAllwhenButtonPressed:
--Begin SCR 5470 -- Shrikant K- 04-Mar- 2020
Declare
	v_Button number(1);
	v_count number(10);
Begin 	
	   :control_block.did := 'Y';
  if :parameter.work_type != 'VIEW' then
  --	dsp_msg('Please Confirm before Deletion');
  		v_Button := display_alert.more_buttons ('S','Delete All Selection Criterias',
			'Are you sure. you want to delete all the records'||chr(10),'OK','Cancel');
			if v_Button = 1 then
				
				Select max(value_seq) into v_count from selection_criteria_value
				where select_by_id= :control_block.list_s_id;
				
				delete from selection_criteria_value
				where select_by_id= :control_block.list_s_id;	
				
				delete from navdb_select_criteria
				where select_by_id = :control_block.list_s_id;
				
				commit;
				Message('Total '||v_count||' rows Deleted');				
	  		go_block('DATATYP_RAD');
			else
				null;
			end if;
	--	clear_block('LISTS');
  end if;

End;
--End SCR 5470 -- Shrikant K- 04-Mar- 2020



 copyNavdbnewNavdbwhenValidateItem:
-- Begin Fix - SCR 5329 - Eswar KC -08 Feb 2012
DECLARE
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
        
BEGIN
   IF :copy_navdb.new_navdb IS NOT NULL
   THEN
      FOR fms_id_rec IN fms_id_cur
      LOOP
         IF fms_id_rec.fms_id = :navdb.fms_id
         THEN
            IF forms_utilities.check_ident_for_alphanum (:copy_navdb.new_navdb)
            THEN
               display_alert.one_button
                  ('S',
                   'Change NavDB ID',
                      'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
                   || CHR (10)
                   || 'Change NavDB ID.'
                  );
               RAISE form_trigger_failure;
            END IF;
         END IF;
      END LOOP;
   END IF;		
END;
-- End Fix - SCR 5329 - Eswar KC -08 Feb 2012

	 




 copyNavdbnewDcrwhenNewItemInstance:
-- Begin Fix - SCR 6946.00 - Eswar KC - 18-Jun-2016
	DECLARE 
		ls_Return BOOLEAN;
		ln_DCR 		NUMBER;
		ln_Flag   NUMBER; -- Fix - SCR 7415 - Eswar KC
	BEGIN 
		-- Begin Fix - SCR 7415 - Eswar KC
		ln_Flag := VALIDATE_NAVDB (:Global.Dcr_Number,:Global.Processing_Cycle,:NAVDB.DATA_SUPPLIER,:Navdb.Navdb_Id); -- Fix - SCR 7415 - Eswar KC
		IF ln_Flag != 1 THEN 
		-- Fix - SCR 7415 - Eswar KC
			SELECT DISTINCT DCR_Number 
			  INTO ln_DCR 
			  FROM Search_by_Navdb_Assignee
			 WHERE NavDB_ID = :Copy_Navdb.New_Navdb
			   AND DCR_overall_status = 'OPEN'
			   AND Data_Supplier = :NAVDB.DATA_SUPPLIER;
				
			:Copy_Navdb.New_DCR := ln_DCR;
			Next_Item;
		-- Begin Fix - SCR 7415 - Eswar KC
		ELSE
			:Copy_Navdb.New_DCR := :Global.Dcr_Number;
		END IF;
		-- End Fix - SCR 7415 - Eswar KC
			
	EXCEPTION
		WHEN no_data_found THEN
			Dsp_Msg('No Open DCR exists for '||:Copy_Navdb.New_Navdb);            
			:Copy_Navdb.New_DCR := '';
		WHEN others THEN
			ls_Return := Show_Lov('DCR_LIST'); 
			IF NOT ls_Return THEN 
				dsp_msg('Please select a DCR from the List.'); 
				RAISE Form_Trigger_Failure; 
			END IF; 
	END;
-- End Fix - SCR 6946.00 - Eswar KC - 18-Jun-2016

 copyNavdbaddCustwhenButtonPressed:
declare
	dummy boolean;
begin	
	dummy := show_lov('ADD_CUST');
	if not dummy then
		null;
	else
		:new_cust := :new_cust||:temp_cust||',';
	end if;	
end;



 copyNavdbcopywhenButtonPressed:
DECLARE
   v_out            VARCHAR2 (300)     := 'OK';
   v_all_cust       VARCHAR2 (1000)    := LTRIM (RTRIM (:copy_navdb.new_cust, ', '), ', ');
   v_cust           VARCHAR2 (100);
   v_length         NUMBER (4);

   TYPE table_cust IS TABLE OF VARCHAR2 (50)
                         INDEX BY BINARY_INTEGER;

   new_cust         table_cust;
   i                INTEGER := 1;
   v_count          NUMBER (3);
   v_new_cust    		VARCHAR2 (3) := NULL;
   p_copy_type   		VARCHAR2 (10);     -- 'NEW','REPLACE-OK'
   ls_fms_usable		VARCHAR2(1);--Fix SCR 7194
   v_copy_navdb_ds  VARCHAR2(1);-- SCR 7511-harikrishna-10-Aug-2017 This will hold target navdb's supplier value.
   v_change         VARCHAR2(1):='N'; -- SCR 7511-harikrishna-10-Aug-2017 This will hold flag to signify user acceptance to change.
   p_fmsid          VARCHAR2(30);  -- Fix SCR 7871.01 - Ashish N - 11-May-2018
	 v_reccnt         NUMBER := 0;  --Fix SCR 7789 -- Shrikant K
   
BEGIN
	
   IF :copy_navdb.new_dcr IS NULL THEN
      dsp_msg ('Please enter the DCR number');
      GO_ITEM ('copy_navdb.new_dcr');
      RAISE form_trigger_failure;
   END IF;

   IF :copy_navdb.new_navdb IS NULL THEN
      dsp_msg ('Please enter the copy-to NAVDB ID');
      GO_ITEM ('copy_navdb.new_navdb');
      RAISE form_trigger_failure;
   ELSE
      IF LENGTH (:copy_navdb.new_navdb) > 3 THEN
         dsp_msg ('Currently, a NAVDB_ID shall be same to a Customer_id; it can not exceed 3 characters.');
         GO_ITEM ('copy_navdb.new_navdb');
         RAISE form_trigger_failure;
      END IF;
   END IF;

   IF RTRIM (:COPY_NAVDB.data_supplier) IS NULL THEN
      :COPY_NAVDB.data_supplier := :NAVDB.DATA_SUPPLIER;
   END IF;

   /* -- at the time we enable "add_cust" button, the following code will be useful
   if v_all_cust is null then
       dsp_msg('Please enter Customer for the new NAVDB.');
       go_item('new_cust');
       raise form_trigger_failure;
   else
       while rtrim(v_all_cust) is not null loop
            v_length := instr(v_all_cust,',');
           if v_length = 0 then
               v_cust := v_all_cust;
           else
               v_cust := substr(v_all_cust,1,v_length-1);
           end if;
         v_all_cust := substr(v_all_cust,length(v_cust)+2);
          new_cust(i) := ltrim(rtrim(v_cust));
          select count(*) into v_count
          from customer
          where customer_ident = new_cust(i);
          if v_count = 0 then
              dsp_msg('Invalid Customer Ident '''||new_cust(i)||'''. Please correct it.');
              go_item('new_cust');
              raise form_trigger_failure;
          else
              if instr(v_all_cust,v_cust) > 0 then
                  dsp_msg('Can not copy records for duplicated '||new_cust(i));
                  go_item('new_cust');
                  raise form_trigger_failure;
              end if;
          end if;
          i := i + 1;
       end loop;
  end if; */
 --Begin SCR 7194--Madhu--08-Feb-2017 
  IF UPPER(:Parameter.DB_INST_NAME) <> 'ENGR' THEN --7194  
  	SELECT NVL(usable,'$') INTO ls_fms_usable
  	FROM flight_management_system
  	WHERE fms_id = :NAVDB.fms_id;
  	
  	IF ls_fms_usable = 'E' THEN
  		dsp_msg ('FMS ''' || :NAVDB.fms_id || ''' is an Engineering FMS_ID, you cannot create or copy selection criteria. ' || CHR (10)
                 || 'Please select Production FMS ID.');
			RAISE form_trigger_failure;
  	END IF;
  
  END IF;
 --End SCR 7194--Madhu--08-Feb-2017  
 
   BEGIN
      SELECT customer_ident
        INTO v_new_cust
        FROM customer
       WHERE customer_ident = :copy_navdb.new_navdb;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF display_alert.more_buttons ( 
               'S', 'No Customer Found', 'Customer with name '''
               || :copy_navdb.new_navdb || ''' does not exist. ' || CHR (10)
               || 'Do you want to generate this customer?', 'Yes', 'No') = '2' THEN
            dsp_msg ('Please enter the new NAVDB ID');
            GO_ITEM ('copy_navdb.new_navdb');
            :COPY_NAVDB.new_navdb := NULL;
            RAISE form_trigger_failure;
         END IF;
   END;

-- Fix SCR 7871.01 - Ashish N - 11-May-2018

 BEGIN
      SELECT fms_id
      INTO p_fmsid
      FROM NAVDB
      WHERE navdb_id = :COPY_NAVDB.new_navdb;        
 EXCEPTION
 	    WHEN NO_DATA_FOUND THEN
 	     p_fmsid := NULL;
 END;
 -- Fix SCR 7871.01 - Ashish N - 11-May-2018
   -- Start mod for SCR 2098
   IF v_new_cust IS NULL THEN
      p_copy_type := 'NEW';
   ELSE
      IF :copy_navdb.new_navdb = :navdb.navdb_id  THEN
         IF :copy_navdb.data_supplier != :navdb.data_supplier  THEN
         		IF :navdb.fms_id  = p_fmsid THEN  -- Fix SCR 7871.01 - Ashish N - 11-May-2018
            		IF display_alert.more_buttons (
                  'S',  'Copy NavDB Selection', 'One NavDB can only exist for one Supplier. Do you want to change the Supplier of this NavDB?',
                  'Yes',  'No') = '2' THEN
               		RAISE form_trigger_failure;
            		ELSE
               	  	UPDATE navdb
                    SET data_supplier = :copy_navdb.data_supplier
                		WHERE navdb_id = :navdb.navdb_id;

                    COMMIT;
                    v_out := 'DONE';
                END IF;
            /*ELSE   -- Start Fix SCR 7871.01 - Ashish N - 11-May-2018
           		dsp_msg (
                     'Navdb ''' || :COPY_NAVDB.new_navdb || ''' exists with a different FMS_ID, it can not be replaced. ' || CHR (10)
                    || 'Only the NAVDB with a same FMS_ID, its selection can be replaced.');
                  RAISE form_trigger_failure;*/ --Commented for the Fix SCR -06944 	-Priyanka
         		END IF;	
         -- End Fix SCR 7871.01 - Ashish N - 11-May-2018
       	 ELSE
            dsp_msg ( 'Note: The new NAVDB ID shall not be same to the current NAVDB ID.');
            GO_ITEM ('copy_navdb.new_navdb');
            RAISE form_trigger_failure;
         END IF; 
      END IF;

      IF V_OUT != 'DONE'  THEN
         BEGIN
            SELECT 'REPLACE'
               INTO p_copy_type
              FROM NAVDB
             WHERE navdb_id = :COPY_NAVDB.new_navdb;
             
-- Start fix SCR 7511-harikrishna-10-Aug-2017 
             
SELECT data_supplier 
INTO v_copy_navdb_ds
FROM navdb
WHERE navdb_id =:copy_navdb.new_navdb;

IF :copy_navdb.data_supplier != v_copy_navdb_ds  THEN
	    IF :navdb.fms_id  = p_fmsid THEN   -- Fix SCR 7871.01 - Ashish N - 11-May-2018
            IF display_alert.more_buttons (
                  'S',  'Copy NavDB Selection', 'One NavDB can only exist for one Supplier. Do you want to change the Supplier of this NavDB?',
                  'Yes',  'No') = '2' THEN
               RAISE form_trigger_failure;
            ELSE
            	v_change:='Y';
               UPDATE navdb
                    SET data_supplier = :copy_navdb.data_supplier
                WHERE navdb_id = :COPY_NAVDB.new_navdb;

               COMMIT;
              
            END IF;
       END IF;-- Fix SCR 7871.01 - Ashish N - 11-May-2018
END IF;
-- End Fix SCR 7511-harikrishna-10-Aug-2017

            --
            BEGIN
               SELECT 'REPLACE'
                 INTO p_copy_type
                 FROM NAVDB
                 WHERE navdb_id = :COPY_NAVDB.new_navdb
                -- AND FMS_ID = :NAVDB.fms_id   --Commented for the Fix SCR -06944 -Priyanka
                 AND data_supplier = :COPY_NAVDB.data_supplier;
            
            IF :navdb.fms_id  = p_fmsid THEN	  --Added if for the Fix SCR -06944 -Priyanka

               IF display_alert.more_buttons (
                     'S', 'Replace Selection', 'Navdb '''
                     || :COPY_NAVDB.new_navdb || ''' already exist,'  || CHR (10)
                     || 'Do you want to replace its selections with the selections of Navdb '''|| :NAVDB.NAVDB_ID  || '''?',
                     'Yes', 'No') = '2' THEN
                  p_copy_type := NULL;
 -- Start Fix SCR 7511-harikrishna-10-Aug-2017 Resetting the supplier back to original value.
                  IF v_change ='Y' THEN
              
              UPDATE navdb
                    SET data_supplier = v_copy_navdb_ds
                WHERE navdb_id = :COPY_NAVDB.new_navdb;

               COMMIT;
              
                  	
                  END IF;
 -- End Fix SCR 7511-harikrishna-10-Aug-2017
                  RAISE form_trigger_failure;
               ELSE
                  p_copy_type := 'REPLACE-OK';
               END IF;
            ELSE					--Start Fix for the SCR -06944 -Priyanka
            		IF display_alert.more_buttons (
                     'F', 'Replace Selection', 'NavDBs '''|| :COPY_NAVDB.new_navdb || ''||' and '||''''||:navdb.navdb_id||''' have different FMS_IDs. '|| 
                           CHR (10)|| 'Do you wish to proceed ?','Yes', 'No') = '2' THEN
                  p_copy_type := NULL;
                 
									IF v_change ='Y' THEN
					              
					              UPDATE navdb
					                    SET data_supplier = v_copy_navdb_ds
					                WHERE navdb_id = :COPY_NAVDB.new_navdb;
					
					               COMMIT;
					         END IF;
					                  RAISE form_trigger_failure;
					         ELSE
					                  p_copy_type := 'REPLACE-OK';
					         END IF;        	
             END IF;			--End Fix for the SCR -06944 -Priyanka
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  /*dsp_msg (
                     'Navdb ''' || :COPY_NAVDB.new_navdb || ''' exists with a different FMS_ID, it can not be replaced. ' || CHR (10)
                     || 'Only the NAVDB with a same FMS_ID, its selection can be replaced.');*/  --Commented for the Fix SCR -06944 -Priyanka
                  p_copy_type := NULL;
                  RAISE form_trigger_failure;
            END;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               p_copy_type := 'NEW';
         END;
      END IF;
   END IF;

 -- BEGIN FIX -- SCR 7789.01 - SHRIKANT K - 27-11-2018		
	
	IF :copy_navdb.new_navdb IS NOT NULL THEN
  	   SELECT COUNT(REC.RECORD_TYPE_CODE)
  	   INTO v_reccnt
              FROM FMS_DATA_TYPE FDT,
                   RECORD_TYPE REC
                   WHERE FDT.RECORD_TYPE_CODE = REC.RECORD_TYPE_CODE
                   AND FDT.FMS_ID = :NAVDB.FMS_ID
                   AND REC.RECORD_TYPE_CODE IN ('133','140','150','160')
                   AND FDT.REQUIRED_IND = 'Y'; -- FIX SCR 05448 -Ashish N- 27-APR-2020
     	 IF v_reccnt > 0 THEN
  	 			dsp_msg('This FMS ID requires "Fuel_Policy/APF" ');
  	 	END IF;		
	END IF;

-- END FIX -- SCR 7789.01 - SHRIKANT K - 27-11-2018	


   --
   IF p_copy_type = 'REPLACE-OK' THEN
      SET_APPLICATION_PROPERTY (cursor_style, 'BUSY');
     IF :navdb.fms_id  = p_fmsid THEN	  --Added if for the Fix SCR -06944 -Priyanka	
      NAVDB_UTIL.DELETE_NAVDB (:copy_navdb.new_navdb, v_out, p_copy_type);
     ELSE		--Start for the Fix SCR -06944 -Priyanka
     	NAVDB_UTIL.DELETE_FMS_NAVDB (:navdb.navdb_id,:copy_navdb.new_navdb, v_out, p_copy_type);
     END IF;	--End for the Fix SCR -06944 -Priyanka
   END IF;

   IF v_out = 'OK' THEN
      SET_APPLICATION_PROPERTY (cursor_style, 'BUSY');
      NAVDB_UTIL.DUPLICATE (:navdb.navdb_id, :copy_navdb.new_navdb, :copy_navdb.new_dcr, :copy_navdb.data_supplier, v_out, p_copy_type);

      -- End of mod for SCR 2098
      IF v_out = 'OK' THEN
         IF v_new_cust IS NULL THEN
            -- Begin Fix - SCR 5900.00 - Eswar KC - 22-May-2013 - Updated Insert Stmt to populate remianing columns in the table
            DECLARE
               ls_Tailored_Title   CUSTOMER.TAILORED_TITLE%TYPE;
            BEGIN
               SELECT TAILORED_TITLE
                 INTO ls_Tailored_Title
                 FROM CUSTOMER
                WHERE CUSTOMER_IDENT = :NAVDB.NAVDB_ID;

               INSERT INTO CUSTOMER (CUSTOMER_IDENT,
                                     CUSTOMER_NAME,
                                     COMMENTS,
                                     CREATE_DCR_NUMBER,
                                     CREATED_BY,
                                     CREATED_ON,
                                     TAILORED_TITLE)
                    VALUES (
                              :COPY_NAVDB.NEW_NAVDB,
                              :COPY_NAVDB.NEW_NAVDB,
                              'Created From NavDB Setup Form at Cycle '
                              || :GLOBAL.PROCESSING_CYCLE,
                              999,
                              USER,
                              SYSDATE,
                              ls_Tailored_Title);

               --insert into customer(customer_ident) values (:copy_navdb.new_navdb);
               COMMIT;
            END;
         -- End Fix - SCR 5900.00 - Eswar KC - 22-May-2013
         END IF;
         --
         IF p_copy_type = 'NEW'  THEN
         	 -- Begin Fix - SCR 5900.00 - Eswar KC - 22-May-2013 - Updated Insert Stmt to populate remianing columns in the table
         	 
					   INSERT INTO CUSTOMER_NAVDB (NAVDB_ID,
					                               CUSTOMER_IDENT,
					                               CREATE_DCR_NUMBER,
					                               CREATED_BY,
					                               CREATED_ON)
						     VALUES (:COPY_NAVDB.NEW_NAVDB,
						             :COPY_NAVDB.NEW_NAVDB,
						             999,
						             USER,
						             SYSDATE);
					  -- End Fix - SCR 5900.00 - Eswar KC - 22-May-2013                      
            COMMIT;
         /*
        for n in 1..i-1 loop
            insert into customer_navdb(navdb_id,customer_ident)
             values (:copy_navdb.new_navdb,new_cust(n));
        end loop;
        commit;*/
         END IF;

         SET_APPLICATION_PROPERTY (cursor_style, 'DEFAULT');
         IF p_copy_type = 'NEW' THEN
         	call_copy_tld_prc;	--SCR 5582 -- 29-SEP-2020
         ELSE
         IF :navdb.fms_id  = p_fmsid THEN	  --Added if for the Fix SCR -06944 -Priyanka	
         	dsp_msg (  '''' || :copy_navdb.new_navdb || ''' data has been successfully copied from ''' || :navdb.navdb_id || '''.' || CHR (10) || 'Please query the new NAVDB data and check it.');	
         ELSE																--Start for the Fix SCR -06944 -Priyanka	
         	display_alert.one_button
         			('F','Replace Selection','''' || :copy_navdb.new_navdb || ''' selection criteria has been successfully copied from ''' 
         			|| :navdb.navdb_id || '''.' || CHR (10) || 'Please query the new NavDB selection criteria.'
			        || CHR (10) || 'Please verify ORCs, Data Types and Media Type.');
         END IF;														--End for the Fix SCR -06944 -Priyanka	
      	 END IF;
      END IF;
   END IF;

   IF v_out IN ('OK', 'DONE') THEN
      :copy_navdb.new_navdb := NULL;
      :copy_navdb.new_cust := NULL;
      -- SHOW_VIEW ('MAIN');  -- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
    	SET_CANVAS_PROPERTY('SEL_CAN', TOPMOST_TAB_PAGE, 'MAIN' ); -- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014   
      Hide_View('FOCALS'); 	-- Fix - SCR 6927.01 - Eswar KC	
      GO_ITEM ('navdb.navdb_id');

      IF v_out = 'DONE' THEN
         dsp_msg ( 'NavDB '|| '''' || :navdb.navdb_id || ''' data supplier has been successfully moved to supplier ''' || :copy_navdb.data_supplier|| ''''||chr(10)||chr(10)||
                  '''Please use Copy Tailored data form to move TLD data for NavDB ''' || :navdb.navdb_id || ''''); -- Fix SCR 7150--Ashish--11-May-2017

      END IF;
   ELSE
      SET_APPLICATION_PROPERTY (cursor_style, 'DEFAULT');
      dsp_msg ('Copy Error:' || CHR (10) || v_out);
   END IF;
END;

 copyNavdbcancelwhenButtonPressed:
:copy_navdb.new_navdb := null;
:copy_navdb.new_cust  := null;
--show_view('MAIN'); 	-- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
SET_CANVAS_PROPERTY('SEL_CAN', TOPMOST_TAB_PAGE, 'MAIN' ); -- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
Hide_View('FOCALS'); -- Fix - SCR 6927.01 - Eswar KC	
go_item('navdb.navdb_id');


 copyGeoArptGrpnewNavdbwhenValidateItem:
-- Begin Fix - SCR 5329 - Eswar KC -08 Feb 2012
DECLARE
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
BEGIN
   IF :copy_navdb.new_navdb IS NOT NULL
   THEN
      FOR fms_id_rec IN fms_id_cur
      LOOP
         IF fms_id_rec.fms_id = :navdb.fms_id
         THEN
            IF forms_utilities.check_ident_for_alphanum (:copy_navdb.new_navdb)
            THEN
               display_alert.one_button
                  ('S',
                   'Change NavDB ID',
                      'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
                   || CHR (10)
                   || 'Change NavDB ID.'
                  );
               RAISE form_trigger_failure;
            END IF;
         END IF;
      END LOOP;
   END IF;
END;
-- End Fix - SCR 5329 - Eswar KC -08 Feb 2012

 copyGeoArptGrpcopywhenButtonPressed:
-- Begin Fix - SCR 5641 - Eswar KC - 5-Sep-2012 
DECLARE
   v_sout                  VARCHAR2 (300)      := 'OK';
   v_ncount                NUMBER;
   v_sdata_suppier         CHAR (1);
   v_sfms_id               navdb.fms_id%TYPE;
   v_nreplace              NUMBER (1)          := 0;
   v_nbutton               NUMBER;
   v_sgeo_area_icao_arpt   VARCHAR2 (100)      := NULL;
   v_sselcri               VARCHAR2 (4)        := NULL;
BEGIN	
   SELECT COUNT (fms_id)
     INTO v_ncount
     FROM navdb
    WHERE navdb_id = :copy_geo_arpt_grp.new_navdb;

   IF v_ncount = 0 THEN
      dsp_msg ('This NavDB ID does not Exists. Please Enter existing NavDB ID.');
      RAISE form_trigger_failure;
   END IF;

   IF :copy_geo_arpt_grp.new_dcr IS NULL THEN
      dsp_msg ('Please enter the create DCR number');
      GO_ITEM ('COPY_GEO_ARPT_GRP.new_dcr');
      RAISE form_trigger_failure;
   END IF;

   IF :copy_geo_arpt_grp.new_navdb IS NULL THEN
      dsp_msg ('Please enter the Copy-TO NAVDB ID');
      GO_ITEM ('COPY_GEO_ARPT_GRP.new_navdb');
      RAISE form_trigger_failure;
   ELSE
      IF LENGTH (:copy_geo_arpt_grp.new_navdb) > 3 THEN
         dsp_msg ('Currently, a NAVDB_ID shall be same to a Customer_id; it can not exceed 3 characters.');
         GO_ITEM ('COPY_GEO_ARPT_GRP.new_navdb');
         RAISE form_trigger_failure;
      END IF;
   END IF;

   IF RTRIM (:copy_geo_arpt_grp.data_supplier) IS NULL THEN
      :copy_geo_arpt_grp.data_supplier := :NAVDB.DATA_SUPPLIER;
   END IF;

   IF :copy_geo_arpt_grp.new_navdb = :navdb.navdb_id THEN
      dsp_msg ('Note: The new NavDB shall not be same to the current NAVDB ID.');
      GO_ITEM ('COPY_GEO_ARPT_GRP.new_navdb');
      RAISE form_trigger_failure;
   END IF;

   IF     :copy_geo_arpt_grp.geo_chk = 'N'
      AND :copy_geo_arpt_grp.ac_chk  = 'N'
      AND :copy_geo_arpt_grp.ic_chk  = 'N'
      AND :copy_geo_arpt_grp.ag_chk  = 'N' THEN
      dsp_msg ('Please select atleast one selection data you want to copy');
      GO_ITEM ('COPY_GEO_ARPT_GRP.GEO_CHK');
      RAISE form_trigger_failure;
   END IF;

   IF v_ncount = 1 THEN
      SELECT data_supplier, fms_id
        INTO v_sdata_suppier, v_sfms_id
        FROM navdb
       WHERE navdb_id = :copy_geo_arpt_grp.new_navdb;

      IF     :navdb.fms_id != v_sfms_id AND :copy_geo_arpt_grp.data_supplier = v_sdata_suppier THEN
         --
         IF :copy_geo_arpt_grp.geo_chk = 'Y' THEN
            v_sgeo_area_icao_arpt := v_sgeo_area_icao_arpt || 'GEO Area/';
            v_sselcri := v_sselcri || '1';
         ELSE
            v_sselcri := v_sselcri || '0';
         END IF;

         IF :copy_geo_arpt_grp.ac_chk = 'Y' THEN
            v_sgeo_area_icao_arpt := v_sgeo_area_icao_arpt || 'Area Code/';
            v_sselcri := v_sselcri || '2';
         ELSE
            v_sselcri := v_sselcri || '0';
         END IF;

         IF :copy_geo_arpt_grp.ic_chk = 'Y' THEN
            v_sgeo_area_icao_arpt := v_sgeo_area_icao_arpt || 'ICAO Code/';
            v_sselcri := v_sselcri || '3';
         ELSE
            v_sselcri := v_sselcri || '0';
         END IF;

         IF :copy_geo_arpt_grp.ag_chk = 'Y' THEN
            v_sgeo_area_icao_arpt := v_sgeo_area_icao_arpt || 'Airport Group ';
            v_sselcri := v_sselcri || '4';
         ELSE
            v_sselcri := v_sselcri || '0';
         END IF;

         v_sgeo_area_icao_arpt := RTRIM (v_sgeo_area_icao_arpt, '/');
         --
         v_nbutton := display_alert.more_buttons
                         ('S', 'Replace Selection', 'Navdb '''|| :copy_geo_arpt_grp.new_navdb || ''' exists with FMS_ID '
                          || v_sfms_id || '.'|| CHR (10)|| 'Only '|| v_sgeo_area_icao_arpt
                          || ' data will be copied. Do you want to continue..!!', 'Yes','No' );

         IF v_nbutton = 1 THEN
            SET_APPLICATION_PROPERTY (cursor_style, 'BUSY');
            cptsc.navdb_util.duplicate_geo (:navdb.navdb_id,:copy_geo_arpt_grp.new_navdb,:copy_geo_arpt_grp.new_dcr,
                                            :copy_geo_arpt_grp.data_supplier,v_sout,v_sselcri);

            IF v_sout = 'OK' THEN
               SET_APPLICATION_PROPERTY (cursor_style, 'DEFAULT');
               dsp_msg (   ''''|| :copy_geo_arpt_grp.new_navdb|| ''' data has been successfully copied from '''|| :navdb.navdb_id
                        || '''.'|| CHR (10)|| 'Please Check the '''|| :copy_geo_arpt_grp.new_navdb|| ''' data and made selections.');
            END IF;
         END IF;
      ELSIF    (    :navdb.fms_id != v_sfms_id AND :copy_geo_arpt_grp.data_supplier != v_sdata_suppier)
            OR (    :navdb.fms_id = v_sfms_id  AND :copy_geo_arpt_grp.data_supplier != v_sdata_suppier)THEN
         dsp_msg('Note: One NavDB can only exist for one Supplier. Please enter correct NavDB and Supplier.');
      ELSIF     :navdb.fms_id = v_sfms_id AND :copy_geo_arpt_grp.data_supplier = v_sdata_suppier THEN
      	dsp_msg(:copy_geo_arpt_grp.new_navdb|| ''' exists with same Supplier and FMS ID.'|| CHR (10)||
      					'To replace its selections with the selections of Navdb '''|| :navdb.navdb_id|| '''use Copy/Replace Button.');
       END IF;
   END IF;
END;
-- End Fix - SCR 5641 - Eswar KC - 5-Sep-2012

 copyGeoArptGrpcancelwhenButtonPressed:
:COPY_GEO_ARPT_GRP.NEW_NAVDB := null;
:COPY_GEO_ARPT_GRP.DATA_SUPPLIER  := :NAVDB.DATA_SUPPLIER;
--show_view('MAIN');  	-- commented - Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
SET_CANVAS_PROPERTY('SEL_CAN', TOPMOST_TAB_PAGE, 'MAIN' ); -- Fix - SCR 6503.01 - Eswar KC - 11-Nov-2014
Hide_View('FOCALS');  -- Fix - SCR 6927.01 - Eswar KC	
go_item('navdb.navdb_id');

 copyGeoArptGrpresetwhenButtonPressed:
go_block('COPY_GEO_ARPT_GRP');
:COPY_GEO_ARPT_GRP.GEO_CHK := 'N';
:COPY_GEO_ARPT_GRP.AC_CHK  := 'N';
:COPY_GEO_ARPT_GRP.IC_CHK  := 'N';
:COPY_GEO_ARPT_GRP.AG_CHK  := 'N';


 copyGeoArptGrpcheckAllwhenButtonPressed:
go_block('COPY_GEO_ARPT_GRP');
:COPY_GEO_ARPT_GRP.GEO_CHK := 'Y';
:COPY_GEO_ARPT_GRP.AC_CHK  := 'Y';
:COPY_GEO_ARPT_GRP.IC_CHK  := 'Y';
:COPY_GEO_ARPT_GRP.AG_CHK  := 'Y';


 copyGeoArptGrpnewDcrwhenValidateItem:
-- Begin Fix - SCR 5329 - Eswar KC -08 Feb 2012
DECLARE
   CURSOR fms_id_cur
   IS
      SELECT fms_id
        FROM flight_management_system
       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
         AND binary_format_type IN ('FD', 'NFD');
BEGIN
   IF :copy_navdb.new_navdb IS NOT NULL
   THEN
      FOR fms_id_rec IN fms_id_cur
      LOOP
         IF fms_id_rec.fms_id = :navdb.fms_id
         THEN
            IF forms_utilities.check_ident_for_alphanum (:copy_navdb.new_navdb)
            THEN
               display_alert.one_button
                  ('S',
                   'Change NavDB ID',
                      'For B787 or B747 databases, Characters I,O,Q or Z shall not be as a part of the Navdb Ident.'
                   || CHR (10)
                   || 'Change NavDB ID.'
                  );
               RAISE form_trigger_failure;
            END IF;
         END IF;
      END LOOP;
   END IF;
END;
-- End Fix - SCR 5329 - Eswar KC -08 Feb 2012

 customerInfocustomerEmailIdwhenValidateItem:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
IF :CUSTOMER_INFO.CUSTOMER_EMAIL_ID IS NULL THEN	
	 :CUSTOMER_INFO.CUST_EMAIL_FLAG := 'N';
END IF;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
-- Begin Fix - SCR 3693 - Sesha 
	:NAVDB.CUSTOMER_EMAIL_ID:=:CUSTOMER_INFO.CUSTOMER_EMAIL_ID;
-- End Fix - SCR 3693 - Sesha 

 customerInfocustEmailFlagwhenCheckboxChanged:
-- Begin Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016
If :CUSTOMER_INFO.CUSTOMER_EMAIL_ID IS NULL Then
	Dsp_Msg('Please Enter valid Customer e-mail Id.');
	:CUSTOMER_INFO.CUST_EMAIL_FLAG := 'N';
	Go_Item('CUSTOMER_INFO.CUSTOMER_EMAIL_ID');	
End If;
-- End Fix - SCR 6815.04 - Eswar KC - 18-Jan-2016





 customerInfocustEmailFlagwhenValidateItem:
-- Begin Fix - SCR 6815.04 - Eswar KC 
	:NAVDB.CUST_EMAIL_FLAG:=:CUSTOMER_INFO.CUST_EMAIL_FLAG;
-- End Fix - SCR 6815.04 - Eswar KC

 customerInfonoteswhenValidateItem:
-- Begin Fix - SCR 3693 - Sesha 
	:NAVDB.NOTES:=:CUSTOMER_INFO.NOTES;
-- End Fix - SCR 3693 - Sesha 

 navdbDeliveryFormatMediachkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('NAVDB_DELIVERY_FORMAT_MEDIA','DeSelect_Group',:NAVDB_DELIVERY_FORMAT_MEDIA.chk,:NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE,NULL);
else
	:NAVDB_DELIVERY_FORMAT_MEDIA.chk := 'N';
end if;	


 navdbDeliveryFormatMediaselectwhenButtonPressed:
-- Beign Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018
-- Replaced Table Opertor Requested Changes,fms_orc to Data Manipulation Routine and fms_dmr
-- and renamed column names from ORC_ID to DMR_ID, ORC_DESCR to DMR_DESC
if :system.mode = 'NORMAL' then
	Set_Application_Property(cursor_style,'BUSY');
	DECLARE
		group_id     recordgroup := find_group('DeSelect_Group');
		total_rows   number := get_group_row_count(group_id);
  	v_FORMAT_MEDIA_TYPE       varchar2(50);
	BEGIN	
		check_save;
		if total_rows > 0 then
			for i in 1..total_rows loop
 				v_FORMAT_MEDIA_TYPE := get_group_char_cell('DeSelect_Group.item1',i); 
 				Delete from NAVDB_DELIVERY_FORMAT_MEDIA 
        where navdb_id = :navdb.navdb_id and 
        format_media_type = v_format_media_type;
--Begin SCR -- 7779 - Shrikant K -- 23/July-2018    			 	
			 	IF v_format_media_type like 'BRGA_LOCAL_CD_700MB_EMBRAER_v3_1' AND :NAVDB.BINARY_FORMAT_TYPE = 'B31' THEN
			 		Delete from NAVDB_ORC 
        	where ORC_ID = 'OR704'
        	and navdb_id = :NAVDB.NAVDB_ID ;
        End If;	
--End SCR -- 7779 - Shrikant K -- 23/July-2018
			end loop;
 			COMMIT;
 			Message('Record has been saved successfully');--Fix SCR 0087 -- Madhu -- 16-Mar-2012	
	 		delete_group_row(group_id,ALL_ROWS);
 			QUERY_BLOCK_RECORDS('FMS_DELIVERY_FORMAT_MEDIA','INITIAL');
 			QUERY_BLOCK_RECORDS('NAVDB_DELIVERY_FORMAT_MEDIA');
		end if;	
	END;
	Set_Application_Property(cursor_style,'DEFAULT');
end if;
-- end Fix - SCR 7773.01 -Shrikant Kunte  -- 28-Aug-2018





 navdbDeliveryFormatMediaresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('DeSelect_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('NAVDB_DELIVERY_FORMAT_MEDIA');
end if;	

 navdbDeliveryFormatMediacheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('NAVDB_DELIVERY_FORMAT_MEDIA','DeSelect_Group');
end if;	



 navdbDeliveryFormatMediacrateIndwhenCheckboxChanged:
-- Start Fix SCR 7899.04- Ashish N - 20-Jul-2018
DECLARE
	ls_Crate VARCHAR2(1);	
BEGIN
	ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
	IF ls_Crate = 'N' THEN
		IF :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND = 'Y' THEN
		:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND := 'N';
		dsp_msg('Selected Media Type cannot be Crated');
		RAISE Form_Trigger_Failure;
		END IF; 
		--Start SCR 7960.01 - Ashish N - 20-AUG-2018
	ELSE
	  	IF :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND = 'Y' THEN
	  		dsp_msg('Selected Media Type is enabled for Crated');
	  		ELSE
					null;		
	  		END IF;
	  -- END SCR 7960.01 - Ashish N - 20-AUG-2018
	END IF;
END;

IF nvl(:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB,'-') != :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND THEN
	:NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND_DB := :NAVDB_DELIVERY_FORMAT_MEDIA.CRATE_IND;
END IF;
-- End Fix SCR 7899.04- Ashish N - 20-Jul-2018
commit_form; --Fix SCR 7960.01 -Ashish N- 09-MAY-2018

 fmsDeliveryFormatMediachkwhenCheckboxChanged:
if :system.mode = 'NORMAL' then
	SET_GROUP('FMS_DELIVERY_FORMAT_MEDIA','Select_Group',:FMS_DELIVERY_FORMAT_MEDIA.chk,:FMS_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
else
	:FMS_DELIVERY_FORMAT_MEDIA.chk := 'N';
end if;	

 fmsDeliveryFormatMediaselectwhenButtonPressed:
if :system.mode = 'NORMAL' then
	DECLARE
		group_id     recordgroup := find_group('Select_Group');
		total_rows   number := get_group_row_count(group_id);
		v_FORMAT_MEDIA_TYPE       varchar2(50);
		v_fms_id varchar2(30) := :navdb.fms_id; -- Fix SCR 7899.04- Ashish - 16-Jul-2018
		v_format_media varchar2(50); -- Fix SCR 7899.04- Ashish - 16-Jul-2018
			ls_Crate VARCHAR2(1);	
	BEGIN	
		if total_rows > 0 then
			go_block('NAVDB_DELIVERY_FORMAT_MEDIA');
			for i in 1..total_rows loop
 			v_FORMAT_MEDIA_TYPE := get_group_char_cell('Select_Group.item1',i);
 				if :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE is not null then
 					create_record;
	 			end if;	
 	 			:NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE := v_FORMAT_MEDIA_TYPE;
-- Start Fix SCR 7899.04 - Ashish N- 20-JUL-2018
 	 			:NAVDB_DELIVERY_FORMAT_MEDIA.crate_ind := 'N';  --Fix SCR 7960.01 - Ashish N - 20-AUG-2018
 	 			:NAVDB_DELIVERY_FORMAT_MEDIA.crate_ind_db := :NAVDB_DELIVERY_FORMAT_MEDIA.crate_ind;  
				ls_Crate:=populate_crate_ind(:Navdb.fms_id, :NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE);
					IF ls_Crate = 'Y' THEN
  				set_item_instance_property('NAVDB_DELIVERY_FORMAT_MEDIA.FORMAT_MEDIA_TYPE', current_record,visual_attribute,'FORMAT_MEDIA_TYPE');
					END IF;
-- End Fix SCR 7899.04 - Ashish N- 20-JUL-2018
--Begin SCR -- 7779.05 - Shrikant K -- 23/July-2018 
			IF :navdb.binary_format_type = 'B31' AND 	v_FORMAT_MEDIA_TYPE LIKE '%BRGA_LOCAL_CD_700MB_EMBRAER_v3_1%' THEN 
	 			 INSERT INTO navdb_orc VALUES ('OR704', :NavDB.NavDB_ID, NULL, :global.dcr_number, USER, SYSDATE, 'Y');					
			END IF;			
--End SCR -- 7779.05 - Shrikant K -- 23/July-2018 				
    	end loop;		
			delete_group_row(group_id,ALL_ROWS);
 			commit_form;
 --	QUERY_BLOCK_RECORDS('FMS_DELIVERY_FORMAT_MEDIA');
	 	end if;	
	END;
end if;	




 fmsDeliveryFormatMediaresetwhenButtonPressed:
if :system.mode = 'NORMAL' then
	delete_group_row('Select_Group',ALL_ROWS);
	QUERY_BLOCK_RECORDS('FMS_DELIVERY_FORMAT_MEDIA','INITIAL');
end if;	

 fmsDeliveryFormatMediacheckAllwhenButtonPressed:
if :system.mode = 'NORMAL' then
	sel_all('FMS_DELIVERY_FORMAT_MEDIA','Select_Group');
end if;	




 suaRulesdonewhenButtonPressed:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
if :parameter.work_type != 'VIEW' then

DECLARE
   v_num         NUMBER         := 0;
   v_button      NUMBER (1);
BEGIN
   FIRST_RECORD;

   LOOP
      IF :sua_rules.chk = 'Y'
      THEN
         v_num := v_num + 1;
      END IF;

      EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
      NEXT_RECORD;
   END LOOP;

   IF v_num = 0
   THEN
      v_button :=
         display_alert.more_buttons
                 ('S',
                  'NO CRITERIA VALUE',
                     'No value is selected, or you deseleted all the value.'
                  || CHR (10)
                  || 'Are you sure this is what it shall be?'
                  || CHR (10),
                  'Yes',
                  'Cancel'
                 );
      IF v_button = 1
      THEN
         DELETE FROM selection_criteria_value
               WHERE select_by_id = :rules.select_by_id;

         IF :rules.LIST != :rules.old_list
         THEN
            :rules.LIST := :rules.old_list;
         ELSE
            :rules.LIST := 'N';
            UPDATE navdb_select_criteria
               SET include_exclude_ind = :rules.LIST
             WHERE select_by_id = :rules.select_by_id;
         END IF;
         :control_block.did := 'Y';
      ELSE
         RAISE form_trigger_failure;
      END IF;
   ELSE
      DELETE FROM selection_criteria_value
            WHERE select_by_id = :rules.select_by_id;
      -- Populate CONTROLLED AIRSPACE
      FIRST_RECORD;
      IF :datatyp_rad.record_type_descr LIKE 'CONTROLLED AIRSPACE'
      THEN
         v_num := 0;
         LOOP
            IF :sua_rules.chk = 'Y'
            THEN
              v_num := populate_sua_records (v_num, :sua_rules.TYPE); 
            END IF;
            EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
            NEXT_RECORD;
         END LOOP;
      END IF;
      -- End of Populate CONTROLLED AIRSPACE
      -- Populate RESTRICTED AIRSPACE  
      IF :datatyp_rad.record_type_descr LIKE 'RESTRICTED AIRSPACE'
      THEN
         v_num := 0;
         LOOP
            IF :sua_rules.chk = 'Y'
            THEN
               v_num := populate_sua_records (v_num, :sua_rules.TYPE); 
            END IF;
            EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
            NEXT_RECORD;
         END LOOP;
      END IF;
      -- End of Populate RESTRICTED AIRSPACE
      IF :rules.LIST != :rules.old_list
      THEN
         UPDATE navdb_select_criteria
            SET include_exclude_ind = :rules.LIST
          WHERE select_by_id = :rules.select_by_id;
      END IF;
      :control_block.did := 'Y';
   END IF;
   FORMS_DDL ('COMMIT');
END;
end if;
--
:rules.old_list := :rules.list;
hide_view('sua_rules');
go_block('rules');
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 suaRulescancelwhenButtonPressed:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
first_record;
:rules.list := :rules.old_list;
:control_block.did := 'Y';
hide_view('SUA_RULES');
go_block('rules');
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 suaRulescheckwhenButtonPressed:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
first_record;
loop
	exit when rtrim(:SUA_RULES.TYPE) is null;
	if :SUA_RULES.TYPE is not null then
		:SUA_RULES.chk := 'Y';
	end if;	
	next_record;
end loop;
first_record;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 suaRulesclearwhenButtonPressed:
-- Begin Fix - SCR 5026 - Eswar KC - 28-Feb-2011
first_record;
loop
	:SUA_RULES.chk := 'N';
	exit when :system.last_record = 'TRUE';
	next_record;
end loop;
first_record;
-- End Fix - SCR 5026 - Eswar KC - 28-Feb-2011

 controlBlockworldGeowhenCheckboxChanged:
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			--madhu
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.WORLD_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'WORLD',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for World wide Region.'); --Fix SCR 7273 --Madhu --29-AUG-2017
	  		--
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'N90000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N90000000','E180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'S90000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'S90000000','E180000000');
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.WORLD_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = 'WORLD'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.WORLD_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.WORLD_GEO := :PARAMETER.WORLD_GEO;--Fix SCR 5820 -- Madhu --15-Feb-2013
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.WORLD_GEO = 'Y' then
		:CONTROL_BLOCK.WORLD_GEO := 'N';
	elsif :CONTROL_BLOCK.WORLD_GEO = 'N' then
		:CONTROL_BLOCK.WORLD_GEO := 'Y';
	end if;
end if;	

 controlBlocknorthAmericaGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.NORTH_AMERICA_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$NORTH_AMERICA',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for North America Region.');
	  		--
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'N90000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N05000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N05000000','W020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'N90000000','W020000000');
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.NORTH_AMERICA_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
	 			begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$NORTH_AMERICA'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.NORTH_AMERICA_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
		end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.NORTH_AMERICA_GEO := :PARAMETER.NORTH_AMERICA_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.NORTH_AMERICA_GEO = 'Y' then
		:CONTROL_BLOCK.NORTH_AMERICA_GEO := 'N';
	elsif :CONTROL_BLOCK.NORTH_AMERICA_GEO = 'N' then
		:CONTROL_BLOCK.NORTH_AMERICA_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlocksouthAmericaGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.SOUTH_AMERICA_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$SOUTH_AMERICA',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for South America Region.');
	  		--
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'S90000000','W120000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N35000000','W120000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N30000000','W090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'N30000000','W020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,50,'S90000000','W020000000');
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.SOUTH_AMERICA_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$SOUTH_AMERICA'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.SOUTH_AMERICA_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.SOUTH_AMERICA_GEO := :PARAMETER.SOUTH_AMERICA_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.SOUTH_AMERICA_GEO = 'Y' then
		:CONTROL_BLOCK.SOUTH_AMERICA_GEO := 'N';
	elsif :CONTROL_BLOCK.SOUTH_AMERICA_GEO = 'N' then
		:CONTROL_BLOCK.SOUTH_AMERICA_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockafricaGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then
		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.AFRICA_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$AFRICA',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Africa Region.');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'S90000000','W030000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N40000000','W030000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N40000000','E070000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'S90000000','E070000000');
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.AFRICA_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$AFRICA'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.AFRICA_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.AFRICA_GEO := :PARAMETER.AFRICA_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.AFRICA_GEO = 'Y' then
		:CONTROL_BLOCK.AFRICA_GEO := 'N';
	elsif :CONTROL_BLOCK.AFRICA_GEO = 'N' then
		:CONTROL_BLOCK.AFRICA_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockeuropeGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.EUROPE_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$EUROPE',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Europe Region.'); 
	  		--
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'N90000000','W055000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N25000000','W055000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N25000000','E045000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'N90000000','E045000000');
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.EUROPE_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$EUROPE'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.EUROPE_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.EUROPE_GEO := :PARAMETER.EUROPE_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.EUROPE_GEO = 'Y' then
		:CONTROL_BLOCK.EUROPE_GEO := 'N';
	elsif :CONTROL_BLOCK.EUROPE_GEO = 'N' then
		:CONTROL_BLOCK.EUROPE_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockeurasiaGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.EURASIA_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$EURASIA',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Eurasia East Region.');
	  		--east
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'N90000000','E020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N35000000','E020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N35000000','E070000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'N15000000','E100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,50,'N15000000','E130000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,60,'N55000000','E180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,70,'N90000000','E180000000');
	  		-- Begin Fix SCR 7887.01 --03-FEB-2019 -- Venkat M
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,80,'N90000000','E020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,90,'N90000000','W180000000');	  		
	  		-- End Fix SCR 7887.01 --03-FEB-2019 -- Venkat M
	  		--west
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,100,'N55000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,110,'N60000000','W170000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,120,'N90000000','W170000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,130,'N90000000','W180000000');
				
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.EURASIA_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$EURASIA'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.EURASIA_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.EURASIA_GEO := :PARAMETER.EURASIA_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.EURASIA_GEO = 'Y' then
		:CONTROL_BLOCK.EURASIA_GEO := 'N';
	elsif :CONTROL_BLOCK.EURASIA_GEO = 'N' then
		:CONTROL_BLOCK.EURASIA_GEO := 'Y';
	end if;
end if;
-- EndR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockmiddleEastGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.MIDDLE_EAST_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$MIDDLE_EAST',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Middle East Region.');
	  		--
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'S90000000','E050000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N00000000','E050000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N20000000','E020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'N43000000','E020000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,50,'N43000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,60,'N12000000','E118000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,70,'S90000000','E118000000');
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.MIDDLE_EAST_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$MIDDLE_EAST'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.MIDDLE_EAST_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.MIDDLE_EAST_GEO := :PARAMETER.MIDDLE_EAST_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.MIDDLE_EAST_GEO = 'Y' then
		:CONTROL_BLOCK.MIDDLE_EAST_GEO := 'N';
	elsif :CONTROL_BLOCK.MIDDLE_EAST_GEO = 'N' then
		:CONTROL_BLOCK.MIDDLE_EAST_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockpacificGeowhenCheckboxChanged:
-- Begin Fix SCR 7887.01 -- Venkat M - 06-Dec-2018
if :parameter.work_type != 'VIEW' then

		declare
			v_id number(38);
			v_button number(1);
			v_nAllow_update   NUMBER := 0;
   		v_cNavdb_Block    VARCHAR2 (30) := 'NAVDB';
		begin	

		 v_nAllow_update := CHECK_VALID_NAVDB(:GLOBAL.processing_cycle, :GLOBAL.dcr_number,:NAVDB.DATA_SUPPLIER,name_in(v_cNavdb_Block||'.navdb_id'));
		
		IF v_nAllow_update = 1 THEN
			if :CONTROL_BLOCK.PACIFIC_GEO = 'Y' then
	  		select select_by_id_seq.nextval into v_id from dual;
	  		insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
	  		values(v_id,'$PACIFIC',:navdb.navdb_id);
	  		create_default_criteria(v_id,null,null,null,null,null);
	  		display_alert.one_button('S','Default SC','Default Selection Criteria is created for Pacific East Region.');
	  		--east
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,10,'S90000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,20,'N20000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,30,'N75000000','E180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,40,'S90000000','E180000000');

				-- Begin Fix SCR 7887.01 -- Venkat M 03-FEB-2019
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,50,'S90000000','E090000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,60,'S90000000','W180000000');
	  		-- End Fix SCR 7887.01 -- Venkat M 03-FEB-2019
	  		--west
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,70,'N75000000','W180000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,80,'N10000000','W100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,90,'S90000000','W100000000');
	  		insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
	  		values(v_id,100,'S90000000','W180000000');
	  			  		
				set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'CHECKED');
			elsif :CONTROL_BLOCK.PACIFIC_GEO = 'N' then
				v_button := DISPLAY_ALERT.MORE_BUTTONs('S','DELETE GEOGRAPHIC AREA POINT',
	 				'Delete this record will also delete its geographic points and associated criterias.'||chr(10)||
	 				'Pick your choice carefully:'||chr(10)||chr(10),'Delete All','Cancel');
	 			IF v_button = 1 then
					begin
						select select_by_id into v_id
						from select_by_geographic_area
						where geo_area_name = '$PACIFIC'
						and navdb_id = :navdb.navdb_id;
						--
						delete from selection_criteria_value
						where select_by_id in (select select_by_id
																	 from navdb_select_criteria
																	 where geo_area_id = v_id
																	 and navdb_id = :navdb.navdb_id);
						--
						delete from navdb_select_criteria
						where geo_area_id = v_id
						and navdb_id = :navdb.navdb_id;
						--
						delete from geographic_area_point
						where select_by_id = v_id;
						--
						delete from select_by_geographic_area
						where select_by_id = v_id;
						--				
					exception
						when no_data_found then
						null;
					end;	
					set_item_instance_property(:system.cursor_item,current_record, visual_attribute,'PLAIN');
	 			else
	 				:CONTROL_BLOCK.PACIFIC_GEO := 'Y';
	 				raise form_trigger_failure;
	 			end if;	
			end if;
			forms_ddl('commit');
		ELSE
			:CONTROL_BLOCK.PACIFIC_GEO := :PARAMETER.PACIFIC_GEO;
			dsp_action_msg ('U',NULL, name_in('GLOBAL.dcr_number'),:GLOBAL.processing_cycle,name_in(v_cNavdb_Block||'.navdb_id'));
		END IF;
	end;
else
	if :CONTROL_BLOCK.PACIFIC_GEO = 'Y' then
		:CONTROL_BLOCK.PACIFIC_GEO := 'N';
	elsif :CONTROL_BLOCK.PACIFIC_GEO = 'N' then
		:CONTROL_BLOCK.PACIFIC_GEO := 'Y';
	end if;
end if;	
-- End Fix SCR 7887.01 -- Venkat M - 06-Dec-2018

 controlBlockcustomerwhenButtonPressed:
if :navdb.navdb_id is not null then
	check_did('Main Button Check');
	check_save;
	set_button_property('CUSTOMER');
	show_view('cust');
	go_block('customer_navdb');
else
	dsp_msg('Please execute a query first.');
	go_item('navdb.navdb_id');			
end if;

 controlBlockreportwhenButtonPressed:
if :navdb.navdb_id is not null then
	declare
		pl_id ParamList; 
		v_selections  number := 0;
	BEGIN 
  	if :control_block.did = 'Y' then
			check_save;
		end if;	
  	check_did('Main Button Check');
  	select count(*) 
  	into   v_selections
  	from   navdb_select_criteria
  	where  navdb_id = :navdb.navdb_id;
  	if v_selections <= 0 then
    	dsp_msg('There are no selections for this NAVDB!  Enter some selection criteria and try again!');
    	raise form_trigger_failure;
  	end if;
  	IF :CONTROL_BLOCK.REP_TYPE = 'P' THEN
			pl_id := Get_Parameter_List('tmpreport'); 
  		IF NOT Id_Null(pl_id) THEN 
    		Destroy_Parameter_List( pl_id ); 
  		END IF; 
  		pl_id := Create_Parameter_List('tmpreport'); 
  		Add_Parameter(pl_id,'P_NAVDBID',TEXT_PARAMETER,:navdb.navdb_id);
  		Add_Parameter(pl_id,'P_CYCLE',TEXT_PARAMETER,:global.processing_cycle);
  		Add_Parameter(pl_id, 'PARAMFORM', TEXT_PARAMETER, 'NO');
  		Add_Parameter(pl_id, 'ORACLE_SHUTDOWN', TEXT_PARAMETER, 'YES'); --to close report window
  		--** Run the report synchronously, passing the parameter list
  		/*******************************************
   		Code modified by PITSS.CON
   		RUN_PRODUCT Replaced
 			*******************************************/
 
			RP2RRO.RP2RRO_RUN_PRODUCT( REPORTS
               ,lower('selection_criteria')
               ,ASYNCHRONOUS
               ,RUNTIME
               ,FILESYSTEM
               ,pl_id
               ,NULL); 
  	--Begin Fix SCR -5684 -- Venkat M 19-May-2020
  	ELSE
  			EXPORT_CSV.Export_Selection_Criteria;
  	END IF;		
  	--End Fix SCR -5684 -- Venkat M 19-May-2020
  END;
  	
else
	dsp_msg('Please execute a query first.');
	go_item('navdb.navdb_id');			
end if;




 controlBlockmoveOkwhenButtonPressed:
if :SELECT_FROM_GROUPS.SELECTED_GROUP is not null then	
Set_Application_Property(cursor_style,'BUSY');
DECLARE
	group_id     recordgroup := find_group('DeSelect_Group');
	total_rows   number := get_group_row_count(group_id);
	v_ident      varchar2(38);
	v_icao       varchar2(38);

BEGIN	
	if :global.moving_group = 'airport' then
			for i in 1..total_rows loop
 			v_ident := get_group_char_cell('DeSelect_Group.item1',i); 
			v_icao := get_group_char_cell('DeSelect_Group.item2',i); 
			
 			update airport_to_select
			set select_by_id = :SELECT_FROM_GROUPS.SELECTED_GROUP
			where select_by_id = :select_by_airport_group.select_by_id
			and airport_ident = v_ident
			and airport_icao  = v_icao; 		
		end loop;
			
 		COMMIT;
		delete_group_row(group_id,ALL_ROWS);
 		QUERY_BLOCK_RECORDS('STD_AIRPORT','INITIAL');
 		QUERY_BLOCK_RECORDS('AIRPORT_TO_SELECT');
	elsif :global.moving_group = 'heliport' then
		for i in 1..total_rows loop
 			v_ident := get_group_char_cell('DeSelect_Group.item1',i); 
			v_icao := get_group_char_cell('DeSelect_Group.item2',i); 		
 			update heliport_to_select
			set select_by_id = :SELECT_FROM_GROUPS.SELECTED_GROUP
			where select_by_id = :select_by_heliport_group.select_by_id
			and heliport_ident = v_ident
			and heliport_icao  = v_icao;		
 		end loop;
 		COMMIT;
		delete_group_row(group_id,ALL_ROWS);
 		QUERY_BLOCK_RECORDS('STD_HELIPORT','INITIAL');
 		QUERY_BLOCK_RECORDS('HELIPORT_TO_SELECT');	
	end if;				
END;
Set_Application_Property(cursor_style,'DEFAULT');
--
go_block(:global.moving_group||'_TO_SELECT');
:control_block.apt_cnt:=0; -- Fix SCR 7016.01 - 22-03-2017- Ashish N
end if;

 controlBlockmoveCancelwhenButtonPressed:
-- Begin Fix - SCR 3492 - Sesha - 20-Oct-2008
go_block(:global.moving_group||'_TO_SELECT');
-- End Fix - SCR 3492 - Sesha - 20-Oct-2008


 controlBlockpbViewTldDatawhenButtonPressed:
-- Begin Fix -SCR 4308 - Sesha - 23-Feb-2009
-- Begin Fix -SCR 3492 - Sesha - 20-Oct-2008
/*:global.nav_ident := :navdb.navdb_id;
open_form('ASSOCIATED_TLD_DATA', activate, session, share_library_data);*/
-- End Fix -SCR 3492 - Sesha - 20-Oct-2008	
DECLARE
	cursor get_icao_S is
	  select Airport_icao
	  from   pl_std_Airport
	  where  Airport_ident = :control_block.airport_ident --Fix -SCR 5694 - Devi - 01-Oct-2012 Replaced :control_block.apt_ident_temp with :control_block.airport_ident 
	   --:control_block.apt_ident_temp --Fix -SCR 0087 - Madhu - 25-Apr-2012
	  and    data_supplier = :navdb.data_supplier
		and processing_cycle = :global.processing_cycle
		and validate_ind in ('Y','S','H','O');
	cursor get_icao_T is
	  select Airport_icao
	  from   pl_tld_Airport
	  where  Airport_ident = :control_block.airport_icao --Fix -SCR 5694 - Devi - 01-Oct-2012 Replaced :control_block.apt_icao_temp with :control_block.airport_icao 
	  --:control_block.apt_ident_temp --Fix -SCR 0087 - Madhu - 25-Apr-2012
	  and    data_supplier = :navdb.data_supplier
		and    processing_cycle = :global.processing_cycle
		and    customer_ident IN (SELECT CUSTOMER_IDENT 
															 FROM   CUSTOMER_NAVDB
															 WHERE  NAVDB_ID = :NAVDB.NAVDB_ID)
		and    validate_ind in ('Y','S','H','O');	 
	v_icao   varchar2(2);
	v_icao2  varchar2(2);
	v_exist  number(1);
	v_no_icao    exception;
--Begin Fix SCR 5820 --Madhu --21-Feb-2013	
	pl_id       	ParamList;
	v_vForm_Name	VARCHAR2(100) := get_application_property(CURRENT_FORM_NAME);
--End Fix SCR 5820 --Madhu --21-Feb-2013
	BEGIN
	:control_block.apt_ident_temp:=:control_block.airport_ident;   --Fix -SCR 5694 - Devi - 01-Oct-2012
 	:control_block.apt_icao_temp:=:control_block.airport_icao;     --Fix -SCR 5694 - Devi - 01-Oct-2012
	:global.nav_ident := :navdb.navdb_id;
	:global.airport_id:= :control_block.apt_ident_temp; --Fix -SCR 0087 - Madhu - 25-Apr-2012
	if :control_block.apt_ident_temp is not null and :control_block.apt_icao_temp is null then --Fix -SCR 0087 - Madhu - 25-Apr-2012
	   begin
				open get_icao_S;
			  fetch get_icao_S into v_icao;
	  	  if get_icao_S%notfound = TRUE then
	 				raise v_no_icao;
	  		else
	  			fetch get_icao_S into v_icao2;
	    		if get_icao_S%notfound = TRUE then
	    			v_exist := 1;
	    		else
	    		  v_exist := 2;		
	    		end if;
				end if;
			exception
				when v_no_icao then	
				begin
					open get_icao_T;
			  	fetch get_icao_T into v_icao;
	  	  	if get_icao_T%notfound = TRUE then
	 					raise v_no_icao;
	  			else
	  				fetch get_icao_T into v_icao2;
	    			if get_icao_T%notfound = TRUE then
	    				v_exist := 1;
	    			else
	    		  	v_exist := 2;		
	    			end if;
					end if;				
				exception
					when v_no_icao then	
						v_exist := 0;
					when others then
						dsp_msg(sqlerrm);
						raise form_trigger_failure;
				end;		
				when others then
						dsp_msg(sqlerrm);
						raise form_trigger_failure;
	    end;	
     :global.airport_ic:= v_icao;
  elsif :control_block.apt_ident_temp is not null and :control_block.apt_icao_temp is not null then
	   :global.airport_ic:= :control_block.apt_icao_temp; --Fix -SCR 0087 - Madhu - 25-Apr-2012
  end if;
--Begin Fix SCR 5820 --Madhu --21-Feb-2013
	pl_id := Get_Parameter_List('tld_data');
	IF NOT Id_Null(pl_id) THEN 
		Destroy_Parameter_List(pl_id); 
	END IF;   	
	pl_id := Create_Parameter_List('tld_data');
	Add_Parameter(pl_id, 'UPD_REC',TEXT_PARAMETER,:parameter.upd_rec);
	Add_Parameter(pl_id, 'LAST_FORM',TEXT_PARAMETER,v_vForm_Name);
	open_form( lower('ASSOCIATED_TLD_DATA') ,activate ,session ,share_library_data,pl_id);
--End Fix SCR 5820 --Madhu --21-Feb-2013	
EXCEPTION
	when others then
		message(sqlerrm);
END;
-- End Fix -SCR 4308 - Sesha - 23-Feb-2009



 controlBlockfindAirportwhenButtonPressed:
check_save;
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one Airport Data.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked Airport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	go_block('AIRPORT_TO_SELECT');
	raise form_trigger_failure;
elsif get_group_row_count(find_group('Select_Group')) > 0 then
	DSP_MSG('You have checked at lease one Airport data.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked Airport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	go_block('STD_AIRPORT');
	raise form_trigger_failure;
end if;
--
if rtrim(:CONTROL_BLOCK.airport_ident) is null then
	dsp_msg('Please enter the airport_ident');
	go_item('control_BLOCK.airport_ident');
	raise form_trigger_failure;
else
	check_airport(:CONTROL_BLOCK.airport_ident,:CONTROL_BLOCK.airport_icao,'BUTTON');
end if;

 controlBlockfindHeliportwhenButtonPressed:
check_save;
if get_group_row_count(find_group('DeSelect_Group')) > 0 then
	DSP_MSG('You have checked at lease one Heliport Data.'||Chr(10)||chr(10)||
					'Click the ''De Select'' button to De Select the checked Heliport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	go_block('Heliport_TO_SELECT');
	raise form_trigger_failure;
elsif get_group_row_count(find_group('Select_Group')) > 0 then
	DSP_MSG('You have checked at lease one Heliport data.'||Chr(10)||chr(10)||
					'Click the ''Select'' button to select the checked Heliport.'||chr(10)||
					'Click the ''Reset Check'' button to clear all the check(s)');
	go_block('STD_Heliport');
	raise form_trigger_failure;
end if;
--
if rtrim(:CONTROL_BLOCK.Heliport_ident) is null then
	dsp_msg('Please enter the Heliport_ident');
	go_item('control_BLOCK.Heliport_ident');
	raise form_trigger_failure;
else
	check_Heliport(:CONTROL_BLOCK.Heliport_ident,:CONTROL_BLOCK.Heliport_icao,'BUTTON');
end if;

 controlBlocksourceAgwhenListChanged:
populate_target_ag;

 controlBlocksaveAirportgroupwhenButtonPressed:
--Start SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
Declare
		v_out varchar2(200);	
		v_button number(1);
Begin  
		IF :Parameter.Work_Type != 'VIEW' THEN
	  	IF :control_block.source_ag is NULL THEN
	  		dsp_msg('Please select Source Airport Group');
	  	   RAISE form_trigger_failure;
	  	END IF;
	  		IF :control_block.target_ag is NULL THEN
	  		dsp_msg('Please select Target Airport Group');
	  	   RAISE form_trigger_failure;
	  	END IF;
				v_button := DISPLAY_ALERT.MORE_BUTTONS('S','Copy Airport Group Selection criteria',
  			'Do you want to copy airport group selection criteria'||chr(10)||'Please confirm'||chr(10),
  			'Yes','Cancel');
  					IF v_button = 1 THEN
  				 		navdb_util.dup_apt_grp(
  				 												:navdb.navdb_id,
  				 												:global.dcr_number,
  				 												:control_block.source_ag,
  				 												:control_block.target_ag,
  				 												v_out
  				 												);
						IF V_out = 'OK' THEN
						dsp_msg('Airport Group seletion criteria has been successfully copied from' ||' '||:control_block.source_ag||' '||'to'||' '||:control_block.target_ag);
				Else
						dsp_msg(v_out);
				END IF;
	
  					Else
  						null;	
  					END IF;
  	END IF;
End;

--End SCR 7260.01 - Ashish Niranjan - 30-Nov-2017

 controlBlockplotwhenButtonPressed:
DECLARE 
   ls_Plotting_Function_Command        VARCHAR2(600);
   ls_Plotting_Function_Dir            VARCHAR2(600);   
   ls_Call_Plotting_Function           PLS_INTEGER := 1; 
   ls_Call_Plotting_Function1          PLS_INTEGER;
   ls_Form_Id                          FORMMODULE;
   MY_PROCESS_ID  WEBUTIL_HOST.PROCESS_ID;
   ln_Record_Count                     NUMBER      := 1;
	 ls_Plot_URL VARCHAR2(1024);--Fix SCR 6088 -Madhu -- 10-Mar-2014
	 ls_Data_Type VARCHAR2(50):='AIRPORT';   
BEGIN

   ls_Form_Id															 := FIND_FORM( lower('NAVDB_SETUP'));
   BEGIN
      ls_Plotting_Function_Dir                := PLOT_GLOBAL_PKG.GetInstallationDir;
      Plot_Global_Pkg.ln_Plot_Process_Counter := NVL(PLOT_GLOBAL_PKG.ltab_Process_ID.COUNT, 0) + 1;
      -- FORMS11g PITSS       ln_Record_Count                         := PLOT_GLOBAL_PKG.Get_Process_Count;
   EXCEPTION
       WHEN OTHERS THEN
          ls_Plotting_Function_Dir := 'C:\Program Files\Honeywell Inc., Aviation Services\CorePTDU Tool\';
          ln_Record_Count          := 1;
   END;  
   
   if :system.mode = 'NORMAL'  and :navdb.navdb_id is not null then
	    :global.last_query := 'NAVDB:'||Get_Item_Property('NAVDB.NAVDB_ID',DATABASE_VALUE);
   end if;		
   IF ln_Record_Count >= 10 THEN
      dsp_msg('Attn !!!! Maximum of 10 Plot Windows are already opened, please close atleast one Plot Window to open new Plot Window');
   ELSE 

      IF Get_Item_Property('NAVDB.NAVDB_ID',DATABASE_VALUE) IS NOT NULL THEN
--Begin Fix SCR 6088 -Madhu -- 10-Mar-2014
	      	ls_Plot_URL:=:GLOBAL.ls_Plot_URL||'?username='||:global.user_name
																		||'&password='||:global.password
																		||'&connectstr='||:global.connect_string
																		||'&datatype='||ls_Data_Type
																		||'&query='||:global.last_query;
	      IF :CONTROL_BLOCK.gearth = 'Y' THEN
      	  WEB.SHOW_DOCUMENT(ls_Plot_URL,'_blank');    
      	ELSE 
--End Fix SCR 6088 -Madhu -- 10-Mar-2014
	       ls_Plotting_Function_Command  := ls_Plotting_Function_Dir||'CorePTDU.exe'
	                              ||' -user:'||:global.user_name
	                              ||' -password:'||:global.password
	                              ||' -connectstr:'||:global.connect_string
	                              ||' -datatype:AIRPORT'
	                              ||' -query:'||:global.last_query;
	       --ls_Call_Plotting_Function1     := Plot_
         -- FORMS 11g PITSS
         --message(ls_Plotting_Function_Command);synchronize;pause;
         MY_PROCESS_ID     := WEBUTIL_HOST.NonBlocking(ls_Plotting_Function_Command);
--Global_Pkg.WinExec(ls_Plotting_Function_Command, ls_Call_Plotting_Function);   
         BEGIN
			      Plot_Global_Pkg.ltab_Process_ID(Plot_Global_Pkg.ln_Plot_Process_Counter).ln_Process_ID 
			                                     := TO_NUMBER (MY_PROCESS_ID.handle); 
			      Plot_Global_Pkg.ltab_Process_ID(Plot_Global_Pkg.ln_Plot_Process_Counter).ls_DataType   
			                                     := TO_CHAR(ls_Form_Id.ID);
         EXCEPTION
             WHEN OTHERS THEN
                NULL;
         END;
      END IF;--Fix SCR 6088-Madhu-10-Mar-2014
         GO_BLOCK('NAVDB');    
	   ELSE
         dsp_msg('Invalid/No Data to plot');
     END IF;      
   END IF;      
END;
 




 controlBlockgowhenButtonPressed:
-- Begin Fix - SCR 6927.01 - Eswar KC
If :Control_Block.Pri_Focal Is Null And :Control_Block.Sec_Focal Is Null Then
		Dsp_Msg('Select Primary or Secondary Focal to change.');
		Go_Item('Control_Block.Pri_Focal');	
		Raise Form_Trigger_Failure;
End If;
		
		Declare
			ls_Qry 				VARCHAR2(32000);
			ls_Where_Qry 	VARCHAR2(32000);
			ls_Exe_Qry  	VARCHAR2(32000) := '';
			ls_Err				VARCHAR2(4000) := '';
			ln_button 		NUMBER(1);
		Begin
			ln_button := 
            display_alert.more_buttons
                       ('S','Update Focal(s)','Are you sure to update Primary/Secondary Focal for the queried NavDBs.',
                           'Yes','No'
                        );
			If ln_button = 1 Then
				ls_Where_Qry := SUBSTR (Get_Block_Property('NAVDB', last_query), INSTR (UPPER (Get_Block_Property('NAVDB', last_query)), 'WHERE'));
				If :Control_Block.Pri_Focal Is Not Null Then
					ls_Exe_Qry := ' Primary_Focal = '''||:Control_Block.Pri_Focal||''' '; 	
				End If;	
				
				If :Control_Block.Sec_Focal Is Not Null Then
				  If :Control_Block.Pri_Focal Is Null Then
						ls_Exe_Qry := ' Secondary_Focal = '''||:Control_Block.Sec_Focal||''' ';
					Else
						ls_Exe_Qry := ls_Exe_Qry||' , Secondary_Focal = '''||:Control_Block.Sec_Focal||''' ';
					End If;	
				End If;	
				
				ls_Exe_Qry := ' Begin Update NavDB Set '||ls_Exe_Qry||' '||ls_Where_Qry||'; Commit; End;' ; 
			  Forms_DDL(ls_Exe_Qry); 
				If Form_Success Then 
					Go_Block('NAVDB');
					Clear_Block(No_Validate);
					Dsp_Msg('Update Successful, Query the NavDB Data and Verify.');
					:Control_Block.Pri_Focal := '';
					:Control_Block.Sec_Focal := '';
					Hide_View('FOCALS');
				Else 
					Dsp_MSg('Error - :'||Substr(SQLERRM,1,200));
				End If; 
			Else
				Hide_View('FOCALS');
			End If;	
		End;
-- End Fix - SCR 6927.01 - Eswar KC		

 controlBlockcancelwhenButtonPressed:
-- Begin Fix - SCR 6927.01 - Eswar KC
Go_Item('NAVDB.NAVDB_ID');
Hide_View('FOCALS'); 
-- End Fix - SCR 6927.01 - Eswar KC

 controlBlockupdateFocalswhenButtonPressed:
-- Begin Fix - SCR 6927.01 - Eswar KC
Check_Did ('Main Button Check');
Check_Save;
if :navdb.navdb_id is not null then
		Show_View('FOCALS');
else
	dsp_msg('Please execute a query first.');
	go_item('navdb.navdb_id');			
end if;
-- End Fix - SCR 6927.01 - Eswar KC


 controlBlockataIataDesignatorkeyNextItem:
Go_Item('FIND_IATA');	-- Fix - SCR 6944.00 - Eswar KC 

 controlBlockfindIatawhenButtonPressed:
-- Begin Fix - SCR 6944.00 - Eswar KC 
check_save;
IF get_group_row_count(find_group('DeSelect_Group')) > 0 THEN
   Dsp_Msg('You have checked at lease one Airport Data.'||Chr(10)||chr(10)||
           'Click the ''De Select'' button to De Select the checked Airport.'||chr(10)||
           'Click the ''Reset Check'' button to clear all the check(s)');
   Go_Block('AIRPORT_TO_SELECT');
   Raise Form_Trigger_Failure;
ELSIF get_group_row_count(find_group('Select_Group')) > 0 then
   Dsp_Msg('You have checked at lease one Airport data.'||Chr(10)||chr(10)||
           'Click the ''Select'' button to select the checked Airport.'||chr(10)||
           'Click the ''Reset Check'' button to clear all the check(s)');
   Go_Block('STD_AIRPORT');
   Raise Form_Trigger_Failure;
END IF;
--
IF RTRIM(:control_block.ata_iata_designator) IS NULL THEN
   Dsp_Msg('Please enter the IATA Code');
   Go_Item('control_block.ata_iata_designator');
   Raise Form_Trigger_Failure;
ELSE
   DECLARE
       ls_airport_ident  pl_tld_airport.airport_ident%Type;
       ls_airport_icao   pl_tld_airport.airport_icao%Type; 
   BEGIN
       SELECT airport_ident, airport_icao
         INTO ls_airport_ident, ls_airport_icao
         FROM pl_std_airport
        WHERE processing_cycle = :control_block.proc_cycle --:global.processing_cycle --7607 --Madhu
          AND data_supplier = :NAVDB.DATA_SUPPLIER
          AND ata_iata_designator = :control_block.ata_iata_designator;
           
        check_airport(ls_airport_ident,ls_airport_icao,'BUTTON');   
   EXCEPTION
       WHEN Too_Many_Rows THEN
         Dsp_Msg('Multiple Airports Exists with IATA '''||:control_block.ata_iata_designator||'''');
       WHEN No_Data_Found THEN
         Dsp_Msg('No Airport Exists with IATA '''||:control_block.ata_iata_designator||'''');
       WHEN Others THEN
         Dsp_Msg(sqlerrm);
   END;    
END IF;
-- End Fix - SCR 6944.00 - Eswar KC 

 controlBlocksourceGeoAreawhenListChanged:
populate_target_geo_area;

 controlBlocksaveGeoAreawhenButtonPressed:
--Start SCR 7260.01 - Ashish Niranjan - 30-Nov-2017
Declare
		v_out varchar2(200);	
		v_button number(1);
Begin
	 IF :Parameter.Work_Type != 'VIEW' THEN
	  	IF :control_block.source_geo_area is NULL THEN
	  		dsp_msg('Please select Source Geo Area/Area code/ICAO code');  --Start SCR 5310.01 - Ashwin Valluri - 01-Sep-2020
	  	   RAISE form_trigger_failure;
	  	END IF;
	  		IF :control_block.target_geo_area is NULL THEN
	  		dsp_msg('Please select Target Geo Area/Area code/ICAO code');  --Start SCR 5310.01 - Ashwin Valluri - 01-Sep-2020
	  	   RAISE form_trigger_failure;
	  		END IF;
	  		--Start SCR 5310.01 - Ashwin Valluri - 01-Sep-2020
	  		IF :control_block.source_geo_area = :control_block.target_geo_area THEN
	  		dsp_msg('Source and Target Selection is same. Please check');
	  	   RAISE form_trigger_failure;
	  		END IF;
	  		--End SCR 5310.01 - Ashwin Valluri - 01-Sep-2020
				v_button := DISPLAY_ALERT.MORE_BUTTONS('S','Copy Geo Area/Area code/ICAO code Selection criteria',
  			'Do you want to copy Selection Criteria'||chr(10)||'Please confirm'||chr(10),
  			'Yes','Cancel');
  			IF v_button = 1 THEN
					navdb_util.dup_geo_area(
																	:navdb.navdb_id,
																	:global.dcr_number,
																	:control_block.source_geo_area,
																	:control_block.target_geo_area,
																	v_out);
						if v_out = 'OK' then
						dsp_msg('Seletion criteria has been successfully copied from' ||' '||:control_block.source_geo_area||' '||'to'||' '||:control_block.target_geo_area);
						Else
							dsp_msg(v_out);
						END IF;
					ElSE
						NULL;
					END IF;
		END IF;
End;
--End SCR 7260.01 - Ashish Niranjan - 30-Nov-2017


 controlBlockvldtTabReportwhenButtonPressed:
Export_Csv.Export_vldt_tab_rep;  --Fix SCR 6913 - Venkat M 16-FEB-2018

 selectAllRulesixrrdwhenRadioChanged:
-- Begin Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016
	IF :parameter.work_type = 'VIEW' THEN
			click_datatyp_radio;
	ELSE
			DECLARE
			   ln_Allow_update   NUMBER := 0;
			   lc_Navdb_Block    VARCHAR2 (30) := 'NAVDB';
			   v_button number;
			BEGIN	
		   	ln_Allow_update := check_valid_navdb (:global.processing_cycle, :global.dcr_number, :NAVDB.DATA_SUPPLIER, Name_In (lc_Navdb_Block || '.navdb_id'));
		   	IF ln_Allow_update = 1 THEN
									
					 :parameter.upd_rec := 'N';
		       Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_TRUE);
		       --Start SCR 7420.01 Ashish N 07-Jul-2017
		        IF :select_all_rules.ixrrd != 'N' and :parameter.flag != 'Y' THEN
								v_button :=	display_alert.more_buttons ('S','Change Selection Criteria ',
							 		'You are going to change the Selections. Please check and Confirm.'||chr(10)||
							 		'Please pick your choice carefully:'||chr(10)||chr(10),'Change','Cancel');
						IF v_button = 1 THEN
						--Set the flag here to Y
							:parameter.flag := 'Y';
							
						  Go_Block('DATATYP_RAD');
							FIRST_RECORD;
							
						  IF :select_all_rules.ixrrd = 'I' THEN							  -- Set Include All 
								LOOP
								  :datatyp_rad.options := 'I';
								  click_datatyp_radio;
									EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
									NEXT_RECORD;
								END LOOP;							
							ELSIF :select_all_rules.ixrrd = 'X' THEN							-- Set Exclude All 
								LOOP
								  :datatyp_rad.options := 'X';
								  click_datatyp_radio;
									EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
									NEXT_RECORD;
								END LOOP;							
							ELSIF :select_all_rules.ixrrd = 'R' THEN							-- Set Ref Only All 
								if :datatyp_rad.options = 'N' and :datatyp_rad.RECORD_TYPE_CODE = 94 then
									dsp_msg('Selecting ''Ref Only'' option is not allowed for SAAAR Approaches. Please select any other option.');
								else
									LOOP
									  :datatyp_rad.options := 'N';
						        click_datatyp_radio;
										EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
										NEXT_RECORD;
									END LOOP;		
								end if;		
							ELSIF :select_all_rules.ixrrd = 'D' THEN							-- Set Default All 
									LOOP
									  :datatyp_rad.options := 'D';
						        click_datatyp_radio;
										EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
										NEXT_RECORD;
									END LOOP;			
									:parameter.flag := 'N';   --SCR 7420.01 Ashish N 07-JUL-2017
							ELSE 
								 NULL;																				  -- select_all_rules.ixrrd Is 'None'
							END IF;
							FIRST_RECORD;
							:parameter.flag := 'N'; -- --SCR 7420.01 Ashish N 07-JUL-2017
						ELSE
							--set the flag to N here	
							:parameter.flag := 'N';	
						  :SELECT_ALL_RULES.IXRRD := :SELECT_ALL_RULES.OLD_IXRRD;
						  	END IF;
						END IF;
			   ELSE   
			      :parameter.upd_rec := 'Y';
			      Set_Block_Property ('DATATYP_RAD', UPDATE_ALLOWED, PROPERTY_FALSE);
			      Dsp_Action_Msg ('U',NULL, name_in('global.dcr_number'),:global.processing_cycle,name_in(lc_Navdb_Block||'.navdb_id'));
						RAISE Form_Trigger_Failure;         
			   END IF;   
			   :parameter.flag := 'N';	----SCR 7420.01 Ashish N 07-JUL-2017
			   --End SCR 7420.01 Ashish N 07-JUL-2017 
			END;	
END IF;
-- End Fix - SCR 6983.00 - Eswar KC - 06-Jun-2016

 incExcAptchkAllwhenButtonPressed:
-- Begin Fix - SCR 6959.01 - Eswar KC - 17-Mar-2016
   FIRST_RECORD;
   LOOP
      EXIT WHEN RTRIM (:inc_exc_apt.airport_ident) IS NULL;

      IF :inc_exc_apt.chk IS NOT NULL THEN
         :inc_exc_apt.chk := 'Y';
      END IF;
      NEXT_RECORD;
   END LOOP;
   FIRST_RECORD;
-- End Fix - SCR 6959.01 - Eswar KC - 17-Mar-2016

 incExcAptunchkAllwhenButtonPressed:
-- Begin Fix - SCR 6959.01 - Eswar KC - 17-Mar-2016
	FIRST_RECORD;
	LOOP
	  :inc_exc_apt.chk := 'N';
	  EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
	  NEXT_RECORD;
	END LOOP;
	
	FIRST_RECORD;
-- End Fix - SCR 6959.01 - Eswar KC - 17-Mar-2016

 incExcAptcancelwhenButtonPressed:
-- Begin Fix - SCR 6959.01 - Eswar KC 
	HIDE_VIEW('inc_exc_apt_can'); 
	GO_ITEM('airport_to_select.airport_ident');
-- End Fix - SCR 6959.01 - Eswar KC 

 incExcAptdeletewhenButtonPressed:
-- Begin Fix - SCR 6959.01 - Eswar KC
DECLARE
	ln_Sel_by_id_inc_exc NAVDB_SELECT_CRITERIA.SELECT_BY_ID%TYPE;
	ln_cnt 							 NUMBER := 0; 
BEGIN	
	GO_BLOCK('inc_exc_apt');
	FIRST_RECORD;
	LOOP
		IF :INC_EXC_APT.CHK = 'Y' THEN
-- Begin Fix - SCR 7054.00 - Eswar KC

			SELECT DISTINCT nsc.select_by_id -- Added DISTINCT under SCR 7069-Madhu-5-May-2016
			  INTO ln_Sel_by_id_inc_exc
			  FROM navdb_select_criteria nsc,
	                       selection_criteria_value scv
	                 WHERE nsc.select_by_id = scv.select_by_id
	                   AND nsc.navdb_id = :NAVDB.Navdb_Id
	                   AND nsc.geo_area_id = -2
	                   AND nsc.include_exclude_ind = :inc_exc_apt.inc_exc_ind 
	                   AND nsc.record_type_code = :inc_exc_apt.record_type_code
	                   AND scv.VALUE IN (:inc_exc_apt.airport_ident);
-- End Fix - SCR 7054.00 - Eswar KC

				DELETE FROM selection_criteria_value
	      			WHERE (select_by_id, value_seq) IN
	               (SELECT scv.select_by_id, scv.value_seq
	                  FROM navdb_select_criteria nsc,
	                       selection_criteria_value scv
	                 WHERE nsc.select_by_id = scv.select_by_id
	                   AND nsc.navdb_id = :NAVDB.Navdb_Id
	                   AND nsc.geo_area_id = -2
	                   AND nsc.include_exclude_ind = :inc_exc_apt.inc_exc_ind 
	                   AND nsc.record_type_code = :inc_exc_apt.record_type_code
	                   AND scv.VALUE IN (:inc_exc_apt.airport_ident)
	                       ) ;
-- Begin Fix - SCR 7054.00 - Eswar KC
	    ln_cnt := 0;                    
			SELECT COUNT(1) 
			  INTO ln_cnt 
			  FROM selection_criteria_value
			 WHERE select_by_id = ln_Sel_by_id_inc_exc; 
			IF ln_cnt = 0 THEN
				DELETE FROM navdb_select_criteria
				       WHERE navdb_id = :NAVDB.Navdb_Id
				         AND geo_area_id = -2
				         AND select_by_id = ln_Sel_by_id_inc_exc;
			END IF;	
-- End Fix - SCR 7054.00 - Eswar KC
		END IF;
	  EXIT WHEN :SYSTEM.LAST_RECORD = 'TRUE';
	  NEXT_RECORD;
	END LOOP;
	COMMIT;
	Dsp_Msg('Selected Airport(s) is/are removed from Inc/Exc lists.');
	HIDE_VIEW('inc_exc_apt_can'); 
	GO_ITEM('airport_to_select.airport_ident');
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			Dsp_Msg('Error:-'||SQLCODE||'-'||SUBSTR(SQLERRM,1,200));
			HIDE_VIEW('inc_exc_apt_can'); 
			GO_ITEM('airport_to_select.airport_ident');
END;
-- End Fix - SCR 6959.01 - Eswar KC


 displayItemBlockformPartNumberwhenNewItemInstance:
list_values;

 displayItemBlockrefreshButtonwhenButtonPressed:
declare
	total_rows   number;
	V_BUTTON     NUMBER(1);
begin
	if :system.form_status = 'CHANGED' then
		dsp_msg('There is changes in the form, please do commit first.');
	else	
		total_rows := get_group_row_count(find_group('Refresh_Records_Group'));
		v_button := display_alert.more_buttons('S','Refresh Record',
								'You have modified or inserted or deleted '||total_rows||' record(s). '||chr(10)||
						  	'Do you want to refresh the Master Library now?'||chr(10)||chr(10),
						    'Refresh', 'Cancel');
		if v_button = 1 then
			refresh_master_library.refresh_records(total_rows);
		else
			null;
		end if;
	end if;	
end;

 displayItemBlockrefreshAirportAirwayLowwhenButtonPressed:


 saveSelectionsactionwhenListChanged:
--Begin Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016
IF :SAVE_SELECTIONS.ACTION = 'S' THEN
	:SAVE_SELECTIONS.SSC_ID := SSC_ID_SEQ.NEXTVAL;
	:SAVE_SELECTIONS.TYPE := 'MANUAL';
	:SAVE_SELECTIONS.CYCLE := :GLOBAL.Processing_Cycle; 
	:SAVE_SELECTIONS.CREATED_ON := SYSDATE;
	--
	GO_ITEM ('SAVE_SELECTIONS.NAME');
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_True);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 			 Property_True);	
ELSIF :SAVE_SELECTIONS.ACTION = 'L' THEN
	:SAVE_SELECTIONS.TYPE := '';
	:SAVE_SELECTIONS.CYCLE := ''; 
	:SAVE_SELECTIONS.CREATED_ON := '';	
	:SAVE_SELECTIONS.ACTION := '';
	SET_CANVAS_PROPERTY ('SEL_CAN', Topmost_Tab_Page, 'MAIN');
	Go_Item('NavDB.NavDB_ID');
	Clear_Form; 
	INITIALIZE_FORM; 
	--
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
	--
	DECLARE
		pl_id       ParamList;
	BEGIN
		pl_id := Get_Parameter_List('openform');
		IF NOT Id_Null(pl_id) THEN 
			Destroy_Parameter_List(pl_id); 
		END IF;
		pl_id := Create_Parameter_List('openform');
		Add_Parameter(pl_id, 'Navdb_Id',TEXT_PARAMETER,:Navdb.Navdb_Id);
		Add_Parameter(pl_id, 'Data_Supplier',TEXT_PARAMETER,:Navdb.Data_Supplier);
		Add_Parameter(pl_id, 'Cycle',TEXT_PARAMETER,:Save_Selections.Cycle);
		open_form( lower('LOAD_SELECTIONS') ,activate ,no_session ,share_library_data);
	END;
	--
ELSE
	:SAVE_SELECTIONS.TYPE := '';
	:SAVE_SELECTIONS.NAME := '';
	:SAVE_SELECTIONS.CYCLE := ''; 
	:SAVE_SELECTIONS.COMMENTS := '';	
	:SAVE_SELECTIONS.CREATED_ON := '';
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.NAME', 		 Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Insert_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.COMMENTS', Update_Allowed, Property_False);
	SET_ITEM_PROPERTY ('SAVE_SELECTIONS.SAVE',     Enabled, 		   Property_False);
END IF;
--End Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016

 saveSelectionssavewhenButtonPressed:
--Begin Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016
	IF :SAVE_SELECTIONS.NAME IS NULL THEN
		Dsp_Msg('Please provide Selection Name.');
		Go_Item('SAVE_SELECTIONS.NAME');
		Raise Form_Trigger_Failure;	
	END IF;
	

	DECLARE
		ln_Cnt 		NUMBER;
		ln_SSC_ID	NUMBER;
		ln_button NUMBER := 1;
		ls_status VARCHAR2(4000) := NULL;
	BEGIN
			  
		SELECT COUNT(*) INTO ln_Cnt 
		  FROM B_NAVDB
		 WHERE NAME = :SAVE_SELECTIONS.NAME
		   AND NavDB_ID = :NavDB.NavDB_ID
		   AND CYCLE = :GLOBAL.Processing_Cycle; 
	  
		IF ln_Cnt > 0 THEN
			SELECT SSC_ID INTO ln_SSC_ID
			  FROM B_NAVDB
			 WHERE NAME = :SAVE_SELECTIONS.NAME
			   AND NavDB_ID = :NavDB.NavDB_ID
			   AND CYCLE = :GLOBAL.Processing_Cycle; 

		  ln_button := 
		   			display_alert.more_buttons 
										( 
										 'S','Save-Load Selections',
		             		 'Selection Criteria with Name '||:SAVE_SELECTIONS.NAME||' already exits. '|| CHR (10)||
		             		 'Select an option: ',
		             		 'Overwrite','Cancel' 
									  );	                  
	
	     IF ln_button = 1 THEN
			 		ls_status := 
			 				delete_selections(ln_SSC_ID, :NavDB.NavDB_ID);		
			 END IF;																									
		END IF;	

		IF ln_button = 1 AND ls_status IS NOT NULL THEN
    	 Dsp_Msg('Deletion of Selections is unsuccessful with Error - '||ls_status);				
		ELSIF ln_button = 1 AND ls_status IS NULL THEN
				SELECT ssc_id_seq.nextval INTO ln_SSC_ID FROM Dual;
			  
			  ls_status := 
			  			save_selections.save_selection_criteria(	pn_iSSC_Id          =>  ln_SSC_ID, 
																												ps_iName            =>  :SAVE_SELECTIONS.NAME, 
																												ps_iNavDB           =>  :NavDB.NavDB_ID, 
																												ps_iCYCLE           =>  :GLOBAL.Processing_Cycle, 
																												ps_iSEQ_NUM         =>  NULL, 
																												ps_iRUN_NUM         =>  NULL, 
																												ps_iType            =>  'M',  
																												ps_iComments        =>  :SAVE_SELECTIONS.COMMENTS, 
																												ps_iCREATED_BY      =>  :SAVE_SELECTIONS.CREATED_BY, 
																												ps_iCREATED_ON      =>  :SAVE_SELECTIONS.CREATED_ON,
																												ps_iapproved_status =>  'N'  
	  																								 );	
	      IF ls_status = 'O.K.' THEN
	      	Dsp_Msg('Selections saved Successfully.'); 
	      	Go_Item('NavDB.NavDB_ID');
	      ELSE
	      	Dsp_Msg('Selections are not saved due to error '||ls_status);
	      END IF;
		END IF;
-- 7773 - SHRIKANT K		
	EXCEPTION
	WHEN OTHERS THEN
	DSP_MSG(SQLERRM||' '||SQLCODE);
	NULL;
-- 7773 SHRIKANT K
END;
--End Fix - SCR 6114.01 - Eswar KC - 07-Jul-2016

 webutildummywhenButtonPressed:
if :system.cursor_block = 'WEBUTIL' then 
	next_block;
end if;
WebUtil_Core.ShowBeans(false);

 webutilwebutilClientinfoFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilFileFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilHostFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilSessionFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilFiletransferFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilOleFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilCApiFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

 webutilwebutilBrowserFunctionswhenCustomItemEvent:
begin
  WEBUTIL_CORE.CustomEventHandler(:SYSTEM.CUSTOM_ITEM_EVENT,:SYSTEM.CUSTOM_ITEM_EVENT_PARAMETERS);
end;
  

