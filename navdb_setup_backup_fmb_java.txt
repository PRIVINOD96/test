package com.honeywell.coreptdu.datatypes.navdbsetupbackup.serviceimpl;

import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.context.annotation.RequestScope;

import com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl;
import com.honeywell.coreptdu.datatypes.corepttemplate.block.DisplayItemBlock;
import com.honeywell.coreptdu.datatypes.corepttemplate.serviceimpl.CoreptTemplateTriggerServiceImpl;
import com.honeywell.coreptdu.datatypes.exportdestination.block.SelectOptions;
import com.honeywell.coreptdu.datatypes.exportdestination.dto.request.ExportDestinationTriggerRequestDto;
import com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.ControlBlock;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.ControlBlock1;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.CopyGeoArptGrp;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.CopyNavdb;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.CustomerInfo;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.DatatypRad;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.GenCriteriaSubType;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.IncExcApt;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.Lists;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.MultVal;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.NsbAppSubType;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.RecordSubType;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.Rules;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.RunwaySurface;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.SaveSelections;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.SelectAllRules;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.SelectFromGroups;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.SingleVal;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.SuaRules;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.ValidationResult;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.block.Webutil;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.dto.request.NavdbSetupBackupTriggerRequestDto;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.dto.response.NavdbSetupBackupTriggerResponseDto;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.AirportToSelect;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.AreaCode;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.BNavdb;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.CustomerNavdb;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.FmsDeliveryFormatMedia;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.FmsDmr;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.GeneralCriteria;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.GeographicAreaPoint;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.HeliportToSelect;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.Icao;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.Navdb;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.NavdbDeliveryFormatMedia;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.NavdbOrc;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.SelectByAirportGroup;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.SelectByArea;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.SelectByGeographicArea;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.SelectByHeliportGroup;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.SelectByIcao;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.Selection;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.StdAirport;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.entity.StdHeliport;
import com.honeywell.coreptdu.datatypes.navdbsetupbackup.service.INavdbSetupBackupTriggerService;
import com.honeywell.coreptdu.exception.AlertException;
import com.honeywell.coreptdu.exception.ExceptionUtils;
import com.honeywell.coreptdu.exception.FormTriggerFailureException;
import com.honeywell.coreptdu.exception.NoDataFoundException;
import com.honeywell.coreptdu.exception.TooManyRowsException;
import com.honeywell.coreptdu.global.dbtype.DynamicLists;
import com.honeywell.coreptdu.global.dto.BaseResponse;
import com.honeywell.coreptdu.global.dto.DuParameter;
import com.honeywell.coreptdu.global.dto.Global;
import com.honeywell.coreptdu.global.dto.ReportDetail;
import com.honeywell.coreptdu.global.dto.ResponseDto;
import com.honeywell.coreptdu.global.dto.SystemDto;
import com.honeywell.coreptdu.global.forms.AlertDetail;
import com.honeywell.coreptdu.global.forms.BlockDetail;
import com.honeywell.coreptdu.global.forms.DbConstants;
import com.honeywell.coreptdu.global.forms.DuEvent;
import com.honeywell.coreptdu.global.forms.FormConstant;
import com.honeywell.coreptdu.global.forms.ItemDetail;
import com.honeywell.coreptdu.global.forms.WindowDetail;
import com.honeywell.coreptdu.global.forms.window;
import com.honeywell.coreptdu.pkg.spec.IDisplayAlert;
import com.honeywell.coreptdu.pll.CoreptLib;
import com.honeywell.coreptdu.utils.common.DuConstants;
import com.honeywell.coreptdu.utils.common.EParam;
import com.honeywell.coreptdu.utils.common.HashUtils;
import com.honeywell.coreptdu.utils.dbutils.GenericNativeQueryHelper;
import com.honeywell.coreptdu.utils.dbutils.IApplication;
import com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter;
import com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter;
import com.honeywell.coreptdu.utils.oracleutils.DuBlock;
import com.honeywell.coreptdu.utils.oracleutils.DuRecord;
import com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm;
import com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils;
import com.honeywell.coreptdu.utils.oracleutils.OracleHelpers;
import com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers;
import com.honeywell.coreptdu.utils.oracleutils.RecordGroup;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import oracle.jdbc.OracleTypes;

@Slf4j
@Service
@RequestScope
public class NavdbSetupBackupTriggerServiceImpl extends GenericTemplateForm<NavdbSetupBackupTriggerServiceImpl>
		implements INavdbSetupBackupTriggerService {

	@Getter
	@Setter
	private DuBlock<FmsDmr> fmsDmr = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByIcao> selectByIcao = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<StdAirport> stdAirport = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<CustomerNavdb> customerNavdb = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<GenCriteriaSubType> genCriteriaSubType = new DuBlock<>();
	@Setter
	@Getter
	private DuBlock<SuaRules> suaRules = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<ValidationResult> validationResult = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<AirportToSelect> airportToSelect = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<AreaCode> areaCode = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<GeneralCriteria> generalCriteria = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<IncExcApt> incExcApt = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<GeographicAreaPoint> geographicAreaPoint = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<NsbAppSubType> appSubType = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByArea> selectByArea = new DuBlock<>();
	@Getter
	@Setter
	private CustomerInfo customerInfo = new CustomerInfo();
	@Getter
	@Setter
	private DuBlock<MultVal> multVal = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByGeographicArea> selectByGeographicArea = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<NavdbDeliveryFormatMedia> navdbDeliveryFormatMedia = new DuBlock<>();
	@Getter
	@Setter
	private SaveSelections saveSelections = new SaveSelections();
	@Getter
	@Setter
	private ControlBlock1 controlBlock1 = new ControlBlock1();
	@Getter
	@Setter
	private SelectFromGroups selectFromGroups = new SelectFromGroups();
	@Getter
	@Setter
	private ControlBlock controlBlock = new ControlBlock();
	@Getter
	@Setter
	private CopyGeoArptGrp copyGeoArptGrp = new CopyGeoArptGrp();
	@Getter
	@Setter
	private DuBlock<BNavdb> bNavdb = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByAirportGroup> selectByAirportGroup = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<RunwaySurface> runwaySurface = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<Lists> lists = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<Icao> icao = new DuBlock<>();
	@Getter
	@Setter
	private Navdb navdb = new Navdb();
	@Getter
	@Setter
	private SelectAllRules selectAllRules = new SelectAllRules();
	@Getter
	@Setter
	private DuBlock<RecordSubType> recordSubType = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByHeliportGroup> selectByHeliportGroup = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<HeliportToSelect> heliportToSelect = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<StdHeliport> stdHeliport = new DuBlock<>();
	@Getter
	@Setter
	private Webutil webutil = new Webutil();
	@Getter
	@Setter
	private CopyNavdb copyNavdb = new CopyNavdb();
	@Getter
	@Setter
	private DuBlock<DatatypRad> datatypRad = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<NavdbOrc> navdbOrc = new DuBlock<>();
	@Getter
	@Setter
	private SingleVal singleVal = new SingleVal();
	@Getter
	@Setter
	private Selection selection = new Selection();
	@Getter
	@Setter
	private DuBlock<Rules> rules = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<FmsDeliveryFormatMedia> fmsDeliveryFormatMedia = new DuBlock<>();
	@Getter
	@Setter
	private DisplayItemBlock displayItemBlock = new DisplayItemBlock();
	@Getter
	@Setter
	private Global global = new Global();
	@Getter
	@Setter
	private Map<String, WindowDetail> windows = new HashMap<>();
	@Getter
	@Setter
	private AlertDetail alertDetails = new AlertDetail();
	@Getter
	@Setter
	private Map<String, ItemDetail> items = new HashMap<>();
	@Getter
	@Setter
	private RecordGroup refreshRecordsGroup = new RecordGroup();
	@Getter
	@Setter
	private SystemDto system = new SystemDto();
	@Getter
	@Setter
	private DuParameter parameter = new DuParameter();
	@Getter
	@Setter
	private List<DuEvent> event = new ArrayList<>();
	@Getter
	@Setter
	private HashMap<String, RecordGroup> groups = new HashMap<>();
	@Autowired
	@Getter
	@Setter
	private IApplication app;

	@Autowired
	private CoreptLib coreptLib;

	@Autowired
	private CoreptTemplateTriggerServiceImpl coreptTemplateTriggerService;

	@Getter
	@Setter
	private RecordGroup refreshAalGroups = new RecordGroup();
	@Autowired
	private CoreptMenuMmbServiceImpl coreptMenuMmbServiceImpl;

	@Getter
	@Setter
	private SelectOptions selectOptions;

	@Autowired
	private HashUtils hashUtils;
	@Getter
	@Setter
	@Autowired
	private GenericNativeQueryHelper genericNativeQueryHelper;
	@Autowired
	private IDisplayAlert displayAlert;
	@Getter
	@Setter
	private List<String> blocksOrder = new ArrayList<>();

//	@Override
	public void populateItems(String mname) throws Exception {
		log.info("populateItems Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String scrDescription = null;
			String scrPartNumber = null;

			displayItemBlock.setProcessingCycle(global.getProcessingCycle());

			List<String> getModeluInformation = coreptLib.getModuleInformation(mname, "", "");
			if (getModeluInformation != null && getModeluInformation.size() >= 2) {
				scrDescription = getModeluInformation.get(0);
				scrPartNumber = getModeluInformation.get(1);
			}
			if (Objects.equals(nameIn(this, "parameter.work_type"), "VIEW")) {
				displayItemBlock.setFormDesc(substr(scrDescription, 1, instr(scrDescription, "/") - 1)
						+ substr(scrDescription, instr(scrDescription, "/") + 7));
			} else {
				displayItemBlock.setFormDesc(scrDescription);
			}
			displayItemBlock.setFormDesc("Allow Users to View Saved NavDB Selection Criteria");
			displayItemBlock.setFormDateTime(
					LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm:ss")).toUpperCase());
			displayItemBlock.setFormName("NavDB Selection Criteria Viewer");
			displayItemBlock.setFormPartNumber(scrPartNumber);

			try {

				query = """
												SELECT data_supplier_name,obs_enabled,
																	 crh_enabled,atd_enabled
														FROM   data_supplier
														WHERE  data_supplier = nvl(?,'T')
						""";
				rec = app.selectInto(query, global.getDataSupplier());
				displayItemBlock.setFormSource(rec.getString());
				parameter.setObsEnabled(rec.getString());
				parameter.setCrhEnabled(rec.getString());
				parameter.setAtdEnabled(rec.getString());
			}
			catch (NoDataFoundException e) {
				displayItemBlock.setFormSource(global.getDataSupplier());

			}

			query = """
					SELECT DECODE(nvl(?,'S'),'S','STANDARD','T','TAILORED','UNKNOWN')||', '||?||', '||
									  DECODE(nvl(?,'VIEW'),'VIEW','Query Only','Data Entry')
					   from   dual
					""";
			rec = app.selectInto(query, parameter.getRecordType(), parameter.getLibraryAccess(),
					parameter.getWorkType());
			displayItemBlock.setFormRecordType(rec.getString());

			log.info("populateItems Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateItems {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSelections() throws Exception {
		log.info("populateSelections Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;
			String var = null;

			var = "%GEO";
			rg = findGroup("sel");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			 EParam.DYNAMIC_QUERY_ONE.setValue( navdb.getNavdbId());
			 EParam.DYNAMIC_QUERY_TWO.setValue(  parameter.getSscId());
			 EParam.DYNAMIC_QUERY_THREE.setValue(
						"select '-------Selected Selections--------- ' rlabel,'S' rvalue from dual union all select 'NAVDB Default Criteria' rlabel,'-1' rvalue from dual union all "
								+ " select unique '-----Selected Predefined Geographic Regions------' rlabel ,'P' rvalue from b_select_by_geographic_area "
								+ " where b_select_by_geographic_area.navdb_id = '%s' and geo_area_name like '$%%' and ssc_id = nvl(%s, %d) union all "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "select geo_area_name rlabel ,TO_CHAR(select_by_id) rvalue from b_select_by_geographic_area where b_select_by_geographic_area.navdb_id = '%s' and geo_area_name like '$%%' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())

								+ "union all	select unique '-----Selected Geographic Areas------' rlabel ,'G' rvalue from b_select_by_geographic_area where b_select_by_geographic_area.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select geo_area_name rlabel ,TO_CHAR(select_by_id) rvalue from b_select_by_geographic_area where b_select_by_geographic_area.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select unique '--------Selected Area Codes---------' rlabel ,'A' rvalue from b_select_by_area where b_select_by_area.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select area_code rlabel,TO_CHAR(select_by_id) rvalue from b_select_by_area where b_select_by_area.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select unique '---------Selected ICAO Codes--------'rlabel ,'I' rvalue from b_select_by_icao where b_select_by_icao.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select icao_code rlabel, TO_CHAR(select_by_id) rvalue from b_select_by_icao where b_select_by_icao.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select unique '----------Selected Airports---------'rlabel ,'R' rvalue from b_select_by_airport_group where b_select_by_airport_group.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select group_name rlabel,TO_CHAR(select_by_id) rvalue from b_select_by_airport_group where b_select_by_airport_group.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select unique '----------Selected Heliports---------'rlabel ,'H' rvalue  from b_select_by_heliport_group where b_select_by_heliport_group.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
								+ "union all select group_name rlabel,TO_CHAR(select_by_id) rvalue from b_select_by_heliport_group where b_select_by_heliport_group.navdb_id = '%s' and ssc_id = nvl(%s, %d) "
										.formatted( EParam.DYNAMIC_QUERY_ONE.getValue(),  EParam.DYNAMIC_QUERY_TWO.getValue(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId()));
		
			 
			rg = createGroupFromQuery("sel",EParam.DYNAMIC_QUERY_THREE.getValue());
			nn = populateGroup(rg);
			groups.put("sel", rg);
			if (!Objects.equals(nn, 0)) {

				coreptLib.dspMsg("Populate group has error" + toChar(nn));

			}

			populateList("selection.selections", rg);
			selection.setSelections(getGroupCharCell("sel.rvalue", 0));

			setRadioButtonProperty("include", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("exclude", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("none", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("default", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			datatypRad.setLastQuery(hashUtils.encrypt("none"));
			log.debug(var);
			log.info("populateSelections Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSelections {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDatatypDescr(String pType) throws Exception {
		log.info("populateDatatypDescr Executing");
		try {
			String datatypcur = """
					select rec.ENROUTE_TERMINAL_IND,
										 rec.record_type_code,
										 rec.record_type_descr
							  FROM FMS_DATA_TYPE FDT,
							       FLIGHT_MANAGEMENT_SYSTEM FMS,
							       RECORD_TYPE REC,
										 b_navdb nav
							 WHERE 1=1
							   and nav.ssc_id = nvl(?, ?)
							   and fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
								 and fdt.selectable_ind = 'Y'
								 and nav.navdb_id = ?
								 AND upper(fms.FMS_ID) = upper(?)
								 and nav.fms_id = fms.fms_id
								 and fms.FMS_ID = fdt.FMS_ID
								 and exists (select 'x' from select_criteria
															where record_type_code = rec.record_type_code
																and processing_order = 0)
								 and rec.enroute_terminal_ind in ('T','E','H')
								--order by rec.record_type_code;
								order by decode(rec.ENROUTE_TERMINAL_IND,'H','U',rec.ENROUTE_TERMINAL_IND), rec.record_type_code
					""";
			String arptDatatypcur = """
					select rec.record_type_code, rec.record_type_descr
							FROM  FMS_DATA_TYPE FDT,
										FLIGHT_MANAGEMENT_SYSTEM FMS,
										RECORD_TYPE REC,
										b_navdb nav
							WHERE 1=1
							  and nav.ssc_id = nvl(?, ?)
							  and fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
								and fdt.selectable_ind = 'Y'
								and nav.navdb_id = ?
								AND upper(fms.FMS_ID) =upper(?)
								and nav.fms_id = fms.fms_id
								and fms.FMS_ID = fdt.FMS_ID
								and exists (select 'x' from select_criteria
														 where record_type_code = rec.record_type_code
															 and processing_order = 0)
								and rec.enroute_terminal_ind IN ('T','H')
								and rec.record_type_code != '10'          -- Exclude Airport
							order by rec.record_type_code
					""";
			String hrptDatatypcur = """
					select rec.record_type_code, rec.record_type_descr
							FROM  FMS_DATA_TYPE FDT,
										FLIGHT_MANAGEMENT_SYSTEM FMS,
										RECORD_TYPE REC,
										b_navdb nav
							WHERE 1=1
						    and nav.ssc_id = nvl(?, ?)
							  and fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
								and fdt.selectable_ind = 'Y'
								and nav.navdb_id = ?
								AND upper(fms.FMS_ID) = upper(?)
								and nav.fms_id = fms.fms_id
								and fms.FMS_ID = fdt.FMS_ID
								and exists (select 'x' from select_criteria
														 where record_type_code = rec.record_type_code
															 and processing_order = 0)
								and rec.enroute_terminal_ind = 'H'
						    and rec.record_type_code not in ('15') -- Exclude Heliport
							order by rec.record_type_code
					""";
			String vPreType = null;

			if (Objects.equals(pType, "T")) {
				List<DuRecord> records = app.executeQuery(arptDatatypcur, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId(), navdb.getFmsId());
				int i = 0;
				
				 datatypRad= new DuBlock<>();

				for (DuRecord selrec : records) {
					datatypRad.add(new DatatypRad());
					datatypRad.getRow(i).setRecordTypeCode(toInteger(selrec.getObject("record_type_code")));
					datatypRad.getRow(i).setRecordTypeDescr(toString(selrec.getObject("record_type_descr")));
					i++;
				}
				datatypRad.setQueryHits(toString(i));

			}

			else if (Objects.equals(pType, "H")) {
				List<DuRecord> records = app.executeQuery(hrptDatatypcur, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId(), navdb.getFmsId());
				int i = 0;
				 datatypRad = new DuBlock<>();

				for (DuRecord selrec : records) {
					datatypRad.add(new DatatypRad());
					datatypRad.getRow(i).setRecordTypeCode(toInteger(selrec.getObject("record_type_code")));
					datatypRad.getRow(i).setRecordTypeDescr(toString(selrec.getObject("record_type_descr")));
					i++;
				}
				datatypRad.setQueryHits(toString(i));

			}

			else {
				List<DuRecord> records = app.executeQuery(datatypcur, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId(), navdb.getFmsId());
				int i = 0;
				 datatypRad = new DuBlock<>();

				for (DuRecord selrec : records) {
					datatypRad.add(new DatatypRad());
					if ((!Objects.equals(selection.getSelections(), "-1") && !Objects.equals(pType, "G"))
							&& Arrays.asList("80", "380").contains(toString(selrec.getObject("record_type_code")))) {
						log.debug("dataTypRad 1pType condition executed");

					}

					else if ((!Objects.equals(selection.getSelections(), "-1") && Objects.equals(pType, "I"))
							&& Arrays.asList("44", "45").contains(toString(selrec.getObject("record_type_code")))) {
						log.debug("dataTypRad 2pType condition executed");


					}

					else {
						if (Objects.equals(selrec.getObject("ENROUTE_TERMINAL_IND"), "T")) {
							setItemInstanceProperty("datatypRad.recordTypeDescr", toString(i), "visual_attribute",
									"airports");

						}

						else if (Objects.equals(selrec.getObject("ENROUTE_TERMINAL_IND"), "H")) {
							setItemInstanceProperty("datatypRad.recordTypeDescr", toString(i), "visual_attribute",
									"heliports");

						}

						datatypRad.getRow(i).setRecordTypeCode(toInteger(selrec.getObject("record_type_code")));
						datatypRad.getRow(i).setRecordTypeDescr(toString(selrec.getObject("record_type_descr")));
						vPreType = toString(selrec.getObject("ENROUTE_TERMINAL_IND"));
						i++;

					}
				}
				log.debug("vPreType {}",vPreType);
				datatypRad.setQueryHits(toString(i));

			}
			for (int k = 0; k <= datatypRad.size() - 1; k++) {
				if (Objects.equals(datatypRad.getRow(k).getRecordTypeCode(), null)) {
					datatypRad.remove(k);
				}
			}

			log.info("populateDatatypDescr Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDatatypDescr {}", e.getMessage());
			throw e;

		}
	}


	@Override
	public void populateDatatypDetailCrit() throws Exception {
		log.info("populateDatatypDetailCrit Executing");
		try {
			String navcur = """
					select A.SELECT_BY_ID,
										 B.criteria_descr,
										 b.CRITERIA_ID,
										 A.include_exclude_ind,
										 B.number_of_values
							from 	b_navdb_select_criteria A, select_criteria B
							where 1=1
							and A.ssc_id = nvl(?, ?)
							and A.criteria_id = B.criteria_id
							and A.parent_select_by_id = ?
							and B.display_flag = 'Y'
							order by A.criteria_id
					""";

			List<DuRecord> records = app.executeQuery(navcur, parameter.getSscId(),
					bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
					datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
			int i = 0;
			rules = new DuBlock<>();

			for (DuRecord recs : records) {
				rules.add(new Rules());
				rules.getRow(i).setSelectById(toString(recs.getObject("select_by_id")));
				rules.getRow(i).setSelectedRules(toString(recs.getObject("criteria_descr")));
				rules.getRow(i).setCriteriaId(toInteger(recs.getObject("criteria_id")));
				rules.getRow(i).setList(toString(recs.getObject("include_exclude_ind")));
				rules.getRow(i).setOldList(toString(recs.getObject("include_exclude_ind")));
				rules.getRow(i).setNumOfValues(nvl(rtrim(toString(recs.getObject("number_of_values"))), "0"));
				nextRecord("");
				i++;
			}
			rules.setQueryHits(toString(i));

			log.info("populateDatatypDetailCrit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDatatypDetailCrit {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDatatypOption(Integer index) throws Exception {
		log.info("populateDatatypOption Executing");
		try {
			String datradcur = """
					select select_by_id,
									 include_exclude_ind
						  from b_navdb_select_criteria
					   where 1=1
					     and ssc_id = nvl(?, ?)
					     and navdb_id = ?
					 	   and record_type_code = ?
					 		 and parent_select_by_id is null
					 		 and 	(geo_area_id = ? OR
										 area_code_id = ? OR
										 icao_code_id = ? OR
										 airport_group_id = ? OR
										 heliport_group_id = ?)
							 and criteria_id not in (select criteria_id
																			 from select_criteria
																			 where processing_order = 30)
					""";
			Integer vId = 0;
			String vOption = null;

			List<DuRecord> records = app.executeQuery(datradcur, parameter.getSscId(), bNavdb.getRow(index).getSscId(),
					navdb.getNavdbId(), datatypRad.getRow(index).getRecordTypeCode(), selection.getSelections(),
					selection.getSelections(), selection.getSelections(), selection.getSelections(),
					selection.getSelections());
			if (!records.isEmpty()) {
				vId = toInteger(records.getFirst().getObject("SELECT_BY_ID"));
				vOption = toString(records.getFirst().getObject("INCLUDE_EXCLUDE_IND"));

				if (records.size() > 0) {
					datatypRad.getRow(index).setSelectById(vId);
					datatypRad.getRow(index).setOptions(vOption);
					datatypRad.getRow(index).setOldOption(vOption);
					if (Objects.equals(datatypRad.getRow(index).getRecordTypeDescr(), "ENROUTE AIRWAY")) {
						controlBlock.setAirwaySbi(toString(vId));

					}

					else if (Objects.equals(datatypRad.getRow(index).getRecordTypeDescr(), "AIRPORT")) {
						controlBlock.setAirportSbi(toString(vId));

					}

				}

				else {

					coreptLib.dspMsg("Can not find the Select_by_id for "
							+ datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr() + " "
							+ ". Record has been deleted.");

				}
			}

			log.info("populateDatatypOption Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDatatypOption {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDatatypCriteria(Integer pSelectId, Integer pRecordTypeCode) throws Exception {
		log.info("createDatatypCriteria Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String popnavcur = """
					select select_by_id_seq.nextval as.seq,
								 a.crit,a.geo,a.area,a.icao,a.airport,a.heliport



					( select criteria_id as crit,
													-1 geo,
													NULL area,
													NULL icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code = p_record_type_code
											and processing_order = 0
											and p_select_id = -1  -- WHEN IT IS NAVDB Default
								UNION
									 select criteria_id as crit,
													p_select_id geo,
													NULL area,
													NULL icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code = p_record_type_code
											and processing_order = 0
											and exists (select 1
					            						  from select_by_geographic_area
					             						 where select_by_id = p_select_id)
								UNION
									 select criteria_id as crit,
													NULL geo,
													NULL area,
													NULL icao,
													p_select_id airport,
													null heliport
										 from select_criteria
										where record_type_code = ?
										  and processing_order = 0
											and exists (select 1
					            						  from select_by_airport_group
					             						 where select_by_id = p_select_id)
					      UNION
									 select criteria_id as crit,
													NULL geo,
													NULL area,
													NULL icao,
													null airport,
													p_select_id heliport
										 from select_criteria
										where record_type_code =?
										  and processing_order = 0
											and exists (select 1
					            						  from select_by_HELIport_group
					             						 where select_by_id = p_select_id)
							UNION
									 select criteria_id as crit,
													NULL geo,
													NULL area,
													p_select_id icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code =?
											and processing_order = 0
											and exists (select 1
					             						  from select_by_icao
					             						 where select_by_id = p_select_id)
							UNION
									 select criteria_id as crit,
													NULL geo,
													p_select_id area,
													NULL icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code =?
											and processing_order = 0
											and exists (select 1
					            						  from select_by_area
					             						 where select_by_id = ?)
					             )
					""";

			String vInd = null;

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				List<DuRecord> records = app.executeQuery(popnavcur, pRecordTypeCode, pRecordTypeCode, pSelectId,
						pRecordTypeCode, pSelectId, pRecordTypeCode, pSelectId, pRecordTypeCode, pSelectId,
						pRecordTypeCode, pSelectId);
				for (DuRecord recs : records) {
					if (Objects.equals(recs.getObject("geo"), -1)) {
						vInd = "N";

					}

					else {
						vInd = "D";

					}
					if (Objects.equals(pRecordTypeCode, 10) && !Objects.equals(recs.getObject("airport"), null)) {

						query = """
								SELECT NVL (include_exclude_ind, 'I')
										     from select_by_airport_group
										    WHERE select_by_id = rec.airport
								""";
						rec = app.selectInto(query, recs.getObject("airport"));
						log.info(rec.toString());
						vInd = recs.getString();

					}

					if (Arrays.asList("80", "380").contains(toString(pRecordTypeCode))
							&& (!Objects.equals(recs.getObject("area"), null)
									|| !Objects.equals(recs.getObject("icao"), null)
									|| !Objects.equals(recs.getObject("airport"), null)
									|| !Objects.equals(recs.getObject("heliport"), null))) {
						log.debug(" inside if pRecordTypeCode condition executed");

					}

					else if (Arrays.asList("44", "45").contains(toString(pRecordTypeCode))
							&& (!Objects.equals(recs.getObject("icao"), null)
									|| !Objects.equals(recs.getObject("airport"), null)
									|| !Objects.equals(recs.getObject("heliport"), null))) {
						log.debug("inside else if pRecordTypeCode condition 2 executed");


					}

					else {

						query = """
								 Insert into navdb_select_criteria (select_by_id,
																											 navdb_id,
																											 record_type_code,
																											 criteria_id,
																											 parent_select_by_id,
																											 geo_area_id,
																											 area_code_id,
																											 icao_code_id,
																											 airport_group_id,
																											 heliport_group_id,
																											 include_exclude_ind
																											 ,create_dcr_number	--Start of Changes for SCR -05814
																											 ,created_by
																											 ,created_on)  		  --End of Changes for SCR -05814
											  values (
												  		?,
													  	?,
													  	?,
													  	'',
													  	?,
													  	?,
													  	?,
													  	?,
													  	?,
													  	?
													  	,?			--Start of Changes for SCR -05814
													  	,?
													  	,?)
								""";
						app.executeNonQuery(query, recs.getObject("seq"), navdb.getNavdbId(), pRecordTypeCode,
								recs.getObject("crit"), recs.getObject("geo"), recs.getObject("area"),
								recs.getObject("icao"), recs.getObject("airport"), recs.getObject("heliport"), vInd);

					}
				}

			}

			log.info("createDatatypCriteria Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDatatypCriteria {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDatatypDetailCrit(String pType) throws Exception {
		log.info("createDatatypDetailCrit Executing");
		String query = "";
		try {
			String getSelectionId = """
					select geo_area_id as geo,
										 area_code_id as area,
										 icao_code_id as icao,
										 airport_group_id as apt,
										 heliport_group_id as heli
							from navdb_select_criteria
							where select_by_id = ?
					""";
			String getCriteria = """
					select criteria_id
							from select_criteria
							where record_type_code = ?
							and PROCESSING_ORDER not in (0,30)
							and display_flag = 'Y'
								minus
							select criteria_id
							from navdb_select_criteria
							where parent_select_by_id = ?
							and criteria_id in (select criteria_id from select_criteria
																	where record_type_code = ?)
					""";

			List<DuRecord> records = app.executeQuery(getSelectionId);
			if (records.size() > 0) {
				if (Objects.equals(lower(pType), "normal")) {
				 app.executeQuery(getCriteria,
							datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
							datatypRad.getRow(system.getCursorRecordIndex()).getSelectById(),
							datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
					for (DuRecord rec1 : records) {

						query = """
								 Insert into navdb_select_criteria
										 						(select_by_id, navdb_id, record_type_code,
															 	criteria_id, parent_select_by_id,
															 	geo_area_id, area_code_id, icao_code_id, airport_group_id,
													 			heliport_group_id,include_exclude_ind
													 			,create_dcr_number	--Start of Changes for SCR -05814
																 ,created_by
																 ,created_on  		  --End of Changes for SCR -05814
																)
													values (select_by_id.se9.nextval,
										 						?,
										    		    ?,
										      		  rec.criteria_id,
										        		?,
										        		v_geo,v_area,v_icao,v_apt,v_heli,
										        		'N'
										        		,?			--Start of Changes for SCR -05814
													  		,USER
													  		,SYSDATE							--End of Changes for SCR -05814
										        		)
								""";
						app.executeNonQuery(query, navdb.getNavdbId(),
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
								datatypRad.getRow(system.getCursorRecordIndex()).getSelectById(),
								global.getDcrNumber());
					}

				}

			}

			log.info("createDatatypDetailCrit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDatatypDetailCrit {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkAirport(String pIdent, String pIcao, String pType) throws Exception {
		log.info("checkAirport Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getId = """
					select A.select_by_id
					from b_Airport_to_select A, b_select_by_Airport_group B      --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
					where Airport_ident = ?
					and   Airport_icao like ?
					and   B.navdb_id = ?
					and   A.select_by_id = B.select_by_id
					and   a.ssc_id = b.ssc_id                              --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
					and   a.ssc_id = NVL(?,?)
					""";
			String getIcaoS = """
					select Airport_icao
					from   pl_std_Airport
					where  Airport_ident = ?
					and    data_supplier = ?
					and processing_cycle = ?
					and validate_ind in ('Y','S','H','O')
					""";
			String getIcaoT = """
					select Airport_icao
					from   pl_tld_Airport
					where  Airport_ident = ?
					and    data_supplier = ?
					and    processing_cycle = ?
					and    customer_ident IN (SELECT CUSTOMER_IDENT
					FROM   CUSTOMER_NAVDB
					WHERE  NAVDB_ID = ?)
					and    validate_ind in ('Y','S','H','O')
					""";
			String vIcao = null;
			Integer vExist = 0;
			Integer vButton = 0;
			String vName = null;
			String vNameTemp = null;
			String vOtherName = null;
			StringBuilder vValueBuilder = new StringBuilder();
			Integer vCount = 0;
			String vMessage = null;
			String lStdTldFlag = null;

			if (!Objects.equals(pIcao, null)) {

				query = """
						SELECT COUNT (*)
						from pl_std_airport
						WHERE airport_ident = ?
						AND airport_icao = ?
						AND data_supplier = ?
						AND processing_cycle = ? ---Fix SCR 6109.00 --Ashwin --29-Sep-2020
						AND validate_ind IN ('Y', 'S', 'H', 'O')
						""";
				rec = app.selectInto(query, pIdent, pIcao, navdb.getDataSupplier(), controlBlock.getProcCycle());
				vExist = toInteger(rec.getString());
				if (Objects.equals(vExist, 0)) {

					query = """
							SELECT COUNT (*)
							from pl_tld_airport
							WHERE airport_ident = ?
							AND airport_icao = ?
							AND data_supplier = ?
							AND processing_cycle = ?
							AND validate_ind IN ('Y', 'S', 'H', 'O')
							AND customer_ident IN (SELECT customer_ident
							FROM customer_navdb
							WHERE navdb_id = ?)
							""";
					rec = app.selectInto(query, pIdent, pIcao, navdb.getDataSupplier(), global.getProcessingCycle(),
							navdb.getNavdbId());
					vExist = toInteger(rec.getString());
					if (!Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This is a tailored Airport.");

					}

				}

				vIcao = pIcao;

			}

			else {

				try {
					List<DuRecord> records = app.executeQuery(getIcaoS, pIdent, navdb.getDataSupplier(),
							controlBlock.getProcCycle());

					if (records.isEmpty()) {
						throw new NoDataFoundException("Icao is empty");

					}

					else {

						for (DuRecord rep : records) {

							if (records.size() == 1) {
								vIcao = toString(rep.getObject("Airport_icao"));
								if (Objects.equals(pType, "RECORD")) {
									airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIcao(vIcao);

								}

								vExist = 1;
							} else {
								vExist = 2;
							}
						}

					}
				} catch (NoDataFoundException e) {

					try {
						List<DuRecord> records = app.executeQuery(getIcaoT, pIdent, navdb.getDataSupplier(),
								global.getProcessingCycle(), navdb.getNavdbId());
						if (records.isEmpty()) {
							throw new NoDataFoundException("ICAO is empty");

						}

						else {

							for (DuRecord rep : records) {
								if (records.size() == 1) {
									vIcao = toString(rep.getObject("Airport_icao"));
									if (Objects.equals(pType, "RECORD")) {
										airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIcao(vIcao);
										coreptLib.dspMsg("This is a tailored Airport.");

									}

									vExist = 1;
								} else {
									vExist = 2;
								}
							}

						}
					} catch (NoDataFoundException ex) {
						vExist = 0;

					} catch (Exception ex) {

						setApplicationProperty("cursor_style", "DEFAULT");

						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
						throw new FormTriggerFailureException();

					}

				} catch (Exception exp) {

					setApplicationProperty("cursor_style", "DEFAULT");

					coreptLib.dspMsg(OracleHelpers.getSQLerrm(exp));

					throw new FormTriggerFailureException();

				}

			}
			if (!Objects.equals(pIcao, null)) {
				List<DuRecord> records = app.executeQuery(getId, pIdent, pIcao, navdb.getNavdbId(),
						parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
				for (DuRecord recs : records) {

					query = """
							select group_name from b_select_by_Airport_group                        --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
							where select_by_id = ?
							and ssc_id = NVL(?,?)
							""";
					rec = app.selectInto(query, recs.getObject(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						String value = " " + vNameTemp;
						vValueBuilder.append(value);

					}
				}
				vOtherName = vValueBuilder.toString();

			}

			else {
				getId = """
							select A.select_by_id
						from b_Airport_to_select A, b_select_by_Airport_group B      --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
						where Airport_ident = ?
						and   Airport_icao like ('%s')
						and   B.navdb_id = ?
						and   A.select_by_id = B.select_by_id
						and   a.ssc_id = b.ssc_id                              --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
						and   a.ssc_id = NVL(?,?)
							"""
						.formatted("%");

				EParam.DYNAMIC_QUERY_ONE.setValue(navdb.getNavdbId());
				EParam.DYNAMIC_QUERY_TWO.setValue(parameter.getSscId());
				EParam.DYNAMIC_QUERY_THREE.setValue(toString(bNavdb.getRow(system.getCursorRecordIndex()).getSscId()));
				EParam.DYNAMIC_QUERY_FOUR.setValue(pIdent);
				EParam.DYNAMIC_QUERY_FIVE.setValue(getId);
				List<DuRecord> records = app.executeQuery(EParam.DYNAMIC_QUERY_FIVE.getValue(),
						EParam.DYNAMIC_QUERY_FOUR.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(),
						EParam.DYNAMIC_QUERY_TWO.getValue(), toInteger(EParam.DYNAMIC_QUERY_THREE.getValue()));

				for (DuRecord recss : records) {

					query = """
							select group_name from b_select_by_Airport_group                     --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
							where select_by_id = ?
							and ssc_id = NVL(?,?)
							""";
					rec = app.selectInto(query, recss.getObject("SELECT_BY_ID"), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						vOtherName = getNullClean(vOtherName) + " " + vNameTemp;

					}
				}

			}
			if (Objects.equals(pType, "BUTTON")) {
				if (!Objects.equals(vName, null)) {

					goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "");
					setcurrentAndCursorBlock(DbConstants.SELECT_BY_AIRPORT_GROUP);
					selectByAirportGroup = new DuBlock<>();
					selectByAirportGroup.getData().add(0, new SelectByAirportGroup());

					String where = "NAVDB_ID = '%s' AND GROUP_NAME='%s' and ssc_id= '%s'".formatted(navdb.getNavdbId(),
							ltrim(vName), navdb.getSscId());

					OracleHelpers.copyWithIndex(this, hashUtils.encrypt(where),
							"selectByAirportGroup." + "defaultWhere", 0);

					system.setCursorBlock("selectByAirportGroup");

					navdbExecuteQuery();

					selectByAirportGroup.getRow(0).setGroupName(ltrim(vName));
					goBlock(DbConstants.AIRPORT_TO_SELECT, "");
					airportToSelect = new DuBlock<>();
					airportToSelect.getData().add(0, new AirportToSelect());

					airportToSelect.getRow(0).setAirportIdent(pIdent);
					airportToSelect.getRow(0).setAirportIcao(vIcao);
					airportToSelect.getRow(0).setIataCode(populateIatacode(pIdent, vIcao));

					if (Objects.equals(controlBlock.getAirportIcao(), null)) {
						String searchQuery = """
								SELECT AIRPORT_ICAO
								FROM COREPT_B.AIRPORT_TO_SELECT
								WHERE SELECT_BY_ID = ?
								AND AIRPORT_IDENT=?
								AND SSC_ID=?
								""";
						List<DuRecord> selectRec = app.executeQuery(searchQuery,
								selectByAirportGroup.getRow(0).getSelectById(), pIdent,
								selectByAirportGroup.getRow(0).getSscId());
						airportToSelect.getRow(0)
								.setAirportIcao(toString(selectRec.getLast().getObject("AIRPORT_ICAO")));
					}

					goBlock(DbConstants.AIRPORT_TO_SELECT, "airportIdent");
					setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.AIRPORT_TO_SELECT));
					if (!OracleHelpers.isNullorEmpty(vOtherName)) {
						vMessage = "There exist other Airport(s) with the same ident in group: \n" + vOtherName + ".";

					}

					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg(
								"Invalid Airport, found in group " + vName + "." + chr(10) + getNullClean(vMessage));

					}

					else {
						if (!OracleHelpers.isNullorEmpty(vOtherName)) {

							coreptLib.dspMsg(vMessage);

						}

					}

				}

				else {
					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This is not a valid Airport in cycle " + global.getProcessingCycle() + ".");

					}

					else if (Objects.equals(vExist, 1)) {

						if (Objects.equals(lStdTldFlag, "T")) {

							coreptLib.dspMsg("This is tailored Airport.");

						}

						else {

							coreptLib.dspMsg("This Airport is available to use.");
							;
							controlBlock.setTempAirport(pIdent);
						}

					}

					else {

						coreptLib.dspMsg(
								"There are more than one Airports with this ident, all of\n them available to use.");

					}

				}

			}

			else {
				if (!Objects.equals(vName, null) && !Objects.equals(pIcao, null)) {
					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This Airport is already used in group " + vName + ". " + chr(10)
								+ "And this is not a valid Airport in cycle " + global.getProcessingCycle() + ".");

					}

					else if (Objects.equals(vExist, 1)) {

						coreptLib.dspMsg("This Airport is already used in group " + vName + ". ");

					}

					setApplicationProperty("cursor_style", "DEFAULT");
					throw new FormTriggerFailureException();

				}

				else {
					if (Objects.equals(vExist, 0) && !Objects.equals(pIcao, null)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							 displayAlert.moreButtons("S", "INVALID Airport DATA",
									"This Airport does not exist in cycle '" + global.getProcessingCycle() + "' ."
											+ chr(10) + "Select from the options:",
									"Correct the data", "Accept it", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("airportAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("airportAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							setApplicationProperty("cursor_style", "DEFAULT");

							throw new FormTriggerFailureException();

						}

						else {
							log.debug("Inside else condition at checkAirport submethod");

						}

					}

					else {
						log.debug("Inside else condition on vExist and pIcao at checkAirport");

					}

				}

			}

			log.info("checkAirport Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkAirport {} " , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateIncExcLists(String pInd) throws Exception {
		log.info("populateIncExcLists Executing");
		try {
			String getCriteria = """
					select criteria_id
							from select_criteria
							where record_type_code = ?
							and processing_order = 30
					""";
			String getSelectById = """
					select select_by_id
							from b_navdb_select_criteria
							where navdb_id = NVL(?,?)  -- 5254
							and ssc_id = NVL(?,?)			         -- 5254
							and record_type_code = ?
							and parent_select_by_id is null
							and geo_area_id = '-2'
							and include_exclude_ind = ?
							and criteria_id = ?
					""";

			String getListValue = """

									SELECT distinct List_Records.S_Seq, List_Records.S_Val,
					 List_Records.Value_Descr, Rec_Ident.Display_Order, UPDATE_DCR_NUMBER
					    FROM Record_Identifier Rec_Ident,
					         (SELECT distinct Scv.Value_Seq S_Seq, Scv.Value S_Val, Scv.Value_Descr, SCV.UPDATE_DCR_NUMBER,Scv.Select_By_Id, Nsc.ssc_id
					             FROM b_Selection_Criteria_Value Scv, b_Navdb_Select_Criteria Nsc
					           WHERE Scv.Value_Descr IN  (SELECT Identifier_Column_Name
					                                        FROM Record_Identifier
					                                       WHERE Record_Type_Code = ?)
					             AND Scv.Select_By_Id = Nsc.Select_By_Id
					             AND Nsc.ssc_id = Scv.ssc_id
					             AND Nsc.ssc_id = NVL(?,?)
					             AND Scv.Select_By_Id = ?
					             AND Nsc.Include_Exclude_Ind = ?) List_Records,
					         (SELECT distinct Scv1.Value, Scv1.Value_Seq,Scv1.Select_By_Id
					            FROM b_Selection_Criteria_Value Scv1, b_Navdb_Select_Criteria Nsc1
					           WHERE Value_Descr = (SELECT Identifier_Column_Name
					                                              FROM Record_Identifier
					                                             WHERE Record_Type_Code = ?
					                                               AND Display_Order = 1)
					             AND Scv1.Select_By_Id = Nsc1.Select_By_Id
					             AND Nsc1.ssc_id = Scv1.ssc_id
					             AND Nsc1.ssc_id = NVL(?,?)
					             AND Scv1.Select_By_Id = ?
					             )  List_Value
					  WHERE List_Records.S_Seq = List_Value.Value_Seq
					    AND List_Records.Select_By_Id = List_Value.Select_By_Id
					    AND Rec_Ident.Record_Type_Code = ?
					    AND REC_IDENT.IDENTIFIER_COLUMN_NAME = List_Records.value_descr
					ORDER BY S_Seq, Display_Order,S_Val, Value_Descr""";

			Integer lnCnt = 0;
			Integer vCriteria = 0;
			Integer vSId = 0;
			try {
				List<DuRecord> records = app.executeQuery(getCriteria,
						datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
				vCriteria = toInteger(records.get(0).getObject("CRITERIA_ID"));

				if (!Objects.equals(vCriteria, null)) {
					try {
						DuRecord recordv = app.selectInto(getSelectById,
								 parameter.getQryNavdbId(),bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId(),
								 parameter.getSscId(),bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), pInd, vCriteria);

						vSId = recordv.getInt();
					} catch (NoDataFoundException e) {
						vSId = null;
					}

					if (Objects.equals(vSId, null)) {
						if (Objects.equals(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), global.getDataSupplier(),
								toString(nameIn(this, "navdb.navdb_id"))), 1)) {

							log.debug("checkValidNavdb condition  executed");

						}

					}

					else {
						controlBlock.setListSId(vSId);
						lnCnt = 1;
						List<DuRecord> recordget = app.executeQuery(getListValue,
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
								parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
								controlBlock.getListSId(), pInd,
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
								parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
								controlBlock.getListSId(),
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());

						int i = 0;
						lists.getData().clear();
						lists.add(new Lists());
						for (DuRecord rep : recordget) {
							copyWithIndex(this, toString(rep.getObject("S_VAL")), "lists.value" + toChar(lnCnt), i);
							copyWithIndex(this, toString(rep.getObject("S_VAL")), "lists.valueD" + toChar(lnCnt), i);
							lists.getRow(i).setDcrNumber(rep.getObject("UPDATE_DCR_NUMBER") == null ? null
									: toInteger(rep.getObject("UPDATE_DCR_NUMBER")));
							lnCnt = lnCnt + 1;
							if (lnCnt > datatypRad.getRow(system.getCursorRecordIndex()).getListNo()) {
								lists.getRow(i).setDcrNumber(rep.getObject("UPDATE_DCR_NUMBER") == null ? null
										: toInteger(rep.getObject("UPDATE_DCR_NUMBER")));
								lnCnt = 1;
								lists.add(new Lists());
								i++;

							}

						}
						lists.remove(i);
					}

				}

			} catch (Exception e) {

				coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
			}

			log.info("populateIncExcLists Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateIncExcLists {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkLength(Integer pNum) throws Exception {
		log.info("checkLength Executing");
		try {

			log.info("checkLength Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkLength {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateGenCriteriaValue(String pBlock) throws Exception {
		log.info("populateGenCriteriaValue Executing");
		try {

			String[] realValueArray = { "A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", "H", "M", "N", "O", "P",
					"Q", "R", "S", "T", "U", "V", "W", "X", "Y", "-" };
			String[] valueArray = { "A - CATEGORY A ONLY", "B - CATEGORY B ONLY", "C - CATEGORY C ONLY",
					"D - CATEGORY D ONLY", "E - CATEGORY E ONLY", "F - CATEGORY A, B ONLY", "G - CATEGORY C, D ONLY",
					"I - CATEGORY A, B, C", "J - CATEGORY A, B, C, D", "K - CATEGORY A, B, C, D, E",
					"L - CATEGORY D, E ONLY", "H - CATEGORY H (HELI) ONLY", "M - CATEGORY B, C ONLY",
					"N - CATEGORY C, D, E ONLY", "O - CATEGORY B, C, D, E ONLY", "P - NOT LIMITED",
					"Q - TURBOJET AND TURBOPROP ONLY", "R - TURBOJET ONLY", "S - TURBOPROP ONLY", "T - PROP ONLY",
					"U - TURBOPROP AND PROP", "V - NON-TURBOJETS ONLY", "W - JETS ONLY", "X - NON-JETS ONLY",
					"Y - PISTONS ONLY", "BLANK(-) CATEGORY NOT PROVIDED" };

			genCriteriaSubType.getData().clear();
			GenCriteriaSubType genCriteria = null;
			for (int i = 0; i < valueArray.length; i++) {
				genCriteria = new GenCriteriaSubType();
				genCriteria.setRealValue(realValueArray[i]);
				genCriteria.setValue(valueArray[i]);
				genCriteriaSubType.add(genCriteria);
			}
			for (int i = 0; i < valueArray.length; i++) {
				genCriteriaSubType.getRow(i).setChk(applyTheCheck("genCriteriaSubType", i));
			}

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				setItemProperty("gen_criteria_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("gen_criteria_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("gen_criteria_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("gen_criteria_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("gen_criteria_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("gen_criteria_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			log.info("populateGenCriteriaValue Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateGenCriteriaValue {}" , e.getMessage());
			throw e;

		}
	}

	private String applyTheCheck(String pBlock, Integer index) throws Exception {
		String vValue = toString(nameInWithIndex(this, pBlock + ".real_value", index));
		String vRealValue;
		String vInd = null;
		String query = "";
		DuRecord rec = null;
		try {
			if (Objects.equals(pBlock, "appSubType")) {
				query = """
						select value from b_selection_criteria_value
						where 1=1
										and ssc_id = nvl(?, ?)
						 				and substr(value,1,1) = ?
						 				and select_by_id = ?
						 				and value_descr  = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), vValue,
						rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
				vRealValue = rec.getString();
				vInd = "Y";
				appSubType.getRow(index).setLimitPriority(toInteger(substr(vRealValue, 4)));
				if (Objects.equals(appSubType.getRow(index).getLimitPriority(), 0)) {
					appSubType.getRow(index).setLimitPriority(null);
				}
				return vInd;
			}

			else if (Objects.equals(pBlock, "genCriteriaSubType")) {
				query = """
						select 'Y' from b_navdb_general_criteria_value
						where value = ?
						and criteria_id = ?
						and navdb_id = ?
						and ssc_id = NVL(?,?)
						""";
				rec = app.selectInto(query, vValue,
						generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), navdb.getNavdbId(),
						parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
				vInd = rec.getString();
				controlBlock.setDid("N");
				return vInd;
			} else {
				query = """
						select 'Y' from b_selection_criteria_value
						where 1=1
										and ssc_id = nvl(?, ?)
						 				and value = ?
						 				and select_by_id = ?
						 				and value_descr  = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), vValue,
						rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
				vInd = rec.getString();
				return vInd;
			}

		} catch (Exception e) {
				vInd = "N";
				return vInd;

		}

	}

	@Override
	public void setGroup(String pBlock, String pChk, String pItem2, String pGroup, String pItem1) throws Exception {
		log.info("setGroup Executing");
		try {
			RecordGroup groupId = findGroup(pGroup);
			Integer totalRows = getGroupRowCount(groupId);
			Integer vRow = 0;
			String vItem1 = null;
			String vItem2 = null;

			if (Objects.equals(pChk, "Y")) {
				addGroupRow(groupId, "end_of_group");
				vRow = totalRows + 1;
				setGroupCharCell(groupId, pGroup + ".item1", vRow, pItem1);
				if (!Objects.equals(pItem2, null)) {
					setGroupCharCell(groupId, pGroup + ".item2", vRow, pItem2);

				}

				setItemInstanceProperty(pBlock + ".chk", "current_record", "visual_attribute", "CHECKED");

			}

			else if (Objects.equals(pChk, "N")) {
				if (Objects.equals(pItem2, null)) {
					vRow = groupId.getGroupRecordNumber(pGroup + ".item1", pItem1);
					deleteGroupRow(pGroup, vRow);

				}

				else {
					for (int i = 1; i <= totalRows; i++) {
						vItem1 = getGroupCharCell(pGroup + ".item1", i);
						if (Objects.equals(vItem1, pItem1)) {
							vItem2 = getGroupCharCell(pGroup + ".item2", i);
							if (Objects.equals(vItem2, pItem2)) {
								deleteGroupRow(pGroup, i);
								break;

							}

						}

					}

				}
				setItemInstanceProperty(pBlock + ".chk", toString(system.getCursorRecordIndex()), "visual_attribute",
						"PLAIN");

			}

			log.info("setGroup Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setGroup {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void queryBlockRecords(String pBlock, String pType) throws Exception {
		log.info("queryBlockRecords Executing");
		try {
			String vQuery = null;
			Integer vLengthW = 0;
			Integer vLengthO = 0;
			String vWhere = null;
			String vAirportWhere = null;

			if (Objects.equals(pType, "INITIAL") || Objects.equals(pType, null)) {
				goBlock(pBlock, "");
				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(pBlock));

			}

			if (Arrays.asList("INITIAL", "KEY_EXE").contains(pType)) {
				system.setCursorBlock(HoneyWellUtils.toCamelCase(pBlock));
				if (Objects.equals(pBlock, DbConstants.AREA_CODE)) {
					setBlockProperty(DbConstants.AREA_CODE, "default_where",
							"area_code not in (select area_code from b_select_by_area where 1=1 and ssc_id = nvl( %s, %d) and navdb_id = '%s')"
									.formatted(parameter.getSscId(),
											bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
											navdb.getNavdbId()));

				}

				else if (Objects.equals(pBlock, upper(DbConstants.ICAO))) {
					system.setCursorBlock("icao");
					setBlockProperty(DbConstants.ICAO, "default_where",
							"icao_code not in (select icao_code from b_select_by_icao where 1=1 and ssc_id = nvl(%s, %d) and navdb_id ='%s')"
									.formatted(parameter.getSscId(),
											bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
											navdb.getNavdbId()));
					

				}

				else if (Objects.equals(pBlock, DbConstants.STD_AIRPORT)) {
					vAirportWhere = """
							data_supplier = '%s' and validate_ind in ('Y','S','H') and processing_cycle = '%s'

							and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from b_AIRPORT_TO_SELECT A, b_SELECT_BY_AIRPORT_GROUP B
							where 1=1 and A.ssc_id = nvl(%s, %d) and B.ssc_id = nvl(%s, %d)
							and A.ssc_id = B.ssc_id and B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID)

							"""
							.formatted(navdb.getDataSupplier(), global.getProcessingCycle(), parameter.getSscId(),
									bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
									bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());

					if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), "Y")) {
						vAirportWhere = vAirportWhere + " and length(ltrim(rtrim(airport_ident))) = 4 "
								+ "and substr(airport_ident,1,1) between 'A' and 'Z' "
								+ "and substr(airport_ident,2,1) between 'A' and 'Z' "
								+ "and substr(airport_ident,3,1) between 'A' and 'Z' "
								+ "and substr(airport_ident,4,1) between 'A' and 'Z' ";

					}

					if (!Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength(), null)) {
						if (!Arrays.asList("=", ">", "<").contains(substr(
								ltrim(stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength()), 1, 1))) {

							coreptLib.dspMsg(
									"For the Runway Length field, please use format like: =100, >100, <100, >=100 or <=100.");
							;
							throw new FormTriggerFailureException();

						}

						vAirportWhere = vAirportWhere + " and (airport_ident,airport_icao) in "
								+ "(select airport_ident,airport_icao from pl_std_runway where RUNWAY_LENGTH "
								+ stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength()
								+ " and data_supplier = ('%s') and validate_ind in ('Y','S','H','O') and processing_cycle = ('%s') "
										.formatted(navdb.getDataSupplier(), global.getProcessingCycle());

					}

					if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getSurfaceCode(), "S")) {
						vAirportWhere = vAirportWhere + " and (airport_ident,airport_icao) in "
								+ "(select airport_ident,airport_icao from pl_std_suppl_runway where runway_surface in "
								+ "('CLAY','CORL','DIRT','GRAS','GRVL','ICE','SILT','SNOW','SOIL','TRTD','TURF','UNKN','LATE','MATS','PLNG','SAND','SELD','SHAE','UNPV','WATE')"
								+ " and data_supplier = ('%s') and validate_ind in ('Y','S','H','O') and processing_cycle = ('%s')"
										.formatted(navdb.getDataSupplier(), global.getProcessingCycle());

					}

					else if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getSurfaceCode(), "H")) {
						vAirportWhere = vAirportWhere + " and (airport_ident,airport_icao) in "
								+ "(select airport_ident,airport_icao from pl_std_suppl_runway where runway_surface in "
								+ "('ASPH','BITU','BRCK','CONC','MACA','PAVD','TARM')"
								+ " and data_supplier = ('%s') and validate_ind in ('Y','S','H','O') and processing_cycle = ('%s')"
										.formatted(navdb.getDataSupplier(), global.getProcessingCycle());

					}

					EParam.DYNAMIC_QUERY_ONE.setValue(vAirportWhere);
					setBlockProperty(DbConstants.STD_AIRPORT, "default_where", EParam.DYNAMIC_QUERY_ONE.getValue());
					controlBlock
							.setCopyRunwayLength(stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength());
					controlBlock.setCopySurfaceCode(stdAirport.getRow(system.getCursorRecordIndex()).getSurfaceCode());
					controlBlock.setCopy4AlphaTerminal(
							stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal());

				}

				else if (Objects.equals(pBlock, "STD_HELIPORT")) {
					EParam.DYNAMIC_QUERY_ONE.setValue(navdb.getDataSupplier());
					EParam.DYNAMIC_QUERY_TWO.setValue(global.getProcessingCycle());
					EParam.DYNAMIC_QUERY_THREE.setValue(parameter.getSscId());
					EParam.DYNAMIC_QUERY_FOUR
							.setValue(toString(bNavdb.getRow(system.getCursorRecordIndex()).getSscId()));
					EParam.DYNAMIC_QUERY_FIVE.setValue(navdb.getNavdbId());
					EParam.DYNAMIC_QUERY_SIX.setValue(
							"data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = '%s' and"
									.formatted(EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue())
									+ "(terminal_ident, terminal_icao) not in (select heliport_ident, heliport_icao from b_heliport_to_select a, b_select_by_heliport_group b where 1=1 "
									+ "and a.ssc_id = nvl(%s, %s) and b.ssc_id = nvl(%s, %s) and ".formatted(
											EParam.DYNAMIC_QUERY_THREE.getValue(), EParam.DYNAMIC_QUERY_FOUR.getValue(),
											EParam.DYNAMIC_QUERY_THREE.getValue(), EParam.DYNAMIC_QUERY_FOUR.getValue())
									+ "a.ssc_id = b.ssc_id and b.navdb_id = '%s' and a.select_by_id = b.select_by_id)"
											.formatted(EParam.DYNAMIC_QUERY_FIVE.getValue()));

					setBlockProperty("STD_HELIPORT", "default_where", EParam.DYNAMIC_QUERY_SIX.getValue());

				}

				else if (Objects.equals(pBlock, DbConstants.FMS_DELIVERY_FORMAT_MEDIA)) {
					setBlockProperty(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "default_where",
							"fms_id = '%s' and format_media_type not in (select format_media_type from b_navdb_delivery_format_media "
									.formatted(navdb.getFmsId())
									+ "where 1=1 and ssc_id = nvl(%s, %d) and navdb_id = '%s') ".formatted(
											parameter.getSscId(),
											bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
											navdb.getNavdbId()));

				} else if (Objects.equals(pBlock, DbConstants.FMS_DMR)) {
					setBlockProperty(DbConstants.FMS_DMR, "default_where", "DM_ORC_IND LIKE '%DM%'");
				} else if (Objects.equals(pBlock, DbConstants.SELECT_BY_GEOGRAPHIC_AREA)) {
					setBlockProperty(DbConstants.SELECT_BY_GEOGRAPHIC_AREA, "default_where",
							" GEO_AREA_NAME != 'WORLD' AND NAVDB_ID = ('%s') AND SSC_ID = %d "
									.formatted(navdb.getNavdbId(), navdb.getSscId()));
				}

				else {
					setBlockProperty(pBlock, "default_where", "");

				}

			}

			else {
				String lastQuery = toString(nameIn(this, pBlock + ".last_query"));
				vQuery = getBlockProperty(pBlock, lastQuery);
				if (!Objects.equals(vQuery, null)) {
					vLengthW = instr(vQuery, "WHERE");
					vLengthO = instr(vQuery, "order by");
					vWhere = substr(vQuery, vLengthW + 5, vLengthO - vLengthW - 5);
					setBlockProperty(pBlock, "default_where", vWhere);

				}

			}

			navdbExecuteQuery();

			log.info("queryBlockRecords Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing queryBlockRecords {}" ,e.getMessage());
			throw e;

		}
	}

	private void navdbExecuteQuery(String... params) throws Exception {

		String defaultWhere = getBlockProperty(this, system.getCursorBlock(), "default_where");

		OracleHelpers.bulkClassMapper(this, app);
		Object obj = nameIn(this, system.getCursorBlock());

		String relationWhere = app.getWhereQuery(obj);
		boolean ifCheck = params.length > 0;
		if (!ifCheck) {
			if (!Objects.equals(relationWhere, null) && !Objects.equals(relationWhere, "")
					&& !Objects.equals(defaultWhere, "") && !Objects.equals(defaultWhere, null)) {

				defaultWhere = relationWhere + " AND " + defaultWhere;
			} else if (Objects.equals(defaultWhere, "") || Objects.equals(defaultWhere, null)
					&& !Objects.equals(relationWhere, "") && !Objects.equals(relationWhere, null)) {

				defaultWhere = relationWhere;
			}
		} else {
			defaultWhere = params[0];
		}

		if (Objects.equals(system.getMode(), "EXECUTE")) {
			coreptLib.coreptexecutequery(this, true);
		} else {
			executeQuery(this, system.getCursorBlock(), defaultWhere,
					toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
					toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));
		}

	}

	@Override
	public void createNewGroup(String pGroup, Integer pNumCol) throws Exception {
		log.info("createNewGroup Executing");
		try {
			RecordGroup groupId = null;
			Object colId = null;

			groupId = findGroup(pGroup);
			if (!idNull(groupId)) {
				deleteGroup(groups, "pGroup");

			}

			groupId = createGroup(pGroup);
			for (int i = 1; i <= pNumCol; i++) {
				colId = addGroupColumn(groupId, "item" + toChar(i), "charColumn", 38);

			}

			log.info("createNewGroup Executed Successfully {}",colId);
		} catch (Exception e) {
			log.error("Error while executing createNewGroup {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkSave(String pBlock) throws Exception {
		log.info("checkSave Executing");
		try {
			String vCursorBlock = system.getCursorBlock();
			Boolean val = true;
			String vFlag = "Y";

			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				if (val == false) {
					throw new FormTriggerFailureException();

				}

				else {
					if (!Objects.equals(nvl(getItemProperty("NAVDB.CUSTOMER_EMAIL_ID", "databaseValue"), "~~~"),
							nvl(customerInfo.getCustomerEmailId(), "~~~"))
							|| !Objects.equals(nvl(getItemProperty("NAVDB.NOTES", "databaseValue"), "~~~"),
									nvl(customerInfo.getNotes(), "~~~"))
							|| !Objects.equals(nvl(getItemProperty("NAVDB.CUST_EMAIL_FLAG", "databaseValue"), "~"),
									nvl(customerInfo.getCustEmailFlag(), "~"))) {
						vFlag = "Y";

					}

					else {
						vFlag = "N";

					}
					if (Objects.equals(vFlag, "Y")
							|| (Objects.equals(vFlag, "N") && !Objects.equals(parameter.getPCustomerFlag(), "Y"))) {

						coreptLib.dspMsg("Please save your change first!");
						if (Objects.equals(vCursorBlock, DbConstants.STD_AIRPORT)) {
							if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
								stdAirport.getRow(system.getCursorRecordIndex()).setChk("N");

								setGroup(DbConstants.STD_AIRPORT, "Select_Group",
										stdAirport.getRow(system.getCursorRecordIndex()).getChk(),
										stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(),
										stdAirport.getRow(system.getCursorRecordIndex()).getAirportIcao());

							}

						}

						else if (Objects.equals(vCursorBlock, DbConstants.ICAO)) {
							if (Objects.equals(icao.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
								icao.getRow(system.getCursorRecordIndex()).setChk("N");
								setGroup(DbConstants.ICAO, "Select_Group",
										icao.getRow(system.getCursorRecordIndex()).getChk(),
										icao.getRow(system.getCursorRecordIndex()).getIcaoCode(), null);

							}

						}

						else if (Objects.equals(vCursorBlock, DbConstants.AREA_CODE)) {
							if (Objects.equals(areaCode.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
								areaCode.getRow(system.getCursorRecordIndex()).setChk("N");

								setGroup(DbConstants.AREA_CODE, "Select_Group",
										areaCode.getRow(system.getCursorRecordIndex()).getChk(),
										areaCode.getRow(system.getCursorRecordIndex()).getAreaCode(), null);

							}

						}

						else if (Objects.equals(vCursorBlock, "STD_HELIPORT")) {
							if (Objects.equals(stdHeliport.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
								stdHeliport.getRow(system.getCursorRecordIndex()).setChk("N");

								setGroup("STD_HELIPORT", "Select_Group",
										stdHeliport.getRow(system.getCursorRecordIndex()).getChk(),
										stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(),
										stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIcao());

							}

						}

						goBlock(vCursorBlock, "");
						setcurrentAndCursorBlock(vCursorBlock);
						if (Objects.equals(vCursorBlock, DbConstants.NAVDB)) {

							setApplicationProperty("cursor_style", "DEFAULT");

							hideView("FOCALS");

						}

						if (Objects.equals(vCursorBlock, "CONTROL_BLOCK")) {
							goBlock(DbConstants.NAVDB, "");
							setcurrentAndCursorBlock(DbConstants.NAVDB);

						}

						else if (!Objects.equals(pBlock, null)) {
							goBlock(pBlock, "");
							setcurrentAndCursorBlock(pBlock);

						}

						setApplicationProperty("cursor_style", "DEFAULT");

						throw new FormTriggerFailureException();

					}

				}

			}

			log.info("checkSave Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkSave {}" , e.getMessage());
			throw e;

		}
	}

	public void initializeForm() throws Exception {
		log.info("initializeForm Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vErr = null;
			String fname = getApplicationProperty(CURRENT_FORM_NAME);
			window wnId = findWindow(system.getCurrentForm(), "baseWindow");
			String vName = getWindowProperty(wnId, TITLE);

			defaultValue("J", "global.data_supplier");
			defaultValue("99999", "global.dcr_number");
			defaultValue(null, "global.processing_cycle");
			defaultValue("MAXIMIZE", "global.status_window");
			defaultValue(null, "global.allroles");
			defaultValue("N", "global.is_admin");
			defaultValue("cpt", "global.user_name");
			defaultValue("cpt", "global.password");
			defaultValue("cpt", "global.connect_string");
			defaultValue("airport", "global.data_type");
			defaultValue("airport", "global.table_name");
			defaultValue("blank", "global.last_query");
			setItemProperty("control_block.plot", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("control_block.gearth", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			if (Objects.equals(nameIn(this, "global.status_window"), "MAXIMIZE")) {

				setWindowProperty("baseWindow", WINDOW_STATE, MAXIMIZE);
			}

			else {

				setWindowProperty("baseWindow", WINDOW_STATE, NORMAL);
			}
			vErr = coreptLib.setRole(global.getAllroles());
			if (!Objects.equals(vErr, "PASSED")) {

				displayAlert.oneButton("S", "Fatal Error",
						"The roles cannot be activated.  Contact the COREPT Administrator.");
				exitForm();

			}

			else {
				if (Objects.equals(global.getProcessingCycle(), null)) {

					try {

						query = """
								select max(processing_cycle)
								      from pl_std_airport
								""";
						rec = app.selectInto(query);
						global.setProcessingCycle(rec.getString());
					} catch (NoDataFoundException e) {
						global.setProcessingCycle(null);

					}

				}

				setItemProperty("display_item_block.processing_cycle", FormConstant.DISPLAYED,
						FormConstant.PROPERTY_TRUE);
				setItemProperty("display_item_block.processing_cycle", FormConstant.WIDTH, "60");

				setWindowProperty("baseWindow", TITLE, vName);

				populateItems(fname);

				coreptLib.unsetQueryMenuItems();
				;
				if (Objects.equals(nvl(parameter.getObsEnabled(), "N"), "Y")) {
					setTabPageProperty("selCan.geo", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					setTabPageProperty("selCan.airport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.heliport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.validate", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else if (Objects.equals(nvl(parameter.getCrhEnabled(), "N"), "Y")
						|| Objects.equals(nvl(parameter.getAtdEnabled(), "N"), "Y")) {
					setTabPageProperty("selCan.area", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.icao", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.airport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.heliport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.validate", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}

			log.info("initializeForm Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing initializeForm {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkDid(String pType) throws Exception {
		log.info("checkDid Executing");
		try {

			if (Objects.equals(pType, "Post Block Check")) {
				if (Objects.equals(controlBlock.getDid(), "N")) {
					coreptLib.dspMsg("Use the available button on the bottom of this form to go\n back.");

					setApplicationProperty("cursor_style", "DEFAULT");
					throw new FormTriggerFailureException();

				}

			}

			else if (Objects.equals(pType, "Main Button Check")) {

				if (Objects.equals(controlBlock.getDid(), "N") || Objects.equals(controlBlock.getDid2(), "N")) {

					coreptLib.dspMsg(
							"Please go back to the main rule form by using the 'Go" + chr(10) + "Back' button first.");
					throw new FormTriggerFailureException();
				}

			}

			log.info("checkDid Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkDid {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void dspMsg(String msg) throws Exception {
		log.info("dspMsg Executing");
		try {

			PropertyHelpers.setAlertProperty(event, "note", "bstop", "Forms", msg, "ALERT_MESSAGE_TEXT", null, null,
					null);
			showAlert("dsp_msg", false);

			log.info("dspMsg Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing dspMsg {}" , e.getMessage());
			throw e;
		}
	}

	@Override
	public void updateDatatypValue(String pOption) throws Exception {
		log.info("updateDatatypValue Executing");
		String query = "";
		try {

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Arrays.asList("I", "N", "D").contains(pOption)) {

					query = """
							 delete from selection_criteria_value
							  	where select_by_id in (select select_by_id
							  												 from   navdb_select_criteria
							  												 where  parent_select_by_id = ?
							  												 and criteria_id in (select criteria_id
							  												 										 from select_criteria))
							""";
					app.executeNonQuery(query, datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
					query = """
							 delete from  navdb_select_criteria
									where parent_select_by_id = ?
									and criteria_id in (select criteria_id
																			from select_criteria)
							""";
					app.executeNonQuery(query, datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
					datatypRad.getRow(system.getCursorRecordIndex())
							.setOldOption(datatypRad.getRow(system.getCursorRecordIndex()).getOptions());

				}

				else if (Objects.equals(pOption, "X")) {

					query = """
							 delete from selection_criteria_value
							  	where select_by_id in (select select_by_id
							  												 from   navdb_select_criteria
							  												 where  parent_select_by_id = ?)
							""";
					app.executeNonQuery(query, datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
					query = """
							 delete from  navdb_select_criteria
									where parent_select_by_id = ?
							""";
					app.executeNonQuery(query, datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
					datatypRad.getRow(system.getCursorRecordIndex())
							.setOldOption(datatypRad.getRow(system.getCursorRecordIndex()).getOptions());

				}

				query = """
						update navdb_select_criteria
							set    include_exclude_ind = ?
							where  select_by_id = ?
						""";
				app.executeNonQuery(query, datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
						datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());

			}

			log.info("updateDatatypValue Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing updateDatatypValue {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void clickDatatypRadio() throws Exception {
		log.info("clickDatatypRadio Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vAirwayInd = null;
			String vAirwayLow = "N";
			String vArptInclude = null;
			String vArptInd = null;
			String getSelectionGroup = """
					select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
												from b_navdb_select_criteria
												where 1=1
												and ssc_id = nvl(?, ?)
												and navdb_id = ?
												and record_type_code = 10
												and include_exclude_ind = 'D'
												and parent_select_by_id is null
					""";

			if (!Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), null)) {
				if (!Objects.equals(parameter.getWorkType(), "VIEW")
						&& !Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
								datatypRad.getRow(system.getCursorRecordIndex()).getOldOption())) {
					if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 10)
							&& Arrays.asList("I", "R", "D")
									.contains(datatypRad.getRow(system.getCursorRecordIndex()).getOptions())
							&& !Objects.equals(controlBlock.getAirwaySbi(), null)) {

						try {

							query = """
									select include_exclude_ind from NAVDB_SELECT_CRITERIA
														where select_by_id = ?
									""";
							rec = app.selectInto(query, controlBlock.getAirwaySbi());
							vAirwayInd = rec.getString();
							if (Objects.equals(vAirwayInd, "D")) {

								query = """
										select 'Y' from NAVDB_SELECT_CRITERIA
																where include_exclude_ind = 'I'
																and criteria_id = 24  -- TERMINAL AREA LOWS
																and NAVDB_ID = ?
																and GEO_AREA_ID = '-1'
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vAirwayLow = rec.getString();

							}

							else if (Objects.equals(vAirwayInd, "R")) {

								query = """
										select 'Y' from NAVDB_SELECT_CRITERIA
																where include_exclude_ind = 'I'
																and criteria_id = 24  -- TERMINAL AREA LOWS
																and parent_select_by_id = ?
										""";
								rec = app.selectInto(query, controlBlock.getAirwaySbi());
								vAirwayLow = rec.getString();

							}

							else {
								vAirwayLow = "N";

							}
						} catch (NoDataFoundException e) {
							vAirwayLow = "N";

						}
						if (Objects.equals(vAirwayLow, "Y")) {
							if (Arrays.asList("I", "R")
									.contains(datatypRad.getRow(system.getCursorRecordIndex()).getOptions())) {
								datatypRad.getRow(system.getCursorRecordIndex())
										.setOptions(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

								coreptLib.dspMsg(
										"''Include'' or ''Rule'' is applied on the default Airport rule. So, can not apply "
												+ "''Default'' here while ''Terminal AREA Lows'' is applied on record type Enroute Airway.");
								throw new FormTriggerFailureException();

							}

							else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
									"D")) {

								try {

									query = """
											select 'Y' from NAVDB_SELECT_CRITERIA
																		where include_exclude_ind in ('I','R')
																		and NAVDB_ID = ?
																		and record_type_code = 10
																		and GEO_AREA_ID = '-1'
																		and PARENT_SELECT_BY_ID is null
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vArptInclude = rec.getString();
								} catch (NoDataFoundException e) {
									vArptInclude = "N";

								}
								if (Objects.equals(vArptInclude, "Y")) {
									datatypRad.getRow(system.getCursorRecordIndex()).setOptions(
											datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

									coreptLib.dspMsg(
											"There exist at least one selection, it''s Airport uses ''Default'', and it''s Airway has selected low. '||\r\n"
													+ "							        'So, can not apply ''Include'' or ''Rule'' for Airport here.");
									throw new FormTriggerFailureException();

								}

							}

						}

						if (Objects.equals(selection.getSelections(), "-1")) {
							List<DuRecord> records = app.executeQuery(getSelectionGroup, parameter.getSscId(),
									bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
							for (int i = 0; i < records.size(); i++) { 

								try {

									query = """
											select 'Y' from navdb_select_criteria
																		where (geo_area_id = rec.selection_group
																		or area_code_id = rec.selection_group
																		or icao_code_id = rec.selection_group)
																		and include_exclude_ind = 'I'
																		and criteria_id = 24
																		and navdb_id = ?
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vAirwayLow = rec.getString();
								} catch (NoDataFoundException e) {
									vAirwayLow = "N";

								}
								if (Objects.equals(vAirwayLow, "Y")) {

									datatypRad.getRow(system.getCursorRecordIndex()).setOptions(
											datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());
									break;

								}

							}

						}

					}

					if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 60)
							&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "D")
							&& !Objects.equals(controlBlock.getAirportSbi(), null)) {

						try {

							query = """
									select 'Y' from NAVDB_SELECT_CRITERIA
														where include_exclude_ind = 'I'
														and criteria_id = 24  -- TERMINAL AREA LOWS
														and geo_area_id = '-1'
														and navdb_id = ?
									""";
							rec = app.selectInto(query, navdb.getNavdbId());
							vAirwayLow = rec.getString();
						} catch (NoDataFoundException e) {
							vAirwayLow = "N";

						}
						if (Objects.equals(vAirwayLow, "Y")) {

							query = """
									select include_exclude_ind from NAVDB_SELECT_CRITERIA
													 	where select_by_id = ?
									""";
							rec = app.selectInto(query, controlBlock.getAirportSbi());
							vArptInd = rec.getString();
							if (Arrays.asList("I", "R").contains(vArptInd)) {
								vArptInclude = "Y";

							}

							else if (Objects.equals(vArptInclude, "D")) {

								try {

									query = """
											select 'Y' from NAVDB_SELECT_CRITERIA
															 			where include_exclude_ind in ('I','R')
															 			and GEO_AREA_ID = '-1'
															 			and record_type_code = 10
															 			and navdb_id = ?
															 			and PARENT_SELECT_BY_ID is null
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vArptInclude = rec.getString();
								} catch (NoDataFoundException e) {
									vArptInclude = "N";

								}

							}

							if (Objects.equals(vArptInclude, "Y")) {
								datatypRad.getRow(system.getCursorRecordIndex())
										.setOptions(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

								throw new FormTriggerFailureException();

							}

						}

					}

					updateDatatypValue(datatypRad.getRow(system.getCursorRecordIndex()).getOptions());

				}

				if (Objects.equals(parameter.getWorkType(), "VIEW")
						&& !Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
								datatypRad.getRow(system.getCursorRecordIndex()).getOldOption())) {
					datatypRad.getRow(system.getCursorRecordIndex())
							.setOptions(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

				}

				else {
					if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "R")) {
						if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

							createDatatypDetailCrit("normal");

						}

						goBlock("rules", "");
						setcurrentAndCursorBlock("rules");
						controlBlock.setDid2("N");

						populateDatatypDetailCrit();

					}

				}

			}

			log.info("clickDatatypRadio Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing clickDatatypRadio {} " ,e.getMessage());
			throw e;

		}
	}

	@Override
	public void clickDetailRadio() throws Exception {
		log.info("clickDetailRadio Executing");
		String query = "";
		DuRecord rec = null;
		try {

			if (Objects.equals(HoneyWellUtils.toCamelCase(system.getCursorBlock()), "rules")) {
				if (!Objects.equals(rules.getRow(system.getCursorRecordIndex()).getSelectedRules(), null)) {
					if ((Objects.equals(parameter.getWorkType(), "VIEW")
							&& !Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
									rules.getRow(system.getCursorRecordIndex()).getOldList()))) {
						rules.getRow(system.getCursorRecordIndex())
								.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

					}

					else {
						String singlevalue = """
								select value as val
														from b_selection_criteria_value
								 						where 1=1 and ssc_id = nvl(?, ?) and select_by_id = ?
								""";
						String multiplevalue = """
								select value as val
								 						from b_selection_criteria_value
								 						where 1=1 and ssc_id = nvl(?, ?) and select_by_id = ?
								 						order by value_seq
								""";
						String getSelectionGroup = """
								select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
															from b_navdb_select_criteria
															where 1=1
															and ssc_id = nvl(?, ?)
															and navdb_id = ?
															and record_type_code = 60
															and include_exclude_ind = 'D'
															and parent_select_by_id is null
								""";
						String vAirportInd = null;
						String vAirportInclude = "N";

						if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(), "I")) {
							if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 24)
									&& !Objects.equals(controlBlock.getAirportSbi(), null)
									&& !Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
											rules.getRow(system.getCursorRecordIndex()).getOldList())) {

								try {

									query = """
											select include_exclude_ind from b_NAVDB_SELECT_CRITERIA
																			where 1=1 and ssc_id = nvl(?, ?) and select_by_id = ?
											""";
									rec = app.selectInto(query, parameter.getSscId(),
											bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
											controlBlock.getAirportSbi());
									vAirportInd = rec.getString();
									if (Objects.equals(vAirportInd, "D")) {

										query = """
												select 'Y' from b_NAVDB_SELECT_CRITERIA
																					where 1=1 and ssc_id = nvl(?, ?) and include_exclude_ind in ('I','R')
																					and record_type_code = 10  -- AIRPORT
																					and NAVDB_ID = ?
																					and GEO_AREA_ID = '-1'	-- default
																					and PARENT_SELECT_BY_ID is null
												""";
										rec = app.selectInto(query, parameter.getSscId(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
												navdb.getNavdbId());
										vAirportInclude = rec.getString();

									}

									else if (Arrays.asList("I", "R").contains(vAirportInd)) {
										vAirportInclude = "Y";

									}

									else {
										vAirportInclude = "N";

									}
								} catch (NoDataFoundException e) {
									vAirportInclude = "N";

								}
								if (Objects.equals(vAirportInclude, "Y")) {
									rules.getRow(system.getCursorRecordIndex())
											.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
									coreptLib.dspMsg(
											"Apply 'Terminal AREA Low' is not allowed while Airport is 'Included' or 'Ruled'.");

									throw new FormTriggerFailureException();

								}

								if (Objects.equals(selection.getSelections(), "-1")) {
									List<DuRecord> records = app.executeQuery(getSelectionGroup, parameter.getSscId(),
											bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
											navdb.getNavdbId());
									for (DuRecord recs : records) {

										try {

											query = """
													select 'Y' from b_navdb_select_criteria
																							where 1=1 and ssc_id = nvl(?, ?)
																							and (geo_area_id = rec.selection_group
																							or area_code_id = rec.selection_group
																							or icao_code_id = rec.selection_group)
																							and include_exclude_ind = 'I'
																							and record_type_code = 10
																							and navdb_id = ?
													""";
											rec = app.selectInto(query, parameter.getSscId(),
													bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
													rec.getObject("SELECTION_GROUP"), rec.getObject("SELECTION_GROUP"),
													rec.getObject("SELECTION_GROUP"), navdb.getNavdbId());
											vAirportInclude = rec.getString();
										} catch (NoDataFoundException e) {
											vAirportInclude = "N";

										}
										if (Objects.equals(vAirportInclude, "Y")) {

											coreptLib.dspMsg(
													"There exist at least one selection, it's Airway uses'Default', and the selection of that Airport is 'Include' or 'Rule'.So, can not apply 'Airway Low' here.");
											rules.getRow(system.getCursorRecordIndex())
													.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
											break;

										}

									}
									if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
											rules.getRow(system.getCursorRecordIndex()).getOldList())) {
										throw new FormTriggerFailureException();

									}

								}

								if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

									query = """
											update navdb_select_criteria
																			set include_exclude_ind = ?
																			where select_by_id = ?
											""";
									app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getList(),
											rules.getRow(system.getCursorRecordIndex()).getSelectById());
									rules.getRow(system.getCursorRecordIndex())
											.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());

								}

							}

							else {
								if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getNumOfValues(), "0")) {
									if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

										query = """
												update navdb_select_criteria
																					set include_exclude_ind = ?
																					where select_by_id = ?
												""";
										app.executeNonQuery(query,
												rules.getRow(system.getCursorRecordIndex()).getList(),
												rules.getRow(system.getCursorRecordIndex()).getSelectById());
										rules.getRow(system.getCursorRecordIndex())
												.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());

									}

								}

								else if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getNumOfValues(),
										"1")) {
									controlBlock.setDid("N");
									goBlock("SINGLE_VAL", "");
									setcurrentAndCursorBlock("singleVal");
									setItemProperty("single_val.save", FormConstant.ENABLED,
											FormConstant.PROPERTY_FALSE);

									List<DuRecord> records = app.executeQuery(singlevalue, parameter.getSscId(),
											bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
											rules.getRow(system.getCursorRecordIndex()).getSelectById());
									singleVal.setOldValue(singleVal.getSingle());
									int RecCount = 0;
									if (records.size() > 0) {
										singleVal.setSingle(toString(records.getLast().getObject()));
										singleVal.setOldValue(singleVal.getSingle());

									}
									singleVal.setQueryHits(toString(RecCount));
									singleVal.setLastQuery(hashUtils.encrypt("none"));// export;

								}

								else if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getNumOfValues(),
										"M")) {
									controlBlock.setDid("N");
									if ((like("%APPROACH%", navdb.getDataName()) && Arrays.asList(85, 317)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))) {

										goBlock("APP_SUB_TYPE", "");

										setcurrentAndCursorBlock("appSubType");

										populateSubType(system.getCursorBlock());
										if (parameter.getWorkType().equals("VIEW")) {
											setItemProperty("app_sub_type.done", FormConstant.ENABLED,
													FormConstant.PROPERTY_FALSE);
											setItemProperty("app_sub_type.check", FormConstant.ENABLED,
													FormConstant.PROPERTY_FALSE);
											setItemProperty("app_sub_type.clear", FormConstant.ENABLED,
													FormConstant.PROPERTY_FALSE);

										}

									}

									else if ((like("%APPROACH%", navdb.getDataName()) && Arrays.asList(86, 319)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))
											|| (like("%SID%", navdb.getDataName()) && Objects.equals(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 98))
											|| (like("%STAR%", navdb.getDataName()) && Objects.equals(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 99))
											|| (like("%APPROACH%", navdb.getDataName()) && Arrays.asList(529, 532)
													.contains(rules.getRow(system.getCursorRecordIndex())
															.getCriteriaId()))
											|| (like("%SID%", navdb.getDataName()) && Arrays.asList(527, 530).contains(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))
											|| (like("%STAR%", navdb.getDataName()) && Arrays.asList(528, 531).contains(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))
											|| (like("%OBSTACLE%", navdb.getDataName()) && Objects.equals(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 602))
											|| (like("%AIRWAY%", navdb.getDataName())
													&& Arrays.asList(22, 23, 131).contains(rules
															.getRow(system.getCursorRecordIndex()).getCriteriaId()))) {
										goBlock("RECORD_SUB_TYPE", "");

										setItemProperty("record_sub_type.done", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);
										setItemProperty("record_sub_type.check", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);
										setItemProperty("record_sub_type.clear", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);

										populateSubType(system.getCursorBlock());
									}

									else if (Objects.equals(navdb.getDataName(), "RUNWAY") && Objects
											.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 39)) {
										goBlock("RUNWAY_SURFACE", "");
										setcurrentAndCursorBlock("RUNWAY_SURFACE");
										setItemProperty("runway_surface.check_all_soft", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);
										setItemProperty("runway_surface.check_all_hard", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);
										setItemProperty("runway_surface.clear_all_soft", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);
										setItemProperty("runway_surface.clear_all_hard", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);
										setItemProperty("runway_surface.save", FormConstant.ENABLED,
												FormConstant.PROPERTY_FALSE);

									}

									else if (like("%AIRSPACE%", navdb.getDataName()) && Arrays.asList(493, 494)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
										goBlock("SUA_RULES", "");
										setcurrentAndCursorBlock("suaRules");
										if (parameter.getWorkType().equals("VIEW")) {
											setItemProperty("sua_rules.check_all", FormConstant.ENABLED,
													FormConstant.PROPERTY_FALSE);
											setItemProperty("sua_rules.clear_all", FormConstant.ENABLED,
													FormConstant.PROPERTY_FALSE);
											setItemProperty("sua_rules.done", FormConstant.ENABLED,
													FormConstant.PROPERTY_FALSE);

										}

									}

									else if (like("%AIRSPACE%", navdb.getDataName()) && Arrays.asList(505, 506)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
										log.debug("AIRSPACE condition executed");
									}

									else {
										goBlock("MULT_VAL", "");
										setcurrentAndCursorBlock("multVal");

										setBlockProperty("MULT_VAL", FormConstant.INSERT_ALLOWED,
												FormConstant.PROPERTY_TRUE);
										setBlockProperty("MULT_VAL", FormConstant.UPDATE_ALLOWED,
												FormConstant.PROPERTY_TRUE);
										setBlockProperty("MULT_VAL", FormConstant.DELETE_ALLOWED,
												FormConstant.PROPERTY_TRUE);
										MultVal multvalBlock = null;

										List<DuRecord> records = app.executeQuery(multiplevalue, parameter.getSscId(),
												bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
												rules.getRow(system.getCursorRecordIndex()).getSelectById());
										for (DuRecord recs : records) {
											multvalBlock = new MultVal();
											multvalBlock.setMultiple(toString(recs.getObject("val")));
											multVal.add(multvalBlock);

										}
										multVal.setLastQuery(hashUtils.encrypt("none"));

										if (Objects.equals(parameter.getWorkType(), "VIEW")) {
											setBlockProperty("MULT_VAL", FormConstant.INSERT_ALLOWED,
													FormConstant.PROPERTY_FALSE);
											setBlockProperty("MULT_VAL", FormConstant.UPDATE_ALLOWED,
													FormConstant.PROPERTY_FALSE);
											setBlockProperty("MULT_VAL", FormConstant.DELETE_ALLOWED,
													FormConstant.PROPERTY_FALSE);

										}

									}

								}

							}

						}

						else {
							if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

								query = """
										update navdb_select_criteria
																	set include_exclude_ind = 'N'
																	where select_by_id = ?
										""";
								app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
								query = """
										 delete from b_selection_criteria_value
																	where select_by_id =?
										""";
								app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
								rules.getRow(system.getCursorRecordIndex()).setOldList("N");

							}

						}

					}

				}

			}

			log.info("clickDetailRadio Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing clickDetailRadio {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkHeliport(String pIdent, String pIcao, String pType) throws Exception {
		log.info("checkHeliport Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getId = """
					select A.select_by_id
					from b_Heliport_to_select A, b_select_by_Heliport_group B          --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
					where Heliport_ident = ?
					and   Heliport_icao like ?
					and   B.navdb_id = ?
					and   A.select_by_id = B.select_by_id
					and   A.ssc_id = B.ssc_id                                         --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
					and   A.ssc_id = NVL(?,?)
					""";
			String getIcaoS = """
					select Terminal_icao             -- Heliport_icao
					from   cptsc.VIEW_FOR_HELIPORT_GROUP   -- pl_std_Heliport
					where  Terminal_ident = ?  -- Heliport_ident = p_ident
					and    data_supplier = ?
					and processing_cycle = ? ---Fix SCR 6109.00 --Ashwin --29-Sep-2020
					and validate_ind in ('Y','S','H','O')
					""";
			String getIcaoT = """
					select Heliport_icao terminal_icao
					from   pl_tld_Heliport
					where  Heliport_ident = ?
					and    data_supplier = ?
					and    processing_cycle = ?
					and    customer_ident IN (SELECT CUSTOMER_IDENT
					FROM   CUSTOMER_NAVDB
					WHERE  NAVDB_ID = ?)
					and    validate_ind in ('Y','S','H','O')
					union
					select Airport_icao terminal_icao
					from   pl_tld_Airport
					where  Airport_ident = ?
					and    data_supplier = ?
					and    processing_cycle = ?
					and    customer_ident IN (SELECT CUSTOMER_IDENT
					FROM   CUSTOMER_NAVDB
					WHERE  NAVDB_ID = ?)
					and    validate_ind in ('Y','S','H','O')
					""";
			String vIcao = null;
			String vIcao2 = null;
			Integer vExist = 0;
			Integer vButton = 0;
			String vName = null;
			String vNameTemp = null;
			String vOtherName = null;
			Integer vCount = 0;
			String vMessage = null;

			if (!Objects.equals(pIcao, null)) {

				query = """
						SELECT COUNT(*) from cptsc.VIEW_FOR_HELIPORT_GROUP   --PL_STD_Heliport
						WHERE terminal_ident = ? --Heliport_IDENT = p_ident
						AND   terminal_icao  = ?  --Heliport_ICAO = p_icao
						AND   PROCESSING_CYCLE = ? ---Fix SCR 6109.00 --Ashwin --29-Sep-2020
						and   validate_ind in ('Y','S','H','O')
						""";
				rec = app.selectInto(query, pIdent, pIcao, controlBlock.getProcCycle());
				vExist = rec.getInt();
				if (Objects.equals(vExist, 0)) {

					query = """
							SELECT COUNT(*) from PL_TLD_Heliport
							WHERE Heliport_IDENT = ?
							AND   Heliport_ICAO = ?
							AND   PROCESSING_CYCLE = ?
							AND   validate_ind in ('Y','S','H','O')
							AND   CUSTOMER_IDENT IN (SELECT CUSTOMER_IDENT
							FROM   CUSTOMER_NAVDB
							WHERE  NAVDB_ID = ?)
							""";
					rec = app.selectInto(query, pIdent, pIcao, global.getProcessingCycle(), navdb.getNavdbId());
					vExist = rec.getInt();
					if (!Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This is a tailored Heliport.");

					}

					else {

						query = """
								SELECT COUNT(*) from PL_TLD_AIrport
								WHERE airport_IDENT = ?
								AND   airport_ICAO = ?
								AND   PROCESSING_CYCLE = ?
								AND   validate_ind in ('Y','S','H','O')
								AND   CUSTOMER_IDENT IN (SELECT CUSTOMER_IDENT
								FROM   CUSTOMER_NAVDB
								WHERE  NAVDB_ID = ?)
								""";
						rec = app.selectInto(query, pIdent, pIcao, global.getProcessingCycle(), navdb.getNavdbId());
						vExist = rec.getInt();
						if (!Objects.equals(vExist, 0)) {

							coreptLib.dspMsg("This is a tailored Airport.");

						}

					}

				}

				vIcao = pIcao;

			}

			else {

				try {
					List<DuRecord> records = app.executeQuery(getIcaoS, pIdent, navdb.getDataSupplier(),
							controlBlock.getProcCycle());
					if (!records.isEmpty()) {
						vIcao = toString(records.getFirst().getObject());
					}
					if (records.isEmpty()) {
						throw new NoDataFoundException("Icao is empty");

					}

					else {
						if (!records.isEmpty()) {
							vIcao2 = vIcao;

						}

						if (records.size() == 1) {

							if (Objects.equals(pType, "RECORD")) {
								heliportToSelect.getRow(system.getCursorRecordIndex()).setHeliportIcao(vIcao);

							}
							vExist = 1;
						} else {

							vExist = 2;
						}

					}
				} catch (NoDataFoundException e) {

					try {
						List<DuRecord> records = app.executeQuery(getIcaoT, pIdent, navdb.getDataSupplier(),
								global.getProcessingCycle(), navdb.getNavdbId(), pIdent, navdb.getDataSupplier(),
								global.getProcessingCycle(), navdb.getNavdbId());
						if (!records.isEmpty()) {
							vIcao = toString(records.getLast().getObject());
						}

						if (records.isEmpty()) {

							throw new NoDataFoundException("");

						}

						else {

							vIcao2 = toString(records.getLast().getObject());

							if (records.isEmpty()) {
								if (Objects.equals(pType, "RECORD")) {
									heliportToSelect.getRow(system.getCursorRecordIndex()).setHeliportIcao(vIcao);

									coreptLib.dspMsg("This is a tailored Heliport/Airport.");

								}

								vExist = 1;

							}

							else {
								vExist = 2;

							}

						}
					} catch (NoDataFoundException exp) {
						vExist = 0;

					} catch (Exception ex) {

						setApplicationProperty("cursor_style", "DEFAULT");

						coreptLib.dspMsg(OracleHelpers.getSQLerrm(ex));
						throw new FormTriggerFailureException();

					}

				}
				catch (Exception e) {

					setApplicationProperty("cursor_style", "DEFAULT");

					coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

					throw new FormTriggerFailureException();

				}

			}
			if (!Objects.equals(pIcao, null)) {

				List<DuRecord> records = app.executeQuery(getId, pIdent, pIcao, navdb.getNavdbId(),
						parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
				for (DuRecord recs : records) {

					query = """
							select group_name from b_select_by_Heliport_group                           --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
							where select_by_id = ?
								and ssc_id = NVL(?,?)
							""";
					rec = app.selectInto(query, recs.getObject(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						vOtherName = getNullClean(vOtherName) + " " + vNameTemp;

					}
				}

			}

			else {
				List<DuRecord> records = app.executeQuery(getId, pIdent, "%", navdb.getNavdbId(), parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
				for (DuRecord recs : records) {

					query = """
							select group_name from  b_select_by_Heliport_group                          --Fix - SCR 7681.01 - 17-Jan-2018 - Ashish N
							where select_by_id = ?
							and ssc_id = NVL(?,?)
							""";
					rec = app.selectInto(query, recs.getObject(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						vOtherName = getNullClean(vOtherName) + " " + vNameTemp;

					}
				}

			}
			if (Objects.equals(pType, "BUTTON")) {
				if (!Objects.equals(vName, null)) {
					goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
					selectByHeliportGroup = new DuBlock<>();
					selectByHeliportGroup.getData().add(0, new SelectByHeliportGroup());

					String where = "NAVDB_ID= '%s' and SSC_ID =%d AND GROUP_NAME = '%s'".formatted(navdb.getNavdbId(),
							navdb.getSscId(), ltrim(vName));

					OracleHelpers.copyWithIndex(this, hashUtils.encrypt(where),
							"selectByHeliportGroup." + "defaultWhere", 0);

					system.setCursorBlock("selectByHeliportGroup");

					navdbExecuteQuery();

					heliportToSelect = new DuBlock<>();
					heliportToSelect.getData().add(0, new HeliportToSelect());

					heliportToSelect.getRow(0).setHeliportIdent(pIdent);
					heliportToSelect.getRow(0).setHeliportIcao(vIcao);
					if (Objects.equals(controlBlock.getHeliportIcao(), null)) {
						String searchQuery = """
								SELECT HELIPORT_ICAO
								FROM COREPT_B.HELIPORT_TO_SELECT
								WHERE SELECT_BY_ID = ?
								AND HELIPORT_IDENT= ?
								AND SSC_ID= ?
								""";
						List<DuRecord> selectRec = app.executeQuery(searchQuery,
								selectByHeliportGroup.getRow(0).getSelectById(), pIdent,
								selectByHeliportGroup.getRow(0).getSscId());
						heliportToSelect.getRow(0)
								.setHeliportIcao(toString(selectRec.getLast().getObject("HELIPORT_ICAO")));
					}

					goBlock(DbConstants.HELIPORT_TO_SELECT, "");
					system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT));


					if (!Objects.equals(vOtherName, null)) {
						vMessage = "There exist other Terminal(s) with the same ident in \ngroup:" + vOtherName + ".";

					}

					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("Invalid Heliport/Airport, found in group " + vName + "." + chr(10)
								+ getNullClean(vMessage));

					}

					else {
						if (!Objects.equals(vOtherName, null)) {

							coreptLib.dspMsg(vMessage);

						}

					}

				}

				else {
					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg(
								"This is not a valid Heliport/Airport in cycle " + global.getProcessingCycle() + ".");

					}

					else if (Objects.equals(vExist, 1)) {

						coreptLib.dspMsg("This Heliport/Airport is available to use.");
						controlBlock.setTempHeliport(controlBlock.getHeliportIdent());
						goBlock("STD_HELIPORT", "");

					}

					else {

						coreptLib.dspMsg("There are more than one Heliports/Airports with this" + chr(10)
								+ "ident, all of them available to use.");

					}

				}

			}

			else {
				if (!Objects.equals(vName, null) && !Objects.equals(pIcao, null)) {
					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This Heliport/Airport is already used in group " + vName + ". " + chr(10)
								+ "And this is not a valid Heliport/Airport in cycle " + global.getProcessingCycle()
								+ ".");

					}

					else if (Objects.equals(vExist, 1)) {

						coreptLib.dspMsg("This Heliport/Airport is already used in group " + vName + ". ");

					}

					setApplicationProperty("cursor_style", "DEFAULT");
					throw new FormTriggerFailureException();

				}

				else {
					if (Objects.equals(vExist, 0) && !Objects.equals(pIcao, null)) {

						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							displayAlert.moreButtons("S", "INVALID Airport DATA",
									"This Airport does not exist in cycle '" + global.getProcessingCycle() + "' ."
											+ chr(10) + "Select from the options:",
									"Correct the data", "Accept it", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("heliportAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("heliportAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							setApplicationProperty("cursor_style", "DEFAULT");
							throw new FormTriggerFailureException();

						}

						else {
							log.debug("Inside else condition on vExist and pIcao at checkHeliport");
						}

					}

					else {
						log.debug("Inside else condition on vButton at checkHeliport");

					}

				}

			}

			log.debug(vIcao2);
			log.info("checkHeliport Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkHeliport {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDefaultNewCriteria(Integer pNewRecordCode) throws Exception {
		log.info("createDefaultNewCriteria Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getNotTSelectId = """
					select select_by_id
					from   select_by_geographic_area
					where  navdb_id = ?
					union
					select select_by_id
					from   select_by_icao
					where  navdb_id = ?
					union
					select select_by_id
					from   select_by_area
					where  navdb_id = ?
					""";
			String getAirportSelectId = """
					select select_by_id
					from   select_by_airport_group
					where  navdb_id = ?
					""";
			String getHeliportSelectId = """
					select select_by_id
					from   select_by_heliport_group
					where  navdb_id = ?
					""";
			String vTypeInd = null;

			try {

				setApplicationProperty("cursor_style", "DEFAULT");

				query = """
						select enroute_terminal_ind from record_type
						where record_type_code = ?
						""";
				rec = app.selectInto(query, pNewRecordCode);
				vTypeInd = rec.getString();
				if (!Objects.equals(nvl(vTypeInd, "C"), "C")) {

					createDatatypCriteria(-1, pNewRecordCode);
					List<DuRecord> records = app.executeQuery(getNotTSelectId, navdb.getNavdbId(), navdb.getNavdbId(),
							navdb.getNavdbId());
					for (DuRecord id_rec : records) {

						createDatatypCriteria(toInteger(id_rec.getObject("select_by_id")), pNewRecordCode);
					}
					if (Objects.equals(vTypeInd, "T")) {
						List<DuRecord> recordss = app.executeQuery(getAirportSelectId, navdb.getNavdbId());
						for (DuRecord id_rec : recordss) {

							createDatatypCriteria(toInteger(id_rec.getObject("select_by_id")), pNewRecordCode);
						}

					}

					else if (Objects.equals(vTypeInd, "H")) {
						List<DuRecord> recordlist = app.executeQuery(getHeliportSelectId, navdb.getNavdbId());
						for (DuRecord id_rec : recordlist) {

							createDatatypCriteria(toInteger(id_rec.getObject("select_by_id")), pNewRecordCode);
						}

					}

				}

				setApplicationProperty("cursor_style", "DEFAULT");
			}
			catch (Exception e) {
				setApplicationProperty("cursor_style", "DEFAULT");

				coreptLib.dspMsg("Error: " + OracleHelpers.getSQLerrm(e));

			}

			log.info("createDefaultNewCriteria Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDefaultNewCriteria {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateAirportGroups(String pPort) throws Exception {
		log.info("populateAirportGroups Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			try {
				rg = findGroup("apr");
				if (!idNull(rg)) {
					deleteGroup(groups, "rg");

				}

				EParam.DYNAMIC_QUERY_ONE.setValue(pPort);
				EParam.DYNAMIC_QUERY_TWO.setValue(navdb.getNavdbId());
				EParam.DYNAMIC_QUERY_THREE.setValue("select group_name rlabel,to_char(SELECT_BY_ID) rvalue from select_by_"
						+ EParam.DYNAMIC_QUERY_ONE.getValue() + "_group where NAVDB_ID = '"
						+ EParam.DYNAMIC_QUERY_TWO.getValue()
						+ "'minus select group_name rlabel,to_char(SELECT_BY_ID) rvalue from select_by_"
						+ EParam.DYNAMIC_QUERY_ONE.getValue() + "_group where select_by_id = "
						+ nameIn(this, EParam.DYNAMIC_QUERY_ONE.getValue() + "_to_select.select_by_id"));
				
				rg = createGroupFromQuery("apr",EParam.DYNAMIC_QUERY_THREE.getValue());
				nn = populateGroup(rg);
				if (!Objects.equals(nn, 0)) {
					log.debug("populateGroup nn if condition executed");

				}

				populateList("SELECT_FROM_GROUPS.SELECTED_GROUP", rg);
				selectFromGroups.setSelectedGroup(getGroupCharCell("apr.rvalue", 1));

			}
			catch (Exception e) {

				coreptLib.dspMsg("Cannot move the Group Since it has only one group");
				if (Objects.equals(pPort, "heliport")) {
					goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
					setcurrentAndCursorBlock(DbConstants.SELECT_BY_HELIPORT_GROUP);

				}

				else {
					goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "");
					setcurrentAndCursorBlock(DbConstants.SELECT_BY_AIRPORT_GROUP);

				}
				throw new FormTriggerFailureException();

			}

			log.info("populateAirportGroups Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateAirportGroups {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSubType(String pBlock) throws Exception {
		log.info("populateSubType Executing");
		String query = "";
		DuRecord rec = null;
		Integer curs = system.getCursorRecordIndex();

		try {
			Integer vTypeCode = 0;
			String getSubTypes = """
					select a.record_sub_type_code, a.record_sub_type_descr
						from record_sub_type a,FMS_data_sub_type b
						where a.record_type_code = b.record_type_code
						and a.record_sub_type_code = b.record_sub_type_code
						and a.Record_Type_Code = ?
						and b.selectable_ind = 'Y'
						and upper(b.FMS_ID) = upper(?)
						and nvl(a.PRECISION_IND,'-') = nvl(?,'-')
					""";

			String vValue = toString(nameIn(this, pBlock + ".real_value"));
			String vRealValue = null;
			String vInd = null;

			try {
				if (Objects.equals(pBlock, "appSubType")) {

					query = """
							select value from b_selection_criteria_value
							 				where 1=1
							 				and ssc_id = nvl(?, ?)
							 				and substr(value,1,1) = ?
							 				and select_by_id = ?
							 				and value_descr  = ?
							""";
					rec = app.selectInto(query, parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), vValue,
							rules.getRow(system.getCursorRecordIndex()).getSelectById(),
							rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
					vRealValue = rec.getString();
					vInd = "Y";

				}

				else {

					query = """
							select 'Y' from b_selection_criteria_value
							 				where 1=1
							 				and ssc_id = nvl(?, ?)
							 				and value = ?
							 				and select_by_id = ?
							 				and value_descr  = ?
							""";
					rec = app.selectInto(query, parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), vValue,
							rules.getRow(system.getCursorRecordIndex()).getSelectById(),
							rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
					vInd = rec.getString();

				}
			} catch (NoDataFoundException e) {
				vInd = "N";

			}
			copyWithIndex(this, vInd, pBlock + ".chk", curs);

			if (like("%APPROACH%", navdb.getDataName())) {
				if (Arrays.asList(85, 86).contains(rules.getRow(curs).getCriteriaId())) {
					vTypeCode = 90;

				}

				else if (Arrays.asList(317, 319).contains(rules.getRow(curs).getCriteriaId())) {
					vTypeCode = 190;

				}

			}
			Integer cValueCursor = 0;
			if (Arrays.asList(85, 317).contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
				appSubType.getData().clear();
				if (Objects.equals(appSubType.getRow(cValueCursor).getValue(), null)) {
					appSubType = new DuBlock<>();
					appSubType.add(new NsbAppSubType());
					appSubType.getRow(cValueCursor).setValue("------Precision Route Types------");
					appSubType.getRow(cValueCursor).setRealValue("precision");
				}
				setItemInstanceProperty("app_sub_type.value", toString(curs), "visual_attribute", "seperate");
				setItemInstanceProperty("app_sub_type.limit_priority", toString(curs), "visual_attribute", "seperate");
				List<DuRecord> records = app.executeQuery(getSubTypes, vTypeCode, navdb.getFmsId(), "Y");
				int index = cValueCursor + 1;

				for (DuRecord reco : records) {

					appSubType.add(new NsbAppSubType());
					appSubType.getRow(index).setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));

					appSubType.getRow(index)
							.setValue(displayGuidelines(rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));

					appSubType.getRow(index).setChk(applyTheCheck("appSubType", index));

					index++;

					cValueCursor = index;
				}

				for (int k = 0; k <= appSubType.size() - 1; k++) {
					if (Objects.equals(appSubType.getRow(k).getValue(), null)
							|| Objects.equals(appSubType.getRow(k).getRealValue(), null)) {
						appSubType.remove(k);
					}
				}

				appSubType.add(new NsbAppSubType());
				appSubType.getRow(cValueCursor).setValue("----Non Precision Route Types----");
				appSubType.getRow(cValueCursor).setRealValue("non-precision");

				Integer curCursor = cValueCursor + 1;
				setItemInstanceProperty("app_sub_type.value", toString(cValueCursor), "visual_attribute", "seperate");
				setItemInstanceProperty("app_sub_type.limit_priority", toString(cValueCursor), "visual_attribute",
						"seperate");
				List<DuRecord> listOfRecords = app.executeQuery(getSubTypes, vTypeCode, navdb.getFmsId(), 'N');
				int cursva = curCursor;
				for (DuRecord reco : listOfRecords) {
					appSubType.add(new NsbAppSubType());
					appSubType.getRow(cursva).setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));
					appSubType.getRow(cursva)
							.setValue(displayGuidelines(rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));

					appSubType.getRow(cursva).setChk(applyTheCheck("appSubType", cursva));
					cursva++;
				}
				int priorityIndex = 0;
				if (Objects.equals(appSubType.getRow(priorityIndex).getRealValue(), "precision")) {
					for (int j = priorityIndex + 1; j < appSubType.size(); j++) {
						try {
							query = """
									select value from b_selection_criteria_value
										where 1=1   and ssc_id = nvl(?, ?)
									 				and substr(value,1,1) = ?
									 				and select_by_id = ?
									 				and value_descr  = ?
									""";

							rec = app.selectInto(query, parameter.getSscId(),
									bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
									appSubType.getRow(j).getRealValue(),
									rules.getRow(system.getCursorRecordIndex()).getSelectById(),
									rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
							log.info("Hii checking");
							vRealValue = rec.getString();
							if (!Objects.equals(vRealValue, null)) {
								appSubType.getRow(priorityIndex).setLimitPriority(toInteger(substr(vRealValue, 2, 2)));
								break;
							}
						} catch (NoDataFoundException exp) {
							log.error(exp.getMessage());
						}

					}
				}

				for (int i = 0; i < appSubType.size(); i++) {
					if (Objects.equals(appSubType.getRow(i).getRealValue(), "non-precision")) {
						for (int k = i + 1; k < appSubType.size(); k++) {
							try {
								query = """
										select value from b_selection_criteria_value
										where 1=1
												and ssc_id = nvl(?, ?)
										 				and substr(value,1,1) = ?
										 				and select_by_id = ?
										 				and value_descr  = ?
										""";

								rec = app.selectInto(query, parameter.getSscId(),
										bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
										appSubType.getRow(k).getRealValue(),
										rules.getRow(system.getCursorRecordIndex()).getSelectById(),
										rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
								vRealValue = rec.getString();
								if (!Objects.equals(vRealValue, null)) {
									appSubType.getRow(i).setLimitPriority(toInteger(substr(vRealValue, 2, 2)));
									break;
								}
							} catch (NoDataFoundException exp) {
								log.error(exp.getMessage());
							}
						}
						break;
					}
				}

				for (int k = 0; k <= appSubType.size() - 1; k++) {
					if (Objects.equals(appSubType.getRow(k).getValue(), null)
							|| Objects.equals(appSubType.getRow(k).getRealValue(), null)) {
						appSubType.remove(k);
					}
				}

				appSubType.setQueryHits(toString(appSubType.getData().size()));
				appSubType.setLastQuery(hashUtils.encrypt("none"));

			}


			{
				int j = 0;

				for (int f = 0; f < datatypRad.getData().size(); f++) {
					system.setCursorRecordIndex(j);
					if (like("%APPROACH%", navdb.getDataName())
							&& Arrays.asList(86, 319).contains(toInteger(rules.getRow(curs).getCriteriaId()))) {
						goBlock("record_sub_type", "");
						recordSubType = new DuBlock<>();
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(0);
						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("0");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("0");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("1");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("1");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("2");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("2");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("3");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("3");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("4");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("4");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("5");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("5");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("A");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("A");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("B");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("B");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("C");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("C");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("G");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("G");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("L");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("L");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("P");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("P");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("U");
						recordSubType.getRow(system.getCursorRecordIndex()).setValue("U");
						recordSubType.getRow(system.getCursorRecordIndex())
								.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
						recordSubType.add(new RecordSubType());
						system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);

						for (int k = 0; k <= recordSubType.size() - 1; k++) {
							if (Objects.equals(recordSubType.getRow(k).getValue(), null)) {
								recordSubType.remove(k);
							}
						}

					}

					else if (like("%AIRWAY%", navdb.getDataName())) {

						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 23)) {
							goBlock("record_sub_type", "");
							recordSubType = new DuBlock<>();
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(0);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("H");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("High");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("L");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("Low");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("B");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("Both");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							for (int k = 0; k <= recordSubType.size() - 1; k++) {
								if (Objects.equals(recordSubType.getRow(k).getValue(), null)) {
									recordSubType.remove(k);
								}
							}

						}

						else if (Objects.equals(rules.getRow(curs).getCriteriaId(), 22)) {
							goBlock("record_sub_type", "");
							recordSubType = new DuBlock<>();
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(0);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("NONCOMPULSORY");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("NonEssential/NonCompulsory");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("GATEWAY");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("Gateway");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("UNCHARTED");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("Uncharted");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							for (int k = 0; k <= recordSubType.size() - 1; k++) {
								if (Objects.equals(recordSubType.getRow(k).getValue(), null)) {
									recordSubType.remove(k);
								}
							}

						} else if (Objects.equals(rules.getRow(curs).getCriteriaId(), 131)) {
							goBlock("record_sub_type", "");
							recordSubType = new DuBlock<>();
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(0);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("A");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("A - Airline Airway");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("C");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("C - Control");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));
							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("D");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("D - Direct Route");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("H");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("H - Helicopter Airways");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("O");
							recordSubType.getRow(system.getCursorRecordIndex())
									.setValue("O - Officially Designated Airways(Except RNAV)");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("R");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("R - RNAV Airways");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("S");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("S - Undesignated ATS Route");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							recordSubType.add(new RecordSubType());
							system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);
							recordSubType.getRow(system.getCursorRecordIndex()).setRealValue("T");
							recordSubType.getRow(system.getCursorRecordIndex()).setValue("T - TACAN Airway");

							recordSubType.getRow(system.getCursorRecordIndex())
									.setChk(applyTheCheck("recordSubType", system.getCursorRecordIndex()));

							for (int k = 0; k <= recordSubType.size() - 1; k++) {
								if (Objects.equals(recordSubType.getRow(k).getValue(), null)) {
									recordSubType.remove(k);
								}
							}

						}

					} else if (like("%SID%", navdb.getDataName())) {
						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 98)) {

							goBlock("record_sub_type", "");
							List<DuRecord> records = app.executeQuery(getSubTypes, 91, navdb.getFmsId(), null);
							recordSubType = new DuBlock<>();

							int val = 0;
							for (DuRecord reco : records) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(val)
										.setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));

								system.setCursorRecordIndex(val);
								recordSubType.getRow(val).setValue(
										displaySidGuidelines(rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));

								recordSubType.getRow(val).setChk(applyTheCheck("recordSubType", val));

								val++;

							}

							for (int k = 0; k <= recordSubType.size() - 1; k++) {
								if (Objects.equals(recordSubType.getRow(k).getValue(), null)) {
									recordSubType.remove(k);
								}
							}

						}

					}

					else if (like("%STAR%", navdb.getDataName())) {
						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 99)) {
							goBlock("record_sub_type", "");
							List<DuRecord> records = app.executeQuery(getSubTypes, 92, navdb.getFmsId(), "");
							int val = 0;
							for (DuRecord reco : records) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(val)
										.setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));

								system.setCursorRecordIndex(val);
								recordSubType.getRow(val).setValue(displayStarGuidelines(
										rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));

								recordSubType.getRow(val).setChk(applyTheCheck("recordSubType", val));
								val++;
							}

							for (int k = 0; k <= recordSubType.size() - 1; k++) {
								if (Objects.equals(recordSubType.getRow(k).getRealValue(), null)) {
									recordSubType.remove(k);
								}
							}

						}

					}

					else if (like("%OBSTACLE%", navdb.getDataName())) {
						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 602)) {
							goBlock("record_sub_type", "");
							String query1 = "select * from obs_type";
							List<DuRecord> records = app.executeQuery(query1);
							DuBlock<RecordSubType> recordSubType = new DuBlock<>();

							int val = 0;
							for (DuRecord reco : records) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(val).setValue(toString(reco.getObject("obstacle_type")));
								recordSubType.getRow(system.getCursorRecordIndex())
										.setRealValue(toString(reco.getObject("obstacle_type")));

								recordSubType.getRow(val).setChk(applyTheCheck("appSubType", val));
								val++;
							}

							for (int k = 0; k <= recordSubType.size() - 1; k++) {
								if (Objects.equals(recordSubType.getRow(k).getValue(), null)) {
									recordSubType.remove(k);
								}
							}
						}

					}
					j++;
				}

			}

			recordSubType.setLastQuery(hashUtils.encrypt("none"));

			recordSubType.setQueryHits(toString(recordSubType.getData().size()));

			log.info("populateSubType Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSubType {}" , e.getMessage());
			throw e;

		}
	}

	private String displayStarGuidelines(String pValue) {

		if (Objects.equals(pValue, "1")) {
			return "1 - STAR Enroute Transition";

		}

		else if (Objects.equals(pValue, "2")) {
			return "2 - STAR Common";

		}

		else if (Objects.equals(pValue, "3")) {
			return "3 - STAR Runway Transition";

		}

		else if (Objects.equals(pValue, "4")) {
			return "4 - RNAV STAR Enroute Transition";

		}

		else if (Objects.equals(pValue, "5")) {
			return "5 - RNAV STAR Common";

		}

		else if (Objects.equals(pValue, "6")) {
			return "6 - RNAV STAR Runway Transition";

		}

		else if (Objects.equals(pValue, "7")) {
			return "7 - Profile Descent Enroute Transition";

		}

		else if (Objects.equals(pValue, "8")) {
			return "8 - Profile Descent Common";

		}

		else if (Objects.equals(pValue, "9")) {
			return "9 - Profile Descent Runway Transition";

		}

		else if (Objects.equals(pValue, "F")) {
			return "F - FMS STAR Enroute Transition";

		}

		else if (Objects.equals(pValue, "M")) {
			return "M - FMS STAR Common";

		}

		else if (Objects.equals(pValue, "S")) {
			return "S - FMS STAR Runway Transition";

		}

		else {
			return pValue;

		}

	}

	private String displayGuidelines(String pValue) {

		if (Objects.equals(pValue, "A")) {
			return "A - APPROACH TRANSITION";

		}

		else if (Objects.equals(pValue, "B")) {
			return "B - LOC/BACKCOURSE";

		}

		else if (Objects.equals(pValue, "D")) {
			return "D - VORDME";

		}

		else if (Objects.equals(pValue, "F")) {
			return "F - FMS";

		}

		else if (Objects.equals(pValue, "G")) {
			return "G - IGS";

		}

		else if (Objects.equals(pValue, "I")) {
			return "I - ILS";

		}

		else if (Objects.equals(pValue, "J")) {
			return "J - GLS";

		}

		else if (Objects.equals(pValue, "L")) {
			return "L - LOC";

		}

		else if (Objects.equals(pValue, "M")) {
			return "M - MLS";

		}

		else if (Objects.equals(pValue, "N")) {
			return "N - NDB";

		}

		else if (Objects.equals(pValue, "P")) {
			return "P - GPS";

		}

		else if (Objects.equals(pValue, "Q")) {
			return "Q - NDB+DME";

		}

		else if (Objects.equals(pValue, "R")) {
			return "R - RNAV";

		}

		else if (Objects.equals(pValue, "S")) {
			return "S - VORDME/VORTAC";

		}

		else if (Objects.equals(pValue, "T")) {
			return "T - TACAN";

		}

		else if (Objects.equals(pValue, "U")) {
			return "U - SDF";

		}

		else if (Objects.equals(pValue, "V")) {
			return "V - VOR";

		}

		else if (Objects.equals(pValue, "W")) {
			return "W - MLS, TYPE A";

		}

		else if (Objects.equals(pValue, "X")) {
			return "X - LDA";

		}

		else if (Objects.equals(pValue, "Y")) {
			return "Y - MLS, TYPE B AND C";

		}

		else if (Objects.equals(pValue, "Z")) {
			return "Z - MISSED APPROACH";

		}

		else {
			return pValue;

		}

	}

	private String displaySidGuidelines(String pValue) {

		if (Objects.equals(pValue, "1")) {
			return "1 - SID Runway Transition";

		}

		else if (Objects.equals(pValue, "2")) {
			return "2 - SID Common";

		}

		else if (Objects.equals(pValue, "3")) {
			return "3 - SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "4")) {
			return "4 - RNAV SID Runway Transition";

		}

		else if (Objects.equals(pValue, "5")) {
			return "5 - RNAV SID Common";

		}

		else if (Objects.equals(pValue, "6")) {
			return "6 - RNAV SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "F")) {
			return "F - FMS SID Runway Transition";

		}

		else if (Objects.equals(pValue, "M")) {
			return "M - FMS SID Common";

		}

		else if (Objects.equals(pValue, "S")) {
			return "S - FMS SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "T")) {
			return "T - Vector SID Runway Transition";

		}

		else if (Objects.equals(pValue, "V")) {
			return "V - Vector SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "0")) {
			return "0 - SID Engine Out";

		}

		else {
			return pValue;

		}

	}

	@Override
	public void setButtonProperty(String pButton) throws Exception {
		log.info("setButtonProperty Executing");
		try {
			List<String> vButton = new ArrayList<>();
			vButton.add(0, "CRITERIA");
			vButton.add(1, "CUSTOMER");
			vButton.add(2, "GEOGRAPHIC");
			vButton.add(3, "AREA");
			vButton.add(4, DbConstants.ICAO);
			vButton.add(5, "ARPTLSTS");
			vButton.add(6, "HELIPLSTS");
			vButton.add(7, "SELECTIONS");
			vButton.add(8, "COPY_NAVDB");
			vButton.add(9, "DMR_LIST");
			vButton.add(10, "VALIDATE");
			vButton.add(11, "REPORT");
			vButton.add(12, "CUSTOMER_INFO");
			vButton.add(13, "NAVDB_DFM");

			for (int i = 0; i < 14; i++) {
				if (Objects.equals(vButton.get(i), pButton)) {
					setItemProperty("control_block." + vButton.get(i), "visual_attribute", "GREY_OUT");

				}

				else {
					setItemProperty("control_block." + vButton.get(i), "visual_attribute", "DEFAULT");

				}

			}

			log.info("setButtonProperty Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setButtonProperty {} " , e.getMessage());
			throw e;

		}
	}

	public void populateFocal() throws Exception {
		log.info("populateFocal Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("focal");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			rg = createGroupFromQuery("focal",
					"""
							select  DECODE(LAST_NAME,NULL,FIRST_NAME,FIRST_NAME||' '||LAST_NAME ) rlabel,LOGON_ID rvalue
								from corept_user
								where first_name is not null
								and   logon_id in (select logon_id
								                   from corept_user_role
								                   where role_name in ('COREPT_PROD_DATA','COREPT_ADMIN','COREPT_VIEW_DATA','COREPT_PROD_EXEC'))
								                   and active_ind = 'Y'
								order by 1 asc
								""");
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {

				coreptLib.dspMsg("Populate group had error" + toChar(nn));

			}

			populateList("NAVDB.PRIMARY_FOCAL", rg);
			populateList("NAVDB.SECONDARY_FOCAL", rg);
			populateList("CONTROL_BLOCK.PRI_FOCAL", rg);
			populateList("CONTROL_BLOCK.SEC_FOCAL", rg);

			log.info("populateFocal Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateFocal {} " , e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkProfile() throws Exception {
		log.info("checkProfile Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) from flight_management_system where fms_id = ? and binary_format_type like 'K%'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = toInteger(rec.getString());
			if (vCount > 0) {
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				showLov("PROFILE_NUM");

			}

			else {
				setItemProperty("navdb.profile_number", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.profile_number", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("checkProfile Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkProfile {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableProfile() throws Exception {
		log.info("enableDisableProfile Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) from flight_management_system where fms_id = ? and binary_format_type like 'K%'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = toInteger(rec.getString());
			if (vCount > 0) {
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.profile_number", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.profile_number", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableProfile Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableProfile {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableValerieInd() throws Exception {
		log.info("enableDisableValerieInd Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) from flight_management_system where fms_id = ? and binary_format_type like 'FD%'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = toInteger(rec.getString());
			if (vCount > 0) {
				setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemInstanceProperty("navdb.gen_valerie.chk", "", "visual_attribute", "CHECKED");

			}

			else {
				setItemProperty("navdb.gen_valerie", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.gen_valerie", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableValerieInd Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableValerieInd {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSuaRules(String pRecordType) throws Exception {
		log.info("populateSuaRules Executing");
		String query = "";
		DuRecord rec = null;
		try {

			if (Objects.equals(pRecordType, "UC")) {
				String[] lStringArray = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
						"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4" };
				SuaRules suaRulesSingleBlock = null;
				suaRules.getData().clear();

				for (int i = 1; i <= lStringArray.length; i++) {
					suaRulesSingleBlock = new SuaRules();
					suaRulesSingleBlock.setType(lStringArray[i]);

					if (!Objects.equals(suaRules.getRow(system.getCursorRecordIndex()).getType(), null)) {

						try {

							query = """
									select 'Y' from selection_criteria_value
									 				where value = ?
									 				and select_by_id = ?
									 				and value_descr = ?
									""";
							rec = app.selectInto(query, suaRules.getRow(system.getCursorRecordIndex()).getType(),
									rules.getRow(system.getCursorRecordIndex()).getSelectById(),
									rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
							suaRulesSingleBlock.setChk(rec.getString());
						} catch (NoDataFoundException e) {
							suaRulesSingleBlock.setChk("N");

						}

					}

					if (Objects.equals(suaRulesSingleBlock.getType(), "A")) {
						suaRulesSingleBlock.setAbbrevation("Airport Radar Service Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "B")) {
						suaRulesSingleBlock.setAbbrevation("Air Traffic Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "C")) {
						suaRulesSingleBlock.setAbbrevation("Class A Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "D")) {
						suaRulesSingleBlock.setAbbrevation("Class B Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "E")) {
						suaRulesSingleBlock.setAbbrevation("Class C Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "F")) {
						suaRulesSingleBlock.setAbbrevation("Class D Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "G")) {
						suaRulesSingleBlock.setAbbrevation("Class E Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "H")) {
						suaRulesSingleBlock.setAbbrevation("Class F Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "I")) {
						suaRulesSingleBlock.setAbbrevation("Class G Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "J")) {
						suaRulesSingleBlock.setAbbrevation("Multi-Class Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "K")) {
						suaRulesSingleBlock.setAbbrevation("Control Area (Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "L")) {
						suaRulesSingleBlock.setAbbrevation("Control Area (Non-Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "M")) {
						suaRulesSingleBlock.setAbbrevation("Control Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "N")) {
						suaRulesSingleBlock.setAbbrevation("Helicopter Protected Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "O")) {
						suaRulesSingleBlock.setAbbrevation("Helicopter Traffic Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "P")) {
						suaRulesSingleBlock.setAbbrevation("Military Air Traffic Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Q")) {
						suaRulesSingleBlock.setAbbrevation("Military Control Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "R")) {
						suaRulesSingleBlock.setAbbrevation("Military Terminal Area or Control");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "S")) {
						suaRulesSingleBlock.setAbbrevation("Oceanic Control Area (Non-Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "T")) {
						suaRulesSingleBlock.setAbbrevation("Radar (Zone or Area)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "U")) {
						suaRulesSingleBlock.setAbbrevation("Special Rules Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "V")) {
						suaRulesSingleBlock.setAbbrevation("Special Rules Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "W")) {
						suaRulesSingleBlock.setAbbrevation("Terminal Control Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "X")) {
						suaRulesSingleBlock.setAbbrevation("Terminal Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Y")) {
						suaRulesSingleBlock.setAbbrevation("Terminal Radar Service Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Z")) {
						suaRulesSingleBlock.setAbbrevation("Traffic Information Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "1")) {
						suaRulesSingleBlock.setAbbrevation("Upper Control Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "2")) {
						suaRulesSingleBlock.setAbbrevation("Upper Control Area (Non-Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "3")) {
						suaRulesSingleBlock.setAbbrevation("Positive Control Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "4")) {
						suaRulesSingleBlock.setAbbrevation("Traffic Information Area");

					}

					suaRules.add(suaRulesSingleBlock);

				}

				suaRules.setQueryHits(toString(suaRules.getData().size()));
				;
			}

			if (Objects.equals(pRecordType, "UR")) {
				String[] lStringArray = { "A", "B", "C", "D", "F", "G", "J", "K", "M", "P", "R", "S", "T", "U", "W",
						"Z" };
				SuaRules suaRulesSingleBlock = null;
				suaRules.getData().clear();
				for (int i = 0; i < lStringArray.length; i++) {
					suaRulesSingleBlock = new SuaRules();
					suaRulesSingleBlock.setType(lStringArray[i]);

					if (!Objects.equals(suaRulesSingleBlock.getType(), null)) {

						try {

							query = """
									select 'Y' from selection_criteria_value
									 				where value = ?
									 				and select_by_id = ?
									 				and value_descr = ?
									""";
							rec = app.selectInto(query, suaRulesSingleBlock.getType(),
									rules.getRow(system.getCursorRecordIndex()).getSelectById(),
									rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
							suaRulesSingleBlock.setChk(rec.getString());
						} catch (NoDataFoundException e) {
							suaRulesSingleBlock.setChk("N");

						}

					}

					if (Objects.equals(suaRulesSingleBlock.getType(), "A")) {
						suaRulesSingleBlock.setAbbrevation("Alert Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "B")) {
						suaRulesSingleBlock.setAbbrevation("Buffer Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "C")) {
						suaRulesSingleBlock.setAbbrevation("Caution Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "D")) {
						suaRulesSingleBlock.setAbbrevation("Danger Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "F")) {
						suaRulesSingleBlock.setAbbrevation("Cross Boarder Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "G")) {
						suaRulesSingleBlock.setAbbrevation("Temporary Reserve Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "J")) {
						suaRulesSingleBlock.setAbbrevation("Temporary Flight Restriction");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "K")) {
						suaRulesSingleBlock.setAbbrevation("Temporary Segregated Areas");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "M")) {
						suaRulesSingleBlock.setAbbrevation("Military Operations Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "P")) {
						suaRulesSingleBlock.setAbbrevation("Prohibited Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "R")) {
						suaRulesSingleBlock.setAbbrevation("Restricted Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "S")) {
						suaRulesSingleBlock.setAbbrevation("Advisory Area (Canada)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "T")) {
						suaRulesSingleBlock.setAbbrevation("Training Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "U")) {
						suaRulesSingleBlock.setAbbrevation("Unspecified Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "W")) {
						suaRulesSingleBlock.setAbbrevation("Warning Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Z")) {
						suaRulesSingleBlock.setAbbrevation("Air Defense Identification Zone");

					}

					suaRules.add(suaRulesSingleBlock);

				}
				suaRules.setQueryHits(toString(suaRules.getData().size()));

			}

			log.info("populateSuaRules Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSuaRules {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public String getIncExcInd(Integer pSelectById) throws Exception {
		log.info("getIncExcInd Executing");
		String query = "";
		DuRecord rec = null;
		try {

			try {

				query = """
						Select	Nvl(Include_Exclude_Ind,'I')
											from 		Select_By_Airport_Group
							        Where select_by_id = ?
						""";
				rec = app.selectInto(query, pSelectById);
				String ind = rec.getString();
				parameter.setIncExcInd(ind);
			}
			catch (Exception e) {
				parameter.setIncExcInd(null);

			}

			log.info("getIncExcInd Executed Successfully");
			return (parameter.getIncExcInd());

		} catch (Exception e) {
			log.error("Error while executing getIncExcInd {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public String populateIatacode(String vIdent, String vIcao) throws Exception {
		log.info("populateIatacode Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vSiatacode = null;

			try {
				if (!Objects.equals(vIdent, null) && !Objects.equals(vIcao, null)) {

					query = """
							SELECT ata_iata_designator from pl_std_airport
								 WHERE data_supplier = ?
									 AND processing_cycle = ?
									 AND airport_ident = ?
									 AND airport_icao  = ?
							""";
					rec = app.selectInto(query, global.getDataSupplier(), global.getProcessingCycle(), vIdent, vIcao);
					vSiatacode = rec.getString();

				}

				return vSiatacode;
			} catch (NoDataFoundException e) {

				return null;

			}
			catch (Exception e) {

				coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

			}
			log.info("populateIatacode Executed Successfully");
			return vSiatacode;

		} catch (Exception e) {
			log.error("Error while executing populateIatacode {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDefaultIncExcInd(String piBlock, String piItem, Integer index) throws Exception {
		log.info("populateDefaultIncExcInd Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer lnRecordTypeCode = 0;
			String lcIncInd = null;
			String lcExcInd = null;
			String lcInd = null;

			try {

				query = """
						SELECT Record_Type_Code, Inc_Ind, Exc_Ind
						             from (  SELECT Record_Type_Code,
						                            MAX (
						                               CASE
						                                  WHEN Include_Exclude_Ind = 'I' THEN
						                                     Include_Exclude_Ind
						                               END) Inc_Ind,
						                            MAX (
						                               CASE
						                                  WHEN Include_Exclude_Ind = 'X' THEN
						                                     Include_Exclude_Ind
						                               END) Exc_Ind
						                       FROM (SELECT Nsc.Record_Type_Code, Nsc.Include_Exclude_Ind
						                               FROM b_Navdb_Select_Criteria Nsc, Select_Criteria Sc
						                              WHERE     1=1
						                                    AND Nsc.ssc_id = nvl(?, ?)
						                                    AND Nsc.Navdb_Id = ?
						                                    AND Nsc.Geo_Area_Id = -2
						                                    AND Nsc.Record_Type_Code = ?
						                                    AND Nsc.Record_Type_Code = Sc.Record_Type_Code
						                                    AND Sc.Processing_Order = 30
						                                    )
						          GROUP BY Record_Type_Code)
						""";
				rec = app.selectInto(query, parameter.getSscId(), bNavdb.getRow(index).getSscId(), navdb.getNavdbId(),
						datatypRad.getRow(index).getRecordTypeCode());
				lnRecordTypeCode = toInteger(rec.getString());
				lcIncInd = rec.getString();
				lcExcInd = rec.getString();
				if (!Objects.equals(lcIncInd, null) && !Objects.equals(lcExcInd, null)) {
					lcInd = "B";
				} else if (Objects.equals(lcIncInd, null)) {
					lcInd = "X";
				} else if (Objects.equals(lcExcInd, null)) {
					lcInd = "I";
				}
				datatypRad.getRow(index).setIncExcIndicator(lcInd);
				datatypRad.setLastQuery(hashUtils.encrypt("none"));

			} catch (NoDataFoundException e) {
				datatypRad.getRow(index).setIncExcIndicator(lcInd);

			}
			catch (Exception e) {
				log.error(e.getMessage());

			}

			log.info("populateDefaultIncExcInd Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDefaultIncExcInd {}" , e.getMessage());
			throw e;

		}
	}

	public void populateOrcApplied() throws Exception {
		log.info("populateOrcApplied Executing");
		String query = "";
		try {

			String getOrc = """
									SELECT F_ORC.DMR_ID,
						     F_ORC.DEFAULT_APPLY_IND,
						     F_ORC.FMS_ID,
						     NVL (N_ORC.APPLY_IND, 'N') APPLY_IND,
						     DMR_DESCR,
						     N_ORC.UPDATE_DCR_NUMBER
					FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC, b_NAVDB_ORC N_ORC
					WHERE     1=1
								 AND N_ORC.ssc_id = nvl(?, ?)
								 AND F_ORC.FMS_ID = ?
					       AND F_ORC.DMR_ID = ORC.DMR_ID
					       AND N_ORC.ORC_ID = ORC.DMR_ID
					       AND N_ORC.NAVDB_ID = ?
					UNION
					SELECT F_ORC.DMR_ID,
					       F_ORC.DEFAULT_APPLY_IND,
					       F_ORC.FMS_ID,
					       'N' APPLY_IND,
					       ORC.DMR_DESCR,
					       NULL
					  FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
					 WHERE     F_ORC.FMS_ID IN (SELECT FMS_ID
					                              FROM b_NAVDB
					                             WHERE 1=1 AND ssc_id = nvl(?, ?) AND NAVDB_ID = ?)
					       AND F_ORC.DMR_ID NOT IN (SELECT ORC_ID
					                                  FROM b_NAVDB_ORC
					                                 WHERE 1=1 AND ssc_id = nvl(?, ?) AND NAVDB_ID = ?)
					       AND ORC.DMR_ID = F_ORC.DMR_ID
					       AND DM_ORC_IND = 'ORC' --7773.04
					ORDER BY 1
								""";

			controlBlock.setOrcApplied(null);
			goBlock("NAVDB_ORC", "");
			setcurrentAndCursorBlock("navdbOrc");

			List<DuRecord> records = app.executeQuery(getOrc, parameter.getSscId(),
					bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getFmsId(), navdb.getNavdbId(),
					parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId(),
					parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());

			navdbOrc.getData().clear();
			NavdbOrc navdbOrcSingleBlock = null;
			Integer count = 0;
			for (DuRecord REC : records) {
				navdbOrcSingleBlock = new NavdbOrc();
				navdbOrcSingleBlock.setOrcId(toString(REC.getObject("DMR_ID")));
				navdbOrcSingleBlock.setOrcDescr(toString(REC.getObject("DMR_DESCR")));
				navdbOrcSingleBlock.setApplyInd(toString(REC.getObject("APPLY_IND")));
				navdbOrcSingleBlock.setUpdateDcrNumber(REC.getObject("UPDATE_DCR_NUMBER") == null ? null
						: toInteger(REC.getObject("UPDATE_DCR_NUMBER")));
				navdbOrc.add(navdbOrcSingleBlock);
				count++;
			}
			navdbOrc.setQueryHits(toString(count));
			navdbOrc.setLastQuery(hashUtils.encrypt(query));
			for (int i = 0; i < records.size(); i++) {
				if (Objects.equals(navdbOrc.getRow(i).getApplyInd(), "Y")) {
					if (Objects.equals(controlBlock.getOrcApplied(), null)) {
						controlBlock.setOrcApplied(navdbOrc.getRow(i).getOrcId());
					} else {
						controlBlock.setOrcApplied(controlBlock.getOrcApplied() + "," + navdbOrc.getRow(i).getOrcId());
					}

				}
			}

			controlBlock.setOrcApplied(ltrim(rtrim(controlBlock.getOrcApplied(), ","), ","));

			log.info("populateOrcApplied Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateOrcApplied {}" , e.getMessage());
			throw e;

		}
	}

	public void setFmsId() throws Exception {
		log.info("setFmsId Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String lsHostName = null;
			Integer lnExists = 0;

			query = """
					SELECT HOST_NAME from V$INSTANCE
					""";
			rec = app.selectInto(query);
			lsHostName = rec.getString();

			query = """
					SELECT COUNT (1) from DB_INSTANCE
					    WHERE UPPER (INSTANCE_NAME) = UPPER (?)
					""";
			rec = app.selectInto(query, lsHostName);
			lnExists = rec.getInt();
			if (Objects.equals(lnExists, 0)) {
				showLov("FMS_ID_FOR_OTHERS");
			}

			else {
				showLov("FMSID");
			}

			log.info("setFmsId Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setFmsId {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateLoadCycle(String piBlock, String piItem) throws Exception {
		log.info("populateLoadCycle Executing");
		try {
			RecordGroup lrgRecordGrp = null;
			Integer lnPopulateGrp = 0;

			lrgRecordGrp = findGroup("focalCycle");
			if (!idNull(lrgRecordGrp)) {
				deleteGroup(groups, "lrgRecordGrp");

			}

			lrgRecordGrp = createGroupFromQuery("focalCycle",
					"SELECT TO_CHAR(CYCLE), TO_CHAR(CYCLE) FROM B_NAVDB GROUP BY CYCLE ORDER BY 1 DESC");
			lnPopulateGrp = populateGroup(lrgRecordGrp);
			if (!Objects.equals(lnPopulateGrp, 0)) {
				message("Populate group had error " + toChar(lnPopulateGrp));

			}

			populateList(piBlock + "." + piItem, lrgRecordGrp);

			log.info("populateLoadCycle Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateLoadCycle {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableBrgaIdent() throws Exception {
		log.info("enableDisableBrgaIdent Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) from flight_management_system where fms_id = ? and binary_format_type in('B00','B10','B20','B31')
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = toInteger(rec.getString());
			if (vCount > 0) {
				setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.brga_ident", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.brga_ident", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableBrgaIdent Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableBrgaIdent {}" , e.getMessage());
			throw e;

		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> keyEntqry(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" keyEntqry Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (Arrays
					.asList("controlBlock", "selection", "datatypRad", "rules", "singleVal", "mulVal", "lists",
							"customerInfo", "suaRules", "recordSubType", "appSubType", "runwaySurface", "bNavdb")
					.contains(system.getCursorBlock())) {

				oneButton("C", "Error", "This Function can not performed here.");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(system.getCursorBlock(), DbConstants.NAVDB)) {
				controlBlock.setWorldGeo("N");
				setItemInstanceProperty("control_block.world_geo", "current_record", "visual_attribute", "PLAIN");

			}

			if (Objects.equals(system.getCursorBlock(), DbConstants.STD_AIRPORT)) {
				stdAirport.getRow(system.getCursorRecordIndex()).setRunwayLength(null);
				stdAirport.getRow(system.getCursorRecordIndex()).setSurfaceCode(null);
				stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal("N");

			}

			enableDisableProfile();

			enableDisableValerieInd();
			controlBlock.setOrcApplied(null);

			enableDisableBrgaIdent();

			enableDisableCmc();
			if (Objects.equals(system.getMode(), "NORMAL") && !Objects.equals(parameter.getWorkType(), "VIEW")) {

//				checkToCommit("ENTER_QUERY");
				log.debug("checktocommit condition ");

			}

			coreptLib.coreptenterquery();
			system.setMode("ENTER_QUERY");
			if (Objects.equals(system.getMode(), "NORMAL")) {

				coreptLib.unsetQueryMenuItems();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyEntqry executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyEntqry Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public void enableDisableCmc() throws Exception {
		log.info("enableDisableCmc Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					Select count(*)
						  from flight_management_system
						 Where fms_id = nvl(?,fms_id)
						 and binary_format_type = 'CMC'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", "QUERYABLE", FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", "QUERYABLE", FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableCmc Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableCmc {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> keyExeqry(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" keyExeqry Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();

		OracleHelpers.bulkClassMapper(reqDto, this);
		String queryMode = system.getMode();

		try {

			if (Arrays
					.asList("CONTROLBLOCK", "SELECTION", "DATATYPRAD", "RULES", "SINGLEVAL", "MULTVAL", "LISTS",
							"CUSTOMERINFO", "SUARULES", "RECORDSUBTYPE", "APPSUBTYPE", "RUNWAYSURFACE", "BNAVDB")
					.contains(toSnakeCase(upper(system.getCursorBlock())))) {

				oneButton("C", "Error", "This Function can not performed here.");
				throw new FormTriggerFailureException();

			}

			if (Arrays.asList("STD_HELIPORT", DbConstants.STD_AIRPORT, upper(DbConstants.ICAO), DbConstants.AREA_CODE)
					.contains(system.getCursorBlock())) {
				deleteGroupRow("SELECT_GROUP", "ALL_ROWS");

			}

			else if (Arrays.asList(DbConstants.SELECT_BY_AREA, DbConstants.SELECT_BY_ICAO,
					DbConstants.AIRPORT_TO_SELECT, "HELIPRT_TO_SELECT").contains(system.getCursorBlock())) {
				deleteGroupRow("DESELECT_GROUP", "ALL_ROWS");

			}

			if (Arrays
					.asList(DbConstants.AREA_CODE, "ICAO", DbConstants.STD_AIRPORT, DbConstants.STD_HELIPORT,
							DbConstants.SELECT_BY_AREA, DbConstants.SELECT_BY_ICAO, DbConstants.AIRPORT_TO_SELECT,
							DbConstants.HELIPORT_TO_SELECT, DbConstants.FMS_DMR, DbConstants.FMS_DELIVERY_FORMAT_MEDIA,
							DbConstants.SELECT_BY_GEOGRAPHIC_AREA)
					.contains(upper(toSnakeCase(system.getCursorBlock())))) {

				system.setMode("EXECUTE");
				queryBlockRecords(upper(toSnakeCase(system.getCursorBlock())), "KEY_EXE");

				system.setMode(queryMode);

			}
			else {

				coreptLib.coreptexecutequery(this, true);

			}
			enableDisableProfile();
			enableDisableValerieInd();
			enableDisableBrgaIdent();
			if (Objects.equals(system.getMode(), "NORMAL") && toInteger(nvl(
					getBlockProperty(toString(nameIn(this, system.getCursorBlock() + "queryHits")), ""), "0")) >= 1) {

				setItemProperty("control_block.plot", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.plot", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.gearth", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.gearth", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("control_block.plot", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
				setItemProperty("control_block.gearth", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}
			global.setTableName("AIRPORT");
			global.setDataType("AIRPORT");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyExeqry executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));

		} catch (Exception e) {
			log.error("Error while Executing the keyExeqry Service");
			system.setMode(queryMode);

			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> keyExit(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" keyExit Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

				setApplicationProperty("cursor_style", "DEFAULT");
				if (Arrays.asList("RULES", "SINGLE_VAL", "MULT_VAL", "LISTS").contains(system.getCursorBlock())) {

					coreptLib.dspMsg("You must back to the main record then to exit the form.");
					throw new FormTriggerFailureException(event);

				}

				if (Objects.equals(system.getCursorBlock(), DbConstants.GEOGRAPHIC_AREA_POINT)
						&& (selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoCount() < 3 || (Objects
								.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoCount(), 3)
								&& Objects.equals(
										geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
										null)))) {

					coreptLib.dspMsg("Please enter at least three Geographic Area Points.");
					throw new FormTriggerFailureException();

				}

				if (getGroupRowCount(findGroup("Refresh_AAL_Group")) > 0) {

					coreptLib.dspMsg(
							"Airport Airway Low must be refreshed before exit because of the new entry in the Airport List. Click the Refresh Airport Airway Low button to start.");
					throw new FormTriggerFailureException();

				}

			}

			if (Objects.equals(system.getFormStatus(), "CHANGED") && !Objects.equals(parameter.getWorkType(), "VIEW")) {

//				checkToCommit("EXIT");
				log.debug("chechToCommit condition ");

			}

			else {

				setApplicationProperty("cursor_style", "DEFAULT");

				exitForm();

			}
			parameter.setQryNavdbId("");
			parameter.setSscId("");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyExit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyExit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> whenNewFormInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" whenNewFormInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;

			initializeForm();
			setItemProperty("_navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("_navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("_navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("_navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("_navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("_navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setMenuItemProperty(rtrim("QUERY") + "." + ltrim("ENTER"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("QUERY") + "." + ltrim("EXECUTE"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("QUERY") + "." + ltrim("FETCH_NEXT_SET"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("FIRST_RECORD"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("PREVIOUS"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("NEXT"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("LAST_RECORD"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("SCROLL_UP"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("SCROLL_DOWN"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("INSERT"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("REMOVE"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("DUPLICATE"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("RECORD") + "." + ltrim("CLEAR"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("BLOCK") + "." + ltrim("CLEAR"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			setMenuItemProperty(rtrim("TOOLS") + "." + ltrim("EXPORT_DATA"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);

			try {

				query = """
						SELECT MAX(processing_cycle) from pl_std_airport
							WHERE data_supplier = ?
						""";
				rec = app.selectInto(query, global.getDataSupplier());
				controlBlock.setProcCycle(rec.getInt());

			} catch (NoDataFoundException e) {
				controlBlock.setProcCycle(toInteger(global.getProcessingCycle()));

			}

			setFmsId();
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

				RecordGroup groupId = createGroup("refreshAalGroup");
				addGroupColumn(groupId, "airport_ident", "charColumn", 4);
				addGroupColumn(groupId, "airport_icao", "charColumn", 2);

				try {

					query = """
							SELECT processing_cycle
								     from airport_airway_low
								    WHERE data_supplier = ? AND ROWNUM = 1
							""";
					rec = app.selectInto(query, global.getDataSupplier());
					global.setAalCycle(rec.getString());
				} catch (NoDataFoundException e) {
					global.setAalCycle(null);

				}

			}

			coreptLib.setBlock();
			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				setBlockProperty("SINGLE_VAL", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("SINGLE_VAL", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("SINGLE_VAL", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("lists.done_list", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("lists.cancel_list", "LABEL", "Go Back");
				setBlockProperty("LISTS", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("LISTS", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("mult_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("single_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("record_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("record_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("record_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.check_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.check_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.clear_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.clear_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				setRadioButtonProperty("select_all_rules.ixrrd", "INCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "EXCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "NONE", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "REF_ONLY", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "DEFAULT", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);

				setTabPageProperty("sel_can.copy_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("control_block.update_focals", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			else {
				setTabPageProperty("sel_can.copy_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

				setRadioButtonProperty("select_all_rules.ixrrd", "INCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "EXCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "NONE", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "REF_ONLY", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "DEFAULT", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);

				setBlockProperty("SINGLE_VAL", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("SINGLE_VAL", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("SINGLE_VAL", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("lists.done_list", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("lists.cancel_list", "LABEL", "Cancel");
				setBlockProperty("LISTS", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("LISTS", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("mult_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("single_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("record_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("record_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("record_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.check_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.check_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.clear_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.clear_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			setItemProperty("std_airport.surface_code", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("std_airport.surface_code", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			populateLoadCycle("CONTROL_BLOCK1", "CYCLE");

			populateFocal();
			controlBlock.setOrcApplied(null);
			showView("SEL_CAN");
			setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setTabPageProperty("selCan.copyNavdb", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setTabPageProperty("selCan.validate", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setTabPageProperty("selCan.saveLoadSel", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			if (Objects.equals(nvl(parameter.getQryNavdbId(), "$"), "$")) {
				setItemProperty("b_navdb.selections", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				hideView("main");
				hideView("SEL_CAN");
				showView("base");

			}

			else {
				hideView("base");
				String lsWhere = null;

				lsWhere = "SSC_ID = " + parameter.getSscId() + " AND NAVDB_ID = '" + parameter.getQryNavdbId() + "' ";
				showView("main");
				showView("SEL_CAN");
				goBlock("navdb", "");
				setcurrentAndCursorBlock("navdb");
				setBlockProperty("navdb", "default_where", lsWhere);

				if (Objects.equals(system.getCursorBlock(), DbConstants.NAVDB)) {
					system.setCursorBlock("navdb");
				}
				coreptLib.coreptexecutequery(this);

				if (!Objects.equals(navdb.getBrgaIdent(), null)) {
					setItemProperty("navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				}
				if (!Objects.equals(navdb.getProfileNumber(), null)) {
					setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				}
				if (!Objects.equals(navdb.getGenValerie(), "N")) {
					setItemProperty("navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				}

				setItemProperty("control_block1.qry_criteria", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			setButtonPropertyDisable(); // disable the menu buttons

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" whenNewFormInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the whenNewFormInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	public void setButtonPropertyDisable() {
		setMenuItemProperty(rtrim("Tools") + "." + ltrim("ExportData"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Action") + "." + ltrim("Exit"), FormConstant.ENABLED, FormConstant.BPROPERTY_TRUE);
		setMenuItemProperty(rtrim("Block") + "." + ltrim("Clear"), FormConstant.ENABLED, FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Field") + "." + ltrim("Previous"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Field") + "." + ltrim("Next"), FormConstant.ENABLED, FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Help") + "." + ltrim("Keys"), FormConstant.ENABLED, FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Help") + "." + ltrim("DisplayError"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Query") + "." + ltrim("Execute"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Query") + "." + ltrim("Enter"), FormConstant.ENABLED, FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Query") + "." + ltrim("FetchNextSet"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Record") + "." + ltrim("Previous"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Record") + "." + ltrim("Next"), FormConstant.ENABLED, FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Record") + "." + ltrim("ScrollUp"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Record") + "." + ltrim("ScrollDown"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Record") + "." + ltrim("Clear"), FormConstant.ENABLED, FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("Tools") + "." + ltrim("AddQueryConditions"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("RECORD") + "." + ltrim("FIRSTRECORD"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("RECORD") + "." + ltrim("LASTRECORD"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("RECORD") + "." + ltrim("duplicate"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("RECORD") + "." + ltrim("insert"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
		setMenuItemProperty(rtrim("RECORD") + "." + ltrim("delete"), FormConstant.ENABLED,
				FormConstant.BPROPERTY_FALSE);
	}

	private void setGeoCount() throws Exception {
		try {
			String query = "";
			DuRecord rec = null;
			for (int i = 0; i < selectByGeographicArea.size(); i++) {
				query = "SELECT COUNT(*) FROM geographic_area_point WHERE select_by_id = ?";
				rec = app.selectInto(query, selectByGeographicArea.getRow(i).getSelectById());
				selectByGeographicArea.getRow(i).setGeoCount(rec.getInt());

			}
		} catch (Exception e) {
			throw e;
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> whenTabPageChanged(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" whenTabPageChanged Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;

			if (!Objects.equals(navdb.getNavdbId(), null)) {
				hideView("FOCALS");
				hideView("GEN_CRITERIA_SUB_TYPE");
				Integer lnCount = 0;

				try {

					query = """
							SELECT count(*) from b_navdb_general_criteria_value --6146
							  	WHERE navdb_id IN (SELECT navdb_id FROM b_navdb_general_criteria
							  										WHERE criteria_id = 4
							  										AND apply_ind = 'Y'
							  										AND navdb_id = ?)
							  	AND criteria_id = 4
							""";
					rec = app.selectInto(query, navdb.getNavdbId());
					lnCount = rec.getInt();
					coreptLib.unsetQueryMenuItems();

					if (Objects.equals(lnCount, 0)) {

						query = """
								UPDATE navdb_general_criteria
								  		SET apply_ind = 'N'
								  		WHERE navdb_id = ?
								  		AND criteria_id = 4
								  		AND apply_ind = 'Y'
								""";
						app.executeNonQuery(query, navdb.getNavdbId());

					}

				}
				catch (NoDataFoundException e) {
					log.error(e.getMessage());

				}
				if (Objects.equals(system.getTabNewPage(), "selCanSelections")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					goBlock("datatyp_rad", "");
					setcurrentAndCursorBlock("datatyp_rad");
					system.setCursorBlock("dataTypRad");

					if (Objects.equals(nvl(parameter.getObsEnabled(), "N"), "Y")
							&& !Objects.equals(nvl(controlBlock.getWorldGeo(), "N"), "Y")) {
						controlBlock.setWorldGeo("Y");
						goItem("control_block.world_geo");

					}

					goBlock("selection", "");
					setcurrentAndCursorBlock("SELECTION");
					setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("datatyp_rad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
					setItemProperty("datatyp_rad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("exc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

					setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

					selectAllRules.setIxrrd("N");

					populateSelections();
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");

						}

						else {
							parameter.setUpdRec("Y");
							setItemProperty("datatyp_rad.options", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("datatyp_rad.options", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanOrc")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					populateOrcApplied();

				} else if (Objects.equals(system.getTabNewPage(), "selCanGeo")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					goBlock("select_by_geographic_area", "");
					system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_GEOGRAPHIC_AREA));
					String where = " GEO_AREA_NAME != 'WORLD' AND NAVDB_ID = ('%s') AND SSC_ID = %d "
							.formatted(navdb.getNavdbId(), navdb.getSscId());
					executeQuery(this, system.getCursorBlock(), where,
							toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
							toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));

					setGeoCount();

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanArea")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					createNewGroup("Select_Group", 1);

					createNewGroup("DeSelect_Group", 1);

					String where = "NAVDB_ID LIKE ('%s') and ssc_id like ('%s')".formatted(navdb.getNavdbId(),
							navdb.getSscId());
					system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AREA));

					executeQuery(this, DbConstants.SELECT_BY_AREA, where,
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_AREA), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_AREA), "order_By")));
					queryBlockRecords(DbConstants.AREA_CODE, "INITIAL");
					goBlock(DbConstants.SELECT_BY_AREA, "");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanIcao")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					createNewGroup("Select_Group", 1);

					createNewGroup("DeSelect_Group", 1);
					String where = "NAVDB_ID LIKE ('%s') and ssc_id like (%d)".formatted(navdb.getNavdbId(),
							navdb.getSscId());
					executeQuery(this, DbConstants.SELECT_BY_ICAO, where,
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_ICAO), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_ICAO), "order_By")));

					queryBlockRecords(upper(DbConstants.ICAO), "INITIAL");

					goBlock(DbConstants.SELECT_BY_ICAO, "");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanAirport")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					createNewGroup("Select_Group", 2);

					createNewGroup("DeSelect_Group", 2);

					String where = "navdb_id= ('%s') and ssc_id= %d ".formatted(navdb.getNavdbId(), navdb.getSscId());
					executeQuery(this, DbConstants.SELECT_BY_AIRPORT_GROUP, where,
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_AIRPORT_GROUP), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_AIRPORT_GROUP), "order_By")));

					queryBlockRecords(DbConstants.STD_AIRPORT, "INITIAL");

					controlBlock.setAtaIataDesignator("");

					goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "");
					system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AIRPORT_GROUP));

					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty(DbConstants.SELECT_BY_AIRPORT_GROUP, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_airport_group.group_name", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.AIRPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.chk", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.chk", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.chk", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty(DbConstants.SELECT_BY_AIRPORT_GROUP, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_airport_group.group_name", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.AIRPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.move", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.chk", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.chk", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}
					setItemProperty("airport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("control_block.pb_view_tld_data", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanFormatMedia")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					createNewGroup("Select_Group", 1);

					createNewGroup("DeSelect_Group", 1);

					String where = "navdb_id= '%s' and ssc_id = %d".formatted(navdb.getNavdbId(), navdb.getSscId());

					executeQuery(this, DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, where,
							toString(nameIn(nameIn(this, DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA), "order_By")));

					queryBlockRecords(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "INITIAL");
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.format_media_type",
									FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.format_media_type", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.format_media_type",
									FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.format_media_type", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanHeliport")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					createNewGroup("Select_Group", 2);

					createNewGroup("DeSelect_Group", 2);

					String where = "navdb_id= '%s' and ssc_id =%d".formatted(navdb.getNavdbId(), navdb.getSscId());

					executeQuery(this, DbConstants.SELECT_BY_HELIPORT_GROUP, where,
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_HELIPORT_GROUP), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_HELIPORT_GROUP), "order_By")));

					queryBlockRecords("STD_HELIPORT", "INITIAL");
					goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
					setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_HELIPORT_GROUP));

					if (Objects.equals(parameter.getWorkType(), "VIEW")) {
						setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED,
								FormConstant.PROPERTY_FALSE);
						setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					}
				}

				else if (Objects.equals(system.getTabNewPage(), "selCanDmr")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					goBlock(DbConstants.FMS_DMR, "");
					setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.FMS_DMR));

					String where = "FMS_ID = '%s' and DM_ORC_IND LIKE '%%DM%%'".formatted(navdb.getFmsId());
					executeQuery(this, system.getCursorBlock(), where,
							toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
							toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanValidate")) {
					String vMessages = null;
					String vOneMessage = null;
					String vSeperator = "-- -- -- -- -- Selection Criteria is Valid -- -- -- -- -- --";
					Integer vPosition = 0;
					String vStartWith = null;

					if (Objects.equals(controlBlock.getDid(), "Y")) {

						checkSave(system.getCursorBlock());

					}

					checkDid("Main Button Check");
					goBlock("VALIDATION_RESULT", "");
					setcurrentAndCursorBlock("VALIDATION_RESULT");

					setApplicationProperty("Cursor_Style", "BUSY");
					validationResult.getRow(system.getCursorRecordIndex()).setRuntimeMessage(
							"Selection Validation result for NAVDB ID '" + navdb.getNavdbId() + "':");
					for (int Rec_No = 1; Rec_No <= 10; Rec_No++) {

						if (!Objects.equals(vMessages, null)) {
							vSeperator = "-- -- -- -- -- Validation Messages finished -- -- -- -- -- --";

						}

						while (!Objects.equals(vMessages, null)) {
							if (like("ERROR%", vMessages)) {
								vStartWith = "ERROR";

							}

							else if (like("WARNING%", vMessages)) {
								vStartWith = "WARNING";

							}

							vMessages = rtrim(ltrim(vMessages, vStartWith));
							if (Objects.equals(instr(vMessages, "WARNING"), 0)) {
								vPosition = instr(vMessages, "ERROR");

							}

							else if (Objects.equals(instr(vMessages, "ERROR"), 0)) {
								vPosition = instr(vMessages, "WARNING");

							}

							else if (instr(vMessages, "WARNING") < instr(vMessages, "ERROR")) {
								vPosition = instr(vMessages, "WARNING");

							}

							else if (instr(vMessages, "WARNING") > instr(vMessages, "ERROR")) {
								vPosition = instr(vMessages, "ERROR");

							}

							if (vPosition > 0) {
								vOneMessage = vStartWith + substr(vMessages, 1, vPosition - 1);
								vMessages = substr(vMessages, vPosition);

							}

							else {
								vOneMessage = vStartWith + vMessages;
								vMessages = null;

							}
							if (!Objects.equals(
									validationResult.getRow(system.getCursorRecordIndex()).getRuntimeMessage(),
									vOneMessage)) {
								nextRecord("");
								validationResult.getRow(system.getCursorRecordIndex()).setRuntimeMessage(vOneMessage);

							}

						}

					}

					validationResult.getRow(system.getCursorRecordIndex()).setRuntimeMessage(vSeperator);

					setApplicationProperty("Cursor_Style", "default");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanCopyNavdb")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					copyGeoArptGrp.setDataSupplier(global.getDataSupplier());
					copyGeoArptGrp.setNewDcr(global.getDcrNumber());
					copyGeoArptGrp.setGeoArea("GEO Area");
					copyGeoArptGrp.setAreaCode("Area Code");
					copyGeoArptGrp.setIcaoCode("ICAO Code");
					copyGeoArptGrp.setArptGrp("Airport Group");
					copyGeoArptGrp.setGeoChk("N");
					copyGeoArptGrp.setAcChk("N");
					copyGeoArptGrp.setIcChk("N");
					copyGeoArptGrp.setAgChk("N");
					copyNavdb.setNewNavdb("");
					copyNavdb.setDataSupplier(global.getDataSupplier());
					goItem("copy_navdb.new_navdb");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanGeneralCriteria")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					goBlock("general_criteria", "");
					setcurrentAndCursorBlock("general_criteria");

					coreptLib.coreptexecutequery(this);
					lastRecord("");
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty(DbConstants.GENERAL_CRITERIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty(DbConstants.GENERAL_CRITERIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanCustomer")) {
					parameter.setPCustomerFlag("Y");

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					goBlock("CUSTOMER_INFO", "");
					setcurrentAndCursorBlock("customerInfo");

					customerInfo.setCustomerEmailId(navdb.getCustomerEmailId());
					customerInfo.setNotes(navdb.getNotes());
					customerInfo.setCustEmailFlag(navdb.getCustEmailFlag());

					goItem("customer_info.customer_email_id");
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setItemProperty("customer_info.customer_email_id", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("customer_info.customer_email_id", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("customer_info.notes", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("customer_info.notes", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setItemProperty("customer_info.customer_email_id", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("customer_info.customer_email_id", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("customer_info.notes", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("customer_info.notes", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanSaveLoadSel")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					saveSelections.setType("");
					saveSelections.setCycle("");
					saveSelections.setCreatedOn("");
					saveSelections.setAction("");
					setItemProperty("save_selections.name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.comments", FormConstant.INSERT_ALLOWED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.comments", FormConstant.UPDATE_ALLOWED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.save", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}

			else {

				coreptLib.dspMsg("Please execute a query first.");

				goItem("navdb.navdb_id");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" whenTabPageChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the whenTabPageChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlock1GetDetailsWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlock1GetDetailsWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lsWhere = null;

			String query = "";
			DuRecord rec = null;
			parameter.setLsWhere(null);
			if (!Objects.equals(controlBlock1.getType(), null)) {
				lsWhere = "TYPE = '" + controlBlock1.getType() + "' AND ";

			}

			if (!Objects.equals(controlBlock1.getCycle(), null)) {
				if (lsWhere == null) {
					lsWhere = "CYCLE = '" + controlBlock1.getCycle() + "' AND ";
				} else {
					lsWhere = lsWhere + "CYCLE = '" + controlBlock1.getCycle() + "' AND ";
				}

			}

			if (!Objects.equals(controlBlock1.getNavdbId(), null)) {
				if (lsWhere == null) {
					lsWhere = "NAVDB_ID LIKE '%" + controlBlock1.getNavdbId() + "%' AND ";
				} else {
					lsWhere = lsWhere + "NAVDB_ID LIKE '%" + controlBlock1.getNavdbId() + "%' AND ";
				}

			}

			if (!Objects.equals(controlBlock1.getApprovedStatus(), null)) {
				if (lsWhere == null) {
					lsWhere = "APPROVED_STATUS = '" + controlBlock1.getApprovedStatus() + "' AND ";
				} else {
					lsWhere = lsWhere + "APPROVED_STATUS = '" + controlBlock1.getApprovedStatus() + "' AND ";
				}
			}

			if (!Objects.equals(controlBlock1.getName(), null)) {
				if (lsWhere == null) {
					lsWhere = "NAME LIKE '%" + controlBlock1.getName() + "%' AND ";
				} else {
					lsWhere = lsWhere + "NAME LIKE '%" + controlBlock1.getName() + "%' AND ";
				}

			}

			query = """
					SELECT RTRIM(?,' AND') from DUAL
					""";
			rec = app.selectInto(query, lsWhere);
			lsWhere = rec.getString();
			parameter.setLsWhere(lsWhere);
			goBlock("bNavdb", "");
			setcurrentAndCursorBlock("bNavdb");
			setBlockProperty(system.getCursorBlock(), "default_where", lsWhere);
			Long count = executeQuery(this, system.getCursorBlock(), lsWhere,
					toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
					toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));
			if (count.equals(0L)) {
				bNavdb.getData().clear();
			}
			if (!Objects.equals(bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId(), null)) {
				setItemProperty("bNavdb.selections", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setBlockItemProperty("bNavdb.selections", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlock1GetDetailsWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlock1GetDetailsWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlock1ClearWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlock1ClearWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			setItemProperty("b_navdb.selections", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			goBlock("b_navdb", "");

			goBlock("CONTROL_BLOCK1", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlock1ClearWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlock1ClearWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlock1QryCriteriaWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlock1QryCriteriaWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(nvl(parameter.getFName(), "$$$"), "VIEW_LOAD")) {
				hideView("main");
				hideView("SEL_CAN");
				hideView("rules");
				hideView("list");
				goBlock("CONTROL_BLOCK1", "");
				setcurrentAndCursorBlock("CONTROL_BLOCK1");

			}

			else {

				exitForm();

			}

			parameter.setSscId(null);
			controlBlock.setDid2("Y");
			controlBlock.setDid("Y");
			parameter.setNavdbId(null);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlock1QryCriteriaWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlock1QryCriteriaWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<?> bNavdbGenerateReportWhenButtonPressed(NavdbSetupBackupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" bNavdbGenerateReportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		HttpHeaders headers = new HttpHeaders();

		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId(), null)) {
				Object plId = null;
				Integer vSelections = 0;
				DuRecord rec = null;
				String query = null;

				query = """
						select count(*)
						  	from   b_navdb_select_criteria
						  	where  navdb_id = ?
						  	and ssc_id = nvl(?, ?)
						""";
				rec = app.selectInto(query, bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId());
				vSelections = toInteger(rec.getString());
				if (vSelections <= 0) {

					throw new FormTriggerFailureException();

				}

				if (!idNull(plId)) {
					log.debug("plId {}",plId);

				}

				BackupSelectionCriteriaReport bkpreport = new BackupSelectionCriteriaReport();
				byte[] reportBytes = bkpreport.genReport(app, toInteger(global.getProcessingCycle()),
						bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId(),
						toInteger(bNavdb.getRow(system.getCursorRecordIndex()).getSscId()));
				headers.setContentType(MediaType.APPLICATION_PDF);
				headers.setContentLength(reportBytes.length);
				headers.setContentDisposition(
						ContentDisposition.inline().filename("BackupSelectionCriteriaViewer.pdf").build());
				headers.add("Access-Control-Expose-Headers", "Content-Disposition");
				return new ResponseEntity<>(reportBytes, headers, HttpStatus.OK);

			}

			else {

				coreptLib.dspMsg("Please execute a query first.");
				goItem("b_navdb.navdb_id");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" bNavdbGenerateReportWhenButtonPressed executed succesRnavdbsetsfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (FormTriggerFailureException e) {
			log.error("Error while Executing the bnavdbReportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		} catch (Exception e) {
			log.error("Error while Executing the bNavdbGenerateReportWhenButtonPressed Service");
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body(("PDF generation failed: " + e.getMessage()).getBytes(StandardCharsets.UTF_8));

		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> bNavdbSelectionsWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" bNavdbSelectionsWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lsWhere = null;
			String query = null;
			DuRecord rec = null;

			parameter.setQryNavdbId(bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId());
			parameter.setSscId(toString(bNavdb.getRow(system.getCursorRecordIndex()).getSscId()));
			parameter.setWorkType("VIEW");
			parameter.setNavdbId(bNavdb.getRow(system.getCursorRecordIndex()).getFmsId());

			parameter.setFName(null);
			lsWhere = "SSC_ID = nvl(%s,'%s') AND NAVDB_ID = '%s'".formatted(parameter.getSscId(),
					bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
					bNavdb.getRow(system.getCursorRecordIndex()).getNavdbId());
			hideView("base");
			hideView("controlBlock1");
			showView("main");
			showView("SEL_CAN");
			hideView("controlBlock1");

			goBlock("navdb", "");
			setcurrentAndCursorBlock("navdb");

			executeQuery(this, system.getCursorBlock(), lsWhere,
					toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
					toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));

			try {

				query = """
						SELECT MAX(processing_cycle) from pl_std_airport
							WHERE data_supplier = ?
						""";
				rec = app.selectInto(query, global.getDataSupplier());
				controlBlock.setProcCycle(rec.getInt());

			} catch (NoDataFoundException e) {
				controlBlock.setProcCycle(toInteger(global.getProcessingCycle()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" bNavdbSelectionsWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the bNavdbSelectionsWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> navdbPreBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbPreBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			DuRecord rec = null;
			String query = null;
			if (Objects.equals(controlBlock.getDid(), "Y")) { 

				checkSave(system.getCursorBlock());

			}

			checkDid("Main Button Check");

			setButtonProperty("NONE");
			Integer vCount = 0;

			query = """
					SELECT COUNT (*)
					from fms_dmr
					WHERE fms_id = NVL (?, '$$$')
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (Objects.equals(vCount, 0)) {
				setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			else {
				setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPreBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPreBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> navdbPostQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbPostQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			DuRecord rec = null;
			String query = null;
			navdb.setOldFmsId(navdb.getFmsId());
			if (Objects.equals(navdb.getProductionReadyInd(), "Y")) {
				setItemInstanceProperty("navdb.production_ready_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.production_ready_ind", "current_record", "visual_attribute", "PLAIN");

			}
			if (Objects.equals(navdb.getTestDbInd(), "Y")) {
				setItemInstanceProperty("navdb.test_db_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.test_db_ind", "current_record", "visual_attribute", "PLAIN");

			}
			if (Objects.equals(navdb.getSaaarInd(), "Y")) {
				setItemInstanceProperty("navdb.saaar_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.saaar_ind", "current_record", "visual_attribute", "PLAIN");

			}

			checkProfile();
			if (Objects.equals(navdb.getGenValerie(), "Y")) {
				setItemInstanceProperty("navdb.gen_valerie", "current_record", "visual_attribute", "CHECKED");
				setItemProperty("navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE); // visible by opening form
																									
																										
				setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemInstanceProperty("navdb.gen_valerie", "current_record", "visual_attribute", "PLAIN");

			}
			if (!Objects.equals(navdb.getFmsId(), null)) {

				try {

					query = """
							select size_units from binary_table_size_limits
							where fms_id = ?
							and table_name = 'NAVDB'
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					controlBlock.setSizeUnit(rec.getString());
				} catch (NoDataFoundException e) {
					controlBlock.setSizeUnit(null);

				}

			}

			String getCustIdent = """
					select customer_ident from customer_navdb
					where navdb_id = ?
					""";
			String vCust = null;

			List<DuRecord> records = app.executeQuery(getCustIdent, navdb.getNavdbId());
			for (int i = 0; i < records.size(); i++) {
				vCust = records.get(i).getString();
			}
			navdb.setCustomerIdent(navdb.getCustomerIdent() + " " + vCust);

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vOut = null;
				String newDataType = """
						select record_type_code
						from fms_data_type
						where upper(fms_id) = upper(?)
						minus
						select record_type_code
						from NAVDB_SELECT_CRITERIA
						where navdb_id = ?
						and geo_area_id = -1
						""";

				Map<String, Object> extraDeleteProcedure = app.executeProcedure("CPTSC", "DELETE_EXTRA_NAVDB_SELECTION",
						"NAVDB_UTIL", new ProcedureInParameter("p_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
						new ProcedureOutParameter("p_out", OracleTypes.VARCHAR));

				vOut = toString(extraDeleteProcedure.get("p_out"));
				if (Objects.equals(vOut, "OK")) {
					log.debug("vOut condition executed");

				}

				else {
					coreptLib.dspMsg(vOut);

					coreptLib.dspMsg(vOut);

				}
				List<DuRecord> recordss = app.executeQuery(newDataType, navdb.getFmsId(), navdb.getNavdbId());
				for (DuRecord recs : recordss) {

					createDefaultNewCriteria(toInteger(recs.getObject("record_type_code")));
				}

			}

			String lnGenCrtrExists = null;

			try {

				query = """
						Select 'Y'
						from FMS_GENERAL_CRITERIA	fgc
						Where fgc.fms_id = ?
						And RowNum = 1
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				lnGenCrtrExists = rec.getString();
			} catch (NoDataFoundException e) {
				lnGenCrtrExists = "N";

			}
			if (!Objects.equals(lnGenCrtrExists, "Y")) {
				setTabPageProperty("selCan.generalCriteria", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			else {
				setTabPageProperty("selCan.generalCriteria", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> navdbOrcPostQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcPostQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			DuRecord rec = null;
			String query = null;

			for (int i = 0; i < navdbOrc.getData().size(); i++) {
				try {

					query = """
							select dmr_descr
										from DATA_MANIPULATION_ROUTINE
										where DMR_ID = ?
										""";
					rec = app.selectInto(query, navdbOrc.getRow(i).getOrcId());
					String orcDesc = rec.getString();
					navdbOrc.getRow(i).setOrcDescr(orcDesc);
				} catch (Exception e) {
					navdbOrc.getRow(system.getCursorRecordIndex()).setOrcDescr(null);

				}

			}


			if (Objects.equals(navdbOrc.getRow(system.getCursorRecordIndex()).getApplyInd(), "Y")) {
				setItemInstanceProperty("navdbOrc.apply_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdbOrc.apply_ind", "current_record", "visual_attribute", "PLAIN");

			}
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), global.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec("N");
					setItemProperty("navdb_orc.apply_ind", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb_orc.apply_ind", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				else {
					parameter.setUpdRec("Y");
					setItemProperty("navdb_orc.apply_ind", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_orc.apply_ind", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> generalCriteriaPostQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaPostQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			DuRecord rec = null;
			String query = null;
			for (int i = 0; i < generalCriteria.size(); i++) {
				if (!Objects.equals(generalCriteria.getRow(i).getCriteriaDescr(), null)
						&& !Objects.equals(navdb.getFmsId(), null)) {
					String vSelectable = null;
					String vApplyInd = null;

					try {

						query = """
								select selectable_ind
								From FMS_GENERAL_CRITERIA	fgc	--added Imran SCR 7751
								where  Criteria_id = ?
								and exists (select 1 from flight_management_system
									 			          where fms_id = ?
									 			          and fms_id  = fgc.fms_id)
								""";
						rec = app.selectInto(query, generalCriteria.getRow(i).getCriteriaId(), navdb.getFmsId());
						vSelectable = rec.getString();
						if (Objects.equals(vSelectable, "Y")) {

							try {

								query = """
										select nvl(apply_ind,' ') from b_navdb_general_criteria
													where navdb_id = ?
											and ssc_id = nvl(?, ?)
													and criteria_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId(), parameter.getSscId(),
										bNavdb.getRow(i).getSscId(), generalCriteria.getRow(i).getCriteriaId());
								vApplyInd = rec.getString();
								if (Arrays.asList("Y", "N").contains(vApplyInd)) {
									generalCriteria.getRow(i).setChk(vApplyInd);

								}

							} catch (NoDataFoundException e) {
								vApplyInd = "-";

							}
							if (Arrays.asList("-", " ").contains(vApplyInd)) {

								try {

									query = """
											select 'Y'
											From FMS_GENERAL_CRITERIA	fgc			--added Imran SCR 7751
											where criteria_id = ?
											and DEFAULT_IND = 'Y'
											and exists (select 1 from flight_management_system
														where fms_id = ?
												 		and fms_id = fgc.fms_id)
											""";
									rec = app.selectInto(query, generalCriteria.getRow(i).getCriteriaId(),
											navdb.getFmsId());
									generalCriteria.getRow(i).setChk(rec.getString());
								} catch (NoDataFoundException e) {
									generalCriteria.getRow(i).setChk("N");

								}

							}

						}

						else if (Objects.equals(vSelectable, "N")) {

							try {

								query = """
										select 'Y'
										From FMS_GENERAL_CRITERIA	fgc			--added Imran SCR 7751
										where criteria_id = ?
										and APPLY_IND = 'Y'
										and exists (select 1 from flight_management_system
											 		where fms_id = ?
											 		and fms_id = fgc.fms_id)
										""";
								rec = app.selectInto(query, generalCriteria.getRow(i).getCriteriaId(),
										navdb.getFmsId());
								generalCriteria.getRow(i).setChk(rec.getString());
							} catch (NoDataFoundException e) {
								generalCriteria.getRow(i).setChk("N");

							}

						}

						if (Objects.equals(vSelectable, "N")) {
							setItemInstanceProperty("general_criteria.chk", toString(i), FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemInstanceProperty("general_criteria.chk", toString(i), "visual_attribute",
									"GREY_OUT");
							setItemInstanceProperty("general_criteria.criteria_descr", toString(i), "visual_attribute",
									"GREY_OUT");

						}

						else {
							setItemInstanceProperty("general_criteria.chk", toString(i), FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemInstanceProperty("general_criteria.criteria_descr", toString(i), "visual_attribute",
									"CURRENT_RECORD");

							if (Objects.equals(generalCriteria.getRow(i).getChk(), "Y")) {
								setItemInstanceProperty("general_criteria.chk", toString(i), "visual_attribute",
										"CHECKED");

							}

							else {
								setItemInstanceProperty("general_criteria.chk", toString(i), "visual_attribute",
										"CURRENT_RECORD");

							}

						}
					} catch (NoDataFoundException e) {

						coreptLib.dspMsg("Format-General-Criteria table is missing data for General Criteria '"
								+ generalCriteria.getRow(i).getCriteriaDescr() + "' .Please correct the data first.");
						throw new FormTriggerFailureException();

					}

					catch (Exception e) {

						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
						throw new FormTriggerFailureException();

					}

				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> generalCriteriaWhenNewRecordInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String vCblock = system.getCursorBlock();

				if (!Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {

					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));

					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec("N");
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec("Y");
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

					}

				}

			}

			if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), 4)) {
				setItemProperty("general_criteria.aircraft_button", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("general_criteria.aircraft_button", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> generalCriteriaAircraftButtonWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaAircraftButtonWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), 4)) {
				if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					goBlock("GEN_CRITERIA_SUB_TYPE", "");
					setcurrentAndCursorBlock("GEN_CRITERIA_SUB_TYPE");

					populateGenCriteriaValue("GEN_CRITERIA_SUB_TYPE");
					genCriteriaSubType.setQueryHits(toString(genCriteriaSubType.size()));

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaAircraftButtonWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaAircraftButtonWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByGeographicAreaPreQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaPreQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			DuRecord rec = null;
			String query = null;
			checkDid("Main Button Check");

			try {

				query = """
									select 'Y'
						from b_select_by_geographic_area
						where 1=1
						and ssc_id = nvl(?, ?)
						and rtrim(geo_area_name) = 'WORLD'
						and navdb_id = ?
									""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setWorldGeo(rec.getString());
				setItemInstanceProperty("control_block.world_geo", "current_record", "visual_attribute", "CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setWorldGeo("N");
				setItemInstanceProperty("control_block.world_geo", "current_record", "visual_attribute", "PLAIN");

			}

			try {

				query = """
							select 'Y'
							from b_select_by_geographic_area
							where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$AFRICA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setAfricaGeo(rec.getString());
				setItemInstanceProperty("control_block.africa_geo", "current_record", "visual_attribute", "CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setAfricaGeo("N");
				setItemInstanceProperty("control_block.africa_geo", "current_record", "visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from b_select_by_geographic_area
						where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$EUROPE'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setEuropeGeo(rec.getString());
				setItemInstanceProperty("control_block.europe_geo", "current_record", "visual_attribute", "CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setEuropeGeo("N");
				setItemInstanceProperty("control_block.europe_geo", "current_record", "visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from b_select_by_geographic_area
						where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$EURASIA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setEurasiaGeo(rec.getString());
				setItemInstanceProperty("control_block.eurasia_geo", "current_record", "visual_attribute", "CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setEurasiaGeo("N");
				setItemInstanceProperty("control_block.eurasia_geo", "current_record", "visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from b_select_by_geographic_area
						where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$MIDDLE_EAST'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setMiddleEastGeo(rec.getString());
				setItemInstanceProperty("control_block.middle_east_geo", "current_record", "visual_attribute",
						"CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setMiddleEastGeo("N");
				setItemInstanceProperty("control_block.middle_east_geo", "current_record", "visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from b_select_by_geographic_area
						where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$NORTH_AMERICA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setNorthAmericaGeo(rec.getString());
				setItemInstanceProperty("control_block.north_america_geo", "current_record", "visual_attribute",
						"CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setNorthAmericaGeo("N");
				setItemInstanceProperty("control_block.north_america_geo", "current_record", "visual_attribute",
						"PLAIN");

			}

			try {

				query = """
						select 'Y' from b_select_by_geographic_area
						where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$SOUTH_AMERICA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setSouthAmericaGeo(rec.getString());
				setItemInstanceProperty("control_block.south_america_geo", "current_record", "visual_attribute",
						"CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setSouthAmericaGeo("N");
				setItemInstanceProperty("control_block.south_america_geo", "current_record", "visual_attribute",
						"PLAIN");

			} catch (TooManyRowsException ex) {
				log.error(ex.getMessage());
			}

			try {

				query = """
						select 'Y' from b_select_by_geographic_area
						where 1=1
							and ssc_id = nvl(?,?)
							and rtrim(geo_area_name) = '$PACIFIC'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, parameter.getSscId(),
						bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				controlBlock.setPacificGeo(rec.getString());
				setItemInstanceProperty("control_block.pacific_geo", "current_record", "visual_attribute", "CHECKED");
			} catch (NoDataFoundException e) {
				controlBlock.setPacificGeo("N");
				setItemInstanceProperty("control_block.pacific_geo", "current_record", "visual_attribute", "PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaPreQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaPreQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> geographicAreaPointWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (Objects.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoAreaName(), null)) {
				goBlock(DbConstants.SELECT_BY_GEOGRAPHIC_AREA, "geoAreaName");
				throw new FormTriggerFailureException();

			}

			else {

				if (!Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSequenceNumber(), null)
						&& Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
								null)) {
					selectByGeographicArea.getRow(system.getCursorRecordIndex()).setGeoCount(1);

				}

				else if (Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSequenceNumber(),
						null)) {
					selectByGeographicArea.getRow(system.getCursorRecordIndex()).setGeoCount(0);

				}

				controlBlock
						.setTempValue(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoAreaName());

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByAreaWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Main Button Check");
			if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one AREA code." + " " + " "
						+ "Click the ''Select'' button to select the checked AREA." + " "
						+ "Click the ''Reset'' button to clear all the check(s)");
				if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					selectByArea.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.SELECT_BY_AREA, "DeSelect_Group",
							selectByArea.getRow(system.getCursorRecordIndex()).getChk(),
							toString(selectByArea.getRow(system.getCursorRecordIndex()).getSelectById()), "");

				}

				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AREA));

			}

			else {

				areaCode.getData().clear();
				areaCode.add(new AreaCode());
				String where = "area_code not in (select area_code from b_select_by_area where 1=1 and ssc_id = nvl( %s, %d) and navdb_id = '%s')"
						.formatted(parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
								navdb.getNavdbId());
				system.setCursorBlock(DbConstants.AREA_CODE);

				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());
				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AREA));
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), global.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec("N");
						setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.INSERT_ALLOWED,
								FormConstant.PROPERTY_TRUE);
						setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_area.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec("Y");
						setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.INSERT_ALLOWED,
								FormConstant.PROPERTY_FALSE);
						setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_area.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByAreaAreaCodeWhenValidateItem(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaAreaCodeWhenValidateItem Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = null;
			DuRecord rec = null;
			if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode(), null)) {
				message("Please enter the AREA Code");
				throw new FormTriggerFailureException();

			}

			else {
				Object vRowid = null;
				Integer vCount = 0;

				try {

					query = """
							select rowid from SELECT_BY_AREA
										where AREA_CODE = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query, selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getRowid(), null) || (!Objects
							.equals(vRowid, selectByArea.getRow(system.getCursorRecordIndex()).getRowid()))) {

						coreptLib.dspMsg("This is a duplicated AREA Code.");
						throw new FormTriggerFailureException();

					}

				}
				catch (NoDataFoundException e) {
					log.error(e.getMessage());

				}

				query = """
						select count(*) from AREA_CODE
								where AREA_CODE = ?
						""";
				rec = app.selectInto(query, selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode());
				vCount = toInteger(rec.getString());
				if (Objects.equals(vCount, 0)) {

					coreptLib.dspMsg("This is not a valid AREA Code.");
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaAreaCodeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaAreaCodeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> areaCodeWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" areaCodeWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.SELECT_BY_AREA);
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one AREA code." + " " + " "
						+ "Click the ''De Select'' button to De Select the checked AREA." + " "
						+ "Click the ''Reset Check'' button to clear all the check(s)");
				if (Objects.equals(areaCode.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					areaCode.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.AREA_CODE, "Select_Group",
							areaCode.getRow(system.getCursorRecordIndex()).getChk(),
							areaCode.getRow(system.getCursorRecordIndex()).getAreaCode(), "");

				}

				setcurrentAndCursorBlock(DbConstants.SELECT_BY_AREA);

			}

			else {

				selectByArea.getData().clear();
				selectByArea.add(new SelectByArea());
				String where = "NAVDB_ID LIKE ('%s') and ssc_id like ('%s')".formatted(navdb.getNavdbId(),
						navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AREA));
				navdbExecuteQuery(where);

				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.AREA_CODE));
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("area_code.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_area.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_area.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), global.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_area.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_area.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" areaCodeWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the areaCodeWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByIcaoWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one ICAO code." + " " + " "
						+ "Click the ''Select'' button to select the checked ICAO." + " "
						+ "Click the ''Reset'' button to clear all the check(s)");

				if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					selectByIcao.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.SELECT_BY_ICAO, "DeSelect_Group",
							selectByIcao.getRow(system.getCursorRecordIndex()).getChk(),
							toString(selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById()), "");

				}

				goBlock(DbConstants.ICAO, "");
				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.ICAO));

			}

			else {

				icao.getData().clear();
				icao = new DuBlock<>();
				icao.add(new Icao());
				String where = "icao_code not in (select icao_code from b_select_by_icao where 1=1 and ssc_id = nvl(%s, %d) and navdb_id ='%s')"
						.formatted(parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
								navdb.getNavdbId());

				system.setCursorBlock(lower(DbConstants.ICAO));

				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_ICAO));
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), global.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec("N");
						setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.INSERT_ALLOWED,
								FormConstant.PROPERTY_TRUE);
						setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec("Y");
						setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.INSERT_ALLOWED,
								FormConstant.PROPERTY_FALSE);
						setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByIcaoIcaoCodeWhenValidateItem(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoIcaoCodeWhenValidateItem Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			String query = null;
			DuRecord rec = null;
			if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode(), null)) {
				message("Please enter the ICAO Code");
				throw new FormTriggerFailureException();

			}

			else {
				Object vRowid = null;
				Integer vCount = 0;

				try {

					query = """
							select rowid from SELECT_BY_ICAO
										where ICAO_CODE = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query, selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getRowid(), null) || (!Objects
							.equals(vRowid, selectByIcao.getRow(system.getCursorRecordIndex()).getRowid()))) {

						coreptLib.dspMsg("This is a duplicated ICAO Code.");
						throw new FormTriggerFailureException();

					}

				}
				catch (NoDataFoundException e) {
					log.error(e.getMessage());

				}

				query = """
						select count(*) from ICAO
								where ICAO_CODE = ?
						""";
				rec = app.selectInto(query, selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode());
				vCount = toInteger(rec.getString());
				if (Objects.equals(vCount, 0)) {

					coreptLib.dspMsg("This is not a valid ICAO Code.");
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoIcaoCodeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoIcaoCodeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> icaoWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" icaoWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.SELECT_BY_ICAO);
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one ICAO code." + " " + " "
						+ "Click the ''De Select'' button to De Select the checked ICAO." + " "
						+ "Click the ''Reset Check'' button to clear all the check(s)");
				if (Objects.equals(icao.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					icao.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.ICAO, "Select_Group", icao.getRow(system.getCursorRecordIndex()).getChk(),
							icao.getRow(system.getCursorRecordIndex()).getIcaoCode(), "");

				}

				setcurrentAndCursorBlock(DbConstants.SELECT_BY_ICAO);
				system.setCursorBlock("icao");

			}

			else {

				selectByIcao.getData().clear();
				selectByIcao.add(new SelectByIcao());
				String where = "NAVDB_ID LIKE ('%s') and ssc_id like (%d)".formatted(navdb.getNavdbId(),
						navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_ICAO));

				navdbExecuteQuery(where);

				system.setCurrentBlock(DbConstants.ICAO);
				system.setCursorBlock(DbConstants.ICAO);

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("icao.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_icao.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), global.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_icao.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_icao.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" icaoWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the icaoWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByAirportGroupWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.AIRPORT_TO_SELECT);
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {
				deleteGroupRow("DeSelect_Group", "allRows");

			}

			else if (getGroupRowCount(findGroup("Select_Group")) > 0) {
				deleteGroupRow("Select_Group", "allRows");

			}

			stdAirport.getData().clear();
			stdAirport.add(new StdAirport());
			system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_AIRPORT));
			String where = """
					data_supplier = '%s' and validate_ind in ('Y','S','H') and processing_cycle = '%s'

							and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from b_AIRPORT_TO_SELECT A, b_SELECT_BY_AIRPORT_GROUP B
							where 1=1 and A.ssc_id = nvl(%s, %d) and B.ssc_id = nvl(%s, %d)
							and A.ssc_id = B.ssc_id and B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID)

							"""
					.formatted(navdb.getDataSupplier(), global.getProcessingCycle(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());

			EParam.DYNAMIC_QUERY_ONE.setValue(where);
			navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

			where = "SSC_ID = (%s) AND SELECT_BY_ID = (%d) ".formatted(parameter.getSscId(),
					selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
			system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.AIRPORT_TO_SELECT));
			airportToSelect.getData().clear();
			airportToSelect.add(new AirportToSelect());
			EParam.DYNAMIC_QUERY_ONE.setValue(where);
			navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue()); // data for airport to select

			where = "navdb_id= ('%s') and ssc_id= %d ".formatted(navdb.getNavdbId(), navdb.getSscId());
			system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AIRPORT_GROUP));
			navdbExecuteQuery(where);

			setItemProperty("control_block.pb_view_tld_data", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AIRPORT_GROUP));
			controlBlock.setAirportFrameText("Available Standard Airports in cycle " + global.getProcessingCycle());
			hideView("SELECT_FROM_GROUPS");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectFromGroupsWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectFromGroupsWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(nameIn(this, "global.moving_group"), "airport")) {
				controlBlock.setSelectGroup("Select the Move to Airport Group");

			}

			else {
				controlBlock.setSelectGroup("Select the Move to Heliport Group");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectFromGroupsWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectFromGroupsWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> airportToSelectWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			

			if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport data." + " " + " "
						+ "Click the ''Select'' button to select the checked Airport." + " "
						+ "Click the ''Reset Check'' button to clear all the check(s)");
				if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					airportToSelect.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.AIRPORT_TO_SELECT, "DeSelect_Group",
							airportToSelect.getRow(system.getCursorRecordIndex()).getChk(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao());

				}

				goBlock(DbConstants.STD_AIRPORT, "");
				setcurrentAndCursorBlock(DbConstants.STD_AIRPORT);

			}

			else {

				stdAirport.getData().clear();
				stdAirport.add(new StdAirport());

				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_AIRPORT));
				String where = """
						data_supplier = '%s' and validate_ind in ('Y','S','H') and processing_cycle = '%s'

						and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from b_AIRPORT_TO_SELECT A, b_SELECT_BY_AIRPORT_GROUP B
						where 1=1 and A.ssc_id = nvl(%s, %d) and B.ssc_id = nvl(%s, %d)
						and A.ssc_id = B.ssc_id and B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID)

						"""
						.formatted(navdb.getDataSupplier(), global.getProcessingCycle(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());

				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

				selectByAirportGroup.getData().clear();
				selectByAirportGroup.add(new SelectByAirportGroup());
				where = "navdb_id= ('%s') and ssc_id= %d ".formatted(navdb.getNavdbId(), navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AIRPORT_GROUP));
				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

				airportToSelect.getData().clear();
				airportToSelect.add(new AirportToSelect());
				where = "select_by_id=%d and ssc_id = %d".formatted(
						selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById(), navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.AIRPORT_TO_SELECT));
				navdbExecuteQuery(where);

				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.AIRPORT_TO_SELECT));
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("airport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}
			hideView("SELECT_FROM_GROUPS");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> airportToSelectPostQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectPostQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			for (int i = 0; i < airportToSelect.getData().size(); i++) {

				airportToSelect.getRow(i).setIataCode(populateIatacode(airportToSelect.getRow(i).getAirportIdent(),
						airportToSelect.getRow(i).getAirportIcao()));

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> airportToSelectMoveWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectMoveWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave("");
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (Objects.equals(getGroupRowCount(findGroup("DeSelect_Group")), 0)) {

					coreptLib.dspMsg("No airport to move!");

				}

				else {
					goBlock("SELECT_FROM_GROUPS", "");
					setcurrentAndCursorBlock("SELECT_FROM_GROUPS");

					global.setMovingGroup("airport");

					populateAirportGroups(global.getMovingGroup());

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectMoveWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectMoveWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> airportToSelectAirportIdentWhenValidateItem(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectAirportIdentWhenValidateItem Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERY")
					&& Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(), null)) {

				checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null, "RECORD");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectAirportIdentWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectAirportIdentWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> stdAirportWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			setMenuItemProperty(rtrim("Record") + "." + ltrim("Clear"), FormConstant.ENABLED, false);


			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport Data." + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");

				if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					stdAirport.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.STD_AIRPORT, "Select_Group",
							stdAirport.getRow(system.getCursorRecordIndex()).getChk(),
							stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							stdAirport.getRow(system.getCursorRecordIndex()).getAirportIcao());

				}

				goBlock(DbConstants.AIRPORT_TO_SELECT, "");
				setcurrentAndCursorBlock(DbConstants.AIRPORT_TO_SELECT);

			}

			else {

				selectByAirportGroup.getData().clear();
				selectByAirportGroup.add(new SelectByAirportGroup());
				String where = "navdb_id= ('%s') and ssc_id= %d ".formatted(navdb.getNavdbId(), navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AIRPORT_GROUP));
				navdbExecuteQuery(where);
				airportToSelect.getData().clear();
				airportToSelect.add(new AirportToSelect());
				where = "select_by_id=%d and ssc_id = %d".formatted(
						selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.AIRPORT_TO_SELECT));
				navdbExecuteQuery(where);

				stdAirport.getData().clear();
				stdAirport.add(new StdAirport());

				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_AIRPORT));
				where = """
						data_supplier = '%s' and validate_ind in ('Y','S','H') and processing_cycle = '%s'

						and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from b_AIRPORT_TO_SELECT A, b_SELECT_BY_AIRPORT_GROUP B
						where 1=1 and A.ssc_id = nvl(%s, %d) and B.ssc_id = nvl(%s, %d)
						and A.ssc_id = B.ssc_id and B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID)

						"""
						.formatted(navdb.getDataSupplier(), global.getProcessingCycle(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());

				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_AIRPORT));
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("airport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}
			hideView("SELECT_FROM_GROUPS");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> stdAirportPostQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportPostQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal(controlBlock.getCopy4AlphaTerminal());
			stdAirport.getRow(system.getCursorRecordIndex()).setRunwayLength(controlBlock.getCopyRunwayLength());
			stdAirport.getRow(system.getCursorRecordIndex()).setSurfaceCode(controlBlock.getCopySurfaceCode());
			if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), "Y")) {
				setItemInstanceProperty("std_airport.four_alpha_terminal", "current_record", "visual_attribute",
						"CHECKED");

			}

			else {
				setItemInstanceProperty("std_airport.four_alpha_terminal", "current_record", "visual_attribute",
						"PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> stdAirportPostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportPostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			stdAirport.getRow(system.getCursorRecordIndex()).setRunwayLength(null);
			stdAirport.getRow(system.getCursorRecordIndex()).setSurfaceCode(null);
			stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal("N");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> stdAirportFourAlphaTerminalWhenCheckboxChanged(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportFourAlphaTerminalWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "ENTER-QUERY")) {
				if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), "Y")) {
					setItemInstanceProperty("std_airport.four_alpha_terminal", "current_record", "visual_attribute",
							"CHECKED");

				}

				else {
					setItemInstanceProperty("std_airport.four_alpha_terminal", "current_record", "visual_attribute",
							"PLAIN");

				}

			}

			else {
				if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), "Y")) {
					stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal("N");

				}

				else {
					stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal("Y");

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportFourAlphaTerminalWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportFourAlphaTerminalWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectByHeliportGroupWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.HELIPORT_TO_SELECT);
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {
				deleteGroupRow("DeSelect_Group", "allRows");

			}

			else if (getGroupRowCount(findGroup("Select_Group")) > 0) {
				deleteGroupRow("Select_Group", "allRows");

			}

			stdHeliport.getData().clear();
			stdHeliport.add(new StdHeliport());
			system.setCursorBlock(DbConstants.STD_HELIPORT);
			String where = "data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = '%s' and"
					.formatted(navdb.getDataSupplier(), global.getProcessingCycle())
					+ "(terminal_ident, terminal_icao) not in (select heliport_ident, heliport_icao from b_heliport_to_select a, b_select_by_heliport_group b where 1=1 "
					+ "and a.ssc_id = nvl(%s, %d) and b.ssc_id = nvl(%s, %d) and ".formatted(parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
					+ "a.ssc_id = b.ssc_id and b.navdb_id = '%s' and a.select_by_id = b.select_by_id)"
							.formatted(navdb.getNavdbId());

			system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_HELIPORT));

			EParam.DYNAMIC_QUERY_ONE.setValue(where);
			navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

			selectByHeliportGroup.getData().clear();
			selectByHeliportGroup.add(new SelectByHeliportGroup());
			system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_HELIPORT_GROUP));
			where = "navdb_id= '%s' and ssc_id =%d".formatted(navdb.getNavdbId(), navdb.getSscId());
			navdbExecuteQuery(where);

			heliportToSelect.getData().clear();
			heliportToSelect.add(new HeliportToSelect());
			where = "select_by_id=%d and ssc_id = %d ".formatted(
					selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
					navdb.getSscId());
			system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT));
			navdbExecuteQuery(where);

			goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
			setcurrentAndCursorBlock(DbConstants.SELECT_BY_HELIPORT_GROUP);
			controlBlock.setHeliportFrameText("Available Standard Heliports in cycle " + global.getProcessingCycle());
			setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			Integer vNallowUpdate = 0;
			String vCnavdbBlock = DbConstants.NAVDB;

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec("N");
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.UPDATE_ALLOWED,
							FormConstant.PROPERTY_TRUE);
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.INSERT_ALLOWED,
							FormConstant.PROPERTY_TRUE);

				}

				else {
					parameter.setUpdRec("Y");
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.UPDATE_ALLOWED,
							FormConstant.PROPERTY_FALSE);
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.INSERT_ALLOWED,
							FormConstant.PROPERTY_FALSE);

				}

			}

			hideView("SELECT_FROM_GROUPS");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> heliportToSelectWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one HELIPORT data." + " " + " "
						+ "Click the ''Select'' button to select the checked HELIPORT." + " "
						+ "Click the ''Reset Check'' button to clear all the check(s)");
				if (Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					heliportToSelect.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.HELIPORT_TO_SELECT, "DeSelect_Group",
							heliportToSelect.getRow(system.getCursorRecordIndex()).getChk(),
							heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(),
							heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao());

				}

				goBlock("STD_HELIPORT", "");
				setcurrentAndCursorBlock("STD_HELIPORT");

			}

			else {

				stdHeliport.getData().clear();
				stdHeliport.add(new StdHeliport());
				system.setCursorBlock(DbConstants.STD_HELIPORT);
				String where = "data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = '%s' and"
						.formatted(navdb.getDataSupplier(), global.getProcessingCycle())
						+ "(terminal_ident, terminal_icao) not in (select heliport_ident, heliport_icao from b_heliport_to_select a, b_select_by_heliport_group b where 1=1 "
						+ "and a.ssc_id = nvl(%s, %d) and b.ssc_id = nvl(%s, %d) and ".formatted(parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
						+ "a.ssc_id = b.ssc_id and b.navdb_id = '%s' and a.select_by_id = b.select_by_id)"
								.formatted(navdb.getNavdbId());

				system.setCursorBlock(DbConstants.STD_HELIPORT);

				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

				selectByHeliportGroup.getData().clear();
				selectByHeliportGroup.add(new SelectByHeliportGroup());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_HELIPORT_GROUP));
				where = "navdb_id= '%s' and ssc_id =%d".formatted(navdb.getNavdbId(), navdb.getSscId());

				EParam.DYNAMIC_QUERY_TWO.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_TWO.getValue());

				heliportToSelect.getData().clear();
				heliportToSelect.add(new HeliportToSelect());
				where = "select_by_id=%d and ssc_id = %d ".formatted(
						selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT));
				navdbExecuteQuery(where);

				goBlock(DbConstants.HELIPORT_TO_SELECT, "");
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), global.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.move", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.move", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			hideView("SELECT_FROM_GROUPS");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> heliportToSelectWhenValidateRecord(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectWhenValidateRecord Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERY")) {

				checkHeliport(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(),
						heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao(), "RECORD");

			}

			if (Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao(), null)) {

				coreptLib.dspMsg("Heliport Icao is required, please enter.");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> heliportToSelectMoveWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectMoveWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave("");
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (Objects.equals(getGroupRowCount(findGroup("DeSelect_Group")), 0)) {

					coreptLib.dspMsg("Nothing to move!");

				}

				else {
					goBlock("SELECT_FROM_GROUPS", "");
					setcurrentAndCursorBlock("SELECT_FROM_GROUPS");
					global.setMovingGroup("heliport");

					populateAirportGroups(global.getMovingGroup());

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectMoveWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectMoveWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> heliportToSelectHeliportIdentWhenValidateItem(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectHeliportIdentWhenValidateItem Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERY")
					&& Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao(), null)) {

				checkHeliport(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null,
						"RECORD");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectHeliportIdentWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectHeliportIdentWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> stdHeliportWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.HELIPORT_TO_SELECT);

			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Heliport Data." + " " + " "
						+ "Click the ''De Select'' button to De Select the checked Heliport." + " "
						+ "Click the ''Reset Check'' button to clear all the check(s)");
				if (Objects.equals(stdHeliport.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					stdHeliport.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup("STD_HELIPORT", "Select_Group", stdHeliport.getRow(system.getCursorRecordIndex()).getChk(),
							stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(),
							stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIcao());

				}

				goBlock(DbConstants.HELIPORT_TO_SELECT, "");
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT));

			}

			else {
				selectByHeliportGroup.getData().clear();
				selectByHeliportGroup.add(new SelectByHeliportGroup());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_HELIPORT_GROUP));
				String where = "navdb_id= '%s' and ssc_id =%d".formatted(navdb.getNavdbId(), navdb.getSscId());
				navdbExecuteQuery(where);
				heliportToSelect.getData().clear();
				heliportToSelect.add(new HeliportToSelect());
				where = "select_by_id=%d and ssc_id = %d ".formatted(
						selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT));
				navdbExecuteQuery(where);

				stdHeliport.getData().clear();
				stdHeliport.add(new StdHeliport());
				system.setCursorBlock(DbConstants.STD_HELIPORT);
				where = "data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = '%s' and"
						.formatted(navdb.getDataSupplier(), global.getProcessingCycle())
						+ "(terminal_ident, terminal_icao) not in (select heliport_ident, heliport_icao from b_heliport_to_select a, b_select_by_heliport_group b where 1=1 "
						+ "and a.ssc_id = nvl(%s, %d) and b.ssc_id = nvl(%s, %d) and ".formatted(parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId())
						+ "a.ssc_id = b.ssc_id and b.navdb_id = '%s' and a.select_by_id = b.select_by_id)"
								.formatted(navdb.getNavdbId());

				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_HELIPORT));

				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());

				goBlock("STD_HELIPORT", "");
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.STD_HELIPORT));
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), global.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							setBlockProperty("STD_HELIPORT", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setBlockProperty("STD_HELIPORT", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec("Y");
							setBlockProperty("STD_HELIPORT", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
							setBlockProperty("STD_HELIPORT", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_heliport.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			hideView("SELECT_FROM_GROUPS");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdHeliportWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectionSelectionsWhenListChanged(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectionSelectionsWhenListChanged Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = null;
			DuRecord rec = null;
			controlBlock.setAirwaySbi(null);
			controlBlock.setAirportSbi(null);
			selectAllRules.setIxrrd("N");
			goBlock("datatyp_rad", "");
			setcurrentAndCursorBlock("datatyp_rad");

			if (Arrays.asList("S", "G", "A", "I", "R", "H", "P").contains(selection.getSelections())) {

				setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("exc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

			}

			else {
				setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				if (Objects.equals(parameter.getUpdRec(), "N")) {
					setItemProperty("datatyp_rad.options", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.options", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				String vType = "E";
				Integer vCount = 0;
				Integer lnIncExcCnt = 0;

				try {

					query = """
							select 'T' from b_select_by_airport_group
										where select_by_id = ?
										and ssc_id = nvl(?, ?)
							""";
					rec = app.selectInto(query, selection.getSelections(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
					vType = rec.getString();
				} catch (NoDataFoundException e) {

					try {

						query = """
								select 'H' from b_select_by_heliport_group
												where select_by_id = ?
												and ssc_id = nvl(?, ?)
								""";
						rec = app.selectInto(query, selection.getSelections(), parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
						vType = rec.getString();
					} catch (NoDataFoundException ex) {

						try {

							query = """
									select 'I' from b_select_by_icao
														where select_by_id = ?
														and ssc_id = nvl(?, ?)
									""";
							rec = app.selectInto(query, selection.getSelections(), parameter.getSscId(),
									bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
							vType = rec.getString();
						} catch (NoDataFoundException exp) {

							try {

								query = """
										select 'G' from b_select_by_geographic_area
										  					where select_by_id = ?
										  					and ssc_id = nvl(?, ?)
										""";
								rec = app.selectInto(query, selection.getSelections(), parameter.getSscId(),
										bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
								vType = rec.getString();
							} catch (NoDataFoundException expt) {
								vType = "E";

							}

						}

					}

				}

				populateDatatypDescr(vType);

				if (Objects.equals(vType, "T")) {

					query = """
							SELECT COUNT (*)
								        from b_navdb_select_criteria sel
								       WHERE sel.airport_group_id = ?
							           AND sel.navdb_id = ?
							           AND sel.parent_select_by_id IS NULL
							           AND sel.record_type_code = 10
							           AND ssc_id = nvl(?, ?)
							""";
					rec = app.selectInto(query, selection.getSelections(), navdb.getNavdbId(), parameter.getSscId(),
							bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
					vCount = toInteger(rec.getString());
					if (Objects.equals(vCount, 0)) {

						createDatatypCriteria(toInteger(rtrim(ltrim(selection.getSelections()))), 10);

					}

				}

				if (Objects.equals(toInteger(toInteger(selection.getSelections())), -1)) {
					setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.DISPLAYED,
							FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

					setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				}

				else {
					setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.DISPLAYED,
							FormConstant.PROPERTY_FALSE);

					setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

				}
				if (!Objects.equals(toInteger(selection.getSelections()), -1)) {
					parameter.getDynamicGridData().clear();
					DynamicLists list1 = new DynamicLists();
					list1.setBlockName("datatypRad");
					list1.setItemName("datatypRadIncExcIndicator");
					list1.setVisible(false);
					parameter.getDynamicGridData().add(list1);
					DynamicLists list2 = new DynamicLists();
					list2.setBlockName("datatypRad");
					list2.setItemName("datatypRadRecordTypeDescr");
					list2.setVisible(true);
					parameter.getDynamicGridData().add(list2);
					DynamicLists list3 = new DynamicLists();
					list3.setBlockName("datatypRad");
					list3.setItemName("datatypRadOptions");
					list3.setVisible(true);
					parameter.getDynamicGridData().add(list3);
				} else {
					parameter.getDynamicGridData().clear();
					DynamicLists list1 = new DynamicLists();

					list1.setBlockName("datatypRad");
					list1.setItemName("datatypRadIncExcIndicator");
					list1.setVisible(true);
					parameter.getDynamicGridData().add(list1);
					DynamicLists list2 = new DynamicLists();
					list2.setBlockName("datatypRad");
					list2.setItemName("datatypRadRecordTypeDescr");
					list2.setVisible(true);
					parameter.getDynamicGridData().add(list2);
					DynamicLists list3 = new DynamicLists();
					list3.setBlockName("datatypRad");
					list3.setItemName("datatypRadOptions");
					list3.setVisible(true);
					parameter.getDynamicGridData().add(list3);
				}
				for (int i = 0; i < datatypRad.size(); i++) {
					query = """
							select count(*) from b_navdb_select_criteria sel
							  		where (sel.geo_area_id = ? OR
													 sel.area_code_id = ? OR
										   		 sel.icao_code_id = ? OR
										   		 sel.airport_group_id = ? OR
										   		 sel.heliport_group_id = ?)
										and sel.navdb_id = ?
										and sel.parent_select_by_id is null
										and sel.record_type_code = ?
										and ssc_id = nvl(?, ?)
							""";
					rec = app.selectInto(query, selection.getSelections(), selection.getSelections(),
							selection.getSelections(), selection.getSelections(), selection.getSelections(),
							navdb.getNavdbId(), datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
							parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
					vCount = toInteger(rec.getString());
					if (Objects.equals(vCount, 0)) {

						createDatatypCriteria(toInteger(rtrim(ltrim(selection.getSelections()))),
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());

					}

					if (!Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), null)) {
						parameter.setIncExcInd(getIncExcInd(toInteger(rtrim(ltrim(selection.getSelections())))));
						if (Objects.equals(parameter.getIncExcInd(), "X")) {
							datatypRad.getRow(i).setOptions("X");
							if (i == 0) {

								setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
							}
						}

						else {

							if (i == 0) {

								setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("exc", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								if (Objects.equals(parameter.getWorkType(), "VIEW")) {

									setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								}

								else {

									setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

								}
							}

							populateDatatypOption(i);

						}

					}

					if (Objects.equals(toInteger(selection.getSelections()), -1)) {

						populateDefaultIncExcInd("DATATYP_RAD", "INC_EXC_INDICATOR", i);

						query = """
								SELECT COUNT (*)
										        from Select_Criteria
										       WHERE Processing_Order = 30              -- check if it has a list rule
										         AND Record_Type_Code = ?
								""";
						rec = app.selectInto(query, datatypRad.getRow(i).getRecordTypeCode());
						lnIncExcCnt = toInteger(rec.getString());
						if (Objects.equals(lnIncExcCnt, 0)) {
							setItemInstanceProperty("datatyp_rad.inc_exc_indicator", toString(i), "VISUAL_ATTRIBUTE",
									"INC_EXC_NONE");
							datatypRad.getRow(i).setIncExcIndicator(null);

						} else {
							log.debug("Inside else condition on lnIncExcCnt at selectionSelectionsWhenListChanged");
						}

					} else {
						log.debug("Inside else condition on selections at selectionSelectionsWhenListChanged");
					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectionSelectionsWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectionSelectionsWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> datatypRadWhenNewRecordInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = null;
			DuRecord rec = null;
			if (Arrays.asList("S", "G", "A", "I", "R", "H").contains(selection.getSelections())) {
				log.debug("selection condition ");

			}

			else {
				if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), null)) {
					if (like("--%", datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr())) {
						log.debug("datatypRad condition ");

					}

					else {
						if (!Objects.equals(toInteger(system.getTriggerRecord()), 1)) {
							log.debug("TriggerRecord condition");

						}

						else {
							log.debug("empty else ");

						}

					}

				}

				else {
					Integer vCount = 0;

					if (Objects.equals(selection.getSelections(), "-1")) {

						setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

						populateDefaultIncExcInd("DATATYP_RAD", "INC_EXC_INDICATOR", system.getCursorRecordIndex());

						query = """
								select count(*) from select_criteria
												where processing_order = 30 -- check if it has a list rule
												and record_type_code = ?
								""";
						rec = app.selectInto(query,
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
						vCount = toInteger(rec.getString());
						if (Objects.equals(vCount, 0)) {
							setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("datatyp_rad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
							setItemProperty("datatyp_rad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);

						}

						else {
							setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("datatyp_rad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_TRUE);
							setItemProperty("datatyp_rad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_TRUE);

							query = """
									select count(*) from record_identifier
									  				where record_type_code = ?
									""";
							rec = app.selectInto(query,
									datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
							datatypRad.getRow(system.getCursorRecordIndex()).setListNo(rec.getInt());

						}

					}

					else {
						if (Objects.equals(parameter.getIncExcInd(), "X")) {

							setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

						}

						else {

							setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

						}
						setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("datatyp_rad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
						setItemProperty("datatyp_rad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
					}

				}

			}
			setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
			setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
			setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
			setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
			setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> datatypRadOptionsWhenMouseClick(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadOptionsWhenMouseClick Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			navdb.setDataName(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr());

			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "N")
					&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 94)) {

				coreptLib.dspMsg(
						"Selecting 'Ref Only' option is not allowed for SAAAR Approaches. Please select any other option.");

			}

			else {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {

					clickDatatypRadio();

				}

				else {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), global.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec("N");
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

						clickDatatypRadio();

					}

					else {
						parameter.setUpdRec("Y");
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

						coreptLib.dspActionMsg("U", null, toInteger(nameIn(this, "GLOBAL.dcr_number")),
								toInteger(global.getProcessingCycle()),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
						throw new FormTriggerFailureException();

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadOptionsWhenMouseClick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadOptionsWhenMouseClick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> datatypRadOptionsWhenMouseDoubleclick(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadOptionsWhenMouseDoubleclick Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "N")
					&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 94)) {

				coreptLib.dspMsg(
						"Selecting 'Ref Only' option is not allowed for SAAAR Approaches. Please select any other option.");

			}

			else {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {

					clickDatatypRadio();

				}

				else {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), global.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						parameter.setUpdRec("N");

						clickDatatypRadio();

					}

					else {
						parameter.setUpdRec("Y");
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

						throw new FormTriggerFailureException();

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadOptionsWhenMouseDoubleclick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadOptionsWhenMouseDoubleclick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> datatypRadIncallWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadIncallWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), 0)
					|| Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), null)) {

				coreptLib.dspMsg("Sorry, no record identifier is found for "
						+ datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr());
				throw new FormTriggerFailureException();

			}

			datatypRad.getRow(system.getCursorRecordIndex()).setListVal("I");
			goBlock("lists", "");
			setcurrentAndCursorBlock("lists");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadIncallWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadIncallWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> datatypRadExcallWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadExcallWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), 0)
					|| Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), null)) {

				coreptLib.dspMsg("Sorry, no record identifier is found for "
						+ datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr());
				throw new FormTriggerFailureException();

			}

			datatypRad.getRow(system.getCursorRecordIndex()).setListVal("X");
			goBlock("lists", "");
			setcurrentAndCursorBlock("lists");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadExcallWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadExcallWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> rulesWhenNewRecordInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> rulesWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String selCur = """
					select decode(?,'-1','NAVDB Default')
							from dual
							union
							select decode(geo.select_by_id,?,geo.GEO_AREA_NAME)
							from b_select_by_geographic_area geo where ssc_id = nvl(?, ?)
							union
							select decode(area.select_by_id,?,area.AREA_CODE)
							from b_select_by_area area where ssc_id = nvl(?, ?)
							union
							select decode(icao.select_by_id,?,icao.icao_CODE)
							from b_select_by_icao icao where ssc_id = nvl(?, ?)
							union
							select decode(agrp.select_by_id,?,agrp.group_name)
							from b_select_by_airport_group agrp where ssc_id = nvl(?, ?)
							union
							select decode(hgrp.select_by_id,?,hgrp.group_name)
							from b_select_by_heliport_group hgrp where ssc_id = nvl(?, ?)
					""";

			List<DuRecord> records = app.executeQuery(selCur, selection.getSelections(), selection.getSelections(),
					parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
					selection.getSelections(), parameter.getSscId(),
					bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), selection.getSelections(),
					parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
					selection.getSelections(), parameter.getSscId(),
					bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), selection.getSelections(),
					parameter.getSscId(), bNavdb.getRow(system.getCursorRecordIndex()).getSscId());
			controlBlock.setSelHdr(toString(records.getFirst().getObject()));
			controlBlock
					.setSelHdr(rtrim(controlBlock.getSelHdr()) + " Criteria Rules For " + rtrim(navdb.getDataName()));
			controlBlock.setDid("N");
			rules.setLastQuery(hashUtils.encrypt("none")); // export
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> rulesListWhenMouseClick(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesListWhenMouseClick Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			clickDetailRadio();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesListWhenMouseClick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesListWhenMouseClick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> rulesListWhenMouseDoubleclick(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesListWhenMouseDoubleclick Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			clickDetailRadio();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesListWhenMouseDoubleclick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesListWhenMouseDoubleclick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> rulesBackWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesBackWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			String navcur = """
					select include_exclude_ind
							from 	b_navdb_select_criteria A, select_criteria B
							where 1=1
							and ssc_id = nvl(?, ?)
							and A.criteria_id = B.criteria_id
							and A.parent_select_by_id = ?
					""";

			global.setDetailOption("N");
			List<DuRecord> records = app.executeQuery(navcur, parameter.getSscId(),
					bNavdb.getRow(system.getPreviousBlockCursorIndex()).getSscId(),
					datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
			for (DuRecord rec : records) {
				if (Objects.equals(rec.getObject("include_exclude_ind"), "I")) {
					global.setDetailOption("R");

				}

				else {
					log.debug("Inside else condition at rulesBackWhenButtonPressed");
				}
			}
			if (Objects.equals(global.getDetailOption(), "N")) {
				if (!Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOldOption(), "R")) {
					datatypRad.getRow(system.getPreviousBlockCursorIndex())
							.setOptions(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOldOption());

				}

				else {
					if (like("NAVDB Default%", controlBlock.getSelHdr())) {
						datatypRad.getRow(system.getPreviousBlockCursorIndex()).setOptions("N");

					}

					else {
						datatypRad.getRow(system.getPreviousBlockCursorIndex()).setOptions("D");

					}

				}

				updateDatatypValue(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions());

			}

			datatypRad.getRow(system.getPreviousBlockCursorIndex())
					.setOldOption(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions());
			controlBlock.setDid("Y");
			controlBlock.setDid2("Y");
			hideView("rules");
			goBlock("SELECTION", "");
			setcurrentAndCursorBlock("SELECTION");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesBackWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesBackWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> singleValPostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" singleValPostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			if (e instanceof FormTriggerFailureException) {
				goBlock("singleVal", "single");
			}
			log.error("Error while Executing the singleValPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> singleValCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" singleValCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getOldList(), "I")
					&& Objects.equals(singleVal.getOldValue(), null)) {
				rules.getRow(system.getCursorRecordIndex()).setList("N");

			}

			else {
				rules.getRow(system.getCursorRecordIndex())
						.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

			}
			controlBlock.setDid("Y");
			hideView("single");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the singleValCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> multValPostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" multValPostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" multValPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the multValPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> multValCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" multValCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getOldList(), "I")
					&& Objects.equals(singleVal.getSingle(), null)) {
				rules.getRow(system.getCursorRecordIndex()).setList("N");

			}

			else {
				rules.getRow(system.getCursorRecordIndex())
						.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

			}
			controlBlock.setDid("Y");
			hideView("multiple");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" multValCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the multValCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> recordSubTypePostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypePostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			if (e instanceof FormTriggerFailureException) {
				goBlock("recordSubType", "value");
			}
			log.error("Error while Executing the recordSubTypePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> recordSubTypeCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypeCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			rules.getRow(system.getCursorRecordIndex())
					.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
			controlBlock.setDid("Y");
			hideView("SELECT_SUB_TYPE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypeCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypeCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> genCriteriaSubTypePostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypePostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> genCriteriaSubTypeCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypeCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer lnCnt = 0;
			DuRecord rec = null;
			String query = null;

			query = """
					SELECT COUNT(*) from navdb_general_criteria_value
					WHERE

					CRITERIA_ID = ?
					AND navdb_id  = ?
					""";
			rec = app.selectInto(query, generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(),
					navdb.getNavdbId());
			lnCnt = toInteger(rec.getString());
			if (lnCnt > 0) {
				generalCriteria.getRow(system.getCursorRecordIndex()).setChk("Y");

			}

			else {

				query = """
						DELETE FROM navdb_general_criteria_value
						WHERE navdb_id = ?
						AND criteria_id = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId(),
						generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId());
				query = """
						UPDATE navdb_general_criteria
						SET apply_ind = 'N'
						WHERE navdb_id = ?
						AND criteria_id = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId(),
						generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId());
				for (int i = 0; i < genCriteriaSubType.size(); i++) {
					genCriteriaSubType.getRow(i).setChk("N");

				}
				generalCriteria.getRow(system.getPreviousBlockCursorIndex()).setChk("N");

			}

			controlBlock.setGenCriteriaCan(null);
			controlBlock.setDid("Y");
			hideView("GEN_CRITERIA_SUB_TYPE");
			goBlock("general_criteria", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypeCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypeCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> appSubTypePostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypePostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			if (e instanceof FormTriggerFailureException) {
				goBlock("appSubType", "value");
			}
			log.error("Error while Executing the appSubTypePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> appSubTypeDoneWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNum = 0;
				Integer vButton = 0;
				Integer vPrecisionLimit = 0;
				Integer vNonPrecisionLimit = 0;
				String vPriority = null;
				String vPrecision = null;
				String vMessage = null;
				Integer vNumPrecision = 0;
				Integer vNumNPrecision = 0;
				String lsStmt = null;
				Integer lnOut = 0;
				String query = null;

				checkDid("Post Block Check");
				for (int i = 0; i < appSubType.size(); i++) {
					if (Objects.equals(appSubType.getRow(i).getValue(), "------Precision Route Types------")) {
						vPrecisionLimit = appSubType.getRow(i).getLimitPriority();
						vPrecision = "Y";
						vPriority = "999";
						if (!Objects.equals(vPrecisionLimit, null)) {
							appSubType.getRow(i).setChk("Y");
						}

					}

					else if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getValue(),
							"----Non Precision Route Types----")) {
						if (Objects.equals(vNumPrecision, 0) && !Objects.equals(vPrecisionLimit, null)) {
							vMessage = "Limit is set for the Precision group, but no selected Route Type in this group.";
							break;

						}

						vNonPrecisionLimit = appSubType.getRow(system.getCursorRecordIndex()).getLimitPriority();
						vPrecision = "N";
						vPriority = "999";

					}

					if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), "N")
							&& !Objects.equals(
									substr(appSubType.getRow(system.getCursorRecordIndex()).getValue(), 1, 4), "----")
							&& !Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getLimitPriority(),
									null)) {
						vMessage = "Please remove Priority for not selected Route Type.";
						break;

					}

					if (Objects.equals(vPrecision, "Y")) {
						if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
							vNumPrecision = vNumPrecision + 1;
							if (!Objects.equals(vPrecisionLimit, null) && Objects.equals(
									appSubType.getRow(system.getCursorRecordIndex()).getLimitPriority(), null)) {
								vMessage = "Limit is set for the Precision group, so, Priority is required for the selected Route Type in this group.";
								break;

							}

						}

						if (Objects.equals(vPrecisionLimit, null)
								&& Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), "Y")
								&& !Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getLimitPriority(),
										null)) {
							vMessage = "Limit need to be set for the Precision group because Priority is been set for the selected Route Type.";
							break;

						}

					}

					if (Objects.equals(vPrecision, "N")) {
						if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
							vNumNPrecision = vNumNPrecision + 1;
							if (!Objects.equals(vNonPrecisionLimit, null) && Objects.equals(
									appSubType.getRow(system.getCursorRecordIndex()).getLimitPriority(), null)) {
								vMessage = "Limit is set for the None Precision group, so, Priority is required for the selected Route Type in this group.";
								break;

							}

						}

						if (Objects.equals(vNonPrecisionLimit, null)
								&& Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), "Y")
								&& !Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getLimitPriority(),
										null)) {
							vMessage = "Limit need to be set for the None Precision group because Priority is been set for the selected Route Type.";
							break;

						}

					}

					if (Objects.equals(appSubType.getRow(i).getChk(), "Y")) {
						vNum = vNum + 1;
						if (!Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
							lsStmt = "SELECT COUNT(*) FROM Dual WHERE " + appSubType.getRow(i).getLimitPriority()
									+ " IN (" + vPriority + ")";

							Map<String, Object> executeProcedure = app.executeProcedure("CPTS", "Exe_Query",
									"Forms_Utilities", new ProcedureInParameter("p_query", lsStmt, OracleTypes.VARCHAR),
									new ProcedureOutParameter("p_err_exist", OracleTypes.NUMBER));
							lnOut = toInteger(executeProcedure.get("p_err_exist"));

							if (lnOut > 0) {
								vMessage = "The Priority number have to be unique in Precision Route Type group "
										+ "and Non-Precision Route Type group. Please correct it.";
								break;

							}

						}

						vPriority = vPriority + "," + toChar(appSubType.getRow(i).getLimitPriority());
						if (Objects.equals(vPrecision, "Y")) {

							if (Objects.equals(vPrecisionLimit, null)) {
								appSubType.getRow(i).setRealValue((appSubType.getRow(i).getRealValue()));
							} else {
								appSubType.getRow(i)
										.setRealValue(substr(appSubType.getRow(i).getRealValue(), 1, 1)
												+ lpad(toChar(vPrecisionLimit), 2, '0')
												+ lpad(toChar(appSubType.getRow(i).getLimitPriority()), 2, '0'));
							}

						}

						else if (Objects.equals(vPrecision, "N")) {
							if (Objects.equals(vPrecisionLimit, null)) {
								appSubType.getRow(i).setRealValue((appSubType.getRow(i).getRealValue()));
							} else {
								appSubType.getRow(i)
										.setRealValue(substr(appSubType.getRow(i).getRealValue(), 1, 1)
												+ lpad(toChar(vPrecisionLimit), 2, '0')
												+ lpad(toChar(appSubType.getRow(i).getLimitPriority()), 2, '0'));
							}

						}

					}

					if (Objects.equals(system.getLastRecord(), true)) {
						if (Objects.equals(vNumNPrecision, 0) && !Objects.equals(vNonPrecisionLimit, null)) {
							vMessage = "Limit is set for the None Precision group, but no selected Route Type in this group.";

						}

						break;

					}

					nextRecord("");

				}
				if (!Objects.equals(vMessage, null)) {

					throw new FormTriggerFailureException();

				}

				if (Objects.equals(vNum, 0)) {
					if (Objects.equals(vButton, 1)) {

						query = """
								delete from selection_criteria_value
								where select_by_id =?
								""";
						app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
						if (!Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
								rules.getRow(system.getCursorRecordIndex()).getOldList())) {
							rules.getRow(system.getCursorRecordIndex())
									.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

						}

						else {
							rules.getRow(system.getCursorRecordIndex()).setList("N");

							query = """
									update navdb_select_criteria
									set include_exclude_ind = ?
									where select_by_id = ?
									""";
							app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getList(),
									rules.getRow(system.getCursorRecordIndex()).getSelectById());
						}
						controlBlock.setDid("Y");

					}

					else {
						throw new FormTriggerFailureException();

					}

				}

				else {

					query = """
							delete from selection_criteria_value
							where select_by_id =?
							""";
					app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
					vNum = 0;

					for (int i = 0; i < appSubType.size(); i++) {
						if (Objects.equals(appSubType.getRow(i).getChk(), "Y")) {
							vNum = vNum + 1;

							query = """
									 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
														values (?,?,?,?)
									""";
							app.executeNonQuery(query,
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(), vNum,
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(),
									appSubType.getRow(i).getRealValue());
						}
					}
					if (!Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
							rules.getRow(system.getCursorRecordIndex()).getOldList())) {

						query = """
								update navdb_select_criteria
								set include_exclude_ind = ?
								where select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getList(),
								rules.getRow(system.getCursorRecordIndex()).getSelectById());
					}

					controlBlock.setDid("Y");

				}

			}

			rules.getRow(system.getCursorRecordIndex())
					.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());
			hideView("SEL_APP_SUB_TYPE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypeDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> appSubTypeCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			rules.getRow(system.getCursorRecordIndex())
					.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
			controlBlock.setDid("Y");
			hideView("SEL_APP_SUB_TYPE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypeCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> runwaySurfacePostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfacePostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfacePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			if (e instanceof FormTriggerFailureException) {
				if (Objects.equals(system.getPreviousCursorBlock(), "runwaySurface")) {
					goBlock("runwaySurface", "softValue");
				}
			}
			log.error("Error while Executing the runwaySurfacePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	public void populateRunSurface() {

		String[] softData = { "CLAY", "CORL", "DIRT", "GRAS", "GRVL", "ICE", "LATE", "MATS", "PLNG", "SAND", "SELD",
				"SHAE", "SILT", "SNOW", "SOIL", "TRTD", "TURF", "UNKN", "UNPV", "WATE" };

		String[] hardData = { "ASPH", "BITU", "BRCK", "CONC", "MACA", "PAVD", "TARM" };

		runwaySurface.getData().clear();

		for (int i = 0; i < softData.length; i++) {

			RunwaySurface runsurface = new RunwaySurface();

			if (i < softData.length) {
				runsurface.setSoftValue(softData[i]);

			}
			if (i < hardData.length) {
				runsurface.setHardValue(hardData[i]);

			}
			runwaySurface.add(runsurface);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> runwaySurfaceWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = null;
			DuRecord rec = null;


			firstRecord("");
			populateRunSurface();
			for (int i = 0; i < runwaySurface.getData().size(); i++) {

				if (!Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getSoftValue(), null)) {

					try {

						query = """
								select 'Y' from b_selection_criteria_value
								where 1=1
										and ssc_id = nvl(?, ?)
								 				and value = ?
								 				and select_by_id = ?
								 				and value_descr = ?
								""";
						rec = app.selectInto(query, parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(),
								runwaySurface.getRow(i).getSoftValue(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
						runwaySurface.getRow(i).setSoftChk(rec.getString());
					} catch (NoDataFoundException e) {
						runwaySurface.getRow(i).setSoftChk("N");

					}

				}

				if (!Objects.equals(runwaySurface.getRow(i).getHardValue(), null)) {

					try {

						query = """
								select 'Y' from selection_criteria_value
								 				where value = ?
								 				and select_by_id = ?
								 				and value_descr = ?
								""";
						rec = app.selectInto(query, runwaySurface.getRow(system.getCursorRecordIndex()).getHardValue(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
						runwaySurface.getRow(i).setHardChk(rec.getString());
					} catch (NoDataFoundException e) {
						runwaySurface.getRow(i).setHardChk("N");

					}

				}

			}
			runwaySurface.setQueryHits(toString(runwaySurface.getData().size()));
			runwaySurface.setLastQuery(hashUtils.encrypt("none"));
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> runwaySurfaceCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			rules.getRow(system.getCursorRecordIndex())
					.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
			controlBlock.setDid("Y");
			hideView("SELECT_RUNWAY_SURFACE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> listsPostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsPostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> listsWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vLable = null;
			Integer vLength = 0;
			Integer vNallowUpdate = 0;
			String vCnavdbBlock = DbConstants.NAVDB;
			String labelhdrDisp = """
					SELECT identifier_label, identifier_length
					       FROM record_identifier
					      WHERE record_type_code = ?

					        AND display_order = ?
					""";

			setItemProperty("_lists.save", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			List<DynamicLists> listOfDynamicLists = new ArrayList<>();
			parameter.getDynamicGridData().clear();

			Integer index = 0;

			for (int i = 2; i <= 7; i++) {
				if (i > datatypRad.getRow(system.getCursorRecordIndex()).getListNo()) {
					listOfDynamicLists.add(new DynamicLists());
					listOfDynamicLists.get(index).setBlockName("lists");
					listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
					listOfDynamicLists.get(index).setVisible(false);
					listOfDynamicLists.get(index).setDynamicName(null);
					index++;
				}

				else {

					listOfDynamicLists.add(new DynamicLists());
					listOfDynamicLists.get(index).setBlockName("lists");
					listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
					listOfDynamicLists.get(index).setVisible(true);
					listOfDynamicLists.get(index).setDynamicName(null);
					index++;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), global.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec("N");
							listOfDynamicLists.add(new DynamicLists());
							listOfDynamicLists.get(index).setBlockName("lists");
							listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
							listOfDynamicLists.get(index).setDynamicName(null);
							listOfDynamicLists.get(index).setInsertAllowed(true);
							listOfDynamicLists.get(index).setUpdateAllowed(true);
							index++;

						}

						else {
							parameter.setUpdRec("Y");
							listOfDynamicLists.add(new DynamicLists());
							listOfDynamicLists.get(index).setBlockName("lists");
							listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
							listOfDynamicLists.get(index).setDynamicName(null);
							listOfDynamicLists.get(index).setInsertAllowed(false);
							listOfDynamicLists.get(index).setUpdateAllowed(false);
							index++;

						}

					}

				}

			}
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListVal(), "I")) {
				controlBlock.setListhdr("NAVDB Default -- "
						+ rtrim(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr())
						+ " -- Include Lists");

			}

			else {
				controlBlock.setListhdr("NAVDB Default -- "
						+ rtrim(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr())
						+ " -- Exclude Lists");

			}
			for (int i = 1; i <= datatypRad.getRow(system.getCursorRecordIndex()).getListNo(); i++) {
				List<DuRecord> records = app.executeQuery(labelhdrDisp,
						datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), i);
				vLable = toString(records.get(0).getObject("IDENTIFIER_LABEL"));
				vLength = toInteger(records.get(0).getObject("IDENTIFIER_LENGTH"));

				listOfDynamicLists.add(new DynamicLists());
				listOfDynamicLists.get(index).setBlockName("lists");
				listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
				listOfDynamicLists.get(index).setDynamicName(vLable);
				listOfDynamicLists.get(index).setVisible(true);
				listOfDynamicLists.get(index).setInsertAllowed(false);
				listOfDynamicLists.get(index).setUpdateAllowed(false);
				index++;
				copy(toString(vLength), "control_block.length_" + toChar(i));

				if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(), "AIRPORT")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"RUNWAY")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "RUNWAY_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"AIRPORT NDB")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_NDB_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"HELIPORT")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "HELIPORT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"ENROUTE HOLDING")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "ENROUTE_HOLDING_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"APPROACH")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "APPROACH_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"SIDS")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "SID_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"STARS")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "STAR_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"AIRPORT WAYPOINT")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_WAYPOINT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"ENROUTE NAVAID")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "VHF_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(), "GLS")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "GLS_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"ENROUTE NDB")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "ENROUTE_NDB_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"ENROUTE AIRWAY")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "AIRWAY_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"ENROUTE WAYPOINT")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "ENROUTE_WAYPOINT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"HELIPORT APPROACH")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "HELI_APPROACH_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"HELIPORT SID")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "HELI_SID_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"HELIPORT STAR")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "HELI_STAR_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"RESTRICTED AIRSPACE")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "RESTRICTED_AIRSPACE_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr(),
						"CONTROLLED AIRSPACE")) {
					setItemProperty("VALUE_" + toChar(i), "LOV_NAME", "CONTRL_AIRSPACE_LIST");

				}

			}

			parameter.getDynamicGridData().addAll(listOfDynamicLists);

			populateIncExcLists(datatypRad.getRow(system.getCursorRecordIndex()).getListVal());
			controlBlock.setDid("N");
			lists.setLastQuery(hashUtils.encrypt("none"));
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> listsValue1WhenNewItemInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue1WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), global.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec("N");
					setItemProperty("lists.value_1", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("lists.value_1", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				else {
					parameter.setUpdRec("Y");
					setItemProperty("lists.value_1", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
					setItemProperty("lists.value_1", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue1WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue1WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> listsNextRecWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsNextRecWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue1(), null)
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getSearchFirstField(), null)) {
				parameter.setPSearchField(lists.getRow(system.getCursorRecordIndex()).getSearchFirstField());

				for (int i = 0; i < lists.getData().size(); i++) {
					if (system.getLastRecord().equals(true)
							&& parameter.getPSearchField().equals(lists.getRow(i).getValue1())) {
						break;
					}

				}
				lists.getRow(system.getCursorRecordIndex()).setSearchFirstField(parameter.getPSearchField());

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsNextRecWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsNextRecWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> listsCancelListWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsCancelListWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vValue = null;
			StringBuilder vValueBuilder = new StringBuilder();
			Integer vCount = 0;
			String query = null;
			DuRecord rec = null;

			controlBlock.setDid("Y");

			for (int i = 1; i <= datatypRad.getRow(system.getCursorRecordIndex()).getListNo(); i++) {
				String value = toString(nameInWithIndex(this, "lists.value_" + toChar(i), 0));
				vValueBuilder.append(value);

			}
			vValue = vValueBuilder.toString();
			if (Objects.equals(vValue, null) && Objects.equals(system.getLastRecord(), true)) {

				query = """
						select count(*) from b_selection_criteria_value  --scr 5254 -- Shrikant K
						where select_by_id= ?
						""";
				rec = app.selectInto(query, controlBlock.getListSId());
				vCount = toInteger(rec.getString());
				if (Objects.equals(vCount, 0)) {

					query = """
							delete from b_navdb_select_criteria  --scr 5254 -- Shrikant K
							where select_by_id = ?
							""";
					app.executeNonQuery(query, controlBlock.getListSId());

				}

			}

			hideView("list");
			parameter.setIncExcInd("0");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsCancelListWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsCancelListWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> fmsDmrPostQuery(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDmrPostQuery Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			for (int i = 0; i < fmsDmr.size(); i++) {
				if (Objects.equals(fmsDmr.getRow(i).getDmrDescr(), null)
						&& !Objects.equals(fmsDmr.getRow(i).getDmrId(), null)) {

					try {

						query = """
								select dmr_descr from Data_Manipulation_Routine
										 where dmr_id = ?
								""";
						rec = app.selectInto(query, fmsDmr.getRow(i).getDmrId());
						fmsDmr.getRow(i).setDmrDescr(rec.getString());
					}
					catch (NoDataFoundException e) {
						log.error(e.getMessage());

					}

				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDmrPostQuery executed successfully");

			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDmrPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> customerInfoPostRecord(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoPostRecord Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				controlBlock.setDid("Y");

			}

			else {
				controlBlock.setDid("N");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoPostRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoPostRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> customerInfoCustEmailFlagWhenValidateItem(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoCustEmailFlagWhenValidateItem Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			navdb.setCustEmailFlag(customerInfo.getCustEmailFlag());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoCustEmailFlagWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoCustEmailFlagWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> customerInfoNotesWhenValidateItem(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoNotesWhenValidateItem Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			navdb.setNotes(customerInfo.getNotes());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoNotesWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoNotesWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> navdbDeliveryFormatMediaWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Format Media." + chr(10) + chr(10)
						+ "Click the 'Select' button to select the checked Format \nMedia." + chr(10)
						+ "Click the 'Reset' button to clear all the check(s)");
				if (Objects.equals(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "DeSelect_Group",
							navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(),
							navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(), "");

				}

				goBlock(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "");
				setcurrentAndCursorBlock(DbConstants.FMS_DELIVERY_FORMAT_MEDIA);

			}

			else {

				fmsDeliveryFormatMedia.getData().clear();
				fmsDeliveryFormatMedia.add(new FmsDeliveryFormatMedia());
				system.setCursorBlock(DbConstants.FMS_DELIVERY_FORMAT_MEDIA);
				String where = "fms_id = '%s' and format_media_type not in (select format_media_type from b_navdb_delivery_format_media "
						.formatted(navdb.getFmsId())
						+ "where 1=1 and ssc_id = nvl(%s, %d) and navdb_id = '%s') ".formatted(parameter.getSscId(),
								bNavdb.getRow(system.getCursorRecordIndex()).getSscId(), navdb.getNavdbId());
				EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(EParam.DYNAMIC_QUERY_ONE.getValue());
				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.FMS_DELIVERY_FORMAT_MEDIA));
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

				}

				else {
					log.debug("Inside else condition on navdbDeliveryFormatMediaWhenNewBlockInstance");
				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> fmsDeliveryFormatMediaWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDeliveryFormatMediaWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA);
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				if (Objects.equals(fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {
					fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setChk("N");

					setGroup(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "Select_Group",
							fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(),
							fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(), "");

				}

				goBlock(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "");
				setcurrentAndCursorBlock(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA);

			}

			else {

				navdbDeliveryFormatMedia.getData().clear();
				navdbDeliveryFormatMedia.add(new NavdbDeliveryFormatMedia());
				String where = "navdb_id= '%s' and ssc_id = %d".formatted(navdb.getNavdbId(), navdb.getSscId());
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA));
				navdbExecuteQuery(where);
				setcurrentAndCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.FMS_DELIVERY_FORMAT_MEDIA));
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

				}

				else {
					log.debug("Inside else condition fmsDeliveryFormatMediaWhenNewBlockInstance");
				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDeliveryFormatMediaWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDeliveryFormatMediaWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> suaRulesPostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesPostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			if (e instanceof FormTriggerFailureException) {
				goBlock("suaRules", "type");
			}
			log.error("Error while Executing the suaRulesPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> suaRulesWhenNewBlockInstance(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (like("CONTROLLED AIRSPACE", navdb.getDataName())) {

				populateSuaRules("UC");

			}

			else if (like("RESTRICTED AIRSPACE", navdb.getDataName())) {

				populateSuaRules("UR");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> suaRulesCancelWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			rules.getRow(system.getCursorRecordIndex())
					.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
			controlBlock.setDid("Y");
			hideView("SUA_RULES");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockPreBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPreBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				log.debug("findTimer if condition");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPreBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPreBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockPostBlock(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPostBlock Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			controlBlock.setAirportIdent(null);
			controlBlock.setAirportIcao(null);
			controlBlock.setHeliportIdent(null);
			controlBlock.setHeliportIcao(null);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockCustomerWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockCustomerWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(navdb.getNavdbId(), null)) {

				checkDid("Main Button Check");

				checkSave(system.getCursorBlock());

				setButtonProperty("CUSTOMER");
				showView("cust");
				goBlock("customer_navdb", "");
				setcurrentAndCursorBlock("customer_navdb");

			}

			else {

				coreptLib.dspMsg("Please execute a query first.");
				goItem("navdb.navdb_id");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockCustomerWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockCustomerWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<?> controlBlockReportWhenButtonPressed(NavdbSetupBackupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" controlBlockReportWhenButtonPressed Executing");
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		HttpHeaders headers = new HttpHeaders();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			byte[] reportBytes = new byte[] {};
			if (!Objects.equals(navdb.getNavdbId(), null)) {
				Object plId = null;
				Integer vSelections = 0;

				if (Objects.equals(controlBlock.getDid(), "Y")) {

					checkSave(system.getCursorBlock());

				}

				checkDid("Main Button Check");

				String query = """
						select count(*)
						  	from   b_navdb_select_criteria
						  	where  navdb_id = ?
						""";
				DuRecord rec = app.selectInto(query, navdb.getNavdbId());
				vSelections = toInteger(rec.getString());
				if (vSelections <= 0) {

					coreptLib.dspMsg(
							"There are no selections for this NAVDB! Enter some selection criteria and try again!");
					throw new FormTriggerFailureException();

				}

				if (!idNull(plId)) {
					log.debug("plId condition ");
				}

				BackupSelectionCriteriaReport bkpreport = new BackupSelectionCriteriaReport();
				reportBytes = bkpreport.genReport(app, toInteger(global.getProcessingCycle()), navdb.getNavdbId(),
						toInteger(navdb.getSscId()));
			}

			else {

				coreptLib.dspMsg("Please execute a query first.");
				goItem("navdb.navdb_id");

			}
			headers.setContentType(MediaType.APPLICATION_PDF);
			headers.setContentLength(reportBytes.length);
			headers.setContentDisposition(
					ContentDisposition.inline().filename("Backup_Selection_Criteria.pdf").build());
			headers.add("Access-Control-Expose-Headers", "Content-Disposition");

			log.info(" controlBlockReportWhenButtonPressed executed successfully");
			return new ResponseEntity<>(reportBytes, headers, HttpStatus.OK);
		} catch (FormTriggerFailureException e) {
			log.error("Error while Executing the controlBlockReportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body(("PDF generation failed: " + e.getMessage()).getBytes(StandardCharsets.UTF_8));
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockPbViewTldDataWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPbViewTldDataWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String getIcaoS = """
					select Airport_icao
					from   pl_std_Airport
					where  Airport_ident = ?
					and    data_supplier = ?
					and processing_cycle = ?
					and validate_ind in ('Y','S','H','O')
					""";
			String getIcaoT = """
					select Airport_icao
					from   pl_tld_Airport
					where  Airport_ident = ?

					and    data_supplier = ?
					and    processing_cycle = ?
					and    customer_ident IN (SELECT CUSTOMER_IDENT
					FROM   CUSTOMER_NAVDB
					WHERE  NAVDB_ID = ?)
					and    validate_ind in ('Y','S','H','O')
					""";
			String vIcao = null;
			String vIcao2 = null;
			Integer vExist = 0;
			Object plId = null;

			try {
				controlBlock.setAptIdentTemp(controlBlock.getAirportIdent());
				controlBlock.setAptIcaoTemp(controlBlock.getAirportIcao());
				global.setNavIdent(navdb.getNavdbId());
				global.setAirportId(controlBlock.getAptIdentTemp());
				if (!Objects.equals(controlBlock.getAptIdentTemp(), null)
						&& Objects.equals(controlBlock.getAptIcaoTemp(), null)) {

					try {
						List<DuRecord> records = app.executeQuery(getIcaoS);
						vIcao = toString(records.getLast().getObject());

						if (records.isEmpty()) {
							throw new NoDataFoundException(vIcao);

						}

						else {
							if (records.isEmpty()) {
								vExist = 1;

							}

							else {
								vExist = 2;

							}

						}
					} catch (Exception e) {

						try {
							List<DuRecord> records = app.executeQuery(getIcaoT);
							vIcao = toString(records.getLast().getObject());
							if (records.isEmpty()) {
								throw new NoDataFoundException("");

							}

							else {
								if (records.isEmpty()) {
									vExist = 1;

								}

								else {
									vExist = 2;

								}

							}
						} catch (NoDataFoundException ex) {
							vExist = 0;

						} catch (Exception exp) {

							coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

							throw new FormTriggerFailureException();

						}

					}
					global.setAirportIc(vIcao);

				}

				else if (!Objects.equals(controlBlock.getAptIdentTemp(), null)
						&& !Objects.equals(controlBlock.getAptIcaoTemp(), null)) {
					global.setAirportIc(controlBlock.getAptIcaoTemp());

				}

				if (!idNull(plId)) {
					log.debug("plId if condition");

				}

				openForm("associatedTldData");

			} catch (Exception e) {
				message(OracleHelpers.getSQLerrm(e));

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPbViewTldDataWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPbViewTldDataWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockFindAirportWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockFindAirportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(system.getCursorBlock());
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");

				goBlock(DbConstants.AIRPORT_TO_SELECT, "");
				setcurrentAndCursorBlock(DbConstants.AIRPORT_TO_SELECT);
				throw new FormTriggerFailureException();

			}

			else if (getGroupRowCount(findGroup("SelectGroup")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'Select' button to Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");

				goBlock(DbConstants.STD_AIRPORT, "");
				setcurrentAndCursorBlock(DbConstants.STD_AIRPORT);
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(rtrim(controlBlock.getAirportIdent()), null)) {

				coreptLib.dspMsg("Please enter the airport_ident ");
				goItem("control_block.airport_ident");
				throw new FormTriggerFailureException();

			}

			else {

				checkAirport(controlBlock.getAirportIdent(), controlBlock.getAirportIcao(), "BUTTON");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockFindAirportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockFindAirportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockFindHeliportWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockFindHeliportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(system.getCursorBlock());
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Heliport Data" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked Heliport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock("Heliport_TO_SELECT", "");
				system.setCursorBlock(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT));
				throw new FormTriggerFailureException();

			}

			else if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Heliport Data" + chr(10) + chr(10)
						+ "Click the 'Select' button to Select the checked Heliport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock("STD_Heliport", "");
				setcurrentAndCursorBlock("STD_HELIPORT");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(rtrim(controlBlock.getHeliportIdent()), null)) {

				coreptLib.dspMsg("Please enter the Heliport_ident");
				goItem("control_block.heliport_ident");
				throw new FormTriggerFailureException();

			}

			else {

				checkHeliport(controlBlock.getHeliportIdent(), controlBlock.getHeliportIcao(), "BUTTON");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockFindHeliportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockFindHeliportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> controlBlockFindIataWhenButtonPressed(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockFindIataWhenButtonPressed Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			DuRecord rec = null;
			String query = null;

			checkSave(system.getCursorBlock());
			if (getGroupRowCount(findGroup("DeSelect_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");

				goBlock(DbConstants.AIRPORT_TO_SELECT, "");
				setcurrentAndCursorBlock(DbConstants.AIRPORT_TO_SELECT);
				throw new FormTriggerFailureException();

			}

			else if (getGroupRowCount(findGroup("Select_Group")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'Select' button to Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");

				goBlock(DbConstants.STD_AIRPORT, "");
				setcurrentAndCursorBlock(DbConstants.STD_AIRPORT);
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(rtrim(controlBlock.getAtaIataDesignator()), null)) {

				coreptLib.dspMsg("Please enter the IATA Code");
				goItem("control_block.ata_iata_designator");
				throw new FormTriggerFailureException();

			}

			else {
				String lsAirportIdent = null;
				String lsAirportIcao = null;

				try {

					query = """
							SELECT airport_ident, airport_icao
							from pl_std_airport
							WHERE processing_cycle = ?
							AND data_supplier = ?
							AND ata_iata_designator = ?
							""";
					rec = app.selectInto(query, global.getProcessingCycle(), global.getDataSupplier(),
							controlBlock.getAtaIataDesignator());
					lsAirportIdent = rec.getString();
					lsAirportIcao = rec.getString();

					checkAirport(lsAirportIdent, lsAirportIcao, "BUTTON");
				} catch (TooManyRowsException e) {

					coreptLib.dspMsg("Multiple Airports Exits with IATA '" + controlBlock.getAtaIataDesignator());

				} catch (NoDataFoundException e) {

					coreptLib.dspMsg("No Airports Exists with IATA '" + controlBlock.getAtaIataDesignator() + "'");

				} catch (Exception e) {

					coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockFindIataWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockFindIataWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> selectAllRulesIxrrdWhenRadioChanged(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectAllRulesIxrrdWhenRadioChanged Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(parameter.getWorkType(), "VIEW")) {

				clickDatatypRadio();

			}

			else {
				Integer lnAllowUpdate = 0;
				String lcNavdbBlock = DbConstants.NAVDB;

				lnAllowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, "navdb.navdb_id"))));

				if (Objects.equals(lnAllowUpdate, 1)) {
					parameter.setUpdRec("N");
					setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					goBlock("DATATYP_RAD", "");
					setcurrentAndCursorBlock("DATATYP_RAD");

					if (Objects.equals(selectAllRules.getIxrrd(), "I")) {
						for (int i = 0; i < datatypRad.size();) {
							datatypRad.getRow(system.getCursorRecordIndex()).setOptions("I");

							clickDatatypRadio();
							break;

						}

					}

					else if (Objects.equals(selectAllRules.getIxrrd(), "X")) {
						for (int i = 0; i < datatypRad.size();) {
							datatypRad.getRow(system.getCursorRecordIndex()).setOptions("X");

							clickDatatypRadio();
							break;

						}

					}

					else if (Objects.equals(selectAllRules.getIxrrd(), "R")) {
						if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "N")
								&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
										94)) {

							coreptLib.dspMsg(
									"Selecting 'Ref Only' option is not allowed for SAAAR Approaches. Please select any other option.");

						}

						else {
							for (int i = 0; i < datatypRad.size();) {
								datatypRad.getRow(system.getCursorRecordIndex()).setOptions("N");

								clickDatatypRadio();
								break;

							}

						}

					}

					else if (Objects.equals(selectAllRules.getIxrrd(), "D")) {
						for (int i = 0; i < datatypRad.size();) {
							datatypRad.getRow(system.getCursorRecordIndex()).setOptions("D");

							clickDatatypRadio();
							break;

						}

					}

					else {
						log.debug("Inside else condition selectAllRulesIxrrdWhenRadioChanged");

					}

				}

				else {
					parameter.setUpdRec("Y");
					setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

					coreptLib.dspActionMsg("U", null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, lcNavdbBlock + ".navdb_id")));
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectAllRulesIxrrdWhenRadioChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectAllRulesIxrrdWhenRadioChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupBackupTriggerResponseDto>> toolsExportDestination(
			NavdbSetupBackupTriggerRequestDto reqDto) throws Exception {
		log.info(" toolsExportDestination Executing");
		BaseResponse<NavdbSetupBackupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupBackupTriggerResponseDto resDto = new NavdbSetupBackupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			OracleHelpers.bulkClassMapper(this, coreptMenuMmbServiceImpl);
			coreptMenuMmbServiceImpl.toolsExportFormData(this);
			OracleHelpers.ResponseMapper(this, resDto);
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the toolsExportDestination Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}

	}

	@Override
	public ResponseEntity<ResponseDto<ExportDestinationTriggerResponseDto>> exportDestination(
			ExportDestinationTriggerRequestDto reqDto) throws Exception {
		log.info(" exportDestination Executing");
		BaseResponse<ExportDestinationTriggerResponseDto> responseObj = new BaseResponse<>();
		ExportDestinationTriggerResponseDto resDto = new ExportDestinationTriggerResponseDto();
		try {

			OracleHelpers.bulkClassMapper(reqDto, this);

			BlockDetail mstBlockData = null;
			BlockDetail geoAreaPoint = null;
			BlockDetail airportToselectBlock = null;
			BlockDetail heliportToSelectBlock = null;
			BlockDetail selectByAirportGroupBlock = null;
			BlockDetail selectByGeoAreaBlock = null;
			BlockDetail selectByIcaoBlock = null;
			BlockDetail customerNavedbBlock = null;
			BlockDetail selectByAreaBlock = null;
			BlockDetail selectByHeliportGroupBlock = null;
			BlockDetail fmsDmrBlock = null;
			BlockDetail mediaBlock = null;
			// String Builders
			StringBuilder reportfile = new StringBuilder();
			List<DuRecord> recs = null;
			// Master Block
			if (lower(system.getCursorBlock()).equals("message")
					&& OracleHelpers.isNullorEmpty(selectOptions.getFileName())) {
				coreptLib.dspMsg("Sorry, please give an existing path and a file name with\nextension ''.txt''.");
				throw new FormTriggerFailureException();
			}
			if (OracleHelpers.isNullorEmpty(selectOptions.getFileName())) {
				PropertyHelpers.setAlertProperty(event, "dsp_msg", "stop", "Forms", "Client file name cannot be null",
						"ALERT_MESSAGE_TEXT", "OK", null, null);
				PropertyHelpers.setShowAlert(event, "dsp_msg", false);
				throw new FormTriggerFailureException();
			}
			if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(lower(HoneyWellUtils.toCamelCase(DbConstants.NAVDB)))) {
				// all blocks
				mstBlockData = reqDto.getExportDataBlocks().get("navdb");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}
				String where = "SSC_ID = (%s) AND NAVDB_ID = '%s'".formatted(parameter.getSscId(),
						parameter.getQryNavdbId());

				executeQuery(this, system.getCursorBlock(), where,
						toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
						toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));
				if (Arrays.asList(null, "N").contains(navdb.getGenValerie())) {
					mstPromptNames.remove("Valerie DB IND");
					mstDatabseColumns.remove("genValerie");
				}
				if (Arrays.asList(null, "N").contains(navdb.getBrgaIdent())) {
					mstPromptNames.remove("BRGA IDENT");
					mstDatabseColumns.remove("brgaIdent");
				}
				if (OracleHelpers.isNullorEmpty(navdb.getProfileNumber())) {
					mstPromptNames.remove("PROFILE #");
					mstDatabseColumns.remove("profileNumber");
				}
				// Header Building..
				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// selectbyAirportGroup
				selectByAirportGroupBlock = reqDto.getExportDataBlocks().get("selectByAirportGroup");
				List<String> selectByAirportGroupPromptNames = getBlockMetaData(selectByAirportGroupBlock,
						"PROMPT_NAME");
				List<String> selectByAirportGroupColumns = getBlockMetaData(selectByAirportGroupBlock,
						"DATABASE_COLUMN");
				// airportToSelectGroup
				airportToselectBlock = reqDto.getExportDataBlocks().get("airportToSelect");
				List<String> airportToselectNames = getBlockMetaData(airportToselectBlock, "PROMPT_NAME");
				List<String> airportToselectColumns = getBlockMetaData(airportToselectBlock, "DATABASE_COLUMN");

				// Geo area tab
				selectByGeoAreaBlock = reqDto.getExportDataBlocks().get("selectByGeographicArea");
				List<String> selectByGeoAreaPromptNames = getBlockMetaData(selectByGeoAreaBlock, "PROMPT_NAME");
				List<String> selectByGeoAreaDatabseColumns = getBlockMetaData(selectByGeoAreaBlock, "DATABASE_COLUMN");

				// Geographic area point child
				geoAreaPoint = reqDto.getExportDataBlocks().get("geographicAreaPoint");
				List<String> geoarePointBlockNames = getBlockMetaData(geoAreaPoint, "PROMPT_NAME");
				List<String> geoarePointColumns = getBlockMetaData(geoAreaPoint, "DATABASE_COLUMN");

				// selectByIcao
				selectByIcaoBlock = reqDto.getExportDataBlocks().get("selectByIcao");
				List<String> selectByIcaoPromptNames = getBlockMetaData(selectByIcaoBlock, "PROMPT_NAME");
				List<String> selectByIcaoDatabseColumns = getBlockMetaData(selectByIcaoBlock, "DATABASE_COLUMN");
				// customer info
				customerNavedbBlock = reqDto.getExportDataBlocks().get("customerNavdb");
				List<String> customerNavedbPromptNames = getBlockMetaData(customerNavedbBlock, "PROMPT_NAME");
				List<String> customerNavedbDatabseColumns = getBlockMetaData(customerNavedbBlock, "DATABASE_COLUMN");

				// selectByArea
				selectByAreaBlock = reqDto.getExportDataBlocks().get("selectByArea");
				List<String> selectByAreaPromptNames = getBlockMetaData(selectByAreaBlock, "PROMPT_NAME");
				List<String> selectByAreaDatabseColumns = getBlockMetaData(selectByAreaBlock, "DATABASE_COLUMN");

				// selectByHeliportGroup
				selectByHeliportGroupBlock = reqDto.getExportDataBlocks().get("selectByHeliportGroup");
				List<String> selectByHeliportGroupPromptNames = getBlockMetaData(selectByHeliportGroupBlock,
						"PROMPT_NAME");
				List<String> selectByHeliportGroupDatabseColumns = getBlockMetaData(selectByHeliportGroupBlock,
						"DATABASE_COLUMN");
				// heliportToSelect
				heliportToSelectBlock = reqDto.getExportDataBlocks().get("heliportToSelect");
				List<String> heliportToSelectPromptNames = getBlockMetaData(heliportToSelectBlock, "PROMPT_NAME");
				List<String> heliportToSelectDatabseColumns = getBlockMetaData(heliportToSelectBlock,
						"DATABASE_COLUMN");

				// fmsDmr
				fmsDmrBlock = reqDto.getExportDataBlocks().get("fmsDmr");
				List<String> fmsDmrPromptNames = getBlockMetaData(fmsDmrBlock, "PROMPT_NAME");
				List<String> fmsDmrDatabseColumns = getBlockMetaData(fmsDmrBlock, "DATABASE_COLUMN");

				// Media Tab
				mediaBlock = reqDto.getExportDataBlocks().get("navdbDeliveryFormatMedia");
				List<String> mediaBlockPromptNames = getBlockMetaData(mediaBlock, "PROMPT_NAME");
				List<String> mediaBlockDatabseColumns = getBlockMetaData(mediaBlock, "DATABASE_COLUMN");

				// Header Building
				reportfile.append(getExportHeader(selectByAirportGroupPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append(getExportHeader(airportToselectNames, 2, selectOptions.getDelimiter()));
				reportfile.append("\n\n");
				reportfile.append(getExportHeader(selectByGeoAreaPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append(getExportHeader(geoarePointBlockNames, 2, selectOptions.getDelimiter()));
				reportfile.append("\n\n");
				reportfile.append(getExportHeader(selectByIcaoPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append("\n");
				reportfile.append(getExportHeader(customerNavedbPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append("\n");
				reportfile.append(getExportHeader(selectByAreaPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append("\n");
				reportfile.append(getExportHeader(selectByHeliportGroupPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append(getExportHeader(heliportToSelectPromptNames, 2, selectOptions.getDelimiter()));
				reportfile.append("\n\n");
				reportfile.append(getExportHeader(fmsDmrPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append("\n");
				reportfile.append(getExportHeader(mediaBlockPromptNames, 1, selectOptions.getDelimiter()));
				reportfile.append("\n");

				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					Navdb navdb = app.mapResultSetToClass(mstRec, Navdb.class);

					reportfile.append(getExportData(navdb, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));

				}
				// airportGroup
				String selectByAirGroupQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from
								(SELECT ROWID as "rowid", SSC_ID, SELECT_BY_ID, NAVDB_ID, GROUP_NAME, INCLUDE_EXCLUDE_IND, CREATE_DCR_NUMBER, UPDATE_DCR_NUMBER FROM
										COREPT_B.SELECT_BY_AIRPORT_GROUP WHERE navdb_id= ? and ssc_id= ? )a))
																							""";
				List<DuRecord> childRecs1 = app.executeQuery(selectByAirGroupQuery, parameter.getQryNavdbId(),
						parameter.getSscId());
				for (DuRecord chData : childRecs1) {

					SelectByAirportGroup selectByAirportGroup = app.mapResultSetToClass(chData,
							SelectByAirportGroup.class);

					reportfile.append(getExportData(selectByAirportGroup, selectByAirportGroupColumns, 1,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					String getChilQuery = """

							SELECT AIRPORT_IDENT, AIRPORT_ICAO
							  from b_airport_to_select where SSC_ID = ?
							and SELECT_BY_ID = ? order by Airport_ident





							""";
					List<DuRecord> childRecs = app.executeQuery(getChilQuery, chData.getObject("SSC_ID"),
							chData.getObject("SELECT_BY_ID"));
					reportfile.append(getChildExportData(childRecs, airportToselectColumns, 2, "airportToSelect"));

				}
				// SELECTbYGEOGRAPHIC AREA
				String selectByGeoQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from (SELECT ROWID as "rowid", SSC_ID, NAVDB_ID,
						 SELECT_BY_ID, GEO_AREA_NAME, CREATE_DCR_NUMBER, UPDATE_DCR_NUMBER FROM COREPT_B.SELECT_BY_GEOGRAPHIC_AREA WHERE
						  GEO_AREA_NAME != 'WORLD' AND NAVDB_ID = ? AND SSC_ID = ? )a))
						""";
				List<DuRecord> childRecs2 = app.executeQuery(selectByGeoQuery, parameter.getQryNavdbId(),
						parameter.getSscId());

				for (DuRecord childDB : childRecs2) {
					SelectByGeographicArea selectByGeographicArea = app.mapResultSetToClass(childDB,
							SelectByGeographicArea.class);

					reportfile.append(getExportData(selectByGeographicArea, selectByGeoAreaDatabseColumns, 1,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					String selByGeoAreaPointQuery = """
							SELECT ROWID,ROWID, SEQUENCE_NUMBER, LATITUDE_RADIANS, LONGITUDE_RADIANS, UPDATE_DCR_NUMBER, SSC_ID,
							LONGITUDE, LATITUDE, SELECT_BY_ID, CREATE_DCR_NUMBER from b_geographic_area_point where SSC_ID = ? and
							SELECT_BY_ID = ? order by SEQUENCE_NUMBER

							""";
					List<DuRecord> selByGeoAreaPointDb = app.executeQuery(selByGeoAreaPointQuery,
							childDB.getObject("SSC_ID"), childDB.getObject("SELECT_BY_ID"));

					reportfile.append(
							getChildExportData(selByGeoAreaPointDb, geoarePointColumns, 2, "geographicAreaPoint"));

				}

				// Icao Code
				String icaoQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from (SELECT ROWID as "rowid", SSC_ID, SELECT_BY_ID, ICAO_CODE,
						NAVDB_ID, CREATE_DCR_NUMBER, UPDATE_DCR_NUMBER FROM COREPT_B.SELECT_BY_ICAO WHERE NAVDB_ID LIKE ?
						 and ssc_id like ? ORDER BY icao_code)a))

						""";
				List<DuRecord> icaoData = app.executeQuery(icaoQuery, parameter.getQryNavdbId(), parameter.getSscId());
				if (!icaoData.isEmpty()) {
					for (DuRecord icaoD : icaoData) {
						Icao icaodb = app.mapResultSetToClass(icaoD, Icao.class);

						reportfile.append(getExportData(icaodb, selectByIcaoDatabseColumns, 1,
								selectOptions.getDelimiter(), selectOptions.getGetTextFile()));
					}
				} else {
					Icao icaodb = new Icao();
					icaodb.setChk("N");
					reportfile.append("\n");
					reportfile.append(getExportData(icaodb, selectByIcaoDatabseColumns, 1, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));

				}
				// customerNavdb

				String custumerNavdbQuery = """
						SELECT  NAVDB_ID, CUSTOMER_IDENT, CREATE_DCR_NUMBER from customer_navdb where LOWER(NAVDB_ID)  LIKE LOWER(?)
						""";

				List<DuRecord> custumerData = app.executeQuery(custumerNavdbQuery, parameter.getQryNavdbId());
				if (custumerData.isEmpty()) {
					reportfile.append("\n");
				} else {
					for (DuRecord cusDb : custumerData) {

						CustomerNavdb cusData = app.mapResultSetToClass(cusDb, CustomerNavdb.class);

						reportfile.append(getExportData(cusData, customerNavedbDatabseColumns, 1,
								selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					}
				}
				// areaCode
				String areaCodeQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from (SELECT ROWID as "rowid", SSC_ID, SELECT_BY_ID,
						AREA_CODE, NAVDB_ID FROM COREPT_B.SELECT_BY_AREA WHERE NAVDB_ID LIKE (?) and ssc_id like (?)
						ORDER BY area_code)a))
						""";
				List<DuRecord> areaCodeData = app.executeQuery(areaCodeQuery, parameter.getQryNavdbId(),
						parameter.getSscId());
				if (!areaCodeData.isEmpty()) {
					for (DuRecord areaCodeD : areaCodeData) {
						AreaCode areaC = app.mapResultSetToClass(areaCodeD, AreaCode.class);
						reportfile.append(getExportData(areaC, selectByAreaDatabseColumns, 1,
								selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					}
				} else {
					AreaCode areaC = new AreaCode();
					areaC.setChk("N");
					reportfile.append(getExportData(areaC, selectByAreaDatabseColumns, 1, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}

				// HeliportTab
				String selectByheliGrpQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from (SELECT ROWID as "rowid", SSC_ID, SELECT_BY_ID,
						NAVDB_ID, GROUP_NAME, INCLUDE_EXCLUDE_IND, CREATE_DCR_NUMBER, UPDATE_DCR_NUMBER FROM
						COREPT_B.SELECT_BY_HELIPORT_GROUP WHERE navdb_id= ? and ssc_id =?)a))

						""";

				List<DuRecord> heliportData = app.executeQuery(selectByheliGrpQuery, parameter.getQryNavdbId(),
						parameter.getSscId());

				for (DuRecord heliData : heliportData) {

					SelectByHeliportGroup selectByHeliportGroupD = app.mapResultSetToClass(heliData,
							SelectByHeliportGroup.class);

					reportfile.append(getExportData(selectByHeliportGroupD, selectByHeliportGroupDatabseColumns, 1,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					String heliChildQuery = """

							SELECT ROWID,ROWID, UPDATE_DCR_NUMBER, SSC_ID, HELIPORT_ICAO, SELECT_BY_ID, HELIPORT_IDENT, CREATE_DCR_NUMBER
							from b_heliport_to_select where SSC_ID = ? and SELECT_BY_ID = ? order
							 by Heliport_ident

							""";
					List<DuRecord> heliChildData = app.executeQuery(heliChildQuery, heliData.getObject("SSC_ID"),
							heliData.getObject("SELECT_BY_ID"));

					reportfile.append(
							getChildExportData(heliChildData, heliportToSelectDatabseColumns, 2, "heliportToSelect"));

				}

				// fmsDmr
				String fmsQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from (SELECT ROWID as "rowid", FMS_ID,
						CREATED_BY, CREATED_ON, REMOVE_TLD_ALLOWED_IND, EXECUTION_ORDER, DMR_ID FROM CPTSC.FMS_DMR WHERE
						 FMS_ID = ? and DM_ORC_IND LIKE '%DM%')a))
						""";

				List<DuRecord> fmsData = app.executeQuery(fmsQuery, parameter.getNavdbId()); // navdb used as FmsId

				for (DuRecord fmsD : fmsData) {
					FmsDmr fmsDataP = app.mapResultSetToClass(fmsD, FmsDmr.class);
					query = """
							select dmr_descr from Data_Manipulation_Routine
							where dmr_id = ? """;
					DuRecord rec = app.selectInto(query, fmsD.getObject("DMR_ID"));
					fmsDataP.setDmrDescr(toString(rec.getObject("DMR_DESCR")));

					reportfile.append(getExportData(fmsDataP, fmsDmrDatabseColumns, 1, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}

				// fmsDeliveryFormatMedia
				String navDeliveryQuery = """
						SELECT * FROM (Select * from (Select rownum as rno,  a.* from
						(SELECT ROWID as "rowid", LSBM_VERSION, SSC_ID, NAVDB_ID, FORMAT_MEDIA_TYPE, BINARY_SIZE, QUANTITY,
						 CREATE_DCR_NUMBER, UPDATE_DCR_NUMBER, CREATED_BY, CREATED_ON, CRATE_IND,
						 DBSIGN_VER FROM COREPT_B.NAVDB_DELIVERY_FORMAT_MEDIA WHERE navdb_id= ? and ssc_id = ?)a))
						""";
				List<DuRecord> navDeliData = app.executeQuery(navDeliveryQuery, parameter.getQryNavdbId(),
						parameter.getSscId());
				for (DuRecord navdel : navDeliData) {
					NavdbDeliveryFormatMedia navDelMapata = app.mapResultSetToClass(navdel,
							NavdbDeliveryFormatMedia.class);

					reportfile.append(getExportData(navDelMapata, mediaBlockDatabseColumns, 1,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));
				}
			}

			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.GENERAL_CRITERIA))) {
				mstBlockData = reqDto.getExportDataBlocks().get("generalCriteria");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}
				// Header Building..
				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					GeneralCriteria generalCriteria = app.mapResultSetToClass(mstRec, GeneralCriteria.class);

					reportfile.append(getExportData(generalCriteria, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));

				}
			} else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_GEOGRAPHIC_AREA))) {
				mstBlockData = reqDto.getExportDataBlocks().get("selectByGeographicArea");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}
				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..

				// Geographic area point child
				geoAreaPoint = reqDto.getExportDataBlocks().get("geographicAreaPoint");
				List<String> geoarePointBlockNames = getBlockMetaData(geoAreaPoint, "PROMPT_NAME");
				List<String> geoarePointColumns = getBlockMetaData(geoAreaPoint, "DATABASE_COLUMN");
				reportfile.append(getExportHeader(geoarePointBlockNames, 1, selectOptions.getDelimiter()));
//				String queryChild = hashUtils.decrypt(mstBlockData.getLastQuery());

				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					SelectByGeographicArea selectByGeographicArea = app.mapResultSetToClass(mstRec,
							SelectByGeographicArea.class);
					reportfile.append(getExportData(selectByGeographicArea, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					// child block mapping
					String getChilQuery = getExportQuery("geographicAreaPoint");
					List<DuRecord> childRecs = app.executeQuery(getChilQuery, mstRec.getObject("SELECT_BY_ID"),
							mstRec.getObject("SSC_ID"));

					reportfile.append(getChildExportData(childRecs, geoarePointColumns, 1, "geographicAreaPoint"));

				}

			} else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.GEOGRAPHIC_AREA_POINT))) {
				mstBlockData = reqDto.getExportDataBlocks().get("geographicAreaPoint");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}
				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					GeographicAreaPoint geographicAreaPoint = app.mapResultSetToClass(mstRec,
							GeographicAreaPoint.class);
					reportfile.append(getExportData(geographicAreaPoint, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));
				}
			}
			// SELECT BY AREA CODE
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AREA))) {
				mstBlockData = reqDto.getExportDataBlocks().get("selectByArea");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					SelectByArea selectByArea = app.mapResultSetToClass(mstRec, SelectByArea.class);
					reportfile.append(getExportData(selectByArea, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}

			// AREA CODE
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.AREA_CODE))) {
				mstBlockData = reqDto.getExportDataBlocks().get("areaCode");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					AreaCode areaCode = app.mapResultSetToClass(mstRec, AreaCode.class);
					reportfile.append(getExportData(areaCode, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}
			// ICAO
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.ICAO))) {
				mstBlockData = reqDto.getExportDataBlocks().get("icao");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					Icao icao = app.mapResultSetToClass(mstRec, Icao.class);
					reportfile.append(getExportData(icao, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}

			// SELECT BY ICAO
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_ICAO))) {
				mstBlockData = reqDto.getExportDataBlocks().get("selectByIcao");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					SelectByIcao selectByIcao = app.mapResultSetToClass(mstRec, SelectByIcao.class);
					reportfile.append(getExportData(selectByIcao, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}
			// SelectByAirportGroup (Parent)
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_AIRPORT_GROUP))) {
				mstBlockData = reqDto.getExportDataBlocks().get("selectByAirportGroup");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}
				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Child Data
				airportToselectBlock = reqDto.getExportDataBlocks().get("airportToSelect");
				List<String> airportToselectNames = getBlockMetaData(airportToselectBlock, "PROMPT_NAME");
				List<String> airportToselectColumns = getBlockMetaData(airportToselectBlock, "DATABASE_COLUMN");
				reportfile.append(getExportHeader(airportToselectNames, 1, selectOptions.getDelimiter()));

				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					SelectByAirportGroup selectByAirportGroups = app.mapResultSetToClass(mstRec,
							SelectByAirportGroup.class);
					reportfile.append(getExportData(selectByAirportGroups, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					String childQuery = getExportQuery("airportToSelect");
					List<DuRecord> childRecs = app.executeQuery(childQuery, mstRec.getObject("SELECT_BY_ID"),
							mstRec.getObject("SSC_ID"));

					reportfile.append(getChildExportData(childRecs, airportToselectColumns, 1, "airportToSelect"));

				}
			}

			// airportToSelect
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.AIRPORT_TO_SELECT))) {
				mstBlockData = reqDto.getExportDataBlocks().get("airportToSelect");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				int orderIndex = query.indexOf("offset");
				query = query.substring(0, orderIndex);
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					AirportToSelect airportToSelect = app.mapResultSetToClass(mstRec, AirportToSelect.class);
					try {
						query = """
								SELECT ata_iata_designator as IATACODE from pl_std_airport
									 WHERE data_supplier = ?
										 AND processing_cycle = ?
										 AND airport_ident = ?
										 AND airport_icao  = ?
								""";

						DuRecord childRec = app.selectInto(query, global.getDataSupplier(), global.getProcessingCycle(),
								mstRec.getObject("AIRPORT_IDENT"), mstRec.getObject("AIRPORT_ICAO"));
						airportToSelect.setIataCode(toString(childRec.getObject("IATACODE")));
					} catch (NoDataFoundException e) {
						airportToSelect.setIataCode(null);

					}

					reportfile.append(getExportData(airportToSelect, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}

			// STD AIRPORT
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.STD_AIRPORT))) {
				mstBlockData = reqDto.getExportDataBlocks().get("stdAirport");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					StdAirport stdAirport = app.mapResultSetToClass(mstRec, StdAirport.class);
					reportfile.append(getExportData(stdAirport, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}

			// selectByHeliportGroup

			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.SELECT_BY_HELIPORT_GROUP))) {
				mstBlockData = reqDto.getExportDataBlocks().get("selectByHeliportGroup");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}
				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Child Data
				heliportToSelectBlock = reqDto.getExportDataBlocks().get("heliportToSelect");
				List<String> heliportToSelectNames = getBlockMetaData(heliportToSelectBlock, "PROMPT_NAME");
				List<String> heliportToSelectColumns = getBlockMetaData(heliportToSelectBlock, "DATABASE_COLUMN");
				reportfile.append(getExportHeader(heliportToSelectNames, 1, selectOptions.getDelimiter()));

				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					SelectByHeliportGroup selectByHeliportGroup = app.mapResultSetToClass(mstRec,
							SelectByHeliportGroup.class);
					reportfile.append(getExportData(selectByHeliportGroup, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));

					String childQuery = getExportQuery("heliportToSelect");
					List<DuRecord> childRecs = app.executeQuery(childQuery, mstRec.getObject("SELECT_BY_ID"),
							mstRec.getObject("SSC_ID"));

					reportfile.append(getChildExportData(childRecs, heliportToSelectColumns, 1, "heliportToSelect"));
				}
			}
			// HELIPORT TO SELECT
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.HELIPORT_TO_SELECT))) {
				mstBlockData = reqDto.getExportDataBlocks().get("heliportToSelect");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				int orderIndex = query.indexOf("offset");
				query = query.substring(0, orderIndex);
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					HeliportToSelect heliportToSelect = app.mapResultSetToClass(mstRec, HeliportToSelect.class);
					reportfile.append(getExportData(heliportToSelect, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));
				}
			}
			// STD HELIPORT
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.STD_HELIPORT))) {
				mstBlockData = reqDto.getExportDataBlocks().get("stdHeliport");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					StdHeliport stdHeliport = app.mapResultSetToClass(mstRec, StdHeliport.class);
					reportfile.append(getExportData(stdHeliport, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}
			// DMR
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.FMS_DMR))) {
				mstBlockData = reqDto.getExportDataBlocks().get("fmsDmr");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					FmsDmr fmsDmr = app.mapResultSetToClass(mstRec, FmsDmr.class);
					query = """
							select dmr_descr from Data_Manipulation_Routine
							where dmr_id = ? """;
					DuRecord rec = app.selectInto(query, mstRec.getObject("DMR_ID"));
					fmsDmr.setDmrDescr(toString(rec.getObject("DMR_DESCR")));
					reportfile.append(getExportData(fmsDmr, mstDatabseColumns, 0, selectOptions.getDelimiter(),
							selectOptions.getGetTextFile()));
				}
			}

			// FMS DELIVERY FORMATE MEDIA
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.FMS_DELIVERY_FORMAT_MEDIA))) {
				mstBlockData = reqDto.getExportDataBlocks().get("fmsDeliveryFormatMedia");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					FmsDeliveryFormatMedia fmsDeliveryFormatMedia = app.mapResultSetToClass(mstRec,
							FmsDeliveryFormatMedia.class);
					reportfile.append(getExportData(fmsDeliveryFormatMedia, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));
				}
			}
			// NAVDB DELIVARY FORMATE MEDIA
			else if (HoneyWellUtils.toCamelCase(system.getCursorBlock())
					.equals(HoneyWellUtils.toCamelCase(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA))) {
				mstBlockData = reqDto.getExportDataBlocks().get("navdbDeliveryFormatMedia");
				List<String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");
				List<String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");
				String query = hashUtils.decrypt(mstBlockData.getLastQuery());
				if (query.contains(" where rno <=")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " where rno <="));
				} else if (query.contains(" OFFSET ")) {
					query = substrWithLen(query, 0, OracleHelpers.instr(query, " OFFSET "));
				}

				reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));
				// Master Fetching..
				recs = app.executeQuery(query);
				for (DuRecord mstRec : recs) {
					NavdbDeliveryFormatMedia navdbDeliveryFormatMedia = app.mapResultSetToClass(mstRec,
							NavdbDeliveryFormatMedia.class);
					reportfile.append(getExportData(navdbDeliveryFormatMedia, mstDatabseColumns, 0,
							selectOptions.getDelimiter(), selectOptions.getGetTextFile()));
				}
			}

			else if (Arrays.asList("datatypRad", "selection", "navdbOrc", "rules", "lists", "appSubType",
					"recordSubType", "runwaySurface", "multVal")
					.contains(HoneyWellUtils.toCamelCase(system.getCursorBlock()))) {
				String dateQuery = """
						     SELECT TO_CHAR(SYSDATE , 'Month DD,YYYY') as formatted_date  FROM DUAL
						""";

				String timeQuery = """
						SELECT  to_char(sysdate,'HH24:MI') FROM DUAL
						""";
				DuRecord dateRec = app.selectInto(dateQuery);
				DuRecord timeRec = app.selectInto(timeQuery);

				reportfile.append("Generated on ").append(dateRec.getObject()).append(" at ")
						.append(timeRec.getObject()).append("\n").append("\n");
			}

			else if (lower(system.getCursorBlock()).equals("message")) {

				List<String> messageLogs = new ArrayList<>();
				String dateQuery = """
						     SELECT TO_CHAR(SYSDATE , 'Month DD,YYYY') as formatted_date  FROM DUAL
						""";

				String timeQuery = """
						SELECT  to_char(sysdate,'HH24:MI') FROM DUAL
						""";
				DuRecord dateRec = app.selectInto(dateQuery);
				DuRecord timeRec = app.selectInto(timeQuery);

				reportfile.append("Generated on ").append(dateRec.getObject()).append(" at ")
						.append(timeRec.getObject()).append("\n").append("\n");
				mstBlockData = reqDto.getExportDataBlocks().get("message");
				messageLogs = mstBlockData.getMessageLogs();
				for (int i = 0; i <= messageLogs.size() - 1; i++) {
					reportfile.append(messageLogs.get(i)).append("\n");
				}
			}
			OracleHelpers.ResponseMapper(this, resDto);
			String base64 = Base64.getEncoder().encodeToString(reportfile.toString().getBytes(StandardCharsets.UTF_8));
			ReportDetail reportDetail = new ReportDetail();
			reportDetail.setData(base64);
			resDto.setReport(reportDetail);
			goBlock(system.getCursorBlock(), "firstItem");
			setcurrentAndCursorBlock(system.getCursorBlock());
			log.info(" displayItemBlockRefreshButtonWhenButtonPressed executed successfully");

			OracleHelpers.ResponseMapper(this, resDto);

			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (RuntimeException e) {
			log.info("RuntimeException captured");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		} catch (Exception e) {
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}

	}

	public String getChildExportData(List<DuRecord> recs, List<String> columns, int depth, String childBlockName)
			throws Exception {
		StringBuilder data = new StringBuilder();
		if (recs.size() <= 0) {
			return "";
		}
		// Reset Blocks
		this.geographicAreaPoint.getData().clear();
		this.airportToSelect.getData().clear();
		this.heliportToSelect.getData().clear();
		String query = null;
		DuRecord childRec = null;

		for (DuRecord rec : recs) {
			if ("geographicAreaPoint".equals(childBlockName)) {
				GeographicAreaPoint geographicAreaPoint = app.mapResultSetToClass(rec, GeographicAreaPoint.class);
				this.geographicAreaPoint.add(geographicAreaPoint);
			} else if ("airportToSelect".equals(childBlockName)) {
				AirportToSelect airportToSelect = app.mapResultSetToClass(rec, AirportToSelect.class);
				try {
					query = """
							SELECT ata_iata_designator as IATACODE from pl_std_airport
								 WHERE data_supplier = ?
									 AND processing_cycle = ?
									 AND airport_ident = ?
									 AND airport_icao  = ?
							""";

					childRec = app.selectInto(query, global.getDataSupplier(), global.getProcessingCycle(),
							rec.getObject("AIRPORT_IDENT"), rec.getObject("AIRPORT_ICAO"));
					airportToSelect.setIataCode(toString(childRec.getObject("IATACODE")));
				} catch (NoDataFoundException e) {
					airportToSelect.setIataCode(null);

				}

				this.airportToSelect.add(airportToSelect);

			} else if ("heliportToSelect".equals(childBlockName)) {
				HeliportToSelect heliportToSelect = app.mapResultSetToClass(rec, HeliportToSelect.class);
				this.heliportToSelect.add(heliportToSelect);

			}

		}
		if ("geographicAreaPoint".equals(childBlockName)) {
			for (GeographicAreaPoint geographicAreaPoint : this.geographicAreaPoint.getData()) {
				data.append(getExportData(geographicAreaPoint, columns, depth, selectOptions.getDelimiter(),
						selectOptions.getGetTextFile()));
			}
		} else if ("airportToSelect".equals(childBlockName)) {
			for (AirportToSelect airportToSelect : this.airportToSelect.getData()) {
				data.append(getExportData(airportToSelect, columns, depth, selectOptions.getDelimiter(),
						selectOptions.getGetTextFile()));
			}
		} else if ("heliportToSelect".equals(childBlockName)) {
			for (HeliportToSelect heliportToSelect : this.heliportToSelect.getData()) {
				data.append(getExportData(heliportToSelect, columns, depth, selectOptions.getDelimiter(),
						selectOptions.getGetTextFile()));
			}
		}

		return data.toString();

	}

//getQueryFunction for fetching query for child blocks
	public String getExportQuery(String blockName) {

		String query = null;
		if (Objects.equals(blockName, "geographicAreaPoint")) {
			query = " SELECT * FROM COREPT_B.GEOGRAPHIC_AREA_POINT WHERE SELECT_BY_ID = ? AND SSC_ID = ? ";
		} else if (Objects.equals(blockName, "airportToSelect")) {
			query = "SELECT * FROM COREPT_B.AIRPORT_TO_SELECT WHERE SELECT_BY_ID = ? AND SSC_ID = ?";

		} else if (Objects.equals(blockName, "heliportToSelect")) {
			query = "SELECT * FROM COREPT_B.HELIPORT_TO_SELECT WHERE SELECT_BY_ID = ? AND SSC_ID = ?";
		}

		return query;
	}

	public void updateAppInstance() {
		super.app = this.app;
		super.baseInstance = this;
		super.groups = this.groups;
		super.genericNativeQueryHelper = this.genericNativeQueryHelper;
		super.event = this.event;
		super.parameter = this.parameter;
		super.displayAlert = this.displayAlert;
		super.alertDetails = this.alertDetails;
		super.system = this.system;
		super.global = this.global;
		super.blocksOrder = this.blocksOrder;
		super.windows = this.windows;
		OracleHelpers.bulkClassMapper(this, displayAlert);
		OracleHelpers.bulkClassMapper(this, coreptLib);
		coreptLib.initialization(this);
		OracleHelpers.bulkClassMapper(this, coreptTemplateTriggerService);
		coreptTemplateTriggerService.initialization(this);
		OracleHelpers.bulkClassMapper(this, coreptMenuMmbServiceImpl);
		coreptMenuMmbServiceImpl.initialization(this);
	}

}
