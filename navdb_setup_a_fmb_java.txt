package com.honeywell.coreptdu.datatypes.navdbsetup.serviceimpl;

import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.sql.Date;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.context.annotation.RequestScope;

import com.honeywell.coreptdu.datatypes.corepttemplate.block.DisplayItemBlock;
import com.honeywell.coreptdu.datatypes.corepttemplate.serviceimpl.CoreptTemplateTriggerServiceImpl;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.AppSubType;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.ControlBlock;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.CopyGeoArptGrp;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.CopyNavdb;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.CustomerInfo;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.DatatypRad;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.GenCriteriaSubType;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.IncExcApt;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.ListName;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.Lists;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.MultVal;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.RecordSubType;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.Rules;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.RunwaySurface;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.SaveSelections;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.SelectAllRules;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.SelectFromGroups;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.Selection;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.SingleVal;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.SuaRules;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.ValidationResult;
import com.honeywell.coreptdu.datatypes.navdbsetup.block.Webutil;
import com.honeywell.coreptdu.datatypes.navdbsetup.dto.request.NavdbSetupTriggerRequestDto;
import com.honeywell.coreptdu.datatypes.navdbsetup.dto.response.NavdbSetupTriggerResponseDto;
import com.honeywell.coreptdu.datatypes.navdbsetup.dto.response.SelectionCriteriaReport;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.AirportToSelect;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.AreaCode;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.CustomerNavdb;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.FmsDeliveryFormatMedia;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.FmsDmr;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.GeneralCriteria;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.GeographicAreaPoint;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.HeliportToSelect;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.Icao;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.Navdb;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.NavdbDeliveryFormatMedia;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.NavdbOrc;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.SelectByAirportGroup;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.SelectByArea;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.SelectByGeographicArea;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.SelectByHeliportGroup;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.SelectByIcao;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.StdAirport;
import com.honeywell.coreptdu.datatypes.navdbsetup.entity.StdHeliport;
import com.honeywell.coreptdu.datatypes.navdbsetup.service.INavdbSetupTriggerService;
import com.honeywell.coreptdu.exception.AlertException;
import com.honeywell.coreptdu.exception.ExceptionUtils;
import com.honeywell.coreptdu.exception.FormTriggerFailureException;
import com.honeywell.coreptdu.exception.NoDataFoundException;
import com.honeywell.coreptdu.exception.TooManyRowsException;
import com.honeywell.coreptdu.global.dbtype.DynamicLists;
import com.honeywell.coreptdu.global.dbtype.GeoPointsRec;
import com.honeywell.coreptdu.global.dbtype.IncExcAptTable;
import com.honeywell.coreptdu.global.dto.BaseResponse;
import com.honeywell.coreptdu.global.dto.Global;
import com.honeywell.coreptdu.global.dto.DuParameter;
import com.honeywell.coreptdu.global.dto.ReportDetail;
import com.honeywell.coreptdu.global.dto.ResponseDto;
import com.honeywell.coreptdu.global.dto.SystemDto;
import com.honeywell.coreptdu.global.forms.AlertDetail;
import com.honeywell.coreptdu.global.forms.DbConstants;
import com.honeywell.coreptdu.global.forms.DuEvent;
import com.honeywell.coreptdu.global.forms.FormConstant;
import com.honeywell.coreptdu.global.forms.GoBlock;
import com.honeywell.coreptdu.global.forms.ItemDetail;
import com.honeywell.coreptdu.global.forms.WindowDetail;
import com.honeywell.coreptdu.pkg.body.DisplayAlert;
import com.honeywell.coreptdu.pkg.body.RefreshMasterLibrary;
import com.honeywell.coreptdu.pll.CoreptLib;
import com.honeywell.coreptdu.utils.common.DuConstants;
import com.honeywell.coreptdu.utils.common.EParam;
import com.honeywell.coreptdu.utils.common.CustomDouble;
import com.honeywell.coreptdu.utils.common.CustomInteger;
import com.honeywell.coreptdu.utils.common.HashUtils;
import com.honeywell.coreptdu.utils.dbutils.GenericNativeQueryHelper;
import com.honeywell.coreptdu.utils.dbutils.IApplication;
import com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter;
import com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter;
import com.honeywell.coreptdu.utils.oracleutils.DuBlock;
import com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm;
import com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils;
import com.honeywell.coreptdu.utils.oracleutils.OracleHelpers;
import com.honeywell.coreptdu.utils.oracleutils.DuRecord;
import com.honeywell.coreptdu.utils.oracleutils.RecordGroup;

import jakarta.persistence.EntityExistsException;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import oracle.jdbc.internal.OracleTypes;

@Slf4j
@Service
@RequestScope
public class NavdbSetupTriggerServiceImpl extends GenericTemplateForm<NavdbSetupTriggerServiceImpl>
		implements INavdbSetupTriggerService {

	@Getter
	@Setter
	private DuBlock<FmsDmr> fmsDmr = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByIcao> selectByIcao = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<StdAirport> stdAirport = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<CustomerNavdb> customerNavdb = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<GenCriteriaSubType> genCriteriaSubType = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SuaRules> suaRules = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<ValidationResult> validationResult = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<AirportToSelect> airportToSelect = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<AreaCode> areaCode = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<GeneralCriteria> generalCriteria = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<IncExcApt> incExcApt = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<GeographicAreaPoint> geographicAreaPoint = new DuBlock<>();	
	@Getter
	@Setter
	private DuBlock<AppSubType> appSubType = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByArea> selectByArea = new DuBlock<>();
	@Getter
	@Setter
	private CustomerInfo customerInfo = new CustomerInfo();
	@Getter
	@Setter
	private DuBlock<MultVal> multVal = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByGeographicArea> selectByGeographicArea = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<NavdbDeliveryFormatMedia> navdbDeliveryFormatMedia = new DuBlock<>();
	@Getter
	@Setter
	private SaveSelections saveSelections = new SaveSelections();
	@Getter
	@Setter
	private SelectFromGroups selectFromGroups = new SelectFromGroups();
	@Getter
	@Setter
	private ControlBlock controlBlock = new ControlBlock();
	@Getter
	@Setter
	private CopyGeoArptGrp copyGeoArptGrp = new CopyGeoArptGrp();
	@Getter
	@Setter
	private DuBlock<SelectByAirportGroup> selectByAirportGroup = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<RunwaySurface> runwaySurface = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<Icao> icao = new DuBlock<>();
	@Getter
	@Setter
	private Navdb navdb = new Navdb();
	@Getter
	@Setter
	private SelectAllRules selectAllRules = new SelectAllRules();
	@Getter
	@Setter
	private DuBlock<RecordSubType> recordSubType = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<SelectByHeliportGroup> selectByHeliportGroup = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<HeliportToSelect> heliportToSelect = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<StdHeliport> stdHeliport = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<Lists> lists = new DuBlock<>();
	@Getter
	@Setter
	private Webutil webutil = new Webutil();
	@Getter
	@Setter
	private CopyNavdb copyNavdb = new CopyNavdb();
	@Getter
	@Setter
	private DuBlock<DatatypRad> datatypRad = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<NavdbOrc> navdbOrc = new DuBlock<>();
	@Getter
	@Setter
	private SingleVal singleVal = new SingleVal();
	@Getter
	@Setter
	private Selection selection = new Selection();
	@Getter
	@Setter
	private DuBlock<Rules> rules = new DuBlock<>();
	@Getter
	@Setter
	private DuBlock<FmsDeliveryFormatMedia> fmsDeliveryFormatMedia = new DuBlock<>();
	@Getter
	@Setter
	private DisplayItemBlock displayItemBlock = new DisplayItemBlock();
	@Getter
	@Setter
	private Global global = new Global();
	@Getter
	@Setter
	private SystemDto system = new SystemDto();
	@Getter
	@Setter
	private DuParameter parameter = new DuParameter();
	@Getter
	@Setter
	private List<DuEvent> event = new ArrayList<>();
	@Getter
	@Setter
	private HashMap<String, RecordGroup> groups = new HashMap<>();
	@Autowired
	private IApplication app;

	@Getter
	@Setter
	private Map<String, WindowDetail> windows = new HashMap<>();

	@Getter
	@Setter
	private RecordGroup refreshAalGroups = new RecordGroup();

	@Getter
	@Setter
	private Map<String, ItemDetail> items = new HashMap<>();

	@Getter
	@Setter
	private RecordGroup runwaySurfaceGroups = new RecordGroup();

	@Getter
	@Setter
	private List<String> blocksOrder = new ArrayList<>();

	@Autowired
	@Getter
	@Setter
	private DisplayAlert displayAlert;


	@Getter
	@Setter
	private AlertDetail alertDetails;

	@Autowired
	private CoreptLib coreptLib;

	@Autowired
	private CoreptTemplateTriggerServiceImpl coreptTemplate;
	@Autowired
	private RefreshMasterLibrary refreshMasterLibrary;

	@Autowired
	private HashUtils hashUtil;
	
	@Value("${web.ploturl}")
	private String webPlotUrl;

	@Getter
	@Setter
	@Autowired
	private GenericNativeQueryHelper genericNativeQueryHelper;
	

	

	@Override
	public void populateItems(String mname) throws Exception {
		log.info("populateItems Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String scrDescription = null;
			String scrPartNumber = null;

			displayItemBlock.setProcessingCycle(global.getProcessingCycle());

			List<String> getModuleInformation = coreptLib.getModuleInformation(mname, scrDescription, scrPartNumber);
			scrDescription = getModuleInformation.get(0);
			scrPartNumber = getModuleInformation.get(1);
		
			if (Objects.equals(nameIn(this, "parameter.work_type"), "VIEW")) {
				displayItemBlock.setFormDesc(substr(scrDescription, 1, instr(scrDescription, "/") - 1)
						+ substr(scrDescription, instr(scrDescription, "/") + 7));

			}
			

			else {
				displayItemBlock.setFormDesc(scrDescription);

			}
			displayItemBlock.setFormDateTime(
					LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm:ss")).toUpperCase());
			displayItemBlock.setFormName(system.getCurrentForm().replace("_", " "));
			displayItemBlock.setFormPartNumber(scrPartNumber);

			try {

				query = """
						SELECT data_supplier_name,obs_enabled,	--DCR 6788.01 Imran included obs_enabled
											 crh_enabled,	 --CRH Imran 7091.01
											 atd_enabled	--ATD Imran 7817.01 Airport Info
								from   data_supplier
								WHERE  data_supplier = NVL(?,nvl(?,'T'))
						""";
				rec = app.selectInto(query, navdb.getDataSupplier(), global.getDataSupplier());
				displayItemBlock.setFormSource(rec.getString());
				parameter.setObsEnabled(rec.getString());
				parameter.setCrhEnabled(rec.getString());
				parameter.setAtdEnabled(rec.getString());
			}
			catch (NoDataFoundException e) {
				displayItemBlock.setFormSource(navdb.getDataSupplier());

			}

			query = """
					SELECT DECODE(nvl(?,'S'),'S','STANDARD','T','TAILORED','UNKNOWN')||', '||?||', '||
									  DECODE(nvl(?,'VIEW'),'VIEW','Query Only','Data Entry')
					   from   dual
					""";
			rec = app.selectInto(query, parameter.getRecordType(), parameter.getLibraryAccess(),
					parameter.getWorkType());
			displayItemBlock.setFormRecordType(rec.getString());

			log.info("populateItems Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateItems {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSelections() throws Exception {
		log.info("populateSelections Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("sel");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			EParam.DYNAMIC_QUERY_ONE.setValue("""
			select '-------Selected Selections--------- ' rlabel,'S' rvalue from dual
		union all
			select 'NAVDB Default Criteria' rlabel,'-1' rvalue from dual
		union all
			select unique '-----Selected Predefined Geographic Regions------' rlabel ,'P' rvalue
			from select_by_geographic_area
			where select_by_geographic_area.navdb_id = '%s'
			and geo_area_name like '$%%'
		union all
			select geo_area_name rlabel ,TO_CHAR(select_by_id) rvalue
			from select_by_geographic_area
			where select_by_geographic_area.navdb_id = '%s'
			and geo_area_name like '$%%'
		union all
			select unique '-----Selected Geographic Areas------' rlabel ,'G' rvalue
			from select_by_geographic_area
			where select_by_geographic_area.navdb_id = '%s'
		union all
			select geo_area_name rlabel ,TO_CHAR(select_by_id) rvalue
			from select_by_geographic_area
			where select_by_geographic_area.navdb_id = '%s'
			and geo_area_name not like '$%%'
		union all
		 	select unique '--------Selected Area Codes---------' rlabel ,'A' rvalue
			from select_by_area
			where select_by_area.navdb_id = '%s'
		union all
		 	select area_code rlabel,TO_CHAR(select_by_id) rvalue
			from select_by_area
			where select_by_area.navdb_id = '%s'
		union all
		 	select unique '---------Selected ICAO Codes--------'rlabel ,'I' rvalue
			from select_by_icao
		 	where select_by_icao.navdb_id = '%s'
		union all
			select icao_code rlabel, TO_CHAR(select_by_id) rvalue
		 	from select_by_icao
		 	where select_by_icao.navdb_id = '%s'
		union all
			select unique '----------Selected Airports---------'rlabel ,'R' rvalue
			from select_by_airport_group
		 	where select_by_airport_group.navdb_id = '%s'
		union all
		 	select group_name rlabel,TO_CHAR(select_by_id) rvalue
		 	from select_by_airport_group
		 	where select_by_airport_group.navdb_id = '%s'
		 union all
			select unique '----------Selected Heliports---------'rlabel ,'H' rvalue
			from select_by_heliport_group
		 	where select_by_heliport_group.navdb_id = '%s'
		 union all
		 	select group_name rlabel,TO_CHAR(select_by_id) rvalue
		 	from select_by_heliport_group
		 	where select_by_heliport_group.navdb_id = '%s'
		 	""".formatted(navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId(),
		navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId(),
		navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId()));
			rg = createGroupFromQuery("sel", EParam.DYNAMIC_QUERY_ONE.getValue() );
			nn = populateGroup(rg);
			groups.put("sel", rg);
			if (!Objects.equals(nn, 0)) {

				coreptLib.dspMsg("Populate group had error " + toChar(nn));

			}

			populateList("selection.selections", rg);
			selection.setSelections(getGroupCharCell("sel.rvalue", 0));

			setRadioButtonProperty("include", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("exclude", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("none", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setRadioButtonProperty("default", "selectAllRulesIxrrd", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			log.info("populateSelections Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSelections {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDatatypDescr(String pType) throws Exception {
		log.info("populateDatatypDescr Executing");
		try {
			String datatypcur = """
					select rec.ENROUTE_TERMINAL_IND,
										 rec.record_type_code,
										 rec.record_type_descr
							  FROM FMS_DATA_TYPE FDT,
							       FLIGHT_MANAGEMENT_SYSTEM FMS,
							       RECORD_TYPE REC,
										 navdb nav
							 WHERE fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
								 and fdt.selectable_ind = 'Y'   -- Added per SCR1267.01
								 and nav.navdb_id = ?
								 AND upper(fms.FMS_ID) = upper(?)
								 and nav.fms_id = fms.fms_id
								 and fms.FMS_ID = fdt.FMS_ID
								 and exists (select 'x' from select_criteria
											where record_type_code = rec.record_type_code
											and processing_order = 0)
								 and rec.enroute_terminal_ind in ('T','E','H')
								--order by rec.record_type_code;
								order by decode(rec.ENROUTE_TERMINAL_IND,'H','U',rec.ENROUTE_TERMINAL_IND), rec.record_type_code
					""";
			String arptDatatypcur = """
					select rec.record_type_code, rec.record_type_descr
							FROM  FMS_DATA_TYPE FDT,
							FLIGHT_MANAGEMENT_SYSTEM FMS,
							RECORD_TYPE REC,
							navdb nav
							WHERE fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
								and fdt.selectable_ind = 'Y'   -- Added per SCR1267.01
								and nav.navdb_id = ?
								AND upper(fms.FMS_ID) =upper(?)
								and nav.fms_id = fms.fms_id
								and fms.FMS_ID = fdt.FMS_ID
								and exists (select 'x' from select_criteria
										    where record_type_code = rec.record_type_code
											 and processing_order = 0)
								and rec.enroute_terminal_ind IN ('T','H') -- Added H as per SCR 6113--Madhu--14-Jan-2016
								and rec.record_type_code != '10'          -- Exclude Airport
							order by rec.record_type_code
					""";
			String hrptDatatypcur = """
					select rec.record_type_code, rec.record_type_descr
							FROM  FMS_DATA_TYPE FDT,
										FLIGHT_MANAGEMENT_SYSTEM FMS,
										RECORD_TYPE REC,
										navdb nav
							WHERE fdt.RECORD_TYPE_CODE = rec.RECORD_TYPE_CODE
								and fdt.selectable_ind = 'Y'   -- Added per SCR1267.01
								and nav.navdb_id = ?
								AND upper(fms.FMS_ID) = upper(?)
								and nav.fms_id = fms.fms_id
								and fms.FMS_ID = fdt.FMS_ID
								and exists (select 'x' from select_criteria
														 where record_type_code = rec.record_type_code
															 and processing_order = 0)
								and rec.enroute_terminal_ind = 'H'
						    and rec.record_type_code not in ('15') -- Exclude Heliport
							order by rec.record_type_code
					""";
			String vPreType = null;
			log.debug(vPreType);
			if (Objects.equals(pType, "T")) {
				List<DuRecord> records = app.executeQuery(arptDatatypcur, navdb.getNavdbId(), navdb.getFmsId());
				int i = 0;
				datatypRad = new DuBlock<DatatypRad>();
				for (DuRecord selrec : records) {
					datatypRad.add(new DatatypRad());
					datatypRad.getRow(i).setRecordTypeCode(toInteger(selrec.getObject("record_type_code")));
					datatypRad.getRow(i).setRecordTypeDescr(toString(selrec.getObject("record_type_descr")));
					i++;

				}

			}

			else if (Objects.equals(pType, H)) {
				List<DuRecord> records = app.executeQuery(hrptDatatypcur, navdb.getNavdbId(), navdb.getFmsId());
				int i = 0;
				datatypRad = new DuBlock<DatatypRad>();
				for (DuRecord selrec : records) {
					datatypRad.add(new DatatypRad());
					datatypRad.getRow(i).setRecordTypeCode(toInteger(selrec.getObject("record_type_code")));
					datatypRad.getRow(i).setRecordTypeDescr(toString(selrec.getObject("record_type_descr")));
					i++;
				}

			}

			else {
				List<DuRecord> records = app.executeQuery(datatypcur, navdb.getNavdbId(), navdb.getFmsId());
				int i = 0;
				datatypRad = new DuBlock<DatatypRad>();
				for (DuRecord selrec : records) {
					datatypRad.add(new DatatypRad());
					if ((!Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE) && !Objects.equals(pType, "G"))
							&& Arrays.asList("80", "380").contains(toString(selrec.getObject("record_type_code")))) {						
						log.debug("selection is not -1");

					}

					else if ((!Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE) && Objects.equals(pType, I))
							&& Arrays.asList("44", "45").contains(toString(selrec.getObject("record_type_code")))) {
						log.debug("pType is I");
					}

					else {
						if (Objects.equals(toString(selrec.getObject("ENROUTE_TERMINAL_IND")), "T")) {
							setItemInstanceProperty("datatypRad.recordTypeDescr", toString(i), "visual_attribute",
									"airports");

						}

						else if (Objects.equals(toString(selrec.getObject("ENROUTE_TERMINAL_IND")), H)) {
							setItemInstanceProperty("datatypRad.recordTypeDescr", toString(i), "visual_attribute",
									"heliports");

						}

						datatypRad.getRow(i).setRecordTypeCode(toInteger(selrec.getObject("record_type_code")));
						datatypRad.getRow(i).setRecordTypeDescr(toString(selrec.getObject("record_type_descr")));
						vPreType = toString(selrec.getObject("ENROUTE_TERMINAL_IND"));
						i++;

					}
				}

			}
			for(int k=0;k<datatypRad.size();k++){
				if(Objects.equals(datatypRad.getRow(k).getRecordTypeCode(),null)) {
					datatypRad.remove(k);
				}
			}



			log.info("populateDatatypDescr Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDatatypDescr {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void dspError(String errMsg) throws Exception {
		log.info("dspError Executing");

		try {


			setAlertProperty("ERROR_MESSAGE", "alert_message_text", errMsg);


			log.info("dspError Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing dspError {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkPackageFailure() throws Exception {
		log.info("checkPackageFailure Executing");
		try {


			log.info("checkPackageFailure Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkPackageFailure {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void queryMasterDetails(Object relId, String detail) throws Exception {
		log.info("queryMasterDetails Executing");
		try {
			String oldmsg = null;
			String reldef = null;

			try {
				oldmsg = system.getMessageLevel();
				if (Objects.equals(reldef, "FALSE")) {
					goBlock(detail, "");

					checkPackageFailure();
					system.setMessageLevel("10");

					system.setMessageLevel(oldmsg);

				}

				else {
					setBlockProperty(detail, "COORDINATION_STATUS", "NON_COORDINATED");

				}
			}
			catch (FormTriggerFailureException e) {
				system.setMessageLevel(oldmsg);

			}

			log.info("queryMasterDetails Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing queryMasterDetails {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void clearAllMasterDetails() throws Exception {
		log.info("clearAllMasterDetails Executing");
		try {
			String mastblk = null;
			String coordop = null;
			String trigblk = null;
			String startitm = null;
			String frmstat = null;
			String curblk = null;
			String currel = null;
			String curdtl = null;
			/**
			 * FUNCTION First_Changed_Block_Below(Master VARCHAR2) RETURN VARCHAR2 IS curblk
			 * VARCHAR2(30); -- Current Block currel VARCHAR2(30); -- Current Relation
			 * retblk VARCHAR2(30); -- Return Block BEGIN -- -- Initialize Local Vars --
			 * curblk := Master; currel := Get_Block_Property(curblk,
			 * FIRST_MASTER_RELATION); -- -- While there exists another relation for this
			 * block -- WHILE currel IS NOT NULL LOOP -- -- Get the name of the detail block
			 * -- curblk := Get_Relation_Property(currel, DETAIL_NAME); -- -- If this block
			 * has changes, return its name -- IF ( Get_Block_Property(curblk, STATUS) =
			 * 'CHANGED' ) THEN RETURN curblk; ELSE -- -- No changes, recursively look for
			 * changed blocks below -- retblk := First_Changed_Block_Below(curblk); -- -- If
			 * some block below is changed, return its name -- IF retblk IS NOT NULL THEN
			 * RETURN retblk; ELSE -- -- Consider the next relation -- currel :=
			 * Get_Relation_Property(currel, NEXT_MASTER_RELATION); END IF; END IF; END
			 * LOOP;
			 * 
			 * -- -- No changed blocks were found -- RETURN NULL; END
			 * First_Changed_Block_Below;
			 */

			try {
				mastblk = system.getMasterBlock();
				coordop = system.getCoordinationOperation();
				trigblk = system.getTriggerBlock();
				startitm = system.getCursorItem();
				frmstat = system.getFormStatus();

				if (!Arrays.asList("CLEAR_RECORD", "SYNCHRONIZE_BLOCKS").contains(coordop)) {
					if (Objects.equals(mastblk, trigblk)) {
						if (Objects.equals(frmstat, "CHANGED")) {
							if (!Objects.equals(curblk, null)) {
								goBlock(curblk, "");

								checkPackageFailure();

								if (!(Objects.equals(system.getFormStatus(), "QUERY")
										|| Objects.equals(system.getBlockStatus(), "NEW"))) {
									throw new FormTriggerFailureException();

								}

							}

						}

					}

				}
				while (!Objects.equals(currel, null)) {
					if (!Objects.equals(getBlockProperty(curdtl, "STATUS"), "NEW")) {
						goBlock(curdtl, "");
						checkPackageFailure();

						clearBlock("", "novalidate");
						if (!Objects.equals(system.getBlockStatus(), "NEW")) {
							throw new FormTriggerFailureException();

						}

					}

				}
				if (!Objects.equals(system.getCursorItem(), startitm)) {
					goItem(startitm);

					checkPackageFailure();

				}

			}
			catch (FormTriggerFailureException e) {
				if (!Objects.equals(system.getCursorItem(), startitm)) {
					goItem(startitm);

				}

			}

			log.info("clearAllMasterDetails Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing clearAllMasterDetails {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDatatypDetailCrit() throws Exception {
		log.info("Sub method populateDatatypDetailCrit Executing");

		try {
			String navcur = """
					select A.SELECT_BY_ID,
										 B.criteria_descr,
										 b.CRITERIA_ID,
										 A.include_exclude_ind,
										 B.number_of_values
							from 	navdb_select_criteria A, select_criteria B
							where A.criteria_id = B.criteria_id
							and A.parent_select_by_id = ?
							and B.display_flag = 'Y'
							order by A.criteria_id
					""";

			List<DuRecord> records = app.executeQuery(navcur,
					datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
			rules = new DuBlock<Rules>();
			int i = 0;
			for (DuRecord rec : records) {

				rules.add(new Rules());
				rules.getRow(i).setSelectById(toString(rec.getObject("SELECT_BY_ID")));
				rules.getRow(i).setSelectedRules(toString(rec.getObject("CRITERIA_DESCR")));
				rules.getRow(i).setCriteriaId(toInteger(rec.getObject("CRITERIA_ID")));
				rules.getRow(i).setList(toString(rec.getObject("INCLUDE_EXCLUDE_IND")));
				rules.getRow(i).setOldList(toString(rec.getObject("INCLUDE_EXCLUDE_IND")));
				rules.getRow(i).setNumOfValues(nvl(rtrim(toString(rec.getObject("NUMBER_OF_VALUES"))), "0"));

				i++;
			}


			log.info("Sub method populateDatatypDetailCrit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing Sub method populateDatatypDetailCrit {}", e.getMessage());
			throw e;

		}
	}

private void populateDatatypDetailCrit(Integer index) throws Exception {
		log.info("Sub method populateDatatypDetailCrit Executing");

		try {
			String navcur = """
					select A.SELECT_BY_ID,
										 B.criteria_descr,
										 b.CRITERIA_ID,
										 A.include_exclude_ind,
										 B.number_of_values
							from 	navdb_select_criteria A, select_criteria B
							where A.criteria_id = B.criteria_id
							and A.parent_select_by_id = ?
							and B.display_flag = 'Y'
							order by A.criteria_id
					""";

			List<DuRecord> records = app.executeQuery(navcur,
					datatypRad.getRow(index).getSelectById());
			rules = new DuBlock<Rules>();
			int i = 0;
			for (DuRecord rec : records) {

				rules.add(new Rules());
				rules.getRow(i).setSelectById(toString(rec.getObject("SELECT_BY_ID")));
				rules.getRow(i).setSelectedRules(toString(rec.getObject("CRITERIA_DESCR")));
				rules.getRow(i).setCriteriaId(toInteger(rec.getObject("CRITERIA_ID")));
				rules.getRow(i).setList(toString(rec.getObject("INCLUDE_EXCLUDE_IND")));
				rules.getRow(i).setOldList(toString(rec.getObject("INCLUDE_EXCLUDE_IND")));
				rules.getRow(i).setNumOfValues(nvl(rtrim(toString(rec.getObject("NUMBER_OF_VALUES"))), "0"));
				i++;
			}

			log.info("Sub method populateDatatypDetailCrit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing Sub method populateDatatypDetailCrit {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDatatypOption(Integer index) throws Exception {
		log.info("Sub method populateDatatypOption Executing");
		try {
			String datradcur = """
					select select_by_id,
									 include_exclude_ind
						  from navdb_select_criteria
					   where navdb_id = ?
					 	   and record_type_code = ?
					 		 and parent_select_by_id is null
					 		 and 	(geo_area_id = ? OR
										 area_code_id = ? OR
										 icao_code_id = ? OR
										 airport_group_id = ? OR
										 heliport_group_id = ?)
							 and criteria_id not in (select criteria_id
													 from select_criteria
													 where processing_order = 30)
					""";
			Integer vId = 0;
			String vOption = null;
			List<DuRecord> records = app.executeQuery(datradcur, navdb.getNavdbId(),
					datatypRad.getRow(index).getRecordTypeCode(), selection.getSelections(), selection.getSelections(),
					selection.getSelections(), selection.getSelections(), selection.getSelections());
			vId = toInteger(records.getFirst().getObject("SELECT_BY_ID"));
			vOption = toString(records.getFirst().getObject("INCLUDE_EXCLUDE_IND"));
			if (!records.isEmpty()) {
				datatypRad.getRow(index).setSelectById(vId);
				datatypRad.getRow(index).setOptions(vOption);
				datatypRad.getRow(index).setOldOption(vOption);
				if (Objects.equals(datatypRad.getRow(index).getRecordTypeDescr(), "ENROUTE AIRWAY")) {
					controlBlock.setAirwaySbi(toString(vId));

				}

				else if (Objects.equals(datatypRad.getRow(index).getRecordTypeDescr(), "AIRPORT")) {
					controlBlock.setAirportSbi(toString(vId));

				}

			}

			else {
				coreptLib.dspMsg("Can not find the Select_by_id for" + datatypRad.getRow(index).getRecordTypeDescr()
						+ chr(10) + "Record has been deleted.");

			}

			log.info("Sub method populateDatatypOption Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing Sub method populateDatatypOption {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDatatypCriteria(Integer pSelectId, Integer pRecordTypeCode) throws Exception {
		log.info("Sub method createDatatypCriteria Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String popnavcur = """
					select select_by_id_seq.nextval as seq,
								 a.crit,a.geo,a.area,a.icao,a.airport,a.heliport
					from ( select criteria_id as crit,
													-1 geo,
													NULL area,
													NULL icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code = ?
											and processing_order = 0
											and %d = -1  -- WHEN IT IS NAVDB Default
								UNION
									 select criteria_id as crit,
													%d geo,
													NULL area,
													NULL icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code = ?
											and processing_order = 0
											and exists (select 1
					            						  from select_by_geographic_area
					             						 where select_by_id = ?)
								UNION
									 select criteria_id as crit,
													NULL geo,
													NULL area,
													NULL icao,
													%d airport,
													null heliport
										 from select_criteria
										where record_type_code = ?
										  and processing_order = 0
											and exists (select 1
					            						  from select_by_airport_group
					             						 where select_by_id = ?)
					      UNION
									 select criteria_id as crit,
													NULL geo,
													NULL area,
													NULL icao,
													null airport,
													%d heliport
										 from select_criteria
										where record_type_code = ?
										  and processing_order = 0
											and exists (select 1
					            						  from select_by_heliport_group
					             						 where select_by_id = ?)
							UNION
									 select criteria_id as crit,
													NULL geo,
													NULL area,
													%d icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code = ?
											and processing_order = 0
											and exists (select 1
					             						  from select_by_icao
					             						 where select_by_id = ?)
							UNION
									 select criteria_id as crit,
													NULL geo,
													%d area,
													NULL icao,
													NULL airport,
													null heliport
										 from select_criteria
										where record_type_code = ?
											and processing_order = 0
											and exists (select 1
					            						  from select_by_area
					             						 where select_by_id = ?)
					             )a
					""".formatted(pSelectId, pSelectId, pSelectId, pSelectId, pSelectId, pSelectId);

			String vInd = null;
			
			EParam.DYNAMIC_QUERY_ONE.setValue(popnavcur);

			List<DuRecord> listOfRecords = app.executeQuery(EParam.DYNAMIC_QUERY_ONE.getValue(), pRecordTypeCode, pRecordTypeCode, pSelectId,
					pRecordTypeCode, pSelectId, pRecordTypeCode, pSelectId, pRecordTypeCode, pSelectId, pRecordTypeCode,
					pSelectId);
			for (DuRecord record : listOfRecords) {
				if (Objects.equals(record.getObject("geo"), -1)) {
					vInd = N;

				}

				else {
					vInd = D;

				}
				if (Objects.equals(pRecordTypeCode, 10) && !Objects.equals(record.getObject("airport"), null)) {

					query = """
							SELECT NVL (include_exclude_ind, 'I')
									     from select_by_airport_group
									    WHERE select_by_id = ?
							""";
					rec = app.selectInto(query, record.getObject("airport"));
					vInd = rec.getString();

				}

				if (Arrays.asList("80", "380").contains(toString(pRecordTypeCode))
						&& (!Objects.equals(record.getObject("area"), null)
								|| !Objects.equals(record.getObject("icao"), null)
								|| !Objects.equals(record.getObject("airport"), null)
								|| !Objects.equals(record.getObject("heliport"), null))) {
					log.debug("record is not icao");

				}

				else if (Arrays.asList("44", "45").contains(toString(pRecordTypeCode))
						&& (!Objects.equals(record.getObject("icao"), null)
								|| !Objects.equals(record.getObject("airport"), null)
								|| !Objects.equals(record.getObject("heliport"), null))) {
					log.debug("record is not airport");

				}

				else {

					query = """
							 Insert into navdb_select_criteria (select_by_id,
																navdb_id,
																record_type_code,
																criteria_id,
																parent_select_by_id,
																geo_area_id,
																area_code_id,
																icao_code_id,
																airport_group_id,
																heliport_group_id,
																include_exclude_ind)
										  values (?,
											  		?,
												  	?,
												  	?,
												  	'',
												  	?,
												  	?,
												  	?,
												  	?,
												  	?,
												  	?)
							""";
					app.executeNonQuery(query, record.getObject("seq"), navdb.getNavdbId(), pRecordTypeCode,
							record.getObject("crit"), record.getObject("geo"), record.getObject("area"),
							record.getObject("icao"), record.getObject("airport"), record.getObject("heliport"), vInd);
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					
				}
			}

			log.info("Sub method createDatatypCriteria Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing Sub method createDatatypCriteria {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void doneIncExcLists() throws Exception {
		log.info("doneIncExcLists Executing");
		String query = "";
		try {
			String getValueDescr = """
					select identifier_column_name
							from   record_identifier
							where  record_type_code = ?
							and 	 display_order = ?
					""";
			String vDescr = null;
			String vValue = "";
			Integer vButton = null;
			StringBuilder vValueBuilder = new StringBuilder();
			for (int i = 0; i < lists.size(); i++) {
				for (int j=1; j <=datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo(); j++) {
					if (!Objects.equals(nameInWithIndex(this, "lists.value" + toChar(j),i), null)) {
						String value = "." + nameInWithIndex(this, "lists.value" + toChar(j),i);
						vValueBuilder.append(value);
					}
				}
			}
			vValue= vValueBuilder.toString();
			if (!Objects.equals(vValue, "")) {


				query = """
						 delete from selection_criteria_value
								where select_by_id= ?
						""";
				app.executeNonQuery(query, controlBlock.getListSId());
				int seq = 0;
				if (!Objects.equals(vValue, "")) {
					for (int j = 0; j < lists.size(); j++) {
						if (!Objects.equals(lists.getRow(j).getRecordStatus(), "DELETED")) {
							int k = 1;
							seq += 1;
							for (int i = 0; i < datatypRad.getRow(system.getPreviousBlockCursorIndex())
									.getListNo(); i++) {
								vValue = toString(nameInWithIndex(this, "lists.value" + toChar(k), j));
								DuRecord records = app.selectInto(getValueDescr,
										datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode(), k);

								vDescr = records.getString();
								if (!Objects.equals(vDescr, null)) {

									query = """
											 Insert into selection_criteria_value
																				 (select_by_id, value_seq, value_descr, value,update_dcr_number)
																	values (?, ?,?,?, ?)
											""";
									app.executeNonQuery(query, controlBlock.getListSId(), seq, vDescr, vValue,
											lists.getRow(j).getDcrNumber());
									k++;
								}


							}

						}
					}
				}

			}

			else {
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
				 displayAlert
							.moreButtons(S, "NO LIST DATA",
									"There is no data enterted, or you deleted all the data." + chr(10)
											+ "Are you sure this is what it shall be?" + chr(10),
									"Yes", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("incAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("incAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {

					query = """
							 delete from selection_criteria_value
										where select_by_id= ?
							""";
					app.executeNonQuery(query, controlBlock.getListSId());
					query = """
							 delete from navdb_select_criteria
										where select_by_id = ?
							""";
					app.executeNonQuery(query, controlBlock.getListSId());
				}

				else {
					controlBlock.setDid(N);
					throw new FormTriggerFailureException();

				}

			}

			log.info("doneIncExcLists Executed Successfully");
		}catch (RuntimeException e) {
			log.error("Runtime Error while executing doneIncExcLists {}", e.getMessage());
			throw e;
		} 
		catch (Exception e) {
			log.error("Error while executing doneIncExcLists {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void deleteSelectionCriterias() throws Exception {
		log.info("deleteSelectionCriterias Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer lnCnt = 0;
			Integer lnDtCnt = 0;

			query = """
					 delete from selection_criteria_value
						where select_by_id in
								(select select_by_id
								 from   navdb_select_criteria
								 where  navdb_id = ?
								 and	  record_type_code not in
															(select record_type_code
															 from fms_data_type
															 where upper(fms_id) = upper(?)
															 and selectable_ind = 'Y'))
					""";
			app.executeNonQuery(query, navdb.getNavdbId(), navdb.getFmsId());
			query = """
					 delete from navdb_select_criteria
						where navdb_id = ?
						and record_type_code not in
								(select record_type_code
								 from fms_data_type
								 where upper(fms_id) = upper(?)
								 and selectable_ind = 'Y')
					""";
			app.executeNonQuery(query, navdb.getNavdbId(), navdb.getFmsId());
			query = """
					SELECT count(*) from airbus_apf
						WHERE navdb_id = ?
					""";
			rec = app.selectInto(query, navdb.getNavdbId());
			lnCnt = rec.getInt();
			if (lnCnt > 0) {

				query = """
						SELECT count(*) from fms_data_type
									WHERE fms_id = upper(?)
									AND record_type_code = ( SELECT record_type_code
								                            FROM record_type
								                            WHERE record_type_descr = 'AIRBUS APF')
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				lnDtCnt = rec.getInt();
				if (Objects.equals(lnDtCnt, 0)) {
					displayAlert.oneButton(S, "Airbus APF Data",
							"Changed FMS ID '" + navdb.getFmsId()
									+ "' do not support the Airbus APF. Please delete the '" + navdb.getNavdbId()
									+ "' APF data");
				}

			}

			lnCnt = null;
			lnDtCnt = null;

			query = """
					SELECT count(*) from boeing_apf
						WHERE navdb_id = ?
					""";
			rec = app.selectInto(query, navdb.getNavdbId());
			lnCnt = rec.getInt();
			if (lnCnt > 0) {

				query = """
						SELECT count(*) from fms_data_type
									WHERE fms_id = upper(?)
									AND record_type_code = ( SELECT record_type_code
								                            FROM record_type
								                            WHERE record_type_descr = 'BOEING APF')
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				lnDtCnt = rec.getInt();
				if (Objects.equals(lnDtCnt, 0)) {
					displayAlert.oneButton(S, "Boeing APF Data",
							"Changed FMS ID '" + navdb.getFmsId()
									+ "' do not support the \nBoeing APF. Please delete the '" + navdb.getNavdbId()
									+ "' APF data");

				}

			}

			lnCnt = null;
			lnDtCnt = null;

			query = """
					SELECT count(*) from douglas_apf
						WHERE navdb_id = ?
					""";
			rec = app.selectInto(query, navdb.getNavdbId());
			lnCnt = rec.getInt();
			if (lnCnt > 0) {

				query = """
						SELECT count(*) from fms_data_type
								WHERE fms_id = upper(?)
								AND record_type_code = ( SELECT record_type_code
							                            FROM record_type
							                            WHERE record_type_descr = 'DOUGLAS APF')
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				lnDtCnt = rec.getInt();
				if (Objects.equals(lnDtCnt, 0)) {
					displayAlert.oneButton(S, "Douglas APF Data",
							"Changed FMS ID '" + navdb.getFmsId()
									+ "' do not support the Douglas APF. Please delete the '" + navdb.getNavdbId()
									+ "' APF data");

				}

			}

			log.info("deleteSelectionCriterias Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing deleteSelectionCriterias {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDatatypDetailCrit(String pType) throws Exception {
		log.info("createDatatypDetailCrit Executing");
		String query = "";
		try {
			Integer vGeo = 0;
			Integer vArea = 0;
			Integer vIcao = 0;
			Integer vApt = 0;
			Integer vHeli = 0;
			String getSelectionId = """
					select geo_area_id as geo,
								 area_code_id as area,
								 icao_code_id as icao,
								 airport_group_id as apt,
								 heliport_group_id as heli
							from navdb_select_criteria
							where select_by_id = ?
					""";
			String getCriteria = """
					select criteria_id
							from select_criteria
							where record_type_code = ?
							and PROCESSING_ORDER not in (0,30)
							and display_flag = 'Y'
								minus
							select criteria_id
							from navdb_select_criteria
							where parent_select_by_id = ?
							and criteria_id in (select criteria_id from select_criteria
																	where record_type_code = ?)
					""";

			List<DuRecord> records = app.executeQuery(getSelectionId,
					datatypRad.getRow(system.getCursorRecordIndex()).getSelectById());
			vGeo = Objects.equals(records.getLast().getObject("GEO"), null) ? null
					: toInteger(records.getLast().getObject("GEO"));
			vArea = Objects.equals(records.getLast().getObject("AREA"), null) ? null
					: toInteger(records.getLast().getObject("AREA"));
			vIcao = Objects.equals(records.getLast().getObject("ICAO"), null) ? null
					: toInteger(records.getLast().getObject("ICAO"));
			vApt = Objects.equals(records.getLast().getObject("APT"), null) ? null
					: toInteger(records.getLast().getObject("APT"));
			vHeli = Objects.equals(records.getLast().getObject("HPT"), null) ? null
					: toInteger(records.getLast().getObject("HPT"));

			if (!records.isEmpty()) {
				if (Objects.equals(lower(pType), "normal")) {
					List<DuRecord> listOfRecords = app.executeQuery(getCriteria,
							datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
							datatypRad.getRow(system.getCursorRecordIndex()).getSelectById(),
							datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
					for (DuRecord reco : listOfRecords) {

						query = """
								 Insert into navdb_select_criteria
										 		(select_by_id, navdb_id, record_type_code,
											 	criteria_id, parent_select_by_id,
											 	geo_area_id, area_code_id, icao_code_id, airport_group_id,
												heliport_group_id,include_exclude_ind)
												values (select_by_id_seq.nextval,
										 				?,
										    		    ?,
										      		  ?,
										        		?,
										        		?,?,?,?,?,
										        		'N')
								""";
						app.executeNonQuery(query, navdb.getNavdbId(),
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
								reco.getObject("CRITERIA_ID"),
								datatypRad.getRow(system.getCursorRecordIndex()).getSelectById(), vGeo, vArea, vIcao,
								vApt, vHeli);
					}
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

			}

			log.info("createDatatypDetailCrit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDatatypDetailCrit {}", e.getMessage());
			throw e;

		}
	}
	//added for changing index
	private void createDatatypDetailCrit(String pType,Integer index) throws Exception {
		log.info("createDatatypDetailCrit Executing");
		String query = "";
		try {
			Integer vGeo = 0;
			Integer vArea = 0;
			Integer vIcao = 0;
			Integer vApt = 0;
			Integer vHeli = 0;
			String getSelectionId = """
					select geo_area_id as geo,
								 area_code_id as area,
								 icao_code_id as icao,
								 airport_group_id as apt,
								 heliport_group_id as heli
							from navdb_select_criteria
							where select_by_id = ?
					""";
			String getCriteria = """
					select criteria_id
							from select_criteria
							where record_type_code = ?
							and PROCESSING_ORDER not in (0,30)
							and display_flag = 'Y'
								minus
							select criteria_id
							from navdb_select_criteria
							where parent_select_by_id = ?
							and criteria_id in (select criteria_id from select_criteria
																	where record_type_code = ?)
					""";

			List<DuRecord> records = app.executeQuery(getSelectionId,
					datatypRad.getRow(index).getSelectById());
			vGeo = Objects.equals(records.getLast().getObject("GEO"), null) ? null
					: toInteger(records.getLast().getObject("GEO"));
			vArea = Objects.equals(records.getLast().getObject("AREA"), null) ? null
					: toInteger(records.getLast().getObject("AREA"));
			vIcao = Objects.equals(records.getLast().getObject("ICAO"), null) ? null
					: toInteger(records.getLast().getObject("ICAO"));
			vApt = Objects.equals(records.getLast().getObject("APT"), null) ? null
					: toInteger(records.getLast().getObject("APT"));
			vHeli = Objects.equals(records.getLast().getObject("HPT"), null) ? null
					: toInteger(records.getLast().getObject("HPT"));

			if (!records.isEmpty()) {
				if (Objects.equals(lower(pType), "normal")) {
					List<DuRecord> listOfRecords = app.executeQuery(getCriteria,
							datatypRad.getRow(index).getRecordTypeCode(),
							datatypRad.getRow(index).getSelectById(),
							datatypRad.getRow(index).getRecordTypeCode());
					for (DuRecord reco : listOfRecords) {

						query = """
								 Insert into navdb_select_criteria
										 		(select_by_id, navdb_id, record_type_code,
											 	criteria_id, parent_select_by_id,
											 	geo_area_id, area_code_id, icao_code_id, airport_group_id,
												heliport_group_id,include_exclude_ind)
												values (select_by_id_seq.nextval,
										 				?,
										    		    ?,
										      		  ?,
										        		?,
										        		?,?,?,?,?,
										        		'N')
								""";
						app.executeNonQuery(query, navdb.getNavdbId(),
								datatypRad.getRow(index).getRecordTypeCode(),
								reco.getObject("CRITERIA_ID"),
								datatypRad.getRow(index).getSelectById(), vGeo, vArea, vIcao,
								vApt, vHeli);
					}
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

			}

			log.info("createDatatypDetailCrit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDatatypDetailCrit {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkAirport(String pIdent, String pIcao, String pType) throws Exception {
		log.info("checkAirport Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getId = """
					select A.select_by_id
							from Airport_to_select A, select_by_Airport_group B
							where Airport_ident = ?
							and   Airport_icao like ?
							and   B.navdb_id = ?
							and   A.select_by_id = B.select_by_id
					""";
			String getIcaoS = """
					select Airport_icao
						  from   pl_std_Airport
						  where  Airport_ident = ?
						  and    data_supplier = ?
							and processing_cycle = ?
							and validate_ind in ('Y','S','H','O')
					""";
			String getIcaoT = """
					select Airport_icao
						  from   pl_tld_Airport
						  where  Airport_ident = ?
						  and    data_supplier = ?
							and    processing_cycle = ?
							and    customer_ident IN (SELECT CUSTOMER_IDENT
														FROM   CUSTOMER_NAVDB
														WHERE  NAVDB_ID = ?)
							and    validate_ind in ('Y','S','H','O')
					""";
			String vIcao = null;
			String vIcao2 = null;
			Integer vExist = 0;
			Integer vButton = 0;
			String vName = "";
			String vNameTemp = "";
			String vOtherName = "";
			StringBuilder vValueBuilder = new StringBuilder();
			Integer vCount = 0;
			String vMessage = "";
			String lsAirportQuery = null;
			String lStdTldFlag = null;

			if (!Objects.equals(pIcao, null)) {

				query = """
						SELECT COUNT (*)
						  from pl_std_airport
						 WHERE airport_ident = ?
						   AND airport_icao = ?
						   AND data_supplier = ? 							--Added for SCR 3277,Neelima,18-Oct-2010
						   AND processing_cycle = ? 						--? --Fix SCR 7607.01 --Madhu --02-Mar-2018
						   AND validate_ind IN ('Y', 'S', 'H', 'O')
						""";
				rec = app.selectInto(query, pIdent, pIcao, navdb.getDataSupplier(), controlBlock.getProcCycle());
				vExist = rec.getInt();
				if (!Objects.equals(vExist, 0)) {
					lStdTldFlag = S;

				}

				if (Objects.equals(vExist, 0)) {

					query = """
							SELECT COUNT (*)
							  from pl_tld_airport
							 WHERE airport_ident = ?
							   AND airport_icao = ?
							   AND data_supplier = ? --Added For SCR 3277,Neelima,18-Oct-2010
							   AND processing_cycle = ?
							   AND validate_ind IN ('Y', 'S', 'H', 'O')
							   AND customer_ident IN (SELECT customer_ident
							                            FROM customer_navdb
							                           WHERE navdb_id = ?)
							""";
					rec = app.selectInto(query, pIdent, pIcao, navdb.getDataSupplier(), global.getProcessingCycle(),
							navdb.getNavdbId());
					vExist = rec.getInt();
					if (!Objects.equals(vExist, 0)) {
						lStdTldFlag = "T";

						coreptLib.dspMsg("This is a tailored Airport");

					}

				}

				vIcao = pIcao;

			}

			else {

				try {
					List<DuRecord> records = app.executeQuery(getIcaoS, pIdent, navdb.getDataSupplier(),
							controlBlock.getProcCycle());

					if (records.isEmpty()) {
						throw new NoDataFoundException("Icao is empty");

					} else {

						for (DuRecord rep : records) {
							if (records.size() == 1) {
								vIcao = toString(rep.getObject("Airport_icao"));
								if (Objects.equals(pType, "RECORD")) {
									airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIcao(vIcao);

								}

								vExist = 1;
							} else {
								vExist = 2;
							}
						}

					}
				}
				// v_no_icao
				catch (NoDataFoundException e) {

					try {
						List<DuRecord> records = app.executeQuery(getIcaoT, pIdent, navdb.getDataSupplier(),
								global.getProcessingCycle(), navdb.getNavdbId());

						if (records.isEmpty()) {
							throw new NoDataFoundException("Icao is empty");
						}

						else {
							lStdTldFlag = "T";
							for (DuRecord rep : records) {
								if (records.size() == 1) {
									vIcao = toString(rep.getObject("Airport_icao"));
									if (Objects.equals(pType, "RECORD")) {
										airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIcao(vIcao);
										coreptLib.dspMsg("This is a tailored Airport.");

									}

									vExist = 1;
								} else {
									vExist = 2;
								}
							}

						}
					}
					// v_no_icao
					catch (NoDataFoundException ex) {
						vExist = 0;

					}
					// others
					catch (Exception ex) {
						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
						throw new FormTriggerFailureException();

					}

				}
				catch (Exception exp) {
					coreptLib.dspMsg(OracleHelpers.getSQLerrm(exp));
					throw new FormTriggerFailureException();

				}

			}
			if (!Objects.equals(pIcao, null)) {
				List<DuRecord> listOfRecords = app.executeQuery(getId, pIdent, pIcao, navdb.getNavdbId());
				for (DuRecord record : listOfRecords) {

					query = """
							select group_name from select_by_Airport_group
							  		where select_by_id = ?
							""";
					rec = app.selectInto(query, record.getObject());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						String value =  " " + vNameTemp;
						vValueBuilder.append(value);

					}
				}
				vOtherName= vValueBuilder.toString();

			}

			else {
				getId = """
						select A.select_by_id
								from Airport_to_select A, select_by_Airport_group B
								where Airport_ident = ?
								and   Airport_icao like ('%s')
								and   B.navdb_id = ?
								and   A.select_by_id = B.select_by_id
						""".formatted("%");
				
				 EParam.DYNAMIC_QUERY_ONE.setValue(pIdent);
				 EParam.DYNAMIC_QUERY_TWO.setValue( navdb.getNavdbId());
				 EParam.DYNAMIC_QUERY_THREE.setValue( getId);
				List<DuRecord> records = app.executeQuery( EParam.DYNAMIC_QUERY_THREE.getValue(),  EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue());
				for (DuRecord reco : records) {

					query = """
							select group_name from select_by_Airport_group
							  		where select_by_id = ?
							""";
					Integer selectById = reco.getInt();
					rec = app.selectInto(query, selectById);
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						String value =  " " + vNameTemp;
						vValueBuilder.append(value);

					}
				}
				vOtherName= vValueBuilder.toString();

			}
			if (Objects.equals(pType, "BUTTON")) {
				if (!Objects.equals(vName, "")) {
					goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "");

					airportToSelect = new DuBlock<AirportToSelect>();
					airportToSelect.getData().add(0, new AirportToSelect());

					selectByAirportGroup = new DuBlock<SelectByAirportGroup>();
					selectByAirportGroup.getData().add(0, new SelectByAirportGroup());

					String where = "NAVDB_ID = '%s' AND GROUP_NAME='%s'".formatted(navdb.getNavdbId(), ltrim(vName));
					system.setCursorBlock("selectByAirportGroup");
					navdbExecuteQuery(this, where);


					if (!Objects.equals(pIcao, null)) {
						airportToSelect.getRow(0).setAirportIdent(pIdent);
						airportToSelect.getRow(0).setIataCode(controlBlock.getAtaIataDesignator());
						airportToSelect.getRow(0).setAirportIcao(pIcao);
					} else {
						if (!Objects.equals(vIcao, null)) {
							airportToSelect.getRow(0).setAirportIdent(pIdent);
							airportToSelect.getRow(0).setIataCode(controlBlock.getAtaIataDesignator());
							airportToSelect.getRow(0).setAirportIcao(vIcao);
						} else {
							
							airportToSelect.getRow(0).setAirportIdent(pIdent);
							String searchQuery = """
									SELECT AIRPORT_ICAO
									FROM AIRPORT_TO_SELECT
									WHERE SELECT_BY_ID = ?
									AND AIRPORT_IDENT=?
									""";
							List<DuRecord> selectRec = app.executeQuery(searchQuery,
									selectByAirportGroup.getRow(0).getSelectById(), pIdent);
							airportToSelect.getRow(0).setAirportIcao(selectRec.getFirst().getString());

						}

					}

					if (!Objects.equals(vOtherName, "")) {
						vMessage = "There exist other Airport(s) with the same ident in group:\n" + vOtherName + ".";

					}

					if (Objects.equals(vExist, 0)) {
						coreptLib.dspMsg("Invalid Airport, found in group " + vName + "." + chr(10) + vMessage);
					}

					else {
						if (!Objects.equals(vOtherName, "")) {

							coreptLib.dspMsg(vMessage);

						}

					}

				}

				else {
					if (Objects.equals(vExist, 0)) {
						coreptLib.dspMsg("This is not a valid Airport in cycle " + global.getProcessingCycle() + ".");

					}

					else if (Objects.equals(vExist, 1)) {
						if (Objects.equals(lStdTldFlag, "T")) {
							coreptLib.dspMsg("This is tailored Airport.");

						}

						else {
							coreptLib.dspMsg("This Airport is available to use.");
							controlBlock.setTempAirport(pIdent);
							stdAirport.getData().add(0, new StdAirport());
							system.setCursorRecordIndex(0);
							system.setCursorBlock("stdAirport");
							goBlock("STD_AIRPORT", "");
							lsAirportQuery = """
									data_supplier = '%s' and airport_ident = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d and (airport_ident,airport_icao) not in (select airport_ident,airport_icao from AIRPORT_TO_SELECT A, SELECT_BY_AIRPORT_GROUP B where B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID)
									"""
									.formatted(navdb.getDataSupplier(), controlBlock.getTempAirport(),
											controlBlock.getProcCycle(), navdb.getNavdbId());
							setBlockProperty("STD_AIRPORT", "default_where", lsAirportQuery);

							coreptLib.coreptexecutequery(this);

						}

					}

					else {
						coreptLib.dspMsg(
								"There are more than one Airports with this \nident, all of them available to use.");

					}

				}

			}

			else {
				if (!Objects.equals(vName, "") && !Objects.equals(pIcao, null)) {
					if (Objects.equals(vExist, 0)) {
						coreptLib.dspMsg("This Airport is already used in group " + vName + chr(10)
								+ "And this is not a valid Airport in cycle " + global.getProcessingCycle() + ".");

					}

					else if (Objects.equals(vExist, 1)) {
						coreptLib.dspMsg("This Airport is already used in group " + vName + ".");

					}
					setApplicationProperty("cursorStyle", "DEFAULT");
					throw new FormTriggerFailureException();

				}

				else {
					if (Objects.equals(vExist, 0) && !Objects.equals(pIcao, null)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							 displayAlert.moreButtons(S, "INVALID Airport DATA",
									"This Airport does not exist in cycle " + global.getProcessingCycle() + "."
											+ chr(10) + "Select from the options:",
									"Correct the data", "Accept it", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("airportAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("airportAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {
							setApplicationProperty("cursorStyle", "DEFAULT");
							throw new FormTriggerFailureException();

						}

						else {
							log.debug("accept it");
						}

					}

					else {
						log.debug("pIcao is null");

					}

				}

			}
			log.debug(vIcao2);
			log.info("checkAirport Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkAirport {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateIncExcLists(String pInd) throws Exception {
		log.info("populateIncExcLists Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getCriteria = """
					select criteria_id
							from select_criteria
							where record_type_code = ?
							and processing_order = 30
					""";
			String getSelectById = """
					select select_by_id
							from navdb_select_criteria
							where navdb_id = ?
							and record_type_code = ?
							and parent_select_by_id is null
							and geo_area_id = '-2'
							and include_exclude_ind = ?
							and criteria_id = ?
					""";
			String getListValue = """
					SELECT List_Records.S_Seq, List_Records.S_Val, List_Records.Value_Descr, Rec_Ident.Display_Order, UPDATE_DCR_NUMBER
					    FROM Record_Identifier Rec_Ident,
					         (SELECT Scv.Value_Seq S_Seq, Scv.Value S_Val, Scv.Value_Descr, SCV.UPDATE_DCR_NUMBER
					             FROM Selection_Criteria_Value Scv, Navdb_Select_Criteria Nsc
					           WHERE Scv.Value_Descr IN  (SELECT Identifier_Column_Name
					                                        FROM Record_Identifier
					                                       WHERE Record_Type_Code = ?)
					             AND Scv.Select_By_Id = Nsc.Select_By_Id
					             AND Scv.Select_By_Id = ?
					             AND Nsc.Include_Exclude_Ind = ?) List_Records,
					         (SELECT Scv1.Value, Scv1.Value_Seq
					            FROM Selection_Criteria_Value Scv1, Navdb_Select_Criteria Nsc1
					           WHERE Value_Descr = (SELECT Identifier_Column_Name
											                      FROM Record_Identifier
											                     WHERE Record_Type_Code = ?
											                       AND Display_Order = 1)
					             AND Scv1.Select_By_Id = Nsc1.Select_By_Id
					             AND Scv1.Select_By_Id = ?)  List_Value
					  WHERE List_Records.S_Seq = List_Value.Value_Seq
					    AND Rec_Ident.Record_Type_Code = ?
					    AND REC_IDENT.IDENTIFIER_COLUMN_NAME = List_Records.value_descr
					ORDER BY Value, S_Seq, Display_Order, Value_Descr
					""";
			Integer lnCnt = 0;
			Integer vCount = 0;
			Integer vCriteria = 0;
			Integer vSId = 0;
			log.debug(""+vCount);

			try {
				DuRecord getCriteriarecord = app.selectInto(getCriteria,
						datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode());
				vCriteria = getCriteriarecord.getInt();
				if (!Objects.equals(vCriteria, null)) {
					try {
						DuRecord reco = app.selectInto(getSelectById, navdb.getNavdbId(),
								datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode(), pInd, vCriteria);
						vSId = reco.getInt();
					} catch (NoDataFoundException e) {
						vSId = null;
					}
					if (Objects.equals(vSId, null)) {
						Integer ifCheck = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, "navdb.navdb_id"))));
						if (Objects.equals(ifCheck, 1)) {

							query = """
									select select_by_id_Seq.nextval from dual
									""";
							rec = app.selectInto(query);
							controlBlock.setListSId(rec.getInt());

							query = """
									 insert into navdb_select_criteria(select_by_id,
																		navdb_id,
																		record_type_code,
																		criteria_id,
																		geo_area_id,
													   				    include_exclude_ind)
													values(?, ?,
																 ?,?,'-2',?)
									""";
							app.executeNonQuery(query, controlBlock.getListSId(), navdb.getNavdbId(),
									datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode(), vCriteria,
									pInd);
							String rowid = toString(
									nameIn(this, substr("navdb", 1, 15) + ".rowid"));
							sendUpdatedRowIdDetails(rowid);

						}

					}

					else {
						controlBlock.setListSId(vSId);
						lnCnt = 1;
						List<DuRecord> listOfRec = app.executeQuery(getListValue,
								datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode(),
								controlBlock.getListSId(), pInd,
								datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode(),
								controlBlock.getListSId(),
								datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode());

						int i = 0;
						lists.getData().clear();
						lists.add(new Lists());
						for (DuRecord rep : listOfRec) {
							copyWithIndex(this, toString(rep.getObject("S_VAL")), "lists.value" + toChar(lnCnt), i);
							copyWithIndex(this, toString(rep.getObject("S_VAL")), "lists.valueD" + toChar(lnCnt), i);
							lists.getRow(i).setDcrNumber(rep.getObject("UPDATE_DCR_NUMBER") == null ? null
									: toInteger(rep.getObject("UPDATE_DCR_NUMBER")));
							lnCnt = lnCnt + 1;
							if (lnCnt > datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo()) {
								lists.getRow(i).setDcrNumber(rep.getObject("UPDATE_DCR_NUMBER") == null ? null
										: toInteger(rep.getObject("UPDATE_DCR_NUMBER")));
								lnCnt = 1;
								lists.add(new Lists());
								i++;

							}

						}
						lists.remove(i);

					}

				}

			}
			// others
			catch (Exception e) {

				coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

			}

			log.info("populateIncExcLists Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateIncExcLists {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkLength(Integer pNum) throws Exception {
		log.info("checkLength Executing");
		try {
			Integer vMaxLength = toInteger(nameIn(this, "control_block.length_" + toChar(pNum)));

			if (length(nameIn(this, "lists.value" + toChar(pNum))) > vMaxLength) {
				coreptLib.dspMsg("The maximum length for this field is " + vMaxLength);
				throw new FormTriggerFailureException();

			}

			log.info("checkLength Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkLength {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void setGroup(String pBlock, String pGroup, String pChk, String pItem1, String pItem2) throws Exception {
		log.info("setGroup Executing");
		try {
			RecordGroup groupId = findGroup(pGroup);
			Integer totalRows = getGroupRowCount(groupId);
			Integer vRow = 0;
			String vItem1 = null;
			String vItem2 = null;

			if (Objects.equals(pChk, Y)) {
				addGroupRow(groupId, "end_of_group");

				if (Arrays.asList(DbConstants.AIRPORT_TO_SELECT, "STD_AIRPORT").contains(upper(toSnakeCase(pBlock)))) {
					controlBlock.setAptCnt((totalRows + 1));

				}

				setGroupCharCell(groupId, "item1", totalRows, pItem1);
				if (!Objects.equals(pItem2, null)) {
					setGroupCharCell(groupId, "item2", totalRows, pItem2);

				}

				setItemInstanceProperty(pBlock + ".chk", toString(system.getCursorRecordIndex()), "visual_attribute",
						"CHECKED");

			}

			else if (Objects.equals(pChk, N)) {
				if (Objects.equals(pItem2, null)) {
					vRow = groupId.getGroupRecordNumber("item1", pItem1);
					vRow = vRow - 1;
					deleteGroupRow(pGroup, vRow);

				}

				else {
					if (Arrays.asList(DbConstants.AIRPORT_TO_SELECT, "STD_AIRPORT").contains(upper(toSnakeCase(pBlock)))) {
						controlBlock.setAptCnt(totalRows - 1);

					}

					for (int i = 0; i < totalRows; i++) {
						vItem1 = getGroupCharCell(pGroup + ".item1", i);
						if (Objects.equals(vItem1, pItem1)) {
							vItem2 = getGroupCharCell(pGroup + ".item2", i);
							if (Objects.equals(vItem2, pItem2)) {
								deleteGroupRow(pGroup, i);
								break;

							}

						}

					}

				}
				setItemInstanceProperty(pBlock + ".chk", toString(system.getCursorRecordIndex()), "visual_attribute",
						"PLAIN");

			}

			log.info("setGroup Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setGroup {}", e.getMessage());
			throw e;

		}
	}

	public void setGroup(String pBlock, String pGroup, String pChk, String pItem1, String pItem2, Integer index)
			throws Exception {
		log.info("setGroup Executing");
		try {
			RecordGroup groupId = findGroup(pGroup);
			Integer totalRows = getGroupRowCount(groupId);
			Integer vRow = 0;
			String vItem1 = null;
			String vItem2 = null;

			if (Objects.equals(pChk, Y)) {
				addGroupRow(groupId, "end_of_group");

				if (Arrays.asList(DbConstants.AIRPORT_TO_SELECT, "STD_AIRPORT").contains(upper(toSnakeCase(pBlock)))) {
					controlBlock.setAptCnt(totalRows - 1);

				}

				setGroupCharCell(groupId, "item1", totalRows, pItem1);
				if (!Objects.equals(pItem2, null)) {
					setGroupCharCell(groupId, "item2", totalRows, pItem2);

				}

				setItemInstanceProperty(pBlock + ".chk", toString(index), "visual_attribute", "CHECKED");

			}

			else if (Objects.equals(pChk, N)) {
				if (Objects.equals(pItem2, null)) {
					vRow = groupId.getGroupRecordNumber("item1", pItem1);
					vRow = vRow - 1;
					deleteGroupRow(pGroup, vRow);

				}

				else {
					if (Arrays.asList(DbConstants.AIRPORT_TO_SELECT, "STD_AIRPORT").contains(upper(toSnakeCase(pBlock)))) {
						controlBlock.setAptCnt(totalRows - 1);

					}

					for (int i = 0; i < totalRows; i++) {
						vItem1 = getGroupCharCell("item1", i);
						if (Objects.equals(vItem1, pItem1)) {
							vItem2 = getGroupCharCell("item2", i);
							if (Objects.equals(vItem2, pItem2)) {
								deleteGroupRow(pGroup, i);
								break;

							}

						}

					}

				}
				setItemInstanceProperty(pBlock + ".chk", toString(index), "visual_attribute", "PLAIN");

			}

			log.info("setGroup Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setGroup {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void queryBlockRecords(String pBlock, String pType) throws Exception {
		log.info("queryBlockRecords Executing");
		try {
			Integer vLengthW = 0;
			Integer vLengthO = 0;
			String vWhere = null;
			String vAirportWhere = null;
			int temp = system.getCursorRecordIndex();
			system.setCursorRecordIndex(0);
			if (Objects.equals(pType, "INITIAL") || Objects.equals(pType, null)) {
				system.setCursorBlock(HoneyWellUtils.toCamelCase(pBlock));

			}

			if (Arrays.asList("INITIAL", "KEY_EXE").contains(pType)) {
				if (Objects.equals(pBlock, DbConstants.AREA_CODE)) {
					setBlockProperty(DbConstants.AREA_CODE, "default_where",
							"area_code not in (select area_code from select_by_area where navdb_id = '%s')"
									.formatted(navdb.getNavdbId()));

				}

				else if (Objects.equals(pBlock.toLowerCase(), DbConstants.ICAO)) {
					setBlockProperty("icao", "default_where",
							"icao_code not in (select icao_code from select_by_icao where navdb_id = '%s')"
									.formatted(navdb.getNavdbId()));
					system.setCursorBlock("icao");

				}

				else if (Objects.equals(pBlock, DbConstants.STD_AIRPORT)) {
					vAirportWhere = """
							data_supplier = '%s' and validate_ind in ('Y','S','H') and processing_cycle = %d and
							(airport_ident,airport_icao) not in (select airport_ident,airport_icao
							from AIRPORT_TO_SELECT A, SELECT_BY_AIRPORT_GROUP B where B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID)"""
							.formatted(navdb.getDataSupplier(), controlBlock.getProcCycle(), navdb.getNavdbId());

					if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), Y)) {
						vAirportWhere = vAirportWhere + " and length(ltrim(rtrim(airport_ident))) = 4 "
								+ "and substr(airport_ident,1,1) between 'A' and 'Z' "
								+ "and substr(airport_ident,2,1) between 'A' and 'Z' "
								+ "and substr(airport_ident,3,1) between 'A' and 'Z' "
								+ "and substr(airport_ident,4,1) between 'A' and 'Z' ";

					}

					if (!Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength(), null)) {
						if (!Arrays.asList("=", ">", "<").contains(substr(
								ltrim(stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength()), 1, 1))) {

							coreptLib.dspMsg(
									"For the Runway Length field,please use format like: \n=100,>100,<100,>=100 or <=100.");
							throw new FormTriggerFailureException();

						}
						
						EParam.DYNAMIC_QUERY_ONE.setValue(vAirportWhere + " and (airport_ident,airport_icao) in "
								+ "(select airport_ident,airport_icao from pl_std_runway where RUNWAY_LENGTH "
								+ stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength()
								+ " and data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d) "
										.formatted(navdb.getDataSupplier(), controlBlock.getProcCycle()));

						vAirportWhere = EParam.DYNAMIC_QUERY_ONE.getValue()  ;

					}

					if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getSurfaceCode(), S)) {
						EParam.DYNAMIC_QUERY_ONE.setValue(vAirportWhere + " and (airport_ident,airport_icao) in "
								+ "(select airport_ident,airport_icao from pl_std_suppl_runway where runway_surface in "
								+ "('CLAY','CORL','DIRT','GRAS','GRVL','ICE','SILT','SNOW','SOIL','TRTD','TURF','UNKN','LATE','MATS','PLNG','SAND','SELD','SHAE','UNPV','WATE')"
								+ " and data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d ) "
										.formatted(navdb.getDataSupplier(), controlBlock.getProcCycle()));
						
						vAirportWhere = EParam.DYNAMIC_QUERY_ONE.getValue() ;

					}

					else if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getSurfaceCode(), H)) {
						EParam.DYNAMIC_QUERY_ONE.setValue(vAirportWhere + " and (airport_ident,airport_icao) in "
								+ "(select airport_ident,airport_icao from pl_std_suppl_runway where runway_surface in "
								+ "('ASPH','BITU','BRCK','CONC','MACA','PAVD','TARM')"
								+ " and data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d ) "
										.formatted(controlBlock.getProcCycle()));
						vAirportWhere = EParam.DYNAMIC_QUERY_ONE.getValue();

					}
					 EParam.DYNAMIC_QUERY_ONE.setValue(vAirportWhere);

					setBlockProperty("STD_AIRPORT", "default_where",  EParam.DYNAMIC_QUERY_ONE.getValue());
					stdAirport.setDefaultWhere(vAirportWhere);
					controlBlock
							.setCopyRunwayLength(stdAirport.getRow(system.getCursorRecordIndex()).getRunwayLength());
					controlBlock.setCopySurfaceCode(stdAirport.getRow(system.getCursorRecordIndex()).getSurfaceCode());
					controlBlock.setCopy4AlphaTerminal(
							stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal());
					OracleHelpers.copyWithIndex(this, hashUtil.encrypt(vAirportWhere), "stdAirport" + ".defaultWhere",
							0);
					stdAirport.setDefaultWhere(stdAirport.getRow(0).getDefaultWhere());

				}

				else if (Objects.equals(pBlock, "STD_HELIPORT")) {

					setBlockProperty("STD_HELIPORT", "default_where",
							"""
										data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d and (terminal_ident,terminal_icao) not in
										(select heliport_ident,heliport_icao from heliport_to_select a,select_by_heliport_group b
										where b.navdb_id='%s' and a.select_by_id = b.select_by_id)
									"""
									.formatted(navdb.getDataSupplier(), controlBlock.getProcCycle(),
											navdb.getNavdbId()));

				}

				else if (Objects.equals(pBlock, DbConstants.FMS_DELIVERY_FORMAT_MEDIA)) {
					setBlockProperty(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "default_where",
							"fms_id = '%s' and format_media_type not in (select format_media_type from navdb_delivery_format_media where navdb_id = '%s' ) "
									.formatted(navdb.getFmsId(), navdb.getNavdbId()));

				} 
				else if (Objects.equals(pBlock, DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA)) {
					
					setBlockProperty(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "default_where", "NAVDB_ID = '%s'".formatted(navdb.getNavdbId()));
				}
				
				else if (Objects.equals(pBlock, DbConstants.FMS_DMR)) {
					setBlockProperty(DbConstants.FMS_DMR, "default_where",
							"FMS_ID = '%s' and DM_ORC_IND='DM'".formatted(navdb.getFmsId()));
				} else if (Objects.equals(pBlock, DbConstants.SELECT_BY_GEOGRAPHIC_AREA)) {
					setBlockProperty(DbConstants.SELECT_BY_GEOGRAPHIC_AREA, "default_where",
							"GEO_AREA_NAME NOT LIKE '$%%' AND GEO_AREA_NAME != 'WORLD' AND NAVDB_ID = '%s'"
									.formatted(navdb.getNavdbId()));
				}

				else {
					setBlockProperty(pBlock, "default_where", "");

				}

			}

			else {
				String lastQuery = hashUtil.decrypt(toString(nameIn(nameIn(this, pBlock), "lastQuery")));

				if (!Objects.equals(lastQuery, null)) {
					vLengthW = instr(lastQuery.toUpperCase(), "WHERE");
					vLengthO = instr(lastQuery.toLowerCase(), "order by");
					vWhere = substr(lastQuery, vLengthW + 5, vLengthO - vLengthW - 5);
					String lowerWhere = vWhere.toUpperCase();
					int orderIndex = lowerWhere.indexOf("ORDER BY");
					if (orderIndex != -1) {
						lowerWhere = lowerWhere.substring(0, orderIndex).trim();
					}
					String encryptedWhere = hashUtil.encrypt(lowerWhere);
					copyWithIndex(this, encryptedWhere, HoneyWellUtils.toCamelCase(pBlock) + ".defaultWhere", 0);
				}

			}
			if (Objects.equals(system.getMode(), "EXECUTE")) {
				coreptLib.coreptexecutequery(this,true);
			} else {
				navdbExecuteQuery(this, null);
			}
			setMenuItemProperty(rtrim("Tools") + "." + ltrim("Export_Data"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);
			system.setCursorRecordIndex(temp);
			log.info("queryBlockRecords Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing queryBlockRecords {}", e.getMessage());
			throw e;

		}
	}

	private void navdbExecuteQuery(Object frm, String where) throws Exception {

		log.info("Executing navdbExecuteQuery");
		String defaultWhere = getBlockProperty(frm, system.getCursorBlock(), "default_where");
		String totalWhere = null;

		if (!(where == null || where.length() == 0)) {
			totalWhere = where;
		} else if (OracleHelpers.isNullorEmpty(where) && !OracleHelpers.isNullorEmpty(defaultWhere)) {
			totalWhere = defaultWhere;
		} else if (!OracleHelpers.isNullorEmpty(defaultWhere) && !OracleHelpers.isNullorEmpty(where)) {
			totalWhere = where + " AND " + defaultWhere;

		}

		long queryHits = executeQuery(frm, system.getCursorBlock(), totalWhere,
				toString(nameIn(nameIn(frm, system.getCursorBlock()), "join_Clause")),
				toString(nameIn(nameIn(frm, system.getCursorBlock()), "order_By")));
		log.debug(""+queryHits);
		log.info("navdbExecuteQuery Executed");

	}

	@Override
	public void createNewGroup(String pGroup, Integer pNumCol) throws Exception {
		log.info("createNewGroup Executing");
		try {
			RecordGroup groupId = null;
			Object colId = null;

			groupId = findGroup(pGroup);
			if (!idNull(groupId)) {
				deleteGroup(groups, "pGroup");

			}

			groupId = createGroup(pGroup);
			for (int i = 1; i <= pNumCol; i++) {
				colId = addGroupColumn(groupId, "item" + toChar(i), "charColumn", 38);

			}
			log.debug(""+colId);
			log.info("createNewGroup Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createNewGroup {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkSave(String pBlock) throws Exception {
		log.info("checkSave Executing");
		try {
			String vCursorBlock = toSnakeCase(system.getCursorBlock());
			String vFlag = Y;

			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				
				if (!Objects.equals(nvl(navdb.getCustomerEmailId(), "~~~"),
						nvl(customerInfo.getCustomerEmailId(), "~~~"))
						|| !Objects.equals(nvl(navdb.getNotes(),"~~~"),
								nvl(customerInfo.getNotes(), "~~~"))
						|| !Objects.equals(nvl(navdb.getCustEmailFlag(), "~"),
								nvl(customerInfo.getCustEmailFlag(), "~"))) {
					vFlag = Y;

				}

				else {
					vFlag = N;

				}
				if (Objects.equals(vFlag, Y)
						|| (Objects.equals(vFlag, N) && !Objects.equals(parameter.getPCustomerFlag(), Y))) {

					coreptLib.dspMsg("Please save your change first!");
					if (Objects.equals(vCursorBlock, "STD_AIRPORT")) {
						if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
							stdAirport.getRow(system.getCursorRecordIndex()).setChk(N);

							setGroup("STD_AIRPORT", "selectGroup",
									stdAirport.getRow(system.getCursorRecordIndex()).getChk(),
									stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(),
									stdAirport.getRow(system.getCursorRecordIndex()).getAirportIcao());

						}

					}

					else if (Objects.equals(vCursorBlock, DbConstants.ICAO)) {
						if (Objects.equals(icao.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
							icao.getRow(system.getCursorRecordIndex()).setChk(N);

							setGroup(DbConstants.ICAO, "selectGroup", icao.getRow(system.getCursorRecordIndex()).getChk(),
									icao.getRow(system.getCursorRecordIndex()).getIcaoCode(), null);

						}

					}

					else if (Objects.equals(vCursorBlock.toLowerCase(), DbConstants.AREA_CODE)) {
						if (Objects.equals(areaCode.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
							areaCode.getRow(system.getCursorRecordIndex()).setChk(N);
							setGroup(DbConstants.AREA_CODE, "selectGroup",
									areaCode.getRow(system.getCursorRecordIndex()).getChk(),
									areaCode.getRow(system.getCursorRecordIndex()).getAreaCode(), null);

						}

					}

					else if (Objects.equals(vCursorBlock, "STD_HELIPORT")) {
						if (Objects.equals(stdHeliport.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
							stdHeliport.getRow(system.getCursorRecordIndex()).setChk(N);

							setGroup("STD_HELIPORT", "selectGroup",
									stdHeliport.getRow(system.getCursorRecordIndex()).getChk(),
									stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(),
									stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIcao());

						}

					}

					if (Objects.equals(vCursorBlock.toUpperCase(), DbConstants.NAVDB)) {

						hideView("focals");

					}

					if (Objects.equals(vCursorBlock, "CONTROL_BLOCK")) {
						log.debug("cursorBlock is controlBlock");

					}

					else if (!Objects.equals(pBlock, null)) {
						log.debug("cursorBlock is not null");

					}

					throw new FormTriggerFailureException();

				}

				

			}

			log.info("checkSave Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkSave {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void selAll(String pBlock, String pGroup) throws Exception {
		log.info("selAll Executing");
		try {
			String vItem1Val = null;
			String vItem2Val = null;
			RecordGroup group = findGroup(pGroup);
			Integer totalRows = getGroupRowCount(group);
			String camelCasepBlock = HoneyWellUtils.toCamelCase(pBlock);
			log.debug(""+totalRows);

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

				deleteGroupRow(pGroup, "ALL_ROWS");
				Object obj = nameIn(this, pBlock);
				DuBlock<?> block = (DuBlock<?>) obj;

				for (int i = 0; i < block.size(); i++) {

					copyWithIndex(this, Y, camelCasepBlock + ".chk", i);

					if (like("%AIRPORT%", pBlock)) {
						vItem1Val = toString(nameInWithIndex(this, pBlock + ".airport_ident", i));
						vItem2Val = toString(nameInWithIndex(this, pBlock + ".airport_icao", i));

					}

					else if (like("STD_HELIPORT", pBlock)) {
						vItem1Val = toString(nameInWithIndex(this, pBlock + ".terminal_ident", i));
						vItem2Val = toString(nameInWithIndex(this, pBlock + ".terminal_icao", i));

					}

					else if (like(DbConstants.HELIPORT_TO_SELECT, pBlock)) {
						vItem1Val = toString(nameInWithIndex(this, pBlock + ".heliport_ident", i));
						vItem2Val = toString(nameInWithIndex(this, pBlock + ".heliport_icao", i));

					}

					else if (Objects.equals(pBlock, DbConstants.ICAO)) {
						vItem1Val = icao.getRow(i).getIcaoCode();

					}

					else if (Objects.equals(pBlock, DbConstants.AREA_CODE)) {
						vItem1Val = areaCode.getRow(i).getAreaCode();

					}

					else if (Arrays.asList(DbConstants.SELECT_BY_ICAO, DbConstants.SELECT_BY_AREA).contains(pBlock)) {
						vItem1Val = toString(nameInWithIndex(this, pBlock + ".select_by_id", i));

					}

					else if (Objects.equals(pBlock, DbConstants.FMS_DELIVERY_FORMAT_MEDIA)) {
						vItem1Val = fmsDeliveryFormatMedia.getRow(i).getFormatMediaType();

					}

					else if (Objects.equals(pBlock, DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA)) {
						vItem1Val = navdbDeliveryFormatMedia.getRow(i).getFormatMediaType();

					}

					setGroup(pBlock, pGroup, Y, vItem1Val, vItem2Val, i);

				}

			}

			log.info("selAll Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing selAll {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void initializeForm() throws Exception {
		log.info("initializeForm Executing");
		String query = "";
		DuRecord rec;
		try {
			String fname = getApplicationProperty(CURRENT_FORM_NAME);
			String vErr = null;

			defaultValue("J", "global.data_supplier");
			defaultValue("99999", "global.dcr_number");
			defaultValue(null, "global.processing_cycle");
			defaultValue("MAXIMIZE", "global.status_window");
			defaultValue(null, "global.allroles");
			defaultValue(N, "global.is_admin");
			defaultValue("cpt", "global.user_name");
			defaultValue("cpt", "global.password");
			defaultValue("cpt", "global.connect_string");
			defaultValue("airport", "global.data_type");
			defaultValue("airport", "global.table_name");
			defaultValue("blank", "global.last_query");
			global.setUserName(app.getUserName());
			global.setPassword(app.getPassword());
			global.setConnectString(global.getConnectString());
			setItemProperty("control_block.plot", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("control_block.gearth", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			if (Objects.equals(nameIn(this, "global.status_window"), "MAXIMIZE")) {

				setWindowProperty("baseWindow", WINDOW_STATE, MAXIMIZE);

			}

			else {

				setWindowProperty("baseWindow", WINDOW_STATE, NORMAL);

			}
			setWindowProperty("baseWindow", TITLE, "NAVDB SETUP");
			vErr = coreptLib.setRole(global.getAllroles());
			if (!Objects.equals(vErr, "PASSED")) {

				displayAlert.oneButton(S, "Fatal Error",
						"The roles cannot be activated.  Contact the COREPT Administrator.");
				exitForm();

			}

			else {
				if (Objects.equals(global.getProcessingCycle(), null)) {

					try {

						query = """
								select max(processing_cycle)
								      from pl_std_airport
								""";
						rec = app.selectInto(query);
						global.setProcessingCycle(rec.getString());
					}

					catch (NoDataFoundException e) {
						global.setProcessingCycle(null);

					}

				}

				setItemProperty("display_item_block.processing_cycle", FormConstant.DISPLAYED,
						FormConstant.PROPERTY_TRUE);
				setItemProperty("display_item_block.processing_cycle", FormConstant.WIDTH, "60");

				populateItems(fname);

				coreptLib.unsetQueryMenuItems();
				if (Objects.equals(nvl(parameter.getObsEnabled(), N), Y)) {
					setTabPageProperty("selCan.geo", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.airport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.heliport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.validate", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else if (Objects.equals(nvl(parameter.getCrhEnabled(), N), Y)) {
					setTabPageProperty("selCan.area", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.icao", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.airport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.heliport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.validate", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else if (Objects.equals(nvl(parameter.getAtdEnabled(), N), Y)) {
					setTabPageProperty("selCan.area", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.icao", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.airport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.heliport", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setTabPageProperty("selCan.validate", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}

			log.info("initializeForm Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing initializeForm {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkDid(String pType) throws Exception {
		log.info("checkDid Executing");
		try {

			if (Objects.equals(pType, "Post Block Check")) {
				if (Objects.equals(controlBlock.getDid(), N)
						&& Objects.equals(controlBlock.getGenCriteriaCan(), DbConstants.GENERAL_CRITERIA)) {

					coreptLib.dspMsg("Use the save/cancel button on the bottom of this form to \ngo back.");
					throw new FormTriggerFailureException();

				}

				else if (Objects.equals(controlBlock.getDid(), N)) {

					coreptLib.dspMsg("Use the available button on the bottom of this form to go \nback.");
					throw new FormTriggerFailureException();

				}

			}

			else if (Objects.equals(pType, "Main Button Check")) {

				if (Objects.equals(system.getActiveCanvas(),"rules")|| 
						Arrays.asList("appSubType","recordSubType","singleVal","multVal","runwaySurface","suaRules").
						contains(system.getCursorBlock()) ) {
					coreptLib.dspMsg("Please go back to the main rule form by using the 'Go \nBack' button first.");		
					throw new FormTriggerFailureException();

				}

			}

			log.info("checkDid Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkDid {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void updateDatatypValue(String pOption) throws Exception {
		log.info("updateDatatypValue Executing");
		String query = "";
		try {

			if (Arrays.asList(I, N, D).contains(pOption)) {

				query = """
						 delete from selection_criteria_value
						  	where select_by_id in (select select_by_id
						  						 from   navdb_select_criteria
						  						 where  parent_select_by_id = ?
						  						 and criteria_id in (select criteria_id
						  											 from select_criteria))
						""";
				app.executeNonQuery(query, datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
				query = """
						 delete from  navdb_select_criteria
								where parent_select_by_id = ?
								and criteria_id in (select criteria_id
													from select_criteria)
						""";
				app.executeNonQuery(query, datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
				datatypRad.getRow(system.getPreviousBlockCursorIndex())
						.setOldOption(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions());

			}

			else if (Objects.equals(pOption, "X")) {

				query = """
						 delete from selection_criteria_value
						  	where select_by_id in (select select_by_id
						  						 from   navdb_select_criteria
						  						 where  parent_select_by_id = ?)
						""";
				app.executeNonQuery(query, datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
				query = """
						 delete from  navdb_select_criteria
								where parent_select_by_id = ?
						""";
				app.executeNonQuery(query, datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
				datatypRad.getRow(system.getPreviousBlockCursorIndex())
						.setOldOption(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions());

			}

			query = """
					update navdb_select_criteria
						set    include_exclude_ind = ?
						where  select_by_id = ?
					""";
			app.executeNonQuery(query, datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions(),
					datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());// TODOcommit

			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);

			log.info("updateDatatypValue Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing updateDatatypValue {}", e.getMessage());
			throw e;

		}
	}
	
	//added for maintaining change of index
	private void updateDatatypValue(String pOption,Integer index) throws Exception{
		log.info("updateDatatypValue Executing");
		String query = "";
		try {

			if (Arrays.asList(I, N, D).contains(pOption)) {

				query = """
						 delete from selection_criteria_value
						  	where select_by_id in (select select_by_id
						  						 from   navdb_select_criteria
						  						 where  parent_select_by_id = ?
						  						 and criteria_id in (select criteria_id
						  											 from select_criteria))
						""";
				app.executeNonQuery(query, datatypRad.getRow(index).getSelectById());
				query = """
						 delete from  navdb_select_criteria
								where parent_select_by_id = ?
								and criteria_id in (select criteria_id
													from select_criteria)
						""";
				app.executeNonQuery(query, datatypRad.getRow(index).getSelectById());
				datatypRad.getRow(index)
						.setOldOption(datatypRad.getRow(index).getOptions());

			}

			else if (Objects.equals(pOption, "X")) {

				query = """
						 delete from selection_criteria_value
						  	where select_by_id in (select select_by_id
						  						 from   navdb_select_criteria
						  						 where  parent_select_by_id = ?)
						""";
				app.executeNonQuery(query, datatypRad.getRow(index).getSelectById());
				query = """
						 delete from  navdb_select_criteria
								where parent_select_by_id = ?
						""";
				app.executeNonQuery(query, datatypRad.getRow(index).getSelectById());
				datatypRad.getRow(index)
						.setOldOption(datatypRad.getRow(index).getOptions());

			}

			query = """
					update navdb_select_criteria
						set    include_exclude_ind = ?
						where  select_by_id = ?
					""";
			app.executeNonQuery(query, datatypRad.getRow(index).getOptions(),
					datatypRad.getRow(index).getSelectById());// TODOcommit

			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);
			
			log.info("updateDatatypValue Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing updateDatatypValue {}", e.getMessage());
			throw e;

		}

		
	}
	

	@Override
	public void clickDatatypRadio() throws Exception {
		log.info("clickDatatypRadio Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vAirwayInd = null;
			String vAirwayLow = N;
			String vArptInclude = null;
			String vArptInd = null;
			Integer vButton = 0;
			String getSelectionGroup = """
					select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
												from navdb_select_criteria
												where navdb_id = ?
												and record_type_code = 10
												and include_exclude_ind = 'D'
												and parent_select_by_id is null
					""";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")
					&& !Objects.equals(nameIn(this, "parameter.flag"), Y)) {
				if ((Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption(), "R")
						&& !Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "R"))) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						 displayAlert.moreButtons(S, "Change Selection Criteria",
								"You are going to change the Selection from Rules to \nOther Please check and Confirm."
										+ chr(10) + "Please pick your choice carefully:" + chr(10) + chr(10),
								"Change", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("radioAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("radioAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 2)) {
						datatypRad.getRow(system.getCursorRecordIndex()).setOptions("R");
						throw new FormTriggerFailureException();

					}

				}

			}

			if (!Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), null)) {
				if (!Objects.equals(parameter.getWorkType(), "VIEW")
						&& !Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
								datatypRad.getRow(system.getCursorRecordIndex()).getOldOption())) {
					if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 10)
							&& Arrays.asList(I, "R", D)
									.contains(datatypRad.getRow(system.getCursorRecordIndex()).getOptions())
							&& !Objects.equals(controlBlock.getAirwaySbi(), null)) {

						try {

							query = """
									select include_exclude_ind from NAVDB_SELECT_CRITERIA
														where select_by_id = ?
									""";
							rec = app.selectInto(query, controlBlock.getAirwaySbi());
							vAirwayInd = rec.getString();
							if (Objects.equals(vAirwayInd, D)) {

								query = """
										select 'Y' from NAVDB_SELECT_CRITERIA
																where include_exclude_ind = 'I'
																and criteria_id = 24  -- TERMINAL AREA LOWS
																and NAVDB_ID = ?
																and GEO_AREA_ID = '-1'
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vAirwayLow = rec.getString();

							}

							else if (Objects.equals(vAirwayInd, "R")) {

								query = """
										select 'Y' from NAVDB_SELECT_CRITERIA
																where include_exclude_ind = 'I'
																and criteria_id = 24  -- TERMINAL AREA LOWS
																and parent_select_by_id = ?
										""";
								rec = app.selectInto(query, controlBlock.getAirwaySbi());
								vAirwayLow = rec.getString();

							}

							else {
								vAirwayLow = N;

							}
						}

						catch (NoDataFoundException e) {
							vAirwayLow = N;

						}
						if (Objects.equals(vAirwayLow, Y)) {
							if (Arrays.asList(I, "R")
									.contains(datatypRad.getRow(system.getCursorRecordIndex()).getOptions())) {
								datatypRad.getRow(system.getCursorRecordIndex())
										.setOptions(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

								coreptLib.dspMsg(
										"'Include' or 'Rule' of Airport is not allowed while 'Terminal \nAREA Lows' is applied in record type Enroute Airway.");
								throw new FormTriggerFailureException();

							}

							else if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
									D)) {

								try {

									query = """
											select 'Y' from NAVDB_SELECT_CRITERIA
																		where include_exclude_ind in ('I','R')
																		and NAVDB_ID = ?
																		and record_type_code = 10
																		and GEO_AREA_ID = '-1'
																		and PARENT_SELECT_BY_ID is null
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vArptInclude = rec.getString();
								}

								catch (NoDataFoundException e) {
									vArptInclude = N;

								}
								if (Objects.equals(vArptInclude, Y)) {
									datatypRad.getRow(system.getCursorRecordIndex()).setOptions(
											datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

									coreptLib.dspMsg(
											"'Include' or 'Rule' is applied on the default Airport rule. so, can not apply 'Default' here while 'Terminal Area Lows' is applied on record type Enroute Airway.");
									throw new FormTriggerFailureException();

								}

							}

						}

						if (Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE)) {
							List<DuRecord> records = app.executeQuery(getSelectionGroup, navdb.getNavdbId());
							for (DuRecord reco : records) {

								try {

									query = """
											select 'Y' from navdb_select_criteria
																		where (geo_area_id = ?
																		or area_code_id = ?
																		or icao_code_id = ?)
																		and include_exclude_ind = 'I'
																		and criteria_id = 24
																		and navdb_id = ?
											""";
									rec = app.selectInto(query, reco.getObject("SELECTION_GROUP"),
											reco.getObject("SELECTION_GROUP"), reco.getObject("SELECTION_GROUP"),
											navdb.getNavdbId());
									vAirwayLow = rec.getString();
								}

								catch (NoDataFoundException e) {
									vAirwayLow = N;

								}
								if (Objects.equals(vAirwayLow, Y)) {
									coreptLib.dspMsg(
											"There exist at least one selection, it's Airport uses 'Default', and it's Airway has selected low. \nSo, can not apply 'Include or 'Rule' for Airport here.");
									datatypRad.getRow(system.getCursorRecordIndex()).setOptions(
											datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());
									break;

								}

							}

						}

					}

					if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 60)
							&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), D)
							&& !Objects.equals(controlBlock.getAirportSbi(), null)) {

						try {

							query = """
									select 'Y' from NAVDB_SELECT_CRITERIA
														where include_exclude_ind = 'I'
														and criteria_id = 24  -- TERMINAL AREA LOWS
														and geo_area_id = '-1'
														and navdb_id = ?
									""";
							rec = app.selectInto(query, navdb.getNavdbId());
							vAirwayLow = rec.getString();
						}

						catch (NoDataFoundException e) {
							vAirwayLow = N;

						}
						if (Objects.equals(vAirwayLow, Y)) {

							query = """
									select include_exclude_ind from NAVDB_SELECT_CRITERIA
													 	where select_by_id = ?
									""";
							rec = app.selectInto(query, controlBlock.getAirportSbi());
							vArptInd = rec.getString();
							if (Arrays.asList(I, "R").contains(vArptInd)) {
								vArptInclude = Y;

							}

							else if (Objects.equals(vArptInclude, D)) {

								try {

									query = """
											select 'Y' from NAVDB_SELECT_CRITERIA
													where include_exclude_ind in ('I','R')
													 			and GEO_AREA_ID = '-1'
													 			and record_type_code = 10
													 			and navdb_id = ?
													 			and PARENT_SELECT_BY_ID is null
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vArptInclude = rec.getString();
								}

								catch (NoDataFoundException e) {
									vArptInclude = N;

								}

							}

							if (Objects.equals(vArptInclude, Y)) {
								datatypRad.getRow(system.getCursorRecordIndex())
										.setOptions(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

								coreptLib.dspMsg(
										"'Terminal AREA Lows' is applied in the default rule. So, can not apply 'Default' here while 'Include' or 'Rule' is applied on Airport.");
								throw new FormTriggerFailureException();

							}

						}

					}

					updateDatatypValue(datatypRad.getRow(system.getCursorRecordIndex()).getOptions());

				}

				if (Objects.equals(parameter.getWorkType(), "VIEW")
						&& !Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(),
								datatypRad.getRow(system.getCursorRecordIndex()).getOldOption())) {
					datatypRad.getRow(system.getCursorRecordIndex())
							.setOptions(datatypRad.getRow(system.getCursorRecordIndex()).getOldOption());

				}

				else {
					if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), "R")) {
						if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

							createDatatypDetailCrit("normal");

						}

						goBlock("rules", "");


						populateDatatypDetailCrit();

					}

				}

			}

			log.info("clickDatatypRadio Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing clickDatatypRadio {}", e.getMessage());
			throw e;

		}
	}
	
	private void clickDatatypRadio(Integer index) throws Exception{
		log.info("clickDatatypRadio Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vAirwayInd = null;
			String vAirwayLow = N;
			String vArptInclude = null;
			String vArptInd = null;
			Integer vButton = 0;
			String getSelectionGroup = """
					select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
												from navdb_select_criteria
												where navdb_id = ?
												and record_type_code = 10
												and include_exclude_ind = 'D'
												and parent_select_by_id is null
					""";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")
					&& !Objects.equals(nameIn(this, "parameter.flag"), Y)) {
				if ((Objects.equals(datatypRad.getRow(index).getOldOption(), "R")
						&& !Objects.equals(datatypRad.getRow(index).getOptions(), "R"))) {
					if(index==0) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						displayAlert.moreButtons(S, "Change Selection Criteria",
								"You are going to change the Selection from Rules to Other Please check and Confirm."
										+ chr(10) + "Please pick your choice carefully:" + chr(10) + chr(10),
								"Change", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("radioAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("radioAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 2)) {
						datatypRad.getRow(index).setOptions("R");
						throw new FormTriggerFailureException();

					}

				}
			}

			}

			if (!Objects.equals(datatypRad.getRow(index).getRecordTypeCode(), null)) {
				if (!Objects.equals(parameter.getWorkType(), "VIEW")
						&& !Objects.equals(datatypRad.getRow(index).getOptions(),
								datatypRad.getRow(index).getOldOption())) {
					if (Objects.equals(datatypRad.getRow(index).getRecordTypeCode(), 10)
							&& Arrays.asList(I, "R", D)
									.contains(datatypRad.getRow(index).getOptions())
							&& !Objects.equals(controlBlock.getAirwaySbi(), null)) {

						try {

							query = """
									select include_exclude_ind from NAVDB_SELECT_CRITERIA
														where select_by_id = ?
									""";
							rec = app.selectInto(query, controlBlock.getAirwaySbi());
							vAirwayInd = rec.getString();
							if (Objects.equals(vAirwayInd, D)) {

								query = """
										select 'Y' from NAVDB_SELECT_CRITERIA
																where include_exclude_ind = 'I'
																and criteria_id = 24  -- TERMINAL AREA LOWS
																and NAVDB_ID = ?
																and GEO_AREA_ID = '-1'
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vAirwayLow = rec.getString();

							}

							else if (Objects.equals(vAirwayInd, "R")) {

								query = """
										select 'Y' from NAVDB_SELECT_CRITERIA
																where include_exclude_ind = 'I'
																and criteria_id = 24  -- TERMINAL AREA LOWS
																and parent_select_by_id = ?
										""";
								rec = app.selectInto(query, controlBlock.getAirwaySbi());
								vAirwayLow = rec.getString();

							}

							else {
								vAirwayLow = N;

							}
						}

						catch (NoDataFoundException e) {
							vAirwayLow = N;

						}
						if (Objects.equals(vAirwayLow, Y)) {
							if (Arrays.asList(I, "R")
									.contains(datatypRad.getRow(index).getOptions())) {
								datatypRad.getRow(index)
										.setOptions(datatypRad.getRow(index).getOldOption());

								coreptLib.dspMsg(
										"'Include' or 'Rule' of Airport is not allowed while 'Terminal \nAREA Lows' is applied in record type Enroute Airway.");
								throw new FormTriggerFailureException();

							}

							else if (Objects.equals(datatypRad.getRow(index).getOptions(),
									D)) {

								try {

									query = """
											select 'Y' from NAVDB_SELECT_CRITERIA
																		where include_exclude_ind in ('I','R')
																		and NAVDB_ID = ?
																		and record_type_code = 10
																		and GEO_AREA_ID = '-1'
																		and PARENT_SELECT_BY_ID is null
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vArptInclude = rec.getString();
								}

								catch (NoDataFoundException e) {
									vArptInclude = N;

								}
								if (Objects.equals(vArptInclude, Y)) {
									datatypRad.getRow(index).setOptions(
											datatypRad.getRow(index).getOldOption());

									coreptLib.dspMsg(
											"'Include' or 'Rule' is applied on the default Airport rule. so, can not apply 'Default' here while 'Terminal Area Lows' is applied on record type Enroute Airway.");
									throw new FormTriggerFailureException();

								}

							}

						}

						if (Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE)) {
							List<DuRecord> records = app.executeQuery(getSelectionGroup, navdb.getNavdbId());
							for (DuRecord reco : records) {

								try {

									query = """
											select 'Y' from navdb_select_criteria
																		where (geo_area_id = ?
																		or area_code_id = ?
																		or icao_code_id = ?)
																		and include_exclude_ind = 'I'
																		and criteria_id = 24
																		and navdb_id = ?
											""";
									rec = app.selectInto(query, reco.getObject("SELECTION_GROUP"),
											reco.getObject("SELECTION_GROUP"), reco.getObject("SELECTION_GROUP"),
											navdb.getNavdbId());
									vAirwayLow = rec.getString();
								}

								catch (NoDataFoundException e) {
									vAirwayLow = N;

								}
								if (Objects.equals(vAirwayLow, Y)) {

									coreptLib.dspMsg(
											"There exist at least one selection, it's Airport uses 'Default', and it's Airway has selected low. \nSo, can not apply 'Include or 'Rule' for Airport here.");
									datatypRad.getRow(index).setOptions(
											datatypRad.getRow(index).getOldOption());
									break;

								}

							}

						}

					}

					if (Objects.equals(datatypRad.getRow(index).getRecordTypeCode(), 60)
							&& Objects.equals(datatypRad.getRow(index).getOptions(), D)
							&& !Objects.equals(controlBlock.getAirportSbi(), null)) {

						try {

							query = """
									select 'Y' from NAVDB_SELECT_CRITERIA
														where include_exclude_ind = 'I'
														and criteria_id = 24  -- TERMINAL AREA LOWS
														and geo_area_id = '-1'
														and navdb_id = ?
									""";
							rec = app.selectInto(query, navdb.getNavdbId());
							vAirwayLow = rec.getString();
						}

						catch (NoDataFoundException e) {
							vAirwayLow = N;

						}
						if (Objects.equals(vAirwayLow, Y)) {

							query = """
									select include_exclude_ind from NAVDB_SELECT_CRITERIA
													 	where select_by_id = ?
									""";
							rec = app.selectInto(query, controlBlock.getAirportSbi());
							vArptInd = rec.getString();
							if (Arrays.asList(I, "R").contains(vArptInd)) {
								vArptInclude = Y;

							}

							else if (Objects.equals(vArptInclude, D)) {

								try {

									query = """
											select 'Y' from NAVDB_SELECT_CRITERIA
													where include_exclude_ind in ('I','R')
													 			and GEO_AREA_ID = '-1'
													 			and record_type_code = 10
													 			and navdb_id = ?
													 			and PARENT_SELECT_BY_ID is null
											""";
									rec = app.selectInto(query, navdb.getNavdbId());
									vArptInclude = rec.getString();
								}

								catch (NoDataFoundException e) {
									vArptInclude = N;

								}

							}

							if (Objects.equals(vArptInclude, Y)) {
								datatypRad.getRow(index)
										.setOptions(datatypRad.getRow(index).getOldOption());

								coreptLib.dspMsg(
										"'Terminal AREA Lows' is applied in the default rule. So, can not apply 'Default' here while 'Include' or 'Rule' is applied on Airport.");
								throw new FormTriggerFailureException();

							}

						}

					}

					updateDatatypValue(datatypRad.getRow(index).getOptions(),index);

				}

				if (Objects.equals(parameter.getWorkType(), "VIEW")
						&& !Objects.equals(datatypRad.getRow(index).getOptions(),
								datatypRad.getRow(index).getOldOption())) {
					datatypRad.getRow(index)
							.setOptions(datatypRad.getRow(index).getOldOption());

				}

				else {
					if (Objects.equals(datatypRad.getRow(index).getOptions(), "R")) {
						if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

							createDatatypDetailCrit("normal",index);

						}

						goBlock("rules", "");


						populateDatatypDetailCrit(index);

					}

				}

			}

			log.info("clickDatatypRadio Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing clickDatatypRadio {}", e.getMessage());
			throw e;

		}

		
		
	}

	@Override
	public void clickDetailRadio() throws Exception {
		log.info("clickDetailRadio Executing");
		String query = "";
		DuRecord rec = null;
		try {

			if (Objects.equals(system.getCursorBlock(), "rules")) {
				if (!Objects.equals(rules.getRow(system.getCursorRecordIndex()).getSelectedRules(), null)) {
					if ((Objects.equals(parameter.getWorkType(), "VIEW")
							&& !Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
									rules.getRow(system.getCursorRecordIndex()).getOldList()))) {
						rules.getRow(system.getCursorRecordIndex())
								.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

					}

					else {
						String singlevalue = """
								select value as val
														from selection_criteria_value
								 						where select_by_id = ?
								""";
						String multiplevalue = """
								select value as val
								 						from selection_criteria_value
								 						where select_by_id = ?
								 						order by value_seq
								""";
						String getSelectionGroup = """
								select select_by_id, geo_area_id||area_code_id||icao_code_id selection_group
															from navdb_select_criteria
															where navdb_id = ?
															and record_type_code = 60
															and include_exclude_ind = 'D'
															and parent_select_by_id is null
								""";
						String vAirportInd = null;
						String vAirportInclude = N;

						if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(), I)) {
							if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 24)
									&& !Objects.equals(controlBlock.getAirportSbi(), null)
									&& !Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
											rules.getRow(system.getCursorRecordIndex()).getOldList())) {

								try {

									query = """
											select include_exclude_ind from NAVDB_SELECT_CRITERIA
																			where select_by_id = ?
											""";
									rec = app.selectInto(query, controlBlock.getAirportSbi());
									vAirportInd = rec.getString();
									if (Objects.equals(vAirportInd, D)) {

										query = """
												select 'Y' from NAVDB_SELECT_CRITERIA
															where include_exclude_ind in ('I','R')
															and record_type_code = 10  -- AIRPORT
															and NAVDB_ID = ?
															and GEO_AREA_ID = '-1'	-- default
															and PARENT_SELECT_BY_ID is null
												""";
										rec = app.selectInto(query, navdb.getNavdbId());
										vAirportInclude = rec.getString();

									}

									else if (Arrays.asList(I, "R").contains(vAirportInd)) {
										vAirportInclude = Y;

									}

									else {
										vAirportInclude = N;

									}
								}

								catch (NoDataFoundException e) {
									vAirportInclude = N;

								}
								if (Objects.equals(vAirportInclude, Y)) {
									rules.getRow(system.getCursorRecordIndex())
											.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

									coreptLib.dspMsg(
											"Apply 'Terminal AREA Low' is not allowed while Airport \nis 'Included' or 'Ruled'.");
									throw new FormTriggerFailureException();

								}

								if (Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE)) {
									List<DuRecord> records = app.executeQuery(getSelectionGroup, navdb.getNavdbId());
									for (DuRecord reco : records) {

										try {

											query = """
													select 'Y' from navdb_select_criteria
																where (geo_area_id = ?
																or area_code_id = ?
																or icao_code_id = ?)
																and include_exclude_ind = 'I'
																and record_type_code = 10
																and navdb_id = ?
													""";
											rec = app.selectInto(query, reco.getObject("SELECTION_GROUP"),
													reco.getObject("SELECTION_GROUP"),
													reco.getObject("SELECTION_GROUP"), navdb.getNavdbId());
											vAirportInclude = rec.getString();
										}

										catch (NoDataFoundException e) {
											vAirportInclude = N;

										}
										if (Objects.equals(vAirportInclude, Y)) {

											coreptLib.dspMsg(
													"There exist at least one selection, it's Airway uses \n'Default', and the selection of that Airport is 'Include' or \n'Rule'.So, can not apply 'Airway Low' here.");
											rules.getRow(system.getCursorRecordIndex())
													.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
											break;

										}

									}
									if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
											rules.getRow(system.getCursorRecordIndex()).getOldList())) {
										throw new FormTriggerFailureException();

									}

								}

								if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

									query = """
											update navdb_select_criteria
																			set include_exclude_ind = ?
																			where select_by_id = ?
											""";
									app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getList(),
											rules.getRow(system.getCursorRecordIndex()).getSelectById());// TODOcommit
									rules.getRow(system.getCursorRecordIndex())
											.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());

								}

							}

							else {
								if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getNumOfValues(), "0")) {
									if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

										query = """
												update navdb_select_criteria
													set include_exclude_ind = ?
													where select_by_id = ?
												""";
										app.executeNonQuery(query,
												rules.getRow(system.getCursorRecordIndex()).getList(),
												rules.getRow(system.getCursorRecordIndex()).getSelectById());// TODOcommit
										rules.getRow(system.getCursorRecordIndex())
												.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());

									}

								}

								else if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getNumOfValues(),
										"1")) {
									controlBlock.setDid(N);
									goBlock("SINGLE_VAL", "");

									singleVal.setSingle("");
									List<DuRecord> records = app.executeQuery(singlevalue,
											rules.getRow(system.getCursorRecordIndex()).getSelectById());
									if (records.size() > 0) {
										singleVal.setSingle(toString(records.getLast().getObject()));
										singleVal.setOldValue(singleVal.getSingle());
										singleVal.setRecordStatus("QUERIED");

									}

								}

								else if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getNumOfValues(),
										"M")) {
									controlBlock.setDid(N);
									if ((like("%APPROACH%", navdb.getDataName()) && Arrays.asList(85, 317)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))) {
										goBlock("APP_SUB_TYPE", "");

										populateSubType("APP_SUB_TYPE");

									}

									else if ((like("%APPROACH%", navdb.getDataName()) && Arrays.asList(86, 319)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))
											|| (like("%SID%", navdb.getDataName()) && Objects.equals(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 98))
											|| (like("%STAR%", navdb.getDataName()) && Objects.equals(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 99))
											|| (like("%APPROACH%", navdb.getDataName()) && Arrays.asList(529, 532)
													.contains(rules.getRow(system.getCursorRecordIndex())
															.getCriteriaId()))
											|| (like("%SID%", navdb.getDataName()) && Arrays.asList(527, 530).contains(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))
											|| (like("%STAR%", navdb.getDataName()) && Arrays.asList(528, 531).contains(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))
											|| (like("%OBSTACLE%", navdb.getDataName()) && Objects.equals(
													rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 602))
											|| (like("%AIRWAY%", navdb.getDataName())
													&& Arrays.asList(22, 23, 131).contains(rules
															.getRow(system.getCursorRecordIndex()).getCriteriaId()))) {
										goBlock("RECORD_SUB_TYPE", "");

										populateSubType("RECORD_SUB_TYPE");

									}

									else if (Objects.equals(navdb.getDataName(), "RUNWAY") && Objects
											.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 39)) {
										goBlock("RUNWAY_SURFACE", "");

									}

									else if (like("%AIRSPACE%", navdb.getDataName()) && Arrays.asList(493, 494)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
										goBlock("SUA_RULES", "");

									}

									else if (like("%AIRSPACE%", navdb.getDataName()) && Arrays.asList(505, 506)
											.contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
                                        log.debug("Inside else if for Data name is AirSpace ");

									}

									else {
										goBlock("MULT_VAL", "");

										setBlockProperty("MULT_VAL", FormConstant.INSERT_ALLOWED,
												FormConstant.PROPERTY_TRUE);
										setBlockProperty("MULT_VAL", FormConstant.UPDATE_ALLOWED,
												FormConstant.PROPERTY_TRUE);
										setBlockProperty("MULT_VAL", FormConstant.DELETE_ALLOWED,
												FormConstant.PROPERTY_TRUE);

										List<DuRecord> records = app.executeQuery(multiplevalue,
												rules.getRow(system.getCursorRecordIndex()).getSelectById());
										MultVal multvalBlock = null;
										for (DuRecord reco : records) {
											multvalBlock = new MultVal();
											multvalBlock.setMultiple(toString(reco.getObject("val")));
											multVal.add(multvalBlock);

										}

										if (Objects.equals(parameter.getWorkType(), "VIEW")) {
											setBlockProperty("MULT_VAL", FormConstant.INSERT_ALLOWED,
													FormConstant.PROPERTY_FALSE);
											setBlockProperty("MULT_VAL", FormConstant.UPDATE_ALLOWED,
													FormConstant.PROPERTY_FALSE);
											setBlockProperty("MULT_VAL", FormConstant.DELETE_ALLOWED,
													FormConstant.PROPERTY_FALSE);

										}

									}

								}

							}

						}

						else {
							if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

								query = """
										update navdb_select_criteria
																	set include_exclude_ind = 'N'
																	where select_by_id = ?
										""";
								app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
								query = """
										 delete from selection_criteria_value
																	where select_by_id =?
										""";
								app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
								rules.getRow(system.getCursorRecordIndex()).setOldList(N);
								String rowid = toString(
										nameIn(this, substr("navdb", 1, 15) + ".rowid"));
								sendUpdatedRowIdDetails(rowid);

							}

						}

					}

				}

			}

			log.info("clickDetailRadio Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing clickDetailRadio {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDefaultCriteria(Integer vGeoId, Integer vAreaId, Integer vIcaoId, Integer vAirportId,
			Integer vHeliportId, String vType) throws Exception {
		log.info("createDefaultCriteria Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getCriteriaId = """
					SELECT criteria_id, record_type_code
					        FROM select_criteria
					       WHERE processing_order = 0
					         AND record_type_code IN (
					                SELECT rec.record_type_code
					                  FROM fms_data_type fdt,
					                       flight_management_system fms,
					                       record_type rec,
					                       navdb nav
					                 WHERE fdt.record_type_code = rec.record_type_code
					                   AND fdt.fms_id = fms.fms_id
					                   AND nav.fms_id = fms.fms_id
					                   AND nav.navdb_id = ?
					                   AND UPPER (fms.fms_id) = UPPER (?)
					                   AND selectable_ind = 'Y'           -- Added per SCR 1267.01
					                   AND rec.enroute_terminal_ind IN ('T', 'E', 'H'))
					""";
			String getCriteriaIdT = """
					SELECT criteria_id, record_type_code
					        FROM select_criteria
					       WHERE processing_order = 0
					         AND record_type_code IN (
					                SELECT rec.record_type_code
					                  FROM fms_data_type fdt,
					                       flight_management_system fms,
					                       record_type rec,
					                       navdb nav
					                 WHERE fdt.record_type_code = rec.record_type_code
					                   AND nav.navdb_id = ?
					                   AND UPPER (fms.fms_id) = UPPER (?)
					                   AND nav.fms_id = fms.fms_id
					                   AND fdt.fms_id = fms.fms_id
					                   AND rec.enroute_terminal_ind = ?
					                   AND selectable_ind = 'Y')
					""";
			Integer vCriteriaId = 0;
			Integer vRecordTypeCode = 0;
			String vInd = null;

			if (Arrays.asList("T", H).contains(vType)) {
				List<DuRecord> listOfRecords = app.executeQuery(getCriteriaIdT, navdb.getNavdbId(), navdb.getFmsId(),
						vType);
				for (DuRecord record : listOfRecords) {
					vCriteriaId = toInteger(record.getObject("criteria_id"));
					vRecordTypeCode = toInteger(record.getObject("record_type_code"));
					if (Arrays.asList(3, 33).contains(vCriteriaId)) {
						if (Objects.equals(vCriteriaId, 3)) {

							query = """
									SELECT NVL (include_exclude_ind, 'I')
									                 from select_by_airport_group
									                WHERE select_by_id = ?
									""";
							rec = app.selectInto(query, vAirportId);
							vInd = rec.getString();

						}

						else if (Objects.equals(vCriteriaId, 33)) {

							query = """
									SELECT NVL (include_exclude_ind, 'I')
									                 from select_by_heliport_group
									                WHERE select_by_id = ?
									""";
							rec = app.selectInto(query, vHeliportId);
							vInd = rec.getString();

						}

						else {
							vInd = I;

						}

					}

					else {
						vInd = D;

					}
					if (Objects.equals(vRecordTypeCode, 10) && !Objects.equals(vAirportId, null)) {

						query = """
								SELECT NVL (include_exclude_ind, 'I')
								              from select_by_airport_group
								             WHERE select_by_id = ?
								""";
						rec = app.selectInto(query, vAirportId);
						vInd = rec.getString();

					}

					query = """
							 INSERT INTO navdb_select_criteria
							                     (select_by_id, navdb_id,
							                      record_type_code, criteria_id, parent_select_by_id,
							                      geo_area_id, area_code_id, icao_code_id,
							                      airport_group_id, heliport_group_id, include_exclude_ind
							                     )
							              VALUES (select_by_id_seq.NEXTVAL, ?,
							                      ?, ?, NULL,
							                      ?, ?, ?,
							                      ?, ?, ?
							                     )
							""";
					app.executeNonQuery(query, navdb.getNavdbId(), vRecordTypeCode, vCriteriaId, vGeoId, vAreaId,
							vIcaoId, vAirportId, vHeliportId, vInd);
				}

			}

			else {
				if (Objects.equals(vGeoId, -1)) {
					vInd = N;

				}

				else {
					vInd = D;

				}
				List<DuRecord> listOfRec = app.executeQuery(getCriteriaId, navdb.getNavdbId(), navdb.getFmsId());
				for (DuRecord r : listOfRec) {
					vCriteriaId = toInteger(r.getObject("criteria_id"));
					vRecordTypeCode = toInteger(r.getObject("record_type_code"));

					if (Arrays.asList("80", "380").contains(toString(vRecordTypeCode))
							&& (!Objects.equals(vAreaId, null) || !Objects.equals(vIcaoId, null))) {
						log.debug("vAreaId is not null");
						

					}

					else if (Arrays.asList("44", "45").contains(toString(vRecordTypeCode))
							&& (!Objects.equals(vIcaoId, null))) {
						log.debug("vIcaoId is not null");
					}

					else {
						if (Objects.equals(vRecordTypeCode, 10) && !Objects.equals(vAirportId, null)) {

							query = """
									SELECT NVL (include_exclude_ind, 'I')
									                 from select_by_airport_group
									                WHERE select_by_id = ?
									""";
							rec = app.selectInto(query, vAirportId);
							vInd = rec.getString();

						}

						query = """
								 INSERT INTO navdb_select_criteria
								                        (select_by_id, navdb_id,
								                         record_type_code, criteria_id, parent_select_by_id,
								                         geo_area_id, area_code_id, icao_code_id,
								                         airport_group_id, heliport_group_id,
								                         include_exclude_ind
								                        )
								                 VALUES (select_by_id_seq.NEXTVAL, ?,
								                         ?, ?, NULL,
								                         ?, ?, ?,
								                         ?, ?,
								                         ?
								                        )
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), vRecordTypeCode, vCriteriaId, vGeoId, vAreaId,
								vIcaoId, vAirportId, vHeliportId, vInd);
					}

				}

			}

			log.info("createDefaultCriteria Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDefaultCriteria {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkHeliport(String pIdent, String pIcao, String pType) throws Exception {
		log.info("checkHeliport Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getId = """
					select A.select_by_id
							from Heliport_to_select A, select_by_Heliport_group B
							where Heliport_ident = ?
							and   Heliport_icao like ?
							and   B.navdb_id = ?
							and   A.select_by_id = B.select_by_id
					""";
			String getIcaoS = """
							select Terminal_icao             		-- Heliport_icao
						  	from   cptsc.VIEW_FOR_HELIPORT_GROUP   	-- pl_std_Heliport
						  	where  Terminal_ident = ?  				-- Heliport_ident = p_ident
						  	and    data_supplier = ?
							and processing_cycle = ? 			--? ----Fix SCR 7607.01 --Madhu --02-Mar-2018
							and validate_ind in ('Y','S','H','O')
					""";
			String getIcaoT = """
							select Heliport_icao terminal_icao
						  	from   pl_tld_Heliport
						  	where  Heliport_ident = ?
						  	and    data_supplier = ?
							and    processing_cycle = ?
							and    customer_ident IN (SELECT CUSTOMER_IDENT
													 FROM   CUSTOMER_NAVDB
													 WHERE  NAVDB_ID = ?)
							and    validate_ind in ('Y','S','H','O')
									union
							select Airport_icao terminal_icao
						  	from   pl_tld_Airport
						  	where  Airport_ident = ?
						  	and    data_supplier = ?
							and    processing_cycle = ?
							and    customer_ident IN (SELECT CUSTOMER_IDENT
													 FROM   CUSTOMER_NAVDB
												 	 WHERE  NAVDB_ID = ?)
							and    validate_ind in ('Y','S','H','O')
					""";
			String vIcao = null;
			String vIcao2 = null;
			Integer vExist = 0;
			Integer vButton = 0;
			String vName = "";
			String vNameTemp = "";
			String vOtherName = "";
			StringBuilder vValueBuilder = new StringBuilder();
			Integer vCount = 0;
			String vMessage = "";
			String lsHeliportQuery = null;

			if (!Objects.equals(pIcao, null)) {

				query = """
						SELECT COUNT(*) from cptsc.VIEW_FOR_HELIPORT_GROUP   	--PL_STD_Heliport
								WHERE terminal_ident = ? 		--Heliport_IDENT = p_ident
								AND   terminal_icao  = ?  		--Heliport_ICAO = p_icao
								AND   PROCESSING_CYCLE = ? 		--? ----Fix SCR 7607.01 --Madhu --02-Mar-2018
								and   validate_ind in ('Y','S','H','O')
						""";
				rec = app.selectInto(query, pIdent, pIcao, controlBlock.getProcCycle());
				vExist = rec.getInt();
				if (Objects.equals(vExist, 0)) {

					query = """
							SELECT COUNT(*) from PL_TLD_Heliport
										WHERE Heliport_IDENT = ?
										AND   Heliport_ICAO = ?
										AND   PROCESSING_CYCLE = ?
										AND   validate_ind in ('Y','S','H','O')
										AND   CUSTOMER_IDENT IN (SELECT CUSTOMER_IDENT
																 FROM   CUSTOMER_NAVDB
																 WHERE  NAVDB_ID = ?)
							""";
					rec = app.selectInto(query, pIdent, pIcao, global.getProcessingCycle(), navdb.getNavdbId());
					vExist = rec.getInt();
					if (!Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This is a tailored Heliport.");

					}

					else {

						query = """
								SELECT COUNT(*) from PL_TLD_AIRPORT
												WHERE airport_IDENT = ?
												AND   airport_ICAO = ?
												AND   PROCESSING_CYCLE = ?
												AND   validate_ind in ('Y','S','H','O')
												AND   CUSTOMER_IDENT IN (SELECT CUSTOMER_IDENT
																							 FROM   CUSTOMER_NAVDB
																							 WHERE  NAVDB_ID = ?)
								""";
						rec = app.selectInto(query, pIdent, pIcao, global.getProcessingCycle(), navdb.getNavdbId());
						vExist = rec.getInt();
						if (!Objects.equals(vExist, 0)) {

							coreptLib.dspMsg("This is a tailored Airport.");

						}

					}

				}

				vIcao = pIcao;

			}

			else {

				try {
					List<DuRecord> recordheli = app.executeQuery(getIcaoS, pIdent, navdb.getDataSupplier(),
							controlBlock.getProcCycle());
					if (recordheli.isEmpty()) {
						throw new NoDataFoundException("Icao is empty");

					} else {

						for (DuRecord rep : recordheli) {
							if (recordheli.size() == 1) {
								vIcao = toString(rep.getObject("Terminal_icao"));
								if (Objects.equals(pType, "RECORD")) {
									heliportToSelect.getRow(system.getCursorRecordIndex()).setHeliportIcao(vIcao);

								}

								vExist = 1;
							} else {
								vExist = 2;
							}
						}

					}
				}

				catch (NoDataFoundException e) {
					

					try {
						List<DuRecord> records = app.executeQuery(getIcaoT, pIdent, navdb.getDataSupplier(),
								global.getProcessingCycle(), navdb.getNavdbId(),pIdent,navdb.getDataSupplier(),
								global.getProcessingCycle(),navdb.getNavdbId());
						if (records.isEmpty()) {

							throw new NoDataFoundException("");

						}

						else {
							for(DuRecord repo : records) {
							if (records.size()==1) {
								vIcao2 = toString(repo.getObject("Terminal_icao"));
								if (Objects.equals(pType, "RECORD")) {
									heliportToSelect.getRow(system.getCursorRecordIndex()).setHeliportIcao(vIcao2);

									coreptLib.dspMsg("This is a tailored Heliport/Airport.");
								}

								vExist = 1;

							}

							else {
								vExist = 2;

							}
							}
						}
					}

					catch (NoDataFoundException exp) {
						vExist = 0;

					}

					catch (Exception ex) {

						coreptLib.dspMsg(OracleHelpers.getSQLerrm(ex));
						throw new FormTriggerFailureException();

					}

				}

				catch (Exception e) {

					coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
					throw new FormTriggerFailureException();

				}

			}
			if (!Objects.equals(pIcao, null)) {
				List<DuRecord> records = app.executeQuery(getId, pIdent, pIcao, navdb.getNavdbId());
				for (DuRecord reco : records) {

					query = """
							select group_name from select_by_Heliport_group
							  		where select_by_id = ?
							""";
					rec = app.selectInto(query, reco.getObject());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						String value =  " " + vNameTemp;
						vValueBuilder.append(value);

					}
					vOtherName= vValueBuilder.toString();
				}

			}

			else {
				getId = """
						select A.select_by_id
								from Heliport_to_select A, select_by_Heliport_group B
								where Heliport_ident = ?
								and   Heliport_icao like ('%s')
								and   B.navdb_id = ?
								and   A.select_by_id = B.select_by_id
						""".formatted("%");
				
				 EParam.DYNAMIC_QUERY_ONE.setValue(pIdent);
				 EParam.DYNAMIC_QUERY_TWO.setValue( navdb.getNavdbId());
				 EParam.DYNAMIC_QUERY_THREE.setValue(getId);
				 List<DuRecord> records = app.executeQuery( EParam.DYNAMIC_QUERY_THREE.getValue(),  EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue());
				for (DuRecord reco : records) {

					query = """
							select group_name from select_by_Heliport_group
							  		where select_by_id = ?
							""";
					rec = app.selectInto(query, reco.getObject());
					vNameTemp = rec.getString();
					vCount = vCount + 1;
					if (Objects.equals(vCount, 1)) {
						vName = vNameTemp;

					}

					else {
						vOtherName = vOtherName + " " + vNameTemp;

					}
				}

			}
			if (Objects.equals(pType, "BUTTON")) {
				if (!Objects.equals(vName, "")) {
					goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
					
					heliportToSelect = new DuBlock<HeliportToSelect>();
					heliportToSelect.getData().add(0, new HeliportToSelect());
					
					selectByHeliportGroup = new DuBlock<SelectByHeliportGroup>();
					selectByHeliportGroup.getData().add(0, new SelectByHeliportGroup());
					
					String where = "NAVDB_ID = '%s' AND GROUP_NAME='%s'".formatted(navdb.getNavdbId(),ltrim(vName));
					system.setCursorBlock(DbConstants.SELECT_BY_HELIPORT_GROUP);
					navdbExecuteQuery(this, where);
					
					
					if(!Objects.equals(pIcao, null))
					{
						heliportToSelect.getRow(0).setHeliportIdent(pIdent);
						heliportToSelect.getRow(0).setHeliportIcao(pIcao);
					}
					else
					{
						if(!Objects.equals(vIcao, null))
						{
							heliportToSelect.getRow(0).setHeliportIdent(pIdent);
							heliportToSelect.getRow(0).setHeliportIcao(vIcao);
						}
						else
						{
							heliportToSelect.getRow(0).setHeliportIdent(pIdent);
							String searchQuery = """
									SELECT HELIPORT_ICAO
									FROM HELIPORT_TO_SELECT
									WHERE SELECT_BY_ID = ?
									AND HELIPORT_IDENT=?
									""";
							List<DuRecord> selectRec = app.executeQuery(searchQuery,
									selectByHeliportGroup.getRow(0).getSelectById(), pIdent);
							heliportToSelect.getRow(0).setHeliportIcao(selectRec.getFirst().getString());
						}
						
					}
					
					if (!Objects.equals(vOtherName, "")) {
						vMessage = "There exist other Terminal(s) with the same ident in \ngroup:" + vOtherName + ".";

					}

					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("Invalid Heliport/Airport, found in group " + vName + "." + chr(10) + vMessage);

					}

					else {
						if (!Objects.equals(vOtherName, "")) {

							coreptLib.dspMsg(vMessage);
						}

					}

				}

				else {
					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This is not a valid Heliport/Airport in cycle " + global.getProcessingCycle());
					}

					else if (Objects.equals(vExist, 1)) {

						coreptLib.dspMsg("This Heliport/Airport is available to use.");
						controlBlock.setTempHeliport(pIdent);
						goBlock("STD_HELIPORT", "");
						stdHeliport.getData().clear();
						stdHeliport.add(new StdHeliport());
						lsHeliportQuery = """
								data_supplier = '%s' and terminal_ident = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d and (terminal_ident, terminal_icao) not in 
								(select heliport_ident, heliport_icao from HELIPORT_TO_SELECT A, SELECT_BY_HELIPORT_GROUP B where B.NAVDB_ID = '%s' AND A.SELECT_BY_ID = B.SELECT_BY_ID) 		
								""".formatted(navdb.getDataSupplier(), controlBlock.getTempHeliport(),
												controlBlock.getProcCycle(), navdb.getNavdbId());
						setBlockProperty("STD_HELIPORT", "default_where", lsHeliportQuery);
						system.setCursorBlock("stdHeliport");
						coreptLib.coreptexecutequery(this);

					}

					else {

						coreptLib.dspMsg(
								"There are more than one Heliports/Airports with this \nident, all of them available to use.");

					}

				}

			}

			else {
				if (!Objects.equals(vName, "") && !Objects.equals(pIcao, null)) {
					if (Objects.equals(vExist, 0)) {

						coreptLib.dspMsg("This Heliport/Airport is already used in group " + vName + "." + chr(10)
								+ "And this is not a valid Heliport/Airport in cycle " + global.getProcessingCycle()
								+ ".");

					}

					else if (Objects.equals(vExist, 1)) {

						coreptLib.dspMsg("This Heliport/Airport is already used in group " + vName + ".");
					}

					throw new FormTriggerFailureException();

				}

				else {
					if (Objects.equals(vExist, 0) && !Objects.equals(pIcao, null)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							displayAlert.moreButtons(S, "INVALID Heliport/Airport DATA",
									"This Heliport/Airport does not exist in cycle " + global.getProcessingCycle() + "."
											+ chr(10) + "Select from the options:",
									"Correct the data", "Accept it", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("heliportAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("heliportAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							throw new FormTriggerFailureException();

						}

						else {
							log.debug("check heliport,accept it");

						}

					}

					else {
						log.debug("pIcao is null");
					}

				}

			}

			log.info("checkHeliport Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkHeliport {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void createDefaultNewCriteria(Integer pNewRecordCode) throws Exception {
		log.info("createDefaultNewCriteria Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String getNotTSelectId = """
					select select_by_id
							from   select_by_geographic_area
							where  navdb_id = ?
							union
							select select_by_id
							from   select_by_icao
							where  navdb_id = ?
							union
							select select_by_id
							from   select_by_area
							where  navdb_id = ?
					""";
			String getAirportSelectId = """
					select select_by_id
							from   select_by_airport_group
							where  navdb_id = ?
					""";
			String getHeliportSelectId = """
					select select_by_id
							from   select_by_heliport_group
							where  navdb_id = ?
					""";
			String vTypeInd = null;

			try {


				query = """
						select enroute_terminal_ind from record_type
							where record_type_code = ?
						""";
				rec = app.selectInto(query, pNewRecordCode);
				vTypeInd = rec.getString();
				if (!Objects.equals(nvl(vTypeInd, "C"), "C")) {

					createDatatypCriteria(-1, pNewRecordCode);
					List<DuRecord> records = app.executeQuery(getNotTSelectId, navdb.getNavdbId(), navdb.getNavdbId(),
							navdb.getNavdbId());
					for (DuRecord id_rec : records) {

						createDatatypCriteria(toInteger(id_rec.getObject("select_by_id")), pNewRecordCode);
					}
					if (Objects.equals(vTypeInd, "T")) {
						List<DuRecord> listOfRecords = app.executeQuery(getAirportSelectId, navdb.getNavdbId());
						for (DuRecord id_rec : listOfRecords) {

							createDatatypCriteria(toInteger(id_rec.getObject("select_by_id")), pNewRecordCode);
						}

					}

					else if (Objects.equals(vTypeInd, H)) {
						List<DuRecord> listOfRec = app.executeQuery(getHeliportSelectId, navdb.getNavdbId());
						for (DuRecord id_rec : listOfRec) {

							createDatatypCriteria(toInteger(id_rec.getObject("select_by_id")), pNewRecordCode);
						}

					}

				}

			}

			catch (Exception e) {

				coreptLib.dspMsg("Error" + OracleHelpers.getSQLerrm(e));

			}

			log.info("createDefaultNewCriteria Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing createDefaultNewCriteria {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void refreshAal() throws Exception {
		log.info("refreshAal Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer totalRows = getGroupRowCount(refreshAalGroups);
			String vIdent = null;
			String vIcao = null;
			Integer vExist = 0;
			Integer vCount = 0;

			try {
				if (totalRows > 0) {

					for (int j = 0; j < totalRows; j++) {
						vIdent = getGroupCharCell("refreshAalGroups.airportIdent", j);
						vIcao = getGroupCharCell("refreshAalGroups.airportIcao", j);

						query = """
								select count(*) from airport_airway_low
												where airport_ident = ?
												and airport_icao = ?
												and data_supplier = ?
								""";
						rec = app.selectInto(query, vIdent, vIcao, navdb.getDataSupplier());
						vExist = rec.getInt();
						if (Objects.equals(vExist, 0)) {

							app.executeProcedure(DbConstants.SCHEMA_CPTM, "ONE_AIRPORT_UPDATE", "TERMINAL_LOW_AREA",
									new ProcedureInParameter("p_supplier", navdb.getDataSupplier(),
											OracleTypes.VARCHAR),
									new ProcedureInParameter("p_airport_ident", vIdent, OracleTypes.VARCHAR),
									new ProcedureInParameter("p_airport_icao", vIcao, OracleTypes.VARCHAR),
									new ProcedureInParameter("p_nav_id", S, OracleTypes.VARCHAR),
									new ProcedureInParameter("p_cycle", global.getAalCycle(), OracleTypes.VARCHAR),
									new ProcedureInParameter("p_need_clean", N, OracleTypes.VARCHAR));

							vCount = vCount + 1;

						}

						else {
                            log.debug("Inside else for Vexist is not 0");
						}
						if (Objects.equals(j, totalRows)) {
							deleteGroupRow("refreshAalGroups", "ALL_ROWS");

						}

					}
					setItemProperty("display_item_block.refresh_airport_airway_low", FormConstant.VISIBLE,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("display_item_block.refresh_airport_airway_low", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

					if (vCount > 0) {

						coreptLib.dspMsg("Done with refreshing Airport Airway Low.");

					}

					else {

						coreptLib.dspMsg("ALL the airports already in AAL table, no refresh needed.");

					}

				}

			}

			catch (Exception e) {

				coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

			}

			log.info("refreshAal Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing refreshAal {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateAirportGroups(String pPort) throws Exception {
		log.info("populateAirportGroups Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			try {
				rg = findGroup("apr");
				if (!idNull(rg)) {
					deleteGroup(groups, "rg");

				}
				Integer queryCondition = toInteger(
						nameInWithIndex(this, pPort + "_to_select.select_by_id", system.getCursorRecordIndex()));
				EParam.DYNAMIC_QUERY_ONE.setValue(pPort);
				EParam.DYNAMIC_QUERY_TWO.setValue(navdb.getNavdbId());
				EParam.DYNAMIC_QUERY_THREE.setValue("""
						select group_name rlabel,to_char(SELECT_BY_ID) rvalue
						from select_by_%s_group
						where NAVDB_ID ='%s'
						minus
						select group_name rlabel,to_char(SELECT_BY_ID) rvalue
						from select_by_%s_group
						where select_by_id = %d
								""".formatted(EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(), queryCondition));
				rg = createGroupFromQuery("apr",EParam.DYNAMIC_QUERY_THREE.getValue() );
				nn = populateGroup(rg);
				groups.put("apr", rg);

				if (!Objects.equals(nn, 0)) {
					throw new NoDataFoundException("");

				}

				populateList("SELECT_FROM_GROUPS.SELECTED_GROUP", rg);
				selectFromGroups.setSelectedGroup(getGroupCharCell("apr.rvalue", 0));
			}

			catch (Exception e) {
				hideView("selectFromGroups");
				coreptLib.dspMsg("Cannot move the Group Since it has only one group");
				deleteGroupRow("deselectGroup", "ALL_ROWS");
				if (Objects.equals(pPort, "heliport")) {
					for(int i=0;i<heliportToSelect.size();i++) {
						if(Objects.equals(heliportToSelect.getRow(i).getChk(), Y)) {
							heliportToSelect.getRow(i).setChk(N);
						}
					}
					goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "GROUP_NAME");
					
				}

				else {
					controlBlock.setAptCnt(0);
					for(int i=0;i<airportToSelect.size();i++) {
						if(Objects.equals(airportToSelect.getRow(i).getChk(), Y)) {
							airportToSelect.getRow(i).setChk(N);
						}
					}
					goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "GROUP_NAME");

				}
				throw new FormTriggerFailureException();

			}

			log.info("populateAirportGroups Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateAirportGroups {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public String deleteGeneratedNavdb() throws Exception {
		log.info("deleteGeneratedNavdb Executing");
		String query = "";
		try {
			String getMrid = """
					SELECT EXECUTED_DMR_ROWS_ID
						FROM EXECUTED_DMR_ROWS
						WHERE	NAVDB_ID = ?
					""";
			String getReports = """
					SELECT REPORT_NUMBER
						FROM GENERATED_REPORTS
						WHERE NAVDB_ID = ?
					""";
			String pStatus = "OK";

			try {


				query = """
						 DELETE FROM DMR_RUNTIME_ERROR
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				query = """
						 DELETE FROM NON_DMR_ERROR
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				query = """
						 DELETE FROM PROCESS_EXECUTION_TIME
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				query = """
						 DELETE FROM DEBUG_MESSAGE
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				query = """
						 DELETE FROM SELECTED_RECORD_COUNT
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				List<DuRecord> records = app.executeQuery(getMrid, navdb.getNavdbId());
				for (DuRecord REC : records) {

					query = """
							 DELETE FROM MODIFIED_ROWS
							  	WHERE EXECUTED_DMR_ROWS_ID = ?
							""";
					app.executeNonQuery(query, REC.getObject());
				}

				query = """
						 DELETE FROM EXECUTED_DMR_ROWS
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				query = """
						 DELETE FROM EXECUTED_DMR
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				List<DuRecord> listOfRecords = app.executeQuery(getReports, navdb.getNavdbId());
				for (DuRecord r : listOfRecords) {

					query = """
							 DELETE FROM REPORTED_PROCEDURES
							  	WHERE REPORT_NUMBER = ?
							""";
					app.executeNonQuery(query, r.getObject("REPORT_NUMBER"));

					query = """
							 DELETE FROM REMOVED_COMPANY_ROUTES
							  	WHERE REPORT_NUMBER = ?
							""";
					app.executeNonQuery(query, r.getObject("REPORT_NUMBER"));

					query = """
							 DELETE FROM REMOVED_FIXES
							  	WHERE REPORT_NUMBER = ?
							""";
					app.executeNonQuery(query, r.getObject("REPORT_NUMBER"));

					query = """
							 DELETE FROM NAVDB_BINARY_SIZES
							  	WHERE REPORT_NUMBER = ?
							""";
					app.executeNonQuery(query, r.getObject("REPORT_NUMBER"));
				}

				query = """
						 DELETE FROM GENERATED_REPORTS
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				query = """
						 DELETE FROM GENERATED_NAVDB
						  WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());

				setApplicationProperty("cursorStyle", "DEFAULT");

				return pStatus;
			}

			catch (Exception e) {
				pStatus = substr(OracleHelpers.getSQLerrm(e), 1, 100);

				setApplicationProperty("cursorStyle", "DEFAULT");

				return pStatus;

			}

		} catch (Exception e) {
			log.error("Error while executing deleteGeneratedNavdb {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSubType(String pBlock) throws Exception {
		log.info("populateSubType Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vTypeCode = 0;
			Integer curs = 0;
			String getSubTypes = """
					select a.record_sub_type_code, a.record_sub_type_descr
						from record_sub_type a,FMS_data_sub_type b
						where a.record_type_code = b.record_type_code
						and a.record_sub_type_code = b.record_sub_type_code
						and a.Record_Type_Code = ?
						and b.selectable_ind = 'Y'
						and upper(b.FMS_ID) = upper(?)
						and nvl(a.PRECISION_IND,'-') = nvl(?,'-')
					""";

			String vValue = toString(nameIn(this, pBlock + ".real_value"));
			String vRealValue = null;
			String vInd = null;

			try {
				if (Objects.equals(pBlock, "APP_SUB_TYPE")) {

					query = """
							select value from selection_criteria_value
							 				where substr(value,1,1) = ?
							 				and select_by_id = ?
							 				and value_descr  = ?
							""";
					rec = app.selectInto(query, vValue, rules.getRow(system.getCursorRecordIndex()).getSelectById(),
							rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
					vRealValue = rec.getString();
					vInd = Y;

				}

				else {

					query = """
							select 'Y' from selection_criteria_value
							 				where value = ?
							 				and select_by_id = ?
							 				and value_descr  = ?
							""";
					rec = app.selectInto(query, vValue, rules.getRow(system.getCursorRecordIndex()).getSelectById(),
							rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
					vInd = rec.getString();

				}
			}

			catch (NoDataFoundException e) {
				vInd = N;

			}
			copyWithIndex(this,vInd, pBlock + ".chk",curs);


				if (like("%APPROACH%", navdb.getDataName())) {
					if (Arrays.asList(85, 86).contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
						vTypeCode = 90;

					}

					else if (Arrays.asList(317, 319).contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
						vTypeCode = 190;

					}

				}
				
			
			Integer cValueCursor = 0;
			if (Arrays.asList(85, 317).contains(rules.getRow(system.getCursorRecordIndex()).getCriteriaId())) {
				if (Objects.equals(appSubType.getRow(cValueCursor).getValue(), null)) {
					appSubType.getData().clear();
					appSubType.add(new AppSubType());
					appSubType.getRow(cValueCursor).setValue("------Precision Route Types------");
					appSubType.getRow(cValueCursor).setRealValue("precision");
					
				}
				
				setItemInstanceProperty("app_sub_type.value", toString(cValueCursor), "visual_attribute", "seperate");
				setItemInstanceProperty("app_sub_type.limit_priority", toString(cValueCursor), "visual_attribute", "seperate");
				cValueCursor++;
				
				
				List<DuRecord> records = app.executeQuery(getSubTypes, vTypeCode, navdb.getFmsId(), Y);

				int index = cValueCursor;
				for (DuRecord reco : records) {

					appSubType.add(new AppSubType());
					appSubType.getRow(index).setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));
					appSubType.getRow(index)
							.setValue(displayGuidelines(rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));

					appSubType.getRow(index).setChk(applyTheCheck("appSubType", index));

					index++;

					cValueCursor = index;

				}




				appSubType.add(new AppSubType());
				appSubType.getRow(cValueCursor).setValue("----Non Precision Route Types----");
				appSubType.getRow(cValueCursor).setRealValue("non-precision");

				Integer curCursor = cValueCursor + 1;
				setItemInstanceProperty("app_sub_type.value", toString(cValueCursor), "visual_attribute", "seperate");
				setItemInstanceProperty("app_sub_type.limit_priority", toString(cValueCursor), "visual_attribute",
						"seperate");
				
				
				
				List<DuRecord> listOfRecords = app.executeQuery(getSubTypes, vTypeCode, navdb.getFmsId(), 'N');
				int cursva = curCursor;
				for (DuRecord reco : listOfRecords) {
					appSubType.add(new AppSubType());
					appSubType.getRow(cursva).setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));

					appSubType.getRow(cursva)
							.setValue(displayGuidelines(rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));
					appSubType.getRow(cursva).setChk(applyTheCheck("appSubType", cursva));
					cursva++;
				}
				
				int priorityIndex=0;
				if(Objects.equals(appSubType.getRow(priorityIndex).getRealValue(), "precision")) {
					for(int j=priorityIndex+1;j<appSubType.size();j++) {
						try {
							query = """
							select value from selection_criteria_value
							 				where substr(value,1,1) = ?
							 				and select_by_id = ?
							 				and value_descr  = ?
							""";

							rec = app.selectInto(query, appSubType.getRow(j).getRealValue(),
							rules.getRow(system.getCursorRecordIndex()).getSelectById(),
							rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
							vRealValue = rec.getString();
							if(!Objects.equals(vRealValue,null)) {
								String limitPriority = substr(vRealValue, 2, 2);
								appSubType.getRow(priorityIndex).setLimitPriority(Objects.equals(limitPriority, "")?null:toInteger(limitPriority));
								break;
							}
						}
						catch(NoDataFoundException exp) {
							log.debug("No Data found");;
						}
				
					}
				}
				
				for(int i=0;i<appSubType.size();i++) {
					if(Objects.equals(appSubType.getRow(i).getRealValue(), "non-precision")) {
						for(int k=i+1;k<appSubType.size();k++) {
							try {
								query = """
								select value from selection_criteria_value
								 				where substr(value,1,1) = ?
								 				and select_by_id = ?
								 				and value_descr  = ?
								""";

								rec = app.selectInto(query, appSubType.getRow(k).getRealValue(),
								rules.getRow(system.getCursorRecordIndex()).getSelectById(),
								rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
								vRealValue = rec.getString();
								if(!Objects.equals(vRealValue,null)) {
									String limitPriority = substr(vRealValue, 2, 2);
									appSubType.getRow(i).setLimitPriority(Objects.equals(limitPriority, "")?null:toInteger(limitPriority));
									break;
								}
							}
							catch(NoDataFoundException exp) {
								log.debug("No Data found");
							}
						}
						break;
					}
				}
				
				

			}

			else {

					if (like("%APPROACH%", navdb.getDataName())
							&& Arrays.asList(86, 319).contains(toInteger(rules.getRow(system.getCursorRecordIndex()).getCriteriaId()))) {
						goBlock("record_sub_type", "");
						recordSubType.getData().clear();
						String [] valueArray = {"0","1","2","3","4","5","A","B","C","G","L","P",U};
						for(int i=0;i<valueArray.length;i++) {
							recordSubType.add(new RecordSubType());
							recordSubType.getRow(i).setRealValue(valueArray[i]);
							recordSubType.getRow(i).setValue(valueArray[i]);
							recordSubType.getRow(i).setChk(applyTheCheck("recordSubType", i));		
							}

					}

					else if (like("%AIRWAY%", navdb.getDataName())) {

						if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 23)) {
							goBlock("record_sub_type", "");
							recordSubType.getData().clear();
							String [] realValue = {H,"L","B"};
							String [] value = {"HIGH","LOW","BOTH"};
							for(int i=0;i<realValue.length;i++) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(i).setRealValue(realValue[i]);
								recordSubType.getRow(i).setValue(value[i]);
								recordSubType.getRow(i).setChk(applyTheCheck("recordSubType", i));
							}

						}

						else if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 22)) {
							goBlock("record_sub_type", "");
							recordSubType.getData().clear();
							String [] realValue = {"NONCOMPULSORY","GATEWAY","UNCHARTED"};
							String [] value = {"NONESSENTIAL/NONCOMPULSORY","GATEWAY","UNCHARTED"};
							
							
							for(int i=0;i<realValue.length;i++) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(i).setRealValue(realValue[i]);
								recordSubType.getRow(i).setValue(value[i]);
								recordSubType.getRow(i).setChk(applyTheCheck("recordSubType", i));
							}
							


						} else if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getCriteriaId(), 131)) {
							goBlock("record_sub_type", "");
							recordSubType.getData().clear();
							
							String [] realValue = {"A","C",D,H,O,"R",S,"T"};
							String [] value = {"A - AIRLINE AIRWAY","C - CONTROL","D - DIRECT ROUTE","H - HELICOPTER AIRWAYS","O - OFFICIALLY DESIGNATED AIRWAYS(EXCEPT RNAV)",
									"R - RNAV AIRWAYS","S - UNDESIGNATED ATS ROUTE","T - TACAN AIRWAY"};
							
							for(int i=0;i<value.length;i++) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(i).setRealValue(realValue[i]);
								recordSubType.getRow(i).setValue(value[i]);
								recordSubType.getRow(i).setChk(applyTheCheck("recordSubType", i));
								
							}						
						}

					} else if (like("%SID%", navdb.getDataName())) {
						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 98)) {

							goBlock("record_sub_type", "");
							List<DuRecord> records = app.executeQuery(getSubTypes, 91, navdb.getFmsId(), null);
							recordSubType = new DuBlock<>(new ArrayList<RecordSubType>());

							int val = 0;
							for (DuRecord reco : records) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(val)
										.setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));
								recordSubType.getRow(val).setValue(
										displaySidGuidelines(rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));

								recordSubType.getRow(val).setChk(applyTheCheck("recordSubType", val));

								val++;

							}

						}

					}

					else if (like("%STAR%", navdb.getDataName())) {
						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 99)) {
							goBlock("record_sub_type", "");
							List<DuRecord> records = app.executeQuery(getSubTypes, 92, navdb.getFmsId(), "");
							int val = 0;
							recordSubType.getData().clear();
							for (DuRecord reco : records) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(val)
										.setRealValue(rtrim(toString(reco.getObject("record_sub_type_descr"))));

								recordSubType.getRow(val).setValue(displayStarGuidelines(
										rtrim(toString(reco.getObject("RECORD_SUB_TYPE_DESCR")))));
								recordSubType.getRow(val).setChk(applyTheCheck("recordSubType", val));
								val++;
							}


						}

					}

					else if (like("%OBSTACLE%", navdb.getDataName())) {
						if (Objects.equals(rules.getRow(curs).getCriteriaId(), 602)) {
							goBlock("record_sub_type", "");
							String query1 = "select * from obs_type";
							List<DuRecord> records = app.executeQuery(query1);
							recordSubType.getData().clear();
							int val = 0;
							for (DuRecord reco : records) {
								recordSubType.add(new RecordSubType());
								recordSubType.getRow(val).setValue(toString(reco.getObject("obstacle_type")));
								recordSubType.getRow(val)
										.setRealValue(toString(reco.getObject("obstacle_type")));
								recordSubType.getRow(val).setChk(applyTheCheck("appSubType", val));
								val++;
							}

						}

					}
				

			}


			log.info("populateSubType Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSubType {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void setButtonProperty(String pButton) throws Exception {
		log.info("setButtonProperty Executing");
		try {
			List<String> vButton = new ArrayList<>();
			vButton.add(0, "CRITERIA");
			vButton.add(1, "CUSTOMER");
			vButton.add(2, "GEOGRAPHIC");
			vButton.add(3, "AREA");
			vButton.add(4, DbConstants.ICAO);
			vButton.add(5, "ARPTLSTS");
			vButton.add(6, "HELIPLSTS");
			vButton.add(7, "SELECTIONS");
			vButton.add(8, "COPY_NAVDB");
			vButton.add(9, "DMR_LIST");
			vButton.add(10, "VALIDATE");
			vButton.add(11, "REPORT");
			vButton.add(12, "CUSTOMER_INFO");
			vButton.add(13, "NAVDB_DFM");

			for (int i = 0; i < 14; i++) {
				if (Objects.equals(vButton.get(i), pButton)) {
					setItemProperty("control_block." + vButton.get(i), "visual_attribute", "GREY_OUT");

				}

				else {
					setItemProperty("control_block." + vButton.get(i), "visual_attribute", "DEFAULT");

				}

			}

			log.info("setButtonProperty Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setButtonProperty {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateFocal() throws Exception {
		log.info("populateFocal Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("focal");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			rg = createGroupFromQuery("focal",
					"""
						select  DECODE(LAST_NAME,NULL,FIRST_NAME,FIRST_NAME||' '||LAST_NAME ) rlabel,LOGON_ID rvalue
						from corept_user
						where first_name is not null
						and   logon_id in (select logon_id
						                   from corept_user_role
						                   where role_name in ('COREPT_PROD_DATA','COREPT_ADMIN','COREPT_VIEW_DATA','COREPT_PROD_EXEC'))
						                   and active_ind = 'Y'
								order by 1 asc""");
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				coreptLib.dspMsg("Populate group had error" + toChar(nn));

			}

			populateList("NAVDB.PRIMARY_FOCAL", rg);
			populateList("NAVDB.SECONDARY_FOCAL", rg);
			populateList("CONTROL_BLOCK.PRI_FOCAL", rg);
			populateList("CONTROL_BLOCK.SEC_FOCAL", rg);
			rg = findGroup("cmc_lst");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			rg = createGroupFromQuery("cmcLst",
					"select cmc_db_name rlabel,cmc_db_name rvalue from cmc_db_name order by 1");
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				coreptLib.dspMsg("Populate group had error" + toChar(nn));

			}

			populateList("NAVDB.CMC_CUSTOMER_NAME", rg);

			log.info("populateFocal Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateFocal {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void refreshGeoCount() throws Exception {
		log.info("refreshGeoCount Executing");
		try {
			Integer num = 0;

			for (int i = 0; i < geographicAreaPoint.size(); i++) {
				if (!Objects.equals(geographicAreaPoint.getRow(i).getRecordStatus(), "DELETED")) {
					num++;
				}
			}
			selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(num);

			log.info("refreshGeoCount Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing refreshGeoCount {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkProfile() throws Exception {
		log.info("checkProfile Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) 
					from flight_management_system 
					where fms_id = nvl(?,fms_id) --Fix SCR 6172- Ashish- 10-Aug
					   and binary_format_type like 'K%'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", "QUERYABLE", FormConstant.PROPERTY_TRUE);
				showLov("PROFILE_NUM");

			}

			else {
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("checkProfile Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkProfile {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableProfile() throws Exception {
		log.info("enableDisableProfile Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) from flight_management_system where fms_id = nvl(?,fms_id) --Fix SCR 6172- Ashish- 10-Aug
					    and binary_format_type like 'K%'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.profile_number", "QUERYABLE", FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableProfile Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableProfile {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableValerieInd() throws Exception {
		log.info("enableDisableValerieInd Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					select count(fms_id) from flight_management_system where fms_id = nvl(?,fms_id) --Fix SCR 6172- Ashish- 10-Aug
					    and binary_format_type like 'FD%'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.gen_valerie", "QUERYABLE", FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableValerieInd Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableValerieInd {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSuaRules(String pRecordType) throws Exception {
		log.info("populateSuaRules Executing");
		String query = "";
		DuRecord rec = null;
		try {

			if (Objects.equals(pRecordType, "UC")) {
				String[] lStringArray = { "A", "B", "C", D, "E", "F", "G", H, I, "J", "K", "L", "M", N, O,
						"P", "Q", "R", S, "T", U, "V", W, "X", Y, "Z", "1", "2", "3", "4" };
				SuaRules suaRulesSingleBlock = null;
				suaRules.getData().clear();
				for (int i = 0; i < lStringArray.length; i++) {
					suaRulesSingleBlock = new SuaRules();
					suaRulesSingleBlock.setType(lStringArray[i]);
					if (!Objects.equals(suaRulesSingleBlock.getType(), null)) {

						try {

							query = """
									select 'Y' from selection_criteria_value
									 				where value = ?
									 				and select_by_id = ?
									 				and value_descr = ?
									""";
							rec = app.selectInto(query, suaRulesSingleBlock.getType(),
									rules.getRow(system.getCursorRecordIndex()).getSelectById(),
									rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
							String chk = rec.getString();
							suaRulesSingleBlock.setChk(chk);
						}

						catch (NoDataFoundException e) {
							suaRulesSingleBlock.setChk(N);

						}

					}

					if (Objects.equals(suaRulesSingleBlock.getType(), "A")) {
						suaRulesSingleBlock.setAbbrevation("Airport Radar Service Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "B")) {
						suaRulesSingleBlock.setAbbrevation("Air Traffic Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "C")) {
						suaRulesSingleBlock.setAbbrevation("Class A Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), D)) {
						suaRulesSingleBlock.setAbbrevation("Class B Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "E")) {
						suaRulesSingleBlock.setAbbrevation("Class C Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "F")) {
						suaRulesSingleBlock.setAbbrevation("Class D Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "G")) {
						suaRulesSingleBlock.setAbbrevation("Class E Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), H)) {
						suaRulesSingleBlock.setAbbrevation("Class F Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), I)) {
						suaRulesSingleBlock.setAbbrevation("Class G Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "J")) {
						suaRulesSingleBlock.setAbbrevation("Multi-Class Airspace");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "K")) {
						suaRulesSingleBlock.setAbbrevation("Control Area (Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "L")) {
						suaRulesSingleBlock.setAbbrevation("Control Area (Non-Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "M")) {
						suaRulesSingleBlock.setAbbrevation("Control Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), N)) {
						suaRulesSingleBlock.setAbbrevation("Helicopter Protected Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), O)) {
						suaRulesSingleBlock.setAbbrevation("Helicopter Traffic Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "P")) {
						suaRulesSingleBlock.setAbbrevation("Military Air Traffic Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Q")) {
						suaRulesSingleBlock.setAbbrevation("Military Control Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "R")) {
						suaRulesSingleBlock.setAbbrevation("Military Terminal Area or Control");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), S)) {
						suaRulesSingleBlock.setAbbrevation("Oceanic Control Area (Non-Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "T")) {
						suaRulesSingleBlock.setAbbrevation("Radar (Zone or Area)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), U)) {
						suaRulesSingleBlock.setAbbrevation("Special Rules Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "V")) {
						suaRulesSingleBlock.setAbbrevation("Special Rules Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), W)) {
						suaRulesSingleBlock.setAbbrevation("Terminal Control Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "X")) {
						suaRulesSingleBlock.setAbbrevation("Terminal Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), Y)) {
						suaRulesSingleBlock.setAbbrevation("Terminal Radar Service Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Z")) {
						suaRulesSingleBlock.setAbbrevation("Traffic Information Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "1")) {
						suaRulesSingleBlock.setAbbrevation("Upper Control Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "2")) {
						suaRulesSingleBlock.setAbbrevation("Upper Control Area (Non-Airport)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "3")) {
						suaRulesSingleBlock.setAbbrevation("Positive Control Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "4")) {
						suaRulesSingleBlock.setAbbrevation("Traffic Information Area");

					}

					suaRules.add(suaRulesSingleBlock);

				}

			}

			if (Objects.equals(pRecordType, "UR")) {
				String[] lStringArray = { "A", "B", "C", D, "F", "G", "J", "K", "M", "P", "R", S, "T", U, W,
						"Z" };
				SuaRules suaRulesSingleBlock = null;
				suaRules.getData().clear();
				for (int i = 0; i < lStringArray.length; i++) {
					suaRulesSingleBlock = new SuaRules();
					suaRulesSingleBlock.setType(lStringArray[i]);
					if (!Objects.equals(suaRulesSingleBlock.getType(), null)) {

						try {

							query = """
									select 'Y' from selection_criteria_value
									 				where value = ?
									 				and select_by_id = ?
									 				and value_descr = ?
									""";
							rec = app.selectInto(query, suaRulesSingleBlock.getType(),
									rules.getRow(system.getCursorRecordIndex()).getSelectById(),
									rules.getRow(system.getCursorRecordIndex()).getSelectedRules());
							String chk = rec.getString();
							suaRulesSingleBlock.setChk(chk);
						}

						catch (NoDataFoundException e) {
							suaRulesSingleBlock.setChk(N);

						}

					}

					if (Objects.equals(suaRulesSingleBlock.getType(), "A")) {
						suaRulesSingleBlock.setAbbrevation("Alert Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "B")) {
						suaRulesSingleBlock.setAbbrevation("Buffer Zone");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "C")) {
						suaRulesSingleBlock.setAbbrevation("Caution Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), D)) {
						suaRulesSingleBlock.setAbbrevation("Danger Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "F")) {
						suaRulesSingleBlock.setAbbrevation("Cross Boarder Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "G")) {
						suaRulesSingleBlock.setAbbrevation("Temporary Reserve Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "J")) {
						suaRulesSingleBlock.setAbbrevation("Temporary Flight Restriction");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "K")) {
						suaRulesSingleBlock.setAbbrevation("Temporary Segregated Areas");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "M")) {
						suaRulesSingleBlock.setAbbrevation("Military Operations Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "P")) {
						suaRulesSingleBlock.setAbbrevation("Prohibited Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "R")) {
						suaRulesSingleBlock.setAbbrevation("Restricted Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), S)) {
						suaRulesSingleBlock.setAbbrevation("Advisory Area (Canada)");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "T")) {
						suaRulesSingleBlock.setAbbrevation("Training Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), U)) {
						suaRulesSingleBlock.setAbbrevation("Unspecified Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), W)) {
						suaRulesSingleBlock.setAbbrevation("Warning Area");

					}

					else if (Objects.equals(suaRulesSingleBlock.getType(), "Z")) {
						suaRulesSingleBlock.setAbbrevation("Air Defense Identification Zone");

					}
					suaRules.add(suaRulesSingleBlock);

				}

			}


			log.info("populateSuaRules Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSuaRules {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public Integer populateSuaRecords(Integer pNum, String pValue) throws Exception {
		log.info("populateSuaRecords Executing");
		String query = "";
		try {
			Integer vNum = pNum;

			vNum = vNum + 1;

			query = """
					 INSERT INTO selection_criteria_value
						                     (select_by_id,
										      value_seq,
											  value_descr,
						                      VALUE
						                     )
						              VALUES (?,
									    	   ?,
							   				?,
						                      ?
						                     )
					""";
			app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(), vNum,
					rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(), pValue);
			log.info("populateSuaRecords Executed Successfully");
			return vNum;


		} catch (Exception e) {
			log.error("Error while executing populateSuaRecords {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public String getIncExcInd(Integer pSelectById) throws Exception {
		log.info("getIncExcInd Executing");
		String query = "";
		DuRecord rec = null;
		try {

			try {

				query = """
						Select	Nvl(Include_Exclude_Ind,'I')
											from 		Select_By_Airport_Group
							        Where select_by_id = ?
						""";
				rec = app.selectInto(query, pSelectById);
				parameter.setIncExcInd(rec.getString());
			}

			catch (Exception e) {
				parameter.setIncExcInd(null);

			}
			log.info("getIncExcInd Executed Successfully");
			return (parameter.getIncExcInd());
			
		} catch (Exception e) {
			log.error("Error while executing getIncExcInd {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public String populateIatacode(String vIdent, String vIcao) throws Exception {
		log.info("populateIatacode Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vSiatacode = null;

			try {
				if (!Objects.equals(vIdent, null) && !Objects.equals(vIcao, null)) {

					query = """
							SELECT ata_iata_designator from pl_std_airport
								 WHERE data_supplier = ?
									 AND processing_cycle = ? 								--? --7607 --Madhu
									 AND airport_ident = ?
									 AND airport_icao  = ?
							""";
					rec = app.selectInto(query, navdb.getDataSupplier(), controlBlock.getProcCycle(), vIdent, vIcao);
					vSiatacode = rec.getString();

				}
				log.info("populateIatacode Executed Successfully");
				return vSiatacode;
			}

			catch (NoDataFoundException e) {

				return null;

			}

			catch (Exception e) {

				coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
				return null;

			}


		} catch (Exception e) {
			log.error("Error while executing populateIatacode {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkToCommit(String pActionType) throws Exception {
		log.info("checkToCommit Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vButton = 0;
			Integer vNallowUpdate = 0;
			String vCblock = system.getCursorBlock();
			String vCnavdbBlock = DbConstants.NAVDB;
			String fname = getApplicationProperty(CURRENT_FORM_NAME);
			Integer recCnt = 0;

			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				if (Objects.equals(pActionType, "COMMIT")) {

					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						vButton = displayAlert.moreButtons(S, "Save Record",
								"You have modified record(s). Select an option: ", "Save", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("commitAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("commitAlert", alertDetails.getCurrentAlert());
					}

					if (Objects.equals(parameter.getNewNavdb(), "Y") && Objects.equals(vButton, 1)) {
						if(Objects.equals(parameter.getOrcFlag(),"Y")) {
							populateOrc();
							parameter.setOrcFlag("N");
						}
						commitForm(this);
						String rowid = toString(nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						updateNewNavdbOrc();
						message("Record has been saved successfully");
						system.setFormStatus("NORMAL");

					}

					else {
						if (Objects.equals(vButton, 1)) {
							if (Objects.equals(parameter.getSeq(), Y)) {

								query = """
										SELECT count(*) from GEOGRAPHIC_AREA_POINT
										               	     			WHERE SELECT_BY_ID = ?
										""";
								rec = app.selectInto(query,
										geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSelectById());
								recCnt = rec.getInt();
								if (recCnt > 0) {

									resetGeoArea(
											geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSelectById());

								}

								else {

									resetNewGeoArea();

								}

							}

							vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
									toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
									toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
							if (Objects.equals(vNallowUpdate, 1)) {
								parameter.setUpdRec(N);

								if (Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex())
										.getRecordStatus(), "INSERT")) {
									genericNativeQueryHelper.commit(this, "selectByGeographicArea");
								}
								commitForm(this);
								String rowid = toString(nameIn(this, substr("navdb", 1, 15) + ".rowid"));
								sendUpdatedRowIdDetails(rowid);
								message("Record has been saved successfully");
								system.setFormStatus("NORMAL");
							}

							else {
								parameter.setUpdRec(Y);

								try {
									coreptLib.dspActionMsg(I, null, toInteger(nameIn(this, "global.dcr_number")),
											toInteger(global.getProcessingCycle()),
											toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
								}catch (RuntimeException exp) {
									log.error("Runtime Error while executing checkToCommit {}", exp.getMessage());

								} 
								catch (Exception exp) {
									log.error("Error while executing checkToCommit {}", exp.getMessage());

								}

							}

						}

						else if (Objects.equals(vButton, 2)) {
							throw new FormTriggerFailureException();

						}

					}

				}

				else if (Objects.equals(pActionType, "EXIT")) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						vButton = displayAlert.moreButtons(S, "Save Record",
								"You have modified record(s). Select an option: ", "Save", "Exit", "Cancel");
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("exitAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("exitAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 1)) {
						if (Objects.equals(parameter.getSeq(), Y)) {

							query = """
									SELECT count(*) from GEOGRAPHIC_AREA_POINT
									               	     			WHERE SELECT_BY_ID = ?
									""";
							rec = app.selectInto(query,
									geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSelectById());
							recCnt = rec.getInt();
							if (recCnt > 0) {

								resetGeoArea(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSelectById());

							}

							else {

								resetNewGeoArea();

							}

						}
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							exitForm();

						}

						else {
							parameter.setUpdRec(Y);
							coreptLib.dspActionMsg(I, null, toInteger(nameIn(this, "global.dcr_number")),
									toInteger(global.getProcessingCycle()),
									toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

						}

					}

					else if (Objects.equals(vButton, 2)) {
						exitForm();

					}

					else if (Objects.equals(vButton, 3)) {
                        log.debug("Inside else if for Vbutton is 3 check to commit ");

					}

				}

				else if (Objects.equals(pActionType, "UPDATE")) {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
						coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
								toInteger(global.getProcessingCycle()),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

					}

				}

				else if (Arrays.asList("ENTER_QUERY", "EXECUTE_QUERY").contains(pActionType)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						vButton = displayAlert.moreButtons(S, "Save Record",
								"You have modified record(s). Select an option: ", "Save", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("queryAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("queryAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 1)) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							if (Arrays
									.asList("selectByArea", "selectByIcao", "selectByGeographicArea",
											"selectByAirportGroup", "selectByHeliportGroup")
									.contains(system.getCursorBlock())) {
								if (Objects.equals(system.getCursorBlock(), "selectByArea")) {
									selectByAreaPostInsert();
								} else if (Objects.equals(system.getCursorBlock(), "selectByIcao")) {
									selectByIcaoPostInsert();
								}
							}

							commitForm(this);
							String rowid = toString(nameIn(this, substr("navdb", 1, 15) + ".rowid"));
							sendUpdatedRowIdDetails(rowid);
							system.setFormStatus("NORMAL");
							if (Objects.equals(pActionType, "ENTER_QUERY")
									&& !Objects.equals(system.getCursorBlock(), "navdb")) {
								displayAlert.oneButton("C", "Forms", "Record has been saved successfully");
							}

						}

						else {
							parameter.setUpdRec(Y);
							coreptLib.dspActionMsg(I, null, toInteger(nameIn(this, "global.dcr_number")),
									toInteger(global.getProcessingCycle()),
									toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

						}

					}

					else if (Objects.equals(vButton, 2)) {
						populateItems(fname);

					}

				}

			}

			log.info("checkToCommit Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkToCommit {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void checkDelRec(String pCblock, String pCrecStatus) throws Exception {
		log.info("checkDelRec Executing");

		try {
			Integer vNallowUpdate = 0;
			String vCnavdbBlock = DbConstants.NAVDB;

			if (!Arrays.asList("NEW", "INSERT").contains(pCrecStatus)) {
				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec(N);
					setBlockProperty(pCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				else {
					parameter.setUpdRec(Y);
					setBlockProperty(pCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					coreptLib.dspActionMsg(D, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			log.info("checkDelRec Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkDelRec {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void newRecInstance(String pCblock, String pCrecStatus) throws Exception {
		log.info("newRecInstance Executing");
		try {
			Integer vNallowUpdate = 0;
			String vCnavdbBlock = DbConstants.NAVDB;

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (!Arrays.asList("NEW", "INSERT").contains(pCrecStatus)) {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty(pCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty(pCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

					}

				}

			}

			log.info("newRecInstance Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing newRecInstance {}", e.getMessage());
			throw e;

		}
	}


	@Override
	public void populateDefaultIncExcInd(String piBlock, String piItem, Integer index) throws Exception {
		log.info("populateDefaultIncExcInd Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer lnRecordTypeCode = 0;
			String lcIncInd = null;
			String lcExcInd = null;
			String lcInd = null;

			try {

				query = """
						SELECT Record_Type_Code, Inc_Ind, Exc_Ind
						    from ( SELECT Record_Type_Code,
						                    MAX (
						                          CASE
						                              WHEN Include_Exclude_Ind = 'I' THEN
						                                    Include_Exclude_Ind
						                               END) Inc_Ind,
						                            MAX (
						                               CASE
						                                  WHEN Include_Exclude_Ind = 'X' THEN
						                                     Include_Exclude_Ind
						                               END) Exc_Ind
						                       FROM (SELECT Nsc.Record_Type_Code, Nsc.Include_Exclude_Ind
						                               FROM Navdb_Select_Criteria Nsc, Select_Criteria Sc
						                              WHERE     Nsc.Navdb_Id = ?
						                                    AND Nsc.Geo_Area_Id = -2
						                                    AND Nsc.Record_Type_Code = ?
						                                    AND Nsc.Record_Type_Code = Sc.Record_Type_Code
						                                    AND Sc.Processing_Order = 30
						                                    )
						          GROUP BY Record_Type_Code)
						""";
				rec = app.selectInto(query, navdb.getNavdbId(), datatypRad.getRow(index).getRecordTypeCode());
				lnRecordTypeCode = rec.getInt();
				lcIncInd = rec.getString();
				lcExcInd = rec.getString();
				if (!Objects.equals(lcIncInd, null) && !Objects.equals(lcExcInd, null)) {
					lcInd = "B";
				} else if (Objects.equals(lcIncInd, null)) {
					lcInd = "X";
				} else if (Objects.equals(lcExcInd, null)) {
					lcInd = I;
				}
				datatypRad.getRow(index).setIncExcIndicator(lcInd);
				log.debug(""+lnRecordTypeCode);	
				}

			catch (NoDataFoundException e) {
				copy(lcInd, ":" + piBlock + "." + piItem);
				datatypRad.getRow(index).setIncExcIndicator(lcInd);

			}
			catch (Exception e) {
				log.debug("Exception captured {}", e.getMessage());

			}

			log.info("populateDefaultIncExcInd Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDefaultIncExcInd {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void deleteOneOrc(String piScorte) throws Exception {
		log.info("deleteOneOrc Executing");
		try {
			Integer lnLength = 0;
			String lsCortes1 = "";
			String lsCortes2 = "";

			try {
				lnLength = instr("," + controlBlock.getOrcApplied() + ",", "," + piScorte + ",");
				if (lnLength > 0) {
					if (Objects.equals(lnLength, 1)) {
						lsCortes1 = "";

					}

					else {
						lsCortes1 = rtrim(ltrim(substr(controlBlock.getOrcApplied(), 1, lnLength - 2), ","), ",");

					}
					lsCortes2 = rtrim(ltrim(substr(controlBlock.getOrcApplied(), lnLength + 1 + length(piScorte)), ","),
							",");
					controlBlock.setOrcApplied(rtrim(ltrim(lsCortes1 + "," + lsCortes2, ", "), ","));

				}

			}

			catch (Exception e) {

				coreptLib.dspMsg("Error while clearing the list-" + OracleHelpers.getSQLerrm(e));
				throw new FormTriggerFailureException();

			}

			log.info("deleteOneOrc Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing deleteOneOrc {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateOrcApplied() throws Exception {
		log.info("populateOrcApplied Executing");
		try {
			String getOrc = """
					SELECT F_ORC.DMR_ID,
								     F_ORC.DEFAULT_APPLY_IND,
								     F_ORC.FMS_ID,
								     NVL (N_ORC.APPLY_IND, 'N') APPLY_IND,
								     DMR_DESCR,
								     N_ORC.UPDATE_DCR_NUMBER											-- Fix - SCR 6946.00 - Eswar KC - 09-Jun-2016
							FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC, NAVDB_ORC N_ORC
							WHERE     F_ORC.FMS_ID = ?
							       AND F_ORC.DMR_ID = ORC.DMR_ID
							       AND N_ORC.ORC_ID = ORC.DMR_ID
							       AND N_ORC.NAVDB_ID = ?
							       AND APPLY_IND = 'Y'													-- SCR 5441 -- SHRIKANT K
							       AND F_ORC.DM_ORC_IND = 'ORC' 										--- 7773
							UNION
							SELECT F_ORC.DMR_ID,
							       F_ORC.DEFAULT_APPLY_IND,
							       F_ORC.FMS_ID,
							       'N' APPLY_IND,
							       ORC.DMR_DESCR,
							       NULL																	-- Fix - SCR 6946.00 - Eswar KC - 09-Jun-2016
							  FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
							 WHERE F_ORC.FMS_ID IN (SELECT FMS_ID
							                              FROM NAVDB
							                             WHERE NAVDB_ID = ?)
							       AND F_ORC.DMR_ID NOT IN (SELECT ORC_ID
							                                  FROM NAVDB_ORC
							                                 WHERE NAVDB_ID = ?)
							       AND ORC.DMR_ID = F_ORC.DMR_ID
							       AND F_ORC.DM_ORC_IND = 'ORC' 										-- 7773
							ORDER BY 1
					""";

			controlBlock.setOrcApplied(null);
			goBlock("NAVDB_ORC", "");
			List<DuRecord> records = app.executeQuery(getOrc, navdb.getFmsId(), navdb.getNavdbId(), navdb.getNavdbId(),
					navdb.getNavdbId());

			navdbOrc.getData().clear();
			NavdbOrc navdbOrcSingleBlock = null;
			for (DuRecord REC : records) {
				navdbOrcSingleBlock = new NavdbOrc();
				navdbOrcSingleBlock.setOrcId(toString(REC.getObject("DMR_ID")));
				navdbOrcSingleBlock.setOrcDescr(toString(REC.getObject("DMR_DESCR")));
				navdbOrcSingleBlock.setApplyInd(toString(REC.getObject("APPLY_IND")));
				navdbOrcSingleBlock.setUpdateDcrNumber(REC.getObject("UPDATE_DCR_NUMBER") == null ? null
						: toInteger(REC.getObject("UPDATE_DCR_NUMBER")));
				navdbOrcSingleBlock.setApplyIndD(toString(REC.getObject("DEFAULT_APPLY_IND")));
				navdbOrc.add(navdbOrcSingleBlock);
			}

			for (int i = 0; i < records.size(); i++) {
				if (Objects.equals(navdbOrc.getRow(i).getApplyInd(), Y)) {
					if (Objects.equals(controlBlock.getOrcApplied(), null)) {
						controlBlock.setOrcApplied(navdbOrc.getRow(i).getOrcId());
					} else {
						controlBlock.setOrcApplied(controlBlock.getOrcApplied() + "," + navdbOrc.getRow(i).getOrcId());
					}

				}
			}

			controlBlock.setOrcApplied(ltrim(rtrim(controlBlock.getOrcApplied(), ","), ","));


			log.info("populateOrcApplied Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateOrcApplied {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void setFmsId() throws Exception {
		log.info("setFmsId Executing");
		String query = "";
		DuRecord rec = null;
		try {

			query = """
					SELECT NVL(Instance_Type,'$') from system_software_identification
					""";
			rec = app.selectInto(query);
			parameter.setDbInstName(rec.getString());

			if (Objects.equals(upper(parameter.getDbInstName()), "ENGR")) {
				showLov("FMS_ID_FOR_OTHERS");
			}

			else {
				showLov("FMSID");

			}

			log.info("setFmsId Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing setFmsId {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void updateNavdbOrc() throws Exception {
		log.info("updateNavdbOrc Executing");
		String query = "";
		try {
			String fmsOrcCur = """
					SELECT F_ORC.DMR_ID,
								F_ORC.DEFAULT_APPLY_IND,
								F_ORC.FMS_ID,
								DMR_DESCR
							FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
							WHERE F_ORC.FMS_ID = ?
							AND F_ORC.DMR_ID = ORC.DMR_ID
							AND F_ORC.DEFAULT_APPLY_IND = 'Y'  									          -- SCR 5441 -- SHRIKANT K
							AND F_ORC.DM_ORC_IND = 'ORC'
					""";
			String navdbOrcCur = """
					SELECT orc_id
							FROM navdb_orc
							WHERE navdb_id = ?
					""";
			String newOrcCur = """
					SELECT dmr_id, default_apply_ind
							FROM fms_dmr
						WHERE DM_ORC_IND =  'ORC' 												-- 7773	-- SHRIKANT K -- 09-OCT-2018
						  AND fms_id = ?
							AND dmr_id NOT IN (
									  SELECT orc_id  																			    -- SCR 5441 -- SHRIKANT K
										FROM navdb_orc																			    -- SCR 5441 -- SHRIKANT K
										WHERE navdb_id = ? AND DM_ORC_IND = 'ORC' 													-- SCR 5441 -- SHRIKANT K
									  )
					""";
			List<Object> orcTab = new ArrayList<>();
			Integer iIdx = 0;
			String nOrc = null;
			String lsSqlerrm = null;
			Integer lsSqlcode = 0;

			try {
				List<DuRecord> listOfRecords = app.executeQuery(navdbOrcCur, navdb.getNavdbId());
				for (DuRecord r : listOfRecords) {
					nOrc = toString(r.getObject());
					List<DuRecord> records = app.executeQuery(fmsOrcCur, navdb.getFmsId());
					for (DuRecord innerRecord : records) {
						if (Objects.equals(nOrc, toString(innerRecord.getObject("orc_id")))) {
							orcTab.add(iIdx, innerRecord.getObject("orc_id"));
							iIdx = iIdx + 1;

						}

					}

				}


				query = """
						 DELETE FROM NAVDB_ORC
						  	WHERE NAVDB_ID = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId());
				if (orcTab.size() > 0) {
					for (int i = 0; i < orcTab.size(); i++) {

						query = """
								 INSERT INTO navdb_orc VALUES ( ?, ?, NULL, ?, USER, SYSDATE, 'Y')
								""";
						app.executeNonQuery(query, orcTab.get(i), navdb.getNavdbId(), global.getDcrNumber());
					}
					List<DuRecord> records = app.executeQuery(newOrcCur, navdb.getFmsId(), navdb.getOldFmsId(),
							navdb.getNavdbId());
					for (DuRecord reco : records) {
						if (Objects.equals(toString(reco.getObject("default_apply_ind")), Y)) {

							query = """
									 INSERT INTO navdb_orc VALUES (?, ?, NULL, ?, USER, SYSDATE, 'Y')
									""";
							app.executeNonQuery(query, reco.getObject("dmr_id"), navdb.getNavdbId(),
									global.getDcrNumber());
						}

					}

				}

				else {
					List<DuRecord> records = app.executeQuery(fmsOrcCur, navdb.getFmsId());
					for (DuRecord reco : records) {
						if (Objects.equals(toString(reco.getObject("default_apply_ind")), Y)) {

							query = """
									 INSERT INTO navdb_orc VALUES (?, ?, NULL, ?, USER, SYSDATE, 'Y')
									""";
							app.executeNonQuery(query, reco.getObject("dmr_id"), navdb.getNavdbId(),
									global.getDcrNumber());
						}

					}

				}

			}

			catch (Exception e) {

				lsSqlerrm = OracleHelpers.getSQLerrm(e);
				lsSqlcode = OracleHelpers.getSQLcode(e);

				coreptLib.dspMsg("ORC Creation Failed due to" + lsSqlerrm + " : " + lsSqlcode);

			}

			log.info("updateNavdbOrc Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing updateNavdbOrc {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void saveIncExcList() throws Exception {
		log.info("saveIncExcList Executing");
		try {
			Integer trgRecord = 0;
			Integer curRecord = 0;
			String vValue1 = null;
			String vValue2 = null;
			String vValue3 = null;
			String vValue4 = null;
			String vValue5 = null;
			String vValue6 = null;
			String vValue7 = null;
			Integer noOfVals = 0;
			Integer recCount = 0;
			String vValue = "";
			StringBuilder vValueBuilder = new StringBuilder();

			for (int i = 0; i < lists.size(); i++) {
				for (int j=1; j <=datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo(); j++) {
					if (!Objects.equals(nameInWithIndex(this, "lists.value" + toChar(j),i), null)) {
						String value = "." + nameInWithIndex(this, "lists.value" + toChar(j),i);
						vValueBuilder.append(value);
					}
				}
			}
			vValue= vValueBuilder.toString();
			
			int i = 0;
			
			if (!Objects.equals(vValue, "")) {

				for (int j=0;j<lists.size();j++) {
					recCount = recCount + 1;
					checkListsRecVal(j);

				}
				
				trgRecord = system.getCursorRecordIndex();
				vValue1 = lists.getRow(system.getCursorRecordIndex()).getValue1();
				vValue2 = nvl(lists.getRow(system.getCursorRecordIndex()).getValue2(), "");
				vValue3 = nvl(lists.getRow(system.getCursorRecordIndex()).getValue3(), "");
				vValue4 = nvl(lists.getRow(system.getCursorRecordIndex()).getValue4(), "");
				vValue5 = nvl(lists.getRow(system.getCursorRecordIndex()).getValue5(), "");
				vValue6 = nvl(lists.getRow(system.getCursorRecordIndex()).getValue6(), "");
				vValue7 = nvl(lists.getRow(system.getCursorRecordIndex()).getValue7(), "");
				noOfVals = datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo();
				parameter.setDupListsRec(0);

				for (i = 0; i < lists.size(); i++) {
					if (!Objects.equals(trgRecord, i)) {
						curRecord = toInteger(system.getCursorRecordIndex());
						log.debug(""+curRecord);
						if (Objects.equals(noOfVals, 2)) {
							if (like(vValue1, lists.getRow(i).getValue1())
									|| like(lists.getRow(i).getValue1(), vValue1)) {
								if (like(vValue2, lists.getRow(i).getValue2())
										|| like(lists.getRow(i).getValue2(), vValue2)) {

									displayAlert.oneButton(S, "Duplicate Record",
											"Modify or Delete the Duplicate Record(s)." + " Record "
													+ lists.getRow(i).getValue1() + "," + lists.getRow(i).getValue2()
													+ "\nCompared with " + vValue1 + ","+vValue2 + ".");
									parameter.setDupListsRec(1);

									goRecord("lists", trgRecord);
									throw new FormTriggerFailureException();

								}

								else {
									parameter.setDupListsRec(0);

								}

							}

							else {
								parameter.setDupListsRec(0);

							}

						}

						else if (Objects.equals(noOfVals, 3)) {
							if (like(vValue1, lists.getRow(i).getValue1())
									|| like(lists.getRow(i).getValue1(), vValue1)) {
								if (like(vValue2, lists.getRow(i).getValue2())
										|| like(lists.getRow(i).getValue2(), vValue2)) {
									if (like(vValue3, lists.getRow(i).getValue3())
											|| like(lists.getRow(i).getValue3(), vValue3)) {
										displayAlert.oneButton(S, "Duplicate Record",
												"Modify or Delete the Duplicate Record(s)." + "Record "
														+ lists.getRow(i).getValue1() + ",\n"
														+ lists.getRow(i).getValue2() + ","
														+ lists.getRow(i).getValue3() + " Compared with " + vValue1 + ","
														+ vValue2 + "," + vValue3 + ".");
										parameter.setDupListsRec(1);

										goRecord(system.getCursorBlock(), trgRecord);
										throw new FormTriggerFailureException();

									}

									else {
										parameter.setDupListsRec(0);

									}

								}

								else {
									parameter.setDupListsRec(0);

								}

							}

							else {
								parameter.setDupListsRec(0);

							}

						}

						else if (Objects.equals(noOfVals, 4)) {
							if (like(vValue1, lists.getRow(i).getValue1())
									|| like(lists.getRow(i).getValue1(), vValue1)) {
								if (like(vValue2, lists.getRow(i).getValue2())
										|| like(lists.getRow(i).getValue2(), vValue2)) {
									if (like(nvl(vValue3, "$"), nvl(lists.getRow(i).getValue3(), "$"))
											|| like(nvl(lists.getRow(i).getValue3(), "$"), nvl(vValue3, "$"))) {
										if (like(nvl(vValue4, "$"), nvl(lists.getRow(i).getValue4(), "$"))
												|| like(nvl(lists.getRow(i).getValue4(), "$"), nvl(vValue4, "$"))) {

											displayAlert.oneButton(S, "Duplicate Record",
													"Modify or Delete the Duplicate Record(s)." + "Record "
															+ lists.getRow(i).getValue1() + ","
															+ lists.getRow(i).getValue2() + ",\n"
															+ lists.getRow(i).getValue3() + ","
															+ lists.getRow(i).getValue4() + " Compared with " + vValue1
															+ "," + vValue2 + "," + vValue3 + "," + vValue4 + ".");
											parameter.setDupListsRec(1);

											goRecord(system.getCursorBlock(), trgRecord);
											throw new FormTriggerFailureException();

										}

										else {
											parameter.setDupListsRec(0);

										}

									}

									else {
										parameter.setDupListsRec(0);

									}

								}

								else {
									parameter.setDupListsRec(0);

								}

							}

							else {
								parameter.setDupListsRec(0);

							}

						}

						else if (Objects.equals(noOfVals, 5)) {
							if (like(vValue1, lists.getRow(i).getValue1())
									|| like(lists.getRow(i).getValue1(), vValue1)) {
								if (like(vValue2, lists.getRow(i).getValue2())
										|| like(lists.getRow(i).getValue2(), vValue2)) {
									if (like(vValue3, lists.getRow(i).getValue3())
											|| like(lists.getRow(i).getValue3(), vValue3)) {
										if (like(vValue4, lists.getRow(i).getValue4())
												|| like(lists.getRow(i).getValue4(), vValue4)) {
											if (like(vValue5, lists.getRow(i).getValue5())
													|| like(lists.getRow(i).getValue5(), vValue5)) {

												displayAlert.oneButton(S, "Duplicate Record",
														"Modify or Delete the Duplicate Record(s)." + "Record "
																+ lists.getRow(i).getValue1() + ","
																+ lists.getRow(i).getValue2() + ","
																+ lists.getRow(i).getValue3() + ","
																+ lists.getRow(i).getValue4() + ","
																+ lists.getRow(i).getValue5() + " Compared with "
																+ vValue1 + "," + vValue2 + "," + vValue3 + ","
																+ vValue4 + "," + vValue5 + ".");

												parameter.setDupListsRec(1);

												goRecord(system.getCursorBlock(), trgRecord);
												throw new FormTriggerFailureException();

											}

											else {
												parameter.setDupListsRec(0);

											}

										}

										else {
											parameter.setDupListsRec(0);

										}

									}

									else {
										parameter.setDupListsRec(0);

									}

								}

								else {
									parameter.setDupListsRec(0);

								}

							}

							else {
								parameter.setDupListsRec(0);

							}

						}

						else if (Objects.equals(noOfVals, 6)) {
							if (like(vValue1, lists.getRow(i).getValue1())
									|| like(lists.getRow(i).getValue1(), vValue1)) {
								if (like(vValue2, lists.getRow(i).getValue2())
										|| like(lists.getRow(i).getValue2(), vValue2)) {
									if (like(vValue3, lists.getRow(i).getValue3())
											|| like(lists.getRow(i).getValue3(), vValue3)) {
										if (like(vValue4, lists.getRow(i).getValue4())
												|| like(lists.getRow(i).getValue4(), vValue4)) {
											if (like(vValue5, lists.getRow(i).getValue5())
													|| like(lists.getRow(i).getValue5(), vValue5)) {
												if (like(vValue6, lists.getRow(i).getValue6())
														|| like(lists.getRow(i).getValue6(), vValue6)) {

													displayAlert.oneButton(S, "Duplicate Record",
															"Modify or Delete the Duplicate Record(s)." + "Record "
																	+ lists.getRow(i).getValue1() + ","
																	+ lists.getRow(i).getValue2() + ","
																	+ lists.getRow(i).getValue3() + ","
																	+ lists.getRow(i).getValue4() + ","
																	+ lists.getRow(i).getValue5() + ","
																	+ lists.getRow(i).getValue6() + " Compared with "
																	+ vValue1 + "," + vValue2 + "," + vValue3 + ","
																	+ vValue4 + "," + vValue5 + "," + vValue6 + ".");

													parameter.setDupListsRec(1);

													goRecord(system.getCursorBlock(), trgRecord);
													throw new FormTriggerFailureException();

												}

												else {
													parameter.setDupListsRec(0);

												}

											}

											else {
												parameter.setDupListsRec(0);

											}

										}

										else {
											parameter.setDupListsRec(0);

										}

									}

									else {
										parameter.setDupListsRec(0);

									}

								}

								else {
									parameter.setDupListsRec(0);

								}

							}

							else {
								parameter.setDupListsRec(0);

							}

						}

						else if (Objects.equals(noOfVals, 7)) {
							if (like(vValue1, lists.getRow(i).getValue1())
									|| like(lists.getRow(i).getValue1(), vValue1)) {
								if (like(vValue2, lists.getRow(i).getValue2())
										|| like(lists.getRow(i).getValue2(), vValue2)) {
									if (like(vValue3, lists.getRow(i).getValue3())
											|| like(lists.getRow(i).getValue3(), vValue3)) {
										if (like(vValue4, lists.getRow(i).getValue4())
												|| like(lists.getRow(i).getValue4(), vValue4)) {
											if (like(vValue5, lists.getRow(i).getValue5())
													|| like(lists.getRow(i).getValue5(), vValue5)) {
												if (like(vValue6, lists.getRow(i).getValue6())
														|| like(lists.getRow(i).getValue6(), vValue6)) {
													if (like(vValue7, lists.getRow(i).getValue7())
															|| like(lists.getRow(i).getValue7(), vValue7)) {

														displayAlert.oneButton(S, "Duplicate Record",
																"Modify or Delete the Duplicate Record(s)." + "Record "
																		+ lists.getRow(i).getValue1() + ",\n"
																		+ lists.getRow(i).getValue2() + ","
																		+ lists.getRow(i).getValue3() + ","
																		+ lists.getRow(i).getValue4() + ","
																		+ lists.getRow(i).getValue5() + ","
																		+ lists.getRow(i).getValue6() + ","
																		+ lists.getRow(i).getValue7()
																		+ " Compared with " + vValue1 + "," + vValue2
																		+ "," + vValue3 + "," + vValue4 + "," + vValue5
																		+ "," + vValue6 + "," + vValue7 + ".");

														parameter.setDupListsRec(1);

														goRecord(system.getCursorBlock(), trgRecord);
														throw new FormTriggerFailureException();

													}

													else {
														parameter.setDupListsRec(0);

													}

												}

												else {
													parameter.setDupListsRec(0);

												}

											}

											else {
												parameter.setDupListsRec(0);

											}

										}

										else {
											parameter.setDupListsRec(0);

										}

									}

									else {
										parameter.setDupListsRec(0);

									}

								}

								else {
									parameter.setDupListsRec(0);

								}

							}

							else {
								parameter.setDupListsRec(0);

							}

						}

					}

					if (i == lists.size() - 1 && trgRecord < recCount
							&& Objects.equals(parameter.getDupListsRec(), 0)) {
						trgRecord = trgRecord + 1;
						vValue1 = lists.getRow(i).getValue1();
						vValue2 = nvl(lists.getRow(i).getValue2(), "");
						vValue3 = nvl(lists.getRow(i).getValue3(), "");
						vValue4 = nvl(lists.getRow(i).getValue4(), "");
						vValue5 = nvl(lists.getRow(i).getValue5(), "");
						vValue6 = nvl(lists.getRow(i).getValue6(), "");
						vValue7 = nvl(lists.getRow(i).getValue7(), "");

					}

					else if (Objects.equals(system.getLastRecord(), false)
							&& Objects.equals(parameter.getDupListsRec(), 0)) {
						nextRecord("");

					}

					else if (Objects.equals(system.getLastRecord(), true) && Objects.equals(trgRecord, recCount)) {
						break;

					}

					else if (Objects.equals(parameter.getDupListsRec(), 1)) {
						break;

					}

				}
				if (Objects.equals(parameter.getDupListsRec(), 1)) {

					goRecord("lists", system.getCursorRecordIndex());
					throw new FormTriggerFailureException();

				}

			}

			else {
				parameter.setDupListsRec(0);

			}

			log.info("saveIncExcList Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing saveIncExcList {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateGenCriteriaValue(String pBlock) throws Exception {
		log.info("populateGenCriteriaValue Executing");
		try {


			String[] realValueArray = { "A", "B", "C", D, "E", "F", "G", I, "J", "K", "L", H, "M", N, O, "P",
					"Q", "R", S, "T", U, "V", W, "X", Y, "-" };
			String[] valueArray = { "A - CATEGORY A ONLY", "B - CATEGORY B ONLY", "C - CATEGORY C ONLY",
					"D - CATEGORY D ONLY", "E - CATEGORY E ONLY", "F - CATEGORY A, B ONLY", "G - CATEGORY C, D ONLY",
					"I - CATEGORY A, B, C", "J - CATEGORY A, B, C, D", "K - CATEGORY A, B, C, D, E",
					"L - CATEGORY D, E ONLY", "H - CATEGORY H (HELI) ONLY", "M - CATEGORY B, C ONLY",
					"N - CATEGORY C, D, E ONLY", "O - CATEGORY B, C, D, E ONLY", "P - NOT LIMITED",
					"Q - TURBOJET AND TURBOPROP ONLY", "R - TURBOJET ONLY", "S - TURBOPROP ONLY", "T - PROP ONLY",
					"U - TURBOPROP AND PROP", "V - NON-TURBOJETS ONLY", "W - JETS ONLY", "X - NON-JETS ONLY",
					"Y - PISTONS ONLY", "BLANK(-) CATEGORY NOT PROVIDED" };

			genCriteriaSubType.getData().clear();
			GenCriteriaSubType genCriteria = null;
			for (int i = 0; i < valueArray.length; i++) {
				genCriteria = new GenCriteriaSubType();
				genCriteria.setRealValue(realValueArray[i]);
				genCriteria.setValue(valueArray[i]);
				genCriteriaSubType.add(genCriteria);
			}
			for (int i = 0; i < valueArray.length; i++) {
				genCriteriaSubType.getRow(i).setChk(applyTheCheck("genCriteriaSubType", i));
			}

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				setItemProperty("gen_criteria_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("gen_criteria_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("gen_criteria_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("gen_criteria_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("gen_criteria_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("gen_criteria_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}
			
			controlBlock.setGenCriteriaCan("GENERAL_CRITERIA");

			log.info("populateGenCriteriaValue Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateGenCriteriaValue {}", e.getMessage());
			throw e;

		}
	}

	private String displayGuidelines(String pValue) {

		if (Objects.equals(pValue, "A")) {
			return "A - APPROACH TRANSITION";

		}

		else if (Objects.equals(pValue, "B")) {
			return "B - LOC/BACKCOURSE";

		}

		else if (Objects.equals(pValue, D)) {
			return "D - VORDME";

		}

		else if (Objects.equals(pValue, "F")) {
			return "F - FMS";

		}

		else if (Objects.equals(pValue, "G")) {
			return "G - IGS";

		}

		else if (Objects.equals(pValue, I)) {
			return "I - ILS";

		}

		else if (Objects.equals(pValue, "J")) {
			return "J - GLS";

		}

		else if (Objects.equals(pValue, "L")) {
			return "L - LOC";

		}

		else if (Objects.equals(pValue, "M")) {
			return "M - MLS";

		}

		else if (Objects.equals(pValue, N)) {
			return "N - NDB";

		}

		else if (Objects.equals(pValue, "P")) {
			return "P - GPS";

		}

		else if (Objects.equals(pValue, "Q")) {
			return "Q - NDB+DME";

		}

		else if (Objects.equals(pValue, "R")) {
			return "R - RNAV";

		}

		else if (Objects.equals(pValue, S)) {
			return "S - VORDME/VORTAC";

		}

		else if (Objects.equals(pValue, "T")) {
			return "T - TACAN";

		}

		else if (Objects.equals(pValue, U)) {
			return "U - SDF";

		}

		else if (Objects.equals(pValue, "V")) {
			return "V - VOR";

		}

		else if (Objects.equals(pValue, W)) {
			return "W - MLS, TYPE A";

		}

		else if (Objects.equals(pValue, "X")) {
			return "X - LDA";

		}

		else if (Objects.equals(pValue, Y)) {
			return "Y - MLS, TYPE B AND C";

		}

		else if (Objects.equals(pValue, "Z")) {
			return "Z - MISSED APPROACH";

		}

		else {
			return pValue;

		}

	}

	private String displaySidGuidelines(String pValue) {

		if (Objects.equals(pValue, "1")) {
			return "1 - SID Runway Transition";

		}

		else if (Objects.equals(pValue, "2")) {
			return "2 - SID Common";

		}

		else if (Objects.equals(pValue, "3")) {
			return "3 - SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "4")) {
			return "4 - RNAV SID Runway Transition";

		}

		else if (Objects.equals(pValue, "5")) {
			return "5 - RNAV SID Common";

		}

		else if (Objects.equals(pValue, "6")) {
			return "6 - RNAV SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "F")) {
			return "F - FMS SID Runway Transition";

		}

		else if (Objects.equals(pValue, "M")) {
			return "M - FMS SID Common";

		}

		else if (Objects.equals(pValue, S)) {
			return "S - FMS SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "T")) {
			return "T - Vector SID Runway Transition";

		}

		else if (Objects.equals(pValue, "V")) {
			return "V - Vector SID Enroute Transition";

		}

		else if (Objects.equals(pValue, "0")) {
			return "0 - SID Engine Out";

		}

		else {
			return pValue;

		}

	}

	private String displayStarGuidelines(String pValue) {

		if (Objects.equals(pValue, "1")) {
			return "1 - STAR Enroute Transition";

		}

		else if (Objects.equals(pValue, "2")) {
			return "2 - STAR Common";

		}

		else if (Objects.equals(pValue, "3")) {
			return "3 - STAR Runway Transition";

		}

		else if (Objects.equals(pValue, "4")) {
			return "4 - RNAV STAR Enroute Transition";

		}

		else if (Objects.equals(pValue, "5")) {
			return "5 - RNAV STAR Common";

		}

		else if (Objects.equals(pValue, "6")) {
			return "6 - RNAV STAR Runway Transition";

		}

		else if (Objects.equals(pValue, "7")) {
			return "7 - Profile Descent Enroute Transition";

		}

		else if (Objects.equals(pValue, "8")) {
			return "8 - Profile Descent Common";

		}

		else if (Objects.equals(pValue, "9")) {
			return "9 - Profile Descent Runway Transition";

		}

		else if (Objects.equals(pValue, "F")) {
			return "F - FMS STAR Enroute Transition";

		}

		else if (Objects.equals(pValue, "M")) {
			return "M - FMS STAR Common";

		}

		else if (Objects.equals(pValue, S)) {
			return "S - FMS STAR Runway Transition";

		}

		else {
			return pValue;

		}

	}
	
	//added for maintaining change index
	private String applyTheCheck(String pBlock, int index) throws Exception {
		String vValue = toString(nameInWithIndex(this, pBlock + ".real_value",index));
		String vRealValue;
		String vInd = null;
		String query = "";
		DuRecord rec = null;
		try {
			if (Objects.equals(pBlock, "appSubType")) {
				
				
				query = """
						select value from selection_criteria_value
						 				where substr(value,1,1) = ?
						 				and select_by_id = ?
						 				and value_descr  = ?
						""";
				rec = app.selectInto(query, vValue, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
				vRealValue = rec.getString();
				vInd = Y;
				String limitPriority = substr(vRealValue, 4);
				appSubType.getRow(index).setLimitPriority(Objects.equals(limitPriority, "")?null:toInteger(limitPriority));
				if (Objects.equals(appSubType.getRow(index).getLimitPriority(), 0)) {
					appSubType.getRow(index).setLimitPriority(null);
				}
				return vInd;
			}

			else if (Objects.equals(pBlock, "genCriteriaSubType")) {
				query = """
						select 'Y' from navdb_general_criteria_value
						where value = ?
						and criteria_id = ?
						and navdb_id = ?
						""";
				rec = app.selectInto(query, vValue,
						generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), navdb.getNavdbId());
				vInd = rec.getString();
				controlBlock.setDid(N);
				return vInd;
			} else {
				query = """
						select 'Y' from selection_criteria_value
						 				where value = ?
						 				and select_by_id = ?
						 				and value_descr  = ?
						""";
				rec = app.selectInto(query, vValue, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
						rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
				vInd = rec.getString();
				return vInd;

			}
		} catch (Exception e) {
				vInd = N;
				return vInd;

		}

	}

	@Override
	public void checkListsRecVal(Integer index) throws Exception {
		log.info("checkListsRecVal Executing");
		try {
			ArrayList<String> vValue = new ArrayList<>();
			Integer listIndex=0;

			Integer conditionCheck = null;
			if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListVal(), I)) {
				conditionCheck = 1;
			} else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListVal(), "X")
					&& (!Objects.equals(nameIn(this, "lists.value" + toChar(3)), null)
							|| !Objects.equals(nameIn(this, "lists.value" + toChar(4)), null))) {
				conditionCheck = 1; 
			} else {
				conditionCheck = 0;
			}
			
			for (int i = 1; i <= datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo(); i++) {
				vValue.add(listIndex,toString(nameInWithIndex(this, "lists.value" + toChar(i), index)));

				if (Objects.equals(vValue.get(listIndex), null) && !Objects.equals(lists.getRow(index).getRecordStatus(), "NEW")) {
					if (Arrays.asList(91, 92)
							.contains(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode())
							&& Arrays.asList(3, 4).contains(i) && Objects.equals(conditionCheck, 1)) {

                        log.debug("Inside if for Data name is AirSpace ");

					}

					else {
							coreptLib.dspMsg("Please enter value completely for the record.");
							throw new FormTriggerFailureException();
						

					}

				}
				listIndex++;

			}

			log.info("checkListsRecVal Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing checkListsRecVal {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSourceAg() throws Exception {
		log.info("populateSourceAg Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("source_ag");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			EParam.DYNAMIC_QUERY_ONE.setValue("""
					select  group_name rlabel,group_name rvalue
					from select_by_airport_group
					where navdb_id = '%s'
					order by 1 asc
					""".formatted(navdb.getNavdbId()));
			
			rg = createGroupFromQuery("sourceAg",EParam.DYNAMIC_QUERY_ONE.getValue());
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				if (Objects.equals(nn, 1403)) {
                    log.debug("Inside if nn value is 1403");

				}

				else {
					coreptLib.dspMsg("Populate group had error" + toChar(nn));

				}

			}

			populateList("control_block.source_ag", rg);

			log.info("populateSourceAg Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSourceAg {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateTargetAg() throws Exception {
		log.info("populateTargetAg Executing");

		try {
			RecordGroup rg = null;
			Integer nn = 0;
			

			rg = findGroup("target_ag");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}
			
			EParam.DYNAMIC_QUERY_ONE.setValue(navdb.getNavdbId());
			EParam.DYNAMIC_QUERY_TWO.setValue(controlBlock.getSourceAg());
			EParam.DYNAMIC_QUERY_THREE.setValue("""
					select  group_name rlabel,group_name rvalue
					from select_by_airport_group
					where navdb_id = '%s'
					minus
					select  group_name rlabel,group_name rvalue
					from select_by_airport_group
					where navdb_id = '%s'
					and group_name = '%s'
					order by 1 asc
						""".formatted(EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue()));

			rg = createGroupFromQuery("targetAg",EParam.DYNAMIC_QUERY_THREE.getValue() );
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				if (Objects.equals(nn, 1403)) {
                    log.debug("populateTargetAg Inside if for nn is 1403 ");

				}

				else {
					coreptLib.dspMsg("Populate group had error " + toChar(nn));

				}

			}

			populateList("control_block.target_ag", rg);

			log.info("populateTargetAg Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateTargetAg {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateSourceGeoArea() throws Exception {
		log.info("populateSourceGeoArea Executing");

		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("source_geo_area");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			EParam.DYNAMIC_QUERY_ONE.setValue("""
					select  geo_area_name rlabel,geo_area_name rvalue
					from select_by_geographic_area
					where navdb_id = '%s'
					union all
					select  area_code rlabel,area_code rvalue
					from select_by_area
					where navdb_id = '%s'
					union all
					select  icao_code rlabel,icao_code rvalue
					from select_by_icao
					where navdb_id = '%s'
					order by 1 asc
					""".formatted(navdb.getNavdbId(), navdb.getNavdbId(), navdb.getNavdbId()));
			
			rg = createGroupFromQuery("sourceGeoArea",EParam.DYNAMIC_QUERY_ONE.getValue( ));
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				if (Objects.equals(nn, 1403)) {
                    log.debug("Inside if for nn is 1403 from  populateSourceGeoArea ");

				}

				else {
					coreptLib.dspMsg("Populate group had error " + toChar(nn));

				}

			}

			populateList("CONTROL_BLOCK.SOURCE_GEO_AREA", rg);

			log.info("populateSourceGeoArea Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateSourceGeoArea {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateTargetGeoArea() throws Exception {
		log.info("populateTargetGeoArea Executing");

		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("target_geo_area");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			EParam.DYNAMIC_QUERY_ONE.setValue(navdb.getNavdbId());
			EParam.DYNAMIC_QUERY_TWO.setValue( controlBlock.getSourceGeoArea());
			EParam.DYNAMIC_QUERY_THREE.setValue("""
					(select  geo_area_name rlabel,geo_area_name rvalue
					from select_by_geographic_area
					where navdb_id = '%s'
					union all
					select  area_code rlabel,area_code rvalue
					from select_by_area
					where navdb_id = '%s'
					union all
					select  icao_code rlabel,icao_code rvalue
					from select_by_icao
					where navdb_id = '%s')
					minus
					(select  geo_area_name rlabel,geo_area_name rvalue
					from select_by_geographic_area
					where navdb_id = '%s'
					and geo_area_name = '%s'
					union all
					select  area_code rlabel,area_code rvalue
					from select_by_area
					where navdb_id = '%s'
					and area_code = '%s'
					union all
					select  icao_code rlabel,icao_code rvalue
					from select_by_icao
					where navdb_id = '%s'
					and icao_code = '%s')
					order by 1 asc

						""".formatted(EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(),
				EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(),
				EParam.DYNAMIC_QUERY_TWO.getValue(), EParam.DYNAMIC_QUERY_ONE.getValue(), EParam.DYNAMIC_QUERY_TWO.getValue()));
			rg = createGroupFromQuery("targetGeoArea",EParam.DYNAMIC_QUERY_THREE.getValue());
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				if (Objects.equals(nn, 1403)) {
                    log.debug("Inside if for nn is 1403 from  populateTargetGeoArea ");

				}

				else {
					coreptLib.dspMsg("Populate group had error" + toChar(nn));

				}

			}

			populateList("control_block.target_geo_area", rg);

			log.info("populateTargetGeoArea Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateTargetGeoArea {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public String populateCrateInd(String vFmsId, String vFormatMediaType) throws Exception {
		log.info("populateCrateInd Executing");
		String query = "";
		DuRecord rec = null;
		try {
			String vCrateInd = null;

			try {
				if (!Objects.equals(vFmsId, null) && !Objects.equals(vFormatMediaType, null)) {

					query = """
							SELECT crate_ind from fms_delivery_format_media
								 WHERE fms_id = ?
							         and format_media_type = ?
							""";
					rec = app.selectInto(query, vFmsId, vFormatMediaType);
					vCrateInd = rec.getString();

				}
				log.info("populateCrateInd Executed Successfully");
				return vCrateInd;
			}

			catch (NoDataFoundException e) {

				return null;

			}

			catch (Exception e) {

				
				coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
				return null;
			}
		
		} catch (Exception e) {
			log.error("Error while executing populateCrateInd {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void updateNewNavdbOrc() throws Exception {
		log.info("updateNewNavdbOrc Executing");
		String query = "";
		try {
			String getOrcNew = """
					SELECT F_ORC.DMR_ID,
					               F_ORC.DEFAULT_APPLY_IND,
					               F_ORC.FMS_ID,
					               'N' APPLY_IND,
					               ORC.DMR_DESCR,
					               NULL
					          FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
					         WHERE     F_ORC.FMS_ID = ?
					               AND ORC.DMR_ID = F_ORC.DMR_ID
					               AND F_ORC.DM_ORC_IND = 'ORC'
					               AND F_ORC.DEFAULT_APPLY_IND = 'Y'
					      ORDER BY 1
					""";

			List<Object> orcTab = new ArrayList<>();
			Integer iIdx = 0;
			String lsSqlerrm = null;
			Integer lsSqlcode = 0;

			try {
				List<DuRecord> records = app.executeQuery(getOrcNew, navdb.getFmsId());
				for (DuRecord rec : records) {
					orcTab.add(iIdx, rec.getObject("dmr_id"));
					iIdx = iIdx + 1;

				}
				if (orcTab.size() > 0) {
					for (int i = 0; i < orcTab.size(); i++) {

						query = """
								 INSERT INTO navdb_orc
								              VALUES (?,
								                      ?,
								                      NULL,
								                      ?,
								                      USER,
								                      SYSDATE,
								                      'Y')
								""";
						app.executeNonQuery(query, toString(orcTab.get(i)), navdb.getNavdbId(), global.getDcrNumber());
					}

				}
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
			}
			catch (Exception e) {
				lsSqlerrm = OracleHelpers.getSQLerrm(e);
				lsSqlcode = OracleHelpers.getSQLcode(e);

				coreptLib.dspMsg("ORC Creation Failed due to" + lsSqlcode + " : " + lsSqlerrm);
			}

			log.info("updateNewNavdbOrc Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing updateNewNavdbOrc {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableBrgaIdent() throws Exception {
		log.info("enableDisableBrgaIdent Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					SELECT count(fms_id) from flight_management_system WHERE fms_id = nvl(?,fms_id) --Fix SCR 6172- Ashish- 10-Aug
					     and binary_format_type in('B00','B10','B20','B31')
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.brga_ident", "QUERYABLE", FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableBrgaIdent Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableBrgaIdent {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void callCopyTldPrc() throws Exception {
		log.info("callCopyTldPrc Executing");

		try {
			String getTable = """
					select table_name,
					         decode(substr(table_name,5),'AIRPORT',1,'HELIPORT',2,'VHF',3,'RUNWAY',4,
					         'AIRPORT_WAYPOINT',5,'HELI_WAYPOINT',6,'ENROUTE_WAYPOINT',7,
					         'AIRPORT_NDB',8,'HELI_NDB',9,'ENROUTE_NDB',10,
					         'LOCALIZER',11,'HELI_LOCALIZER',12,'MLS',13,'HELI_MLS',14,'GLS',15,'MSA',16,'HELI_MSA',17,
					         'SID',18,'STAR',19,'APPROACH',20,'HELI_SID',21,'HELI_STAR',22,'HELI_APPROACH',23,
					         'AIRPORT_PATH_POINT',24,'HELI_PATH_POINT',25,
					         'ENROUTE_AIRWAY',26,'COMPANY_ROUTE',27,'PREFERRED_ROUTE',28,
					         'AIRPORT_COMM',29,'HELI_COMM',30,'FIR_UIR',31,'ENROUTE_COMM',32,
					         'RESTR_AIRSPACE',33,'CONTRL_AIRSPACE',34,'GRID_MORA',35,100) VREL_ORDER
					  from   all_tab_columns
					  where  owner = 'CPT'
					  and    table_name like 'TLD%'
					  and    column_name = 'VALIDATE_IND'
					  and    (table_name not like '%LEG' and
					          table_name not like '%SEGMENT' and
					          table_name not like '%REPL_TIME' and
					          table_name not like '%VIA' and
					          table_name not like '.SE9' and
					          table_name not like '%ADDL_ALT_DEST' and
					          table_name not like '%ALT_EXCL%' and
					          table_name not like '%REF_PREF_RTE' and
					          table_name not like '%NOTE_RESTR_NOTE')
					  order by 2
					""";
			Integer vNumAll = 0;
			Integer vNumInhouse = 0;
			Integer vNumSuppl = 0;
			String lsOutHouse = N;
			Integer lnButton = 0;
			Object plId = null;
			Integer lnOut = 0;
			Integer lnIn = 0;

			List<DuRecord> records = app.executeQuery(getTable);
			for (DuRecord crec : records) {
				String tableName = "PL_" + toString(crec.getObject("TABLE_NAME"));
				Map<String, Object> countTailoredRecords = app.executeProcedure(DbConstants.SCHEMA_CPTS, "COUNT_TAILORED_RECORDS",
						"FORMS_UTILITIES", new ProcedureInParameter("p_table", tableName, OracleTypes.VARCHAR),
						new ProcedureInParameter("p_cycle", controlBlock.getProcCycle(), OracleTypes.NUMBER),
						new ProcedureInParameter("p_supplier", global.getDataSupplier(), OracleTypes.VARCHAR),
						new ProcedureInParameter("p_customer", navdb.getNavdbId(), OracleTypes.VARCHAR),
						new ProcedureOutParameter("p_num_inhouse", OracleTypes.NUMBER),
						new ProcedureOutParameter("p_num_all", OracleTypes.NUMBER),
						new ProcedureOutParameter("p_num_suppl", OracleTypes.NUMBER));
				vNumInhouse = toInteger(countTailoredRecords.get("p_num_inhouse"));
				vNumAll = toInteger(countTailoredRecords.get("p_num_all"));
				vNumSuppl = toInteger(countTailoredRecords.get("p_num_suppl"));

				lnOut = lnOut + vNumSuppl;
				lnIn = lnIn + vNumInhouse;
			}
			if (!idNull(plId)) {
				log.debug(lsOutHouse+vNumAll);

			}
			parameter.setRecordType("A");
			parameter.setWorkType("DATA");
			parameter.setLibraryAccess("PRE-LIBRARY");
						if (lnOut > 0 && lnIn > 0) {
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					lnButton = displayAlert.moreButtons(S, "Copy SC and Tailored Data",
							"'" + copyNavdb.getNewNavdb() + "' selection copied from '" + navdb.getNavdbId() + "'."
									+ chr(10) + " Combination of Tailored Data Exists. Do you want to Copy?" + chr(10)
									+ "Yes: Will take you to Copy Tailored Data form" + chr(10) + "No: No Copy Needed ",
							"Yes", "No", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("copyTailoredAlert");
					throw new AlertException(event, alertDetails);
				} else {
					lnButton = alertDetails.getAlertValue("copyTailoredAlert", alertDetails.getCurrentAlert());
				}
				if (Objects.equals(lnButton, 1)) {
					openForm("copytailoreddata");
				}

				else {

					coreptLib.dspMsg("'" + copyNavdb.getNewNavdb() + "' data has been successfully copied from '"
							+ navdb.getNavdbId() + "'." + chr(10) + "Please query the new NAVDB data and check it.");
				}

			}

			else if (lnOut > 0 && Objects.equals(lnIn, 0)) {
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					lnButton = displayAlert.moreButtons(S, "Copy SC and Tailored Data",
							"'" + copyNavdb.getNewNavdb() + "' selection copied from '" + navdb.getNavdbId() + "'."
									+ chr(10) + " Only OUT-HOUSE Tailored Data Exists. Do you want to Copy? " + chr(10)
									+ "Yes: Will take you to Copy Tailored Data form" + chr(10) + "No: No Copy Needed ",
							"Yes", "No", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("copyTailoredAlert2");
					throw new AlertException(event, alertDetails);
				} else {
					lnButton = alertDetails.getAlertValue("copyTailoredAlert2", alertDetails.getCurrentAlert());
				}
				if (Objects.equals(lnButton, 1)) {
					openForm("copytailoreddata");
				}

				else {

					coreptLib.dspMsg("'" + copyNavdb.getNewNavdb() + "' data has been successfully copied from '"
							+ navdb.getNavdbId() + "'." + chr(10) + "Please query the new NAVDB data and check it.");

				}

			}

			else if (Objects.equals(lnOut, 0) && lnIn > 0) {
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					lnButton = displayAlert.moreButtons(S, "Copy SC and Tailored Data",
							"'" + copyNavdb.getNewNavdb() + "' selection copied from '" + navdb.getNavdbId() + "'."
									+ chr(10) + " Tailored Data Exists. Do you want to Copy?" + chr(10)
									+ "Yes: Will take you to Copy Tailored Data form" + chr(10) + "No: No Copy Needed ",
							"Yes", "No", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("copyTailoredAlert3");
					throw new AlertException(event, alertDetails);
				} else {
					lnButton = alertDetails.getAlertValue("copyTailoredAlert3", alertDetails.getCurrentAlert());
				}
				if (Objects.equals(lnButton, 1)) {
					openForm("copytailoreddata");

				}

				else {
					coreptLib.dspMsg("'" + copyNavdb.getNewNavdb() + "' data has been successfully copied from '"
							+ navdb.getNavdbId() + "'." + chr(10) + "Please query the new NAVDB data and check it.");
				}

			}

			else {
				coreptLib.dspMsg("'" + copyNavdb.getNewNavdb() + "' data has been successfully copied from '"
						+ navdb.getNavdbId() + "'." + chr(10) + "Please query the new NAVDB data and check it.");

			}

			log.info("callCopyTldPrc Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing callCopyTldPrc {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void enableDisableCmc() throws Exception {
		log.info("enableDisableCmc Executing");
		String query = "";
		DuRecord rec = null;
		try {
			Integer vCount = 0;

			query = """
					Select count(*)
						  from flight_management_system
						 Where fms_id = nvl(?,fms_id)
						 and binary_format_type = 'CMC'
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", "QUERYABLE", FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", "QUERYABLE", FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}

			log.info("enableDisableCmc Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing enableDisableCmc {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateDsfVersion() throws Exception {
		log.info("populateDsfVersion Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("dsfversions");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			rg = createGroupFromQuery("dsfVersions",
					"select dbsign_ver rlabel, dbsign_ver rvalue from cptsc.dbsign_versions order by 1 asc");
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				coreptLib.dspMsg("Populate group had error" + toChar(nn));

			}

			populateList("NAVDB_DELIVERY_FORMAT_MEDIA.DBSIGN_VER", rg);

			log.info("populateDsfVersion Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateDsfVersion {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void populateLsbmVersion() throws Exception {
		log.info("populateLsbmVersion Executing");
		try {
			RecordGroup rg = null;
			Integer nn = 0;

			rg = findGroup("lsbmversions");
			if (!idNull(rg)) {
				deleteGroup(groups, "rg");

			}

			rg = createGroupFromQuery("lsbmVersions",
					"select lsbm_version rlabel, lsbm_version rvalue from cptsc.airbus_lsbm_versions order by 1 asc");
			nn = populateGroup(rg);
			if (!Objects.equals(nn, 0)) {
				coreptLib.dspMsg("Populate group had error" + toChar(nn));

			}

			populateList("NAVDB_DELIVERY_FORMAT_MEDIA.LSBM_VERSION", rg);

			log.info("populateLsbmVersion Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing populateLsbmVersion {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void resetGeoArea(Integer selId) throws Exception {
		log.info("resetGeoArea Executing");
		String query = "";
		DuRecord rec = null;
		try {
			List<GeoPointsRec> geoPointsTab = new ArrayList<>();
			Integer lCnt = 0;
			Integer lseq = 0;

			goBlock(DbConstants.GEOGRAPHIC_AREA_POINT, "");


			query = """
					SELECT count(*) from GEOGRAPHIC_AREA_POINT
					               	     			WHERE SELECT_BY_ID = ?""";
			rec = app.selectInto(query, selId);
			Integer count = rec.getInt();
			log.debug(""+count);
			//manually handled
			Integer size = selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount();
			geographicAreaPoint.filterNonDeletedRecords();
			for (int i = 0; i <size ; i++) {
				lCnt = lCnt + 1;
				lseq = lseq + 10;
				GeoPointsRec geoPointsRec = new GeoPointsRec();
				geoPointsRec.setSeqNumber(lseq);
				geoPointsRec.setLatitude(geographicAreaPoint.getRow(i).getLatitude());
				geoPointsRec.setLongitude(geographicAreaPoint.getRow(i).getLongitude());
				geoPointsTab.add(i, geoPointsRec);
			}

			query = """
					 DELETE FROM GEOGRAPHIC_AREA_POINT
						WHERE SELECT_BY_ID = ?
					""";
			app.executeNonQuery(query, selId);
			parameter.setSeq(N);
			goBlock(DbConstants.GEOGRAPHIC_AREA_POINT, "");

			geographicAreaPoint.getData().clear();			
			for (int i = 0; i < size; i++) {
				geographicAreaPoint.add(new GeographicAreaPoint());
				geographicAreaPoint.getRow(i).setSelectById(selId);
				geographicAreaPoint.getRow(i).setSequenceNumber(toString(geoPointsTab.get(i).getSeqNumber()));
				geographicAreaPoint.getRow(i).setLatitude(geoPointsTab.get(i).getLatitude());
				geographicAreaPoint.getRow(i).setLongitude(geoPointsTab.get(i).getLongitude());
				geographicAreaPoint.getRow(i).setRecordStatus("INSERT");

			}

			log.info("resetGeoArea Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing resetGeoArea {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public void resetNewGeoArea() throws Exception {
		log.info("resetNewGeoArea Executing");
		try {
			Integer lnCount = 0;

			goBlock(DbConstants.GEOGRAPHIC_AREA_POINT, "");

			geographicAreaPoint.filterNonDeletedRecords();
			for (int i = 0; i < geographicAreaPoint.size(); i++) {
				lnCount = lnCount + 10;
				geographicAreaPoint.getRow(i).setSequenceNumber(toString(lnCount));


			}

			parameter.setSeq(N);

			log.info("resetNewGeoArea Executed Successfully");
		} catch (Exception e) {
			log.error("Error while executing resetNewGeoArea {}", e.getMessage());
			throw e;

		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> onError(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" onError Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer msgnum = global.getErrorCode();
			String msgtxt = global.getErrorText();
			String msgtyp = global.getErrorType();
			String vCblk = system.getCursorBlock();

			setApplicationProperty(CURSOR_STYLE, DEFAULT);
			if ((Objects.equals(msgnum, 40400) || Objects.equals(msgnum, 40406) || Objects.equals(msgnum, 40407))) {
				message("Changes saved successfully");

			}

			else if (Arrays.asList(41051, 40350, 47316, 40353, 40401).contains(msgnum)) {
                log.debug("Inside else if for Msgnum is {} from  onError ", msgnum);

			}

			else if (Objects.equals(msgnum, 41050) && Objects.equals(parameter.getWorkType(), "VIEW")) {
                log.debug("Inside else if for Msgnum from  onError is {}", msgnum);
			}

			else if (Arrays.asList(40401, 40405).contains(msgnum)) {
                log.debug("Inside else if for Msgnum onError from is {}", msgnum);

			}

			else if (Objects.equals(msgnum, 40600) && Objects.equals(vCblk, DbConstants.GEOGRAPHIC_AREA_POINT)) {
				coreptLib.dspMsg("Please click on Save button to save the changes");
			}

			else if (Objects.equals(msgnum, 40100)) {

				clearMessage();
				message("At the first record.");

			}

			else if (Objects.equals(msgnum, 40735) && like("%01031%", msgtxt)) {

				clearMessage();
				coreptLib.dspMsg(msgtyp+"Insufficient privileges. ");

			}

			else if (Arrays.asList(40508, 40509).contains(msgnum)) {
				coreptLib.dspMsg(msgtxt+chr(10)+chr(10)+"Please check the exact error message from the 'Display Error' in the 'HELP' menu");
				}

			else if (Arrays.asList(40200).contains(msgnum)) {
				if (Objects.equals(parameter.getUpdRec(), Y)) {
					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						Integer vNallowUpdate = 0;
						String vCnavdbBlock = DbConstants.NAVDB;
						String vCblock = system.getCursorBlock();

						if (!Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {
							vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
									toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
									toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
							if (Objects.equals(vNallowUpdate, 1)) {
								parameter.setUpdRec(N);
								setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

							}

							else {
								parameter.setUpdRec(Y);
								setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

								coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
										toInteger(global.getProcessingCycle()),
										toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

							}

						}

					}

				}

			}

			else if (Objects.equals(system.getCursorBlock(), "lists") && Objects.equals(msgnum, 40102)
					&& Objects.equals(parameter.getRecCreate(), N)) {
				goBlock(system.getCursorBlock(), "");

			}

			else {
				displayAlert.oneButton(S, "Error", msgtyp+"-"+toChar(msgnum)+":"+msgtxt);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" onError executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the onError Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> keyEntqry(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" keyEntqry Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			// manually handled for commit
			if (Arrays.asList("selectByArea", "selectByIcao", "selectByGeographicArea", "geographicAreaPoint")
					.contains(system.getCursorBlock()) && Objects.equals(system.getFormStatus(), "CHANGED")) {
				// selectByArea
				if (Objects.equals(system.getCursorBlock(), "selectByArea")) { 
					for (int i = 0; i < selectByArea.size(); i++) {
						if (Objects.equals(selectByArea.getRow(i).getRecordStatus(), "INSERT")) {
							if (!Objects.equals(selectByArea.getRow(i).getAreaCode(), null)) {
								String vRowid = null;
								Integer vCount = 0;
								String query = "";
								DuRecord rec = null;

								try {

									query = """
											select rowid from SELECT_BY_AREA
															where AREA_CODE = ?
															and NAVDB_ID = ?
											""";
									rec = app.selectInto(query,
											selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode(),
											navdb.getNavdbId());
									vRowid = rec.getString();
									if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getRowid(),
											null)
											|| (!Objects.equals(vRowid,
													selectByArea.getRow(system.getCursorRecordIndex()).getRowid()))) {

										coreptLib.dspMsg("This is a duplicated AREA Code.");
										throw new FormTriggerFailureException();

									}

								}
								// no_data_found
								catch (NoDataFoundException e) {
									log.debug("No Data found Exception captured");

								}

								query = """
										select count(*) from AREA_CODE
													where AREA_CODE = ?
										""";
								rec = app.selectInto(query,
										selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode());
								vCount = rec.getInt();
								if (Objects.equals(vCount, 0)) {
									coreptLib.dspMsg("This is not a valid AREA Code.");
									throw new FormTriggerFailureException();

								}

							}
							String selectQuery = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
							DuRecord reco = app.selectInto(selectQuery);
							Integer selectById = reco.getInt();
							selectByArea.getRow(i).setSelectById(selectById);
							selectByArea.getRow(i).setNavdbId(navdb.getNavdbId());
						}
					}
				}

				else if (Objects.equals(system.getCursorBlock(), "selectByIcao")) {
					for (int i = 0; i < selectByIcao.size(); i++) {
						if (Objects.equals(selectByIcao.getRow(i).getRecordStatus(), "INSERT")) {
							if (!Objects.equals(selectByIcao.getRow(i).getIcaoCode(), null)) {
								String vRowid = null;
								Integer vCount = 0;
								String query = "";
								DuRecord rec = null;

								try {

									query = """
											select rowid from SELECT_BY_ICAO
															where ICAO_CODE = ?
															and NAVDB_ID = ?
											""";
									rec = app.selectInto(query, selectByIcao.getRow(i).getIcaoCode(),
											navdb.getNavdbId());
									vRowid = rec.getString();
									if (Objects.equals(selectByIcao.getRow(i).getRowid(), null)
											|| (!Objects.equals(vRowid, selectByIcao.getRow(i).getRowid()))) {

										coreptLib.dspMsg("This is a duplicated ICAO Code.");
										throw new FormTriggerFailureException();

									}

								}

								catch (NoDataFoundException e) {
									log.debug("No Data found Exception captured in selectByIcao");

								}

								query = """
										select count(*) from ICAO
													where ICAO_CODE = ?
										""";
								rec = app.selectInto(query,
										selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode());
								vCount = rec.getInt();
								if (Objects.equals(vCount, 0)) {

									coreptLib.dspMsg("This is not valid ICAO Code.");
									throw new FormTriggerFailureException();

								}

							}
							String selectQuery = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
							DuRecord reco = app.selectInto(selectQuery);
							Integer selectById = reco.getInt();
							selectByIcao.getRow(i).setSelectById(selectById);
							selectByIcao.getRow(i).setNavdbId(navdb.getNavdbId());

						}
					}
				}
			}

			if (Arrays.asList("CONTROL_BLOCK", "SELECTION", "DATATYP_RAD", "RULES", "SINGLE_VAL", "MULT_VAL", "LISTS")
					.contains(system.getCursorBlock())) {
				coreptLib.dspMsg("Enter query is not available in this block.");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(system.getCursorBlock(), "navdb")) {
				controlBlock.setWorldGeo(N);
				setItemInstanceProperty("control_block.world_geo", "current_record", "visual_attribute", "PLAIN");

			}

			if (Objects.equals(system.getCursorBlock(), "STD_AIRPORT")) {
				stdAirport.getRow(system.getCursorRecordIndex()).setRunwayLength(null);
				stdAirport.getRow(system.getCursorRecordIndex()).setSurfaceCode(null);
				stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal(N);

			}
			if (Objects.equals(system.getCursorBlock(), "navdb") && !Objects.equals(system.getFormStatus(), "CHANGED")) {
				navdb = new Navdb();
			}

			enableDisableProfile();

			enableDisableValerieInd();
			controlBlock.setOrcApplied(null);

			enableDisableBrgaIdent();

			enableDisableCmc();
			if (Objects.equals(system.getMode(), "NORMAL") && !Objects.equals(parameter.getWorkType(), "VIEW")) {
				checkToCommit("ENTER_QUERY");

			}

			coreptLib.coreptenterquery();
			system.setMode("ENTER_QUERY");
			if (Objects.equals(system.getMode(), "NORMAL")) {
				coreptLib.unsetQueryMenuItems();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyEntqry executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyEntqry Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> keyExeqry(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" keyExeqry Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query;
		DuRecord rec;
		OracleHelpers.bulkClassMapper(reqDto, this);
		String queryMode = system.getMode();
		try {
			String lsString = null;
			
			if (Arrays.asList("CONTROL_BLOCK", "SELECTION", "DATATYP_RAD", "RULES", "SINGLE_VAL", "MULT_VAL", "LISTS")
					.contains(upper(toSnakeCase(system.getCursorBlock())))) {
				coreptLib.dspMsg("Execute query is not available in this block.");
				throw new FormTriggerFailureException();

			}

			if (Arrays.asList("STD_HELIPORT", "STD_AIRPORT", DbConstants.ICAO, DbConstants.AREA_CODE)
					.contains(upper(toSnakeCase(system.getCursorBlock())))) {
				deleteGroupRow("selectGroup", "ALL_ROWS");

			}

			else if (Arrays.asList(DbConstants.SELECT_BY_AREA, DbConstants.SELECT_BY_ICAO, DbConstants.AIRPORT_TO_SELECT, "HELIPRT_TO_SELECT")
					.contains(upper(toSnakeCase(system.getCursorBlock())))) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");

			}

			if (Arrays
					.asList(DbConstants.AREA_CODE, "ICAO", "STD_AIRPORT", "STD_HELIPORT", DbConstants.SELECT_BY_AREA, DbConstants.SELECT_BY_ICAO,
							DbConstants.AIRPORT_TO_SELECT, DbConstants.HELIPORT_TO_SELECT, DbConstants.FMS_DMR, DbConstants.SELECT_BY_GEOGRAPHIC_AREA,DbConstants.FMS_DELIVERY_FORMAT_MEDIA)
					.contains(upper(toSnakeCase(system.getCursorBlock())))) {
				system.setMode("EXECUTE");
				
				EParam.DYNAMIC_QUERY_ONE.setValue(upper(toSnakeCase(system.getCursorBlock())));
				queryBlockRecords(EParam.DYNAMIC_QUERY_ONE.getValue(), "KEY_EXE");
				system.setMode(queryMode);

			}

			else {
				
				if (!Objects.equals(system.getMode(), "ENTER_QUERY") 
						&& Objects.equals(system.getCursorBlock(), "navdb")
						&& Objects.equals(system.getFormStatus(), "NORMAL")) {
					navdb = new Navdb();
					lsString = getBlockProperty(DbConstants.NAVDB, "default_where");
				}
				
				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					if (OracleHelpers.isNullorEmpty(lsString)){
						lsString = "DATA_SUPPLIER = '%s'".formatted(global.getDataSupplier());

					}

					else {
						lsString = lsString + " AND DATA_SUPPLIER = '%s'".formatted(global.getDataSupplier());

					}

				}

				else {
                    log.debug("Inside else for WorkType is not View");

				}
				if (Objects.equals(lsString, null)) {
					lsString = "";

				}

				else {
					lsString = lsString + " AND";

				}
				if (Objects.equals(parameter.getTypeOfLogon(), "C")) {
					lsString = rtrim(lsString, "AND");

				}

				else if (Objects.equals(parameter.getTypeOfLogon(), D)) {
					lsString = lsString
							+ " FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = 'DDC') ";

				}

				else if (Objects.equals(parameter.getTypeOfLogon(), O)) {
					lsString = lsString
							+ " FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = 'OBS') ";

				}

				else if (Objects.equals(parameter.getTypeOfLogon(), "R")) {
					lsString = lsString
							+ " FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = 'CRH') ";

				}

				else if (Objects.equals(parameter.getTypeOfLogon(), "A")) {
					lsString = lsString
							+ " FMS_ID IN (SELECT FMS_ID FROM FLIGHT_MANAGEMENT_SYSTEM WHERE FMS_TYPE = 'ATD') ";

				}

				 EParam.DYNAMIC_QUERY_FOUR.setValue(lsString);
				setBlockProperty(DbConstants.NAVDB, "default_where",  EParam.DYNAMIC_QUERY_FOUR.getValue());

				checkToCommit("EXECUTE_QUERY");



				if(Objects.equals(system.getCursorBlock(), "navdb") &&
						Objects.equals(parameter.getWorkType(), "VIEW") ) {
					navdb.setDataSupplier("");
				}
				if(!Objects.equals(alertDetails.checkAlertValues("queryAlert"), -1) && Objects.equals(system.getCursorBlock(),"navdb")) {
					navdb= new Navdb();
					navdb.setDataSupplier(global.getDataSupplier());
				}
				else if(!Objects.equals(alertDetails.checkAlertValues("queryAlert"), -1) && Objects.equals(system.getCursorBlock(),"navdbDeliveryFormatMedia")) {
					navdbDeliveryFormatMedia.getData().clear();
					navdbDeliveryFormatMedia.add(new NavdbDeliveryFormatMedia());	
					navdbDeliveryFormatMedia.getRow(0).setNavdbId(navdb.getNavdbId());	
					}
				else if(!Objects.equals(alertDetails.checkAlertValues("queryAlert"), -1) && Objects.equals(system.getCursorBlock(),"geographicAreaPoint")) {
					geographicAreaPoint.getData().clear();
					geographicAreaPoint.add(new GeographicAreaPoint());
					geographicAreaPoint.getRow(0).setSelectById(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}
				else if(!Objects.equals(alertDetails.checkAlertValues("queryAlert"), -1) && Objects.equals(system.getCursorBlock(),"selectByArea")) {
					selectByArea.getData().clear();
					selectByArea.add(new SelectByArea());
					selectByArea.getRow(0).setNavdbId(navdb.getNavdbId());
					}
				else if(!Objects.equals(alertDetails.checkAlertValues("queryAlert"), -1) && Objects.equals(system.getCursorBlock(),"selectByIcao")) {
					selectByIcao.getData().clear();
					selectByIcao.add(new SelectByIcao());
					selectByIcao.getRow(0).setNavdbId(navdb.getNavdbId());
					}

				coreptLib.coreptexecutequery(this,true);
				setMenuItemProperty(rtrim("Tools") + "." + ltrim("Export_Data"), FormConstant.ENABLED,
						FormConstant.BPROPERTY_FALSE);
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {

					try {

						query = """
								SELECT MAX(processing_cycle) from pl_std_airport
												WHERE data_supplier = ?
								""";
						rec = app.selectInto(query, navdb.getDataSupplier());
						controlBlock.setProcCycle(rec.getInt());
					}

					catch (NoDataFoundException e) {
						controlBlock.setProcCycle(toInteger(global.getProcessingCycle()));

					}

				}

			}

			enableDisableProfile();
			enableDisableValerieInd();
			enableDisableBrgaIdent();

			String val = navdb.getQueryHits();
			
			system.setMode("NORMAL");
			if (Objects.equals(system.getMode(), "NORMAL") && toInteger(
					nvl(val, "0")) >= 1) {
				setItemProperty("control_block.plot", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.plot", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.gearth", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.gearth", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("control_block.plot", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
				setItemProperty("control_block.gearth", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}
			system.setMode(queryMode);
			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			global.setTableName("AIRPORT");
			global.setDataType("AIRPORT");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyExeqry executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyExeqry Service");
			system.setMode(queryMode);
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}


	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> keyCrerec(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" keyCrerec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Arrays.asList("CONTROL_BLOCK", "DATATYP_RAD", "RULES", "COPY_NAVDB", "SINGLE_VAL", "RECORD_SUB_TYPE",
					"SELECTION", "RUNWAY_SURFACE", "NAVDB_ORC").contains(system.getCursorBlock())) {
                log.debug("Inside if from keyCrerec ");

			}

			else {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(system.getCursorBlock(), "lists")) {
					parameter.setRecCreate(Y);

				}
				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec(N);
					setBlockProperty(system.getCursorBlock(), FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					createRecord("");

				}

				else {
					parameter.setUpdRec(Y);
					setBlockProperty(system.getCursorBlock(), FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					coreptLib.dspActionMsg(I, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyCrerec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyCrerec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> keyDelrec(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" keyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getCursorBlock(), "CONTROL_BLOCK")) {
                log.debug("Inside if CursorBlock is CONTROL_BLOCK");

			}

			else {
				deleteRecord("");
				enableDisableProfile();
				enableDisableValerieInd();
				enableDisableBrgaIdent();

			}
			if (Objects.equals(system.getCursorBlock(), DbConstants.GEOGRAPHIC_AREA_POINT)) {
				refreshGeoCount();
				if ((selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoCount() < 3 || (Objects
						.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoCount(), 3)
						&& Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
								null)))) {
					coreptLib.dspMsg("Minimum three Geographic Area Points are required for a Geo Area.");
					throw new FormTriggerFailureException();

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> keyDuprec(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" keyDuprec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vBlock = system.getCursorBlock();
			Integer vId = 0;
			String query = "";
			DuRecord rec = null;

			if (Arrays.asList("CONTROL_BLOCK", "DATATYP_RAD", "RULES", "COPY_NAVDB", "SINGLE_VAL", "SELECTION")
					.contains(system.getCursorBlock())) {
                log.debug("Inside if for CursorBlock is List of Values");

			}

			else {
				duplicateRecord("", 1);
				if (Arrays.asList(DbConstants.SELECT_BY_GEOGRAPHIC_AREA, DbConstants.SELECT_BY_AREA, DbConstants.SELECT_BY_ICAO,
						DbConstants.SELECT_BY_AIRPORT_GROUP, DbConstants.SELECT_BY_HELIPORT_GROUP).contains(vBlock)) {

					query = """
							select select_by_id_seq.NEXTVAL from dual
							""";
					rec = app.selectInto(query);
					vId = rec.getInt();
					copy(vId, vBlock + ".select_by_id");

				}

				else if (Objects.equals(vBlock, DbConstants.GEOGRAPHIC_AREA_POINT)) {
					geographicAreaPoint.getRow(system.getCursorRecordIndex())
							.setSequenceNumber(toString(system.getCursorRecordIndex() * 10));

				}

				else if (Arrays.asList("LISTS", "MULT_VAL").contains(vBlock)) {
					copy(system.getTriggerRecord(), vBlock + ".seq");

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyDuprec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyDuprec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}


	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> keyExit(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" keyExit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

				setApplicationProperty(CURSOR_STYLE, DEFAULT);
				if (Arrays.asList("rules", "SINGLE_VAL", "MULT_VAL", "lists").contains(system.getCursorBlock())) {
					coreptLib.dspMsg("You must back to the main record then to exit the form.");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(system.getCursorBlock(), DbConstants.GEOGRAPHIC_AREA_POINT)
						&& (selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoCount() < 3 || (Objects
								.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoCount(), 3)
								&& Objects.equals(
										geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
										null)))) {

				
					coreptLib.dspMsg("Please enter at least three Geographic Area Points.");
					throw new FormTriggerFailureException();

				}

				if (getGroupRowCount(findGroup("refreshAalGroup")) > 0) {
					coreptLib.dspMsg(
							"Airport Airway Low must be refreshed before exit because of the  new entry in the Airport List. Click the Refresh Airport Airway Low button to start.");
					throw new FormTriggerFailureException();

				}

			}


			if (Objects.equals(system.getFormStatus(), "CHANGED") && !Objects.equals(parameter.getWorkType(), "VIEW")) {
				checkToCommit("EXIT");

			}

			else {

				setApplicationProperty(CURSOR_STYLE, DEFAULT);
				exitForm();

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" keyExit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the keyExit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> onClearDetails(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" onClearDetails Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			clearAllMasterDetails();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" onClearDetails executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the onClearDetails Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> whenNewFormInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" whenNewFormInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query;
		DuRecord rec;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			initializeForm();
			setItemProperty("navdb.profile_number", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("navdb.profile_number", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("navdb.gen_valerie", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("navdb.gen_valerie", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			try {

				query = """
						SELECT MAX(processing_cycle) from pl_std_airport
							WHERE data_supplier = ?
						""";
				rec = app.selectInto(query, global.getDataSupplier());
				controlBlock.setProcCycle(rec.getInt());
			}

			catch (NoDataFoundException e) {
				controlBlock.setProcCycle(toInteger(global.getProcessingCycle()));

			}
			setFmsId();
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

				refreshAalGroups = createGroup("refreshAalGroups");
				addGroupColumn(refreshAalGroups, "airport_ident", "charColumn", 4);
				addGroupColumn(refreshAalGroups, "airport_icao", "charColumn", 2);

				try {

					query = """
							select processing_cycle from airport_airway_low
							  	where data_supplier = ?
							  	and   rownum = 1
							""";
					rec = app.selectInto(query, navdb.getDataSupplier());
					global.setAalCycle(rec.getString());
				}

				catch (NoDataFoundException e) {
					global.setAalCycle(null);

				}

			}

			coreptLib.setBlock();
			DuEvent ev = event.getLast();
			GoBlock gb = (GoBlock) ev.getValue();
			gb.setBlockName("navdb");
			gb.setItemName("navdbId");
			ev.setValue(gb);
			event.add(ev);
			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				setMenuItemProperty(rtrim("Tools") + "." + ltrim("Export_Data"), FormConstant.ENABLED,
						FormConstant.BPROPERTY_FALSE);
				setBlockProperty("SINGLE_VAL", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("SINGLE_VAL", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("SINGLE_VAL", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("lists.done_list", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("lists.cancel_list", "LABEL", "Go Back");
				setBlockProperty("lists", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("lists", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("control_block.copy_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("mult_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("single_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("record_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("record_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("record_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.done", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.check_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.check_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.clear_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("runway_surface.clear_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				setRadioButtonProperty("select_all_rules.ixrrd", "INCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "EXCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "NONE", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "REF_ONLY", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);
				setRadioButtonProperty("select_all_rules.ixrrd", "DEFAULT", FormConstant.ENABLED,
						FormConstant.PROPERTY_FALSE);

				setTabPageProperty("selCan.copyNavdb", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("control_block.update_focals", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setTabPageProperty("selCan.saveLoadSel", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			else {
				setTabPageProperty("selCan.saveLoadSel", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setTabPageProperty("selCan.copyNavdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.update_focals", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

				setRadioButtonProperty("select_all_rules.ixrrd", "INCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "EXCLUDE", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "NONE", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "REF_ONLY", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);
				setRadioButtonProperty("select_all_rules.ixrrd", "DEFAULT", FormConstant.ENABLED,
						FormConstant.PROPERTY_TRUE);

				setBlockProperty("SINGLE_VAL", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("SINGLE_VAL", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("SINGLE_VAL", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("lists.done_list", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("lists.cancel_list", "LABEL", "Cancel");
				setBlockProperty("lists", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("lists", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setBlockProperty("CUSTOMER_INFO", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("control_block.copy_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("mult_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("single_val.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("record_sub_type.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("record_sub_type.check", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("record_sub_type.clear", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.done", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.check_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.check_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.clear_all_soft", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("runway_surface.clear_all_hard", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			setItemProperty("std_airport.surface_code", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);
			setItemProperty("std_airport.surface_code", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			parameter.setSaveButton(1);
			populateFocal();

			populateDsfVersion();

			populateLsbmVersion();
			controlBlock.setOrcApplied(null);
			controlBlock.setRepType("P");
			showView("SEL_CAN");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" whenNewFormInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the whenNewFormInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> preCommit(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" preCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query;
		DuRecord rec;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer vCount = 0;

			query = """
					select count(fms_id) from
							       (select fms_id from flight_management_system where fms_id = ?
							        and binary_format_type like 'K%')
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (vCount > 0) {
				if (Objects.equals(navdb.getProfileNumber(), null)) {
					coreptLib.dspMsg("Please provide valid profile number");
					throw new FormTriggerFailureException();

				}

			}

			String fmsIdCur = """
					SELECT fms_id
					        FROM flight_management_system
					       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') 		--Fix SCR 7338 --Madhu--10-Mar-2017
					         AND binary_format_type IN ('FD', 'NFD')
					""";

			if (!Objects.equals(navdb.getNavdbId(), null)) {
				List<DuRecord> records = app.executeQuery(fmsIdCur);
				for (DuRecord fms_id_rec : records) {
					if (Objects.equals(fms_id_rec.getObject("fms_id"), navdb.getFmsId())) {

						Boolean dbout = app.executeFunction(Boolean.class, DbConstants.SCHEMA_CPTS, "check_ident_for_alphanum",
								"forms_utilities", OracleTypes.BOOLEAN,
								new ProcedureInParameter("p_ident", navdb.getNavdbId(), OracleTypes.VARCHAR));

						if (dbout) {

							displayAlert.oneButton(S, "Change FMS ID/NavDB ID",
									"For B787 or B747 databases,Characters I,O,Q or Z shall \nnot be as a part of the Navdb Ident."
											+ chr(10) + "Change FMS ID or NavDB ID");
							throw new FormTriggerFailureException();

						}

					}

				}

			}


			if ((Objects.equals(nvl(navdb.getBinaryFormatType(), ""), "CMC"))) {
				if (Objects.equals(navdb.getCmcDependentNavdb(), null)) {
					coreptLib.dspMsg("CMC Dependent NavDB"
							+ " is required. Please enter ");
					throw new FormTriggerFailureException();

				}

				else if (Objects.equals(navdb.getCmcCustomerName(), null)) {

					coreptLib.dspMsg(
							"DB Name"+ " is required. Please enter ");
					throw new FormTriggerFailureException();

				}
				if(Objects.equals(parameter.getOrcFlag(), Y)) {
				populateOrc();
				parameter.setOrcFlag(N);
				}

			}
			

			if (Objects.equals(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateIndDb(), null)
					&& !Objects.equals(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getNavdbId(),
							null)
					&& !Objects.equals(
							navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(),
							null)) {
				navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setCrateIndDb(
						nvl(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateInd(), N));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info("preCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the preCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	private void populateOrc() throws Exception {
		try {
			String query = "";
			String getOrc = """
					SELECT F_ORC.DMR_ID,
							     F_ORC.DEFAULT_APPLY_IND,
							     F_ORC.FMS_ID,
							     NVL (N_ORC.APPLY_IND, 'N') APPLY_IND,
							     DMR_DESCR
						FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC, NAVDB_ORC N_ORC
						WHERE     F_ORC.FMS_ID = ?
						       AND F_ORC.DMR_ID = ORC.DMR_ID
						       AND N_ORC.ORC_ID = ORC.DMR_ID
						       AND N_ORC.NAVDB_ID = ?
						UNION
						SELECT F_ORC.DMR_ID,
						       F_ORC.DEFAULT_APPLY_IND,
						       F_ORC.FMS_ID,
						       'N' APPLY_IND,
						       ORC.DMR_DESCR
						  FROM FMS_DMR F_ORC, DATA_MANIPULATION_ROUTINE ORC
						 WHERE F_ORC.FMS_ID IN (SELECT FMS_ID
						                              FROM NAVDB
						                             WHERE NAVDB_ID = ?)
						       AND F_ORC.DMR_ID NOT IN (SELECT ORC_ID
						                                  FROM NAVDB_ORC
						                                 WHERE NAVDB_ID = ?)
						       AND ORC.DMR_ID = F_ORC.DMR_ID
						ORDER BY 1
					""";

			genericNativeQueryHelper.commit(this, "navdb");
			List<DuRecord> records = app.executeQuery(getOrc, navdb.getFmsId(), navdb.getNavdbId(), navdb.getNavdbId(),
					navdb.getNavdbId());
			int i = 0;
			for (DuRecord rec : records) {
				navdbOrc.getRow(i).setApplyInd(toString(rec.getObject("default_apply_ind")));
				navdbOrc.getRow(i).setOrcId(toString(rec.getObject("dmr_id")));
				navdbOrc.getRow(i).setOrcDescr(toString(rec.getObject("dmr_descr")));

				if (Objects.equals(toString(rec.getObject("default_apply_ind")), Y) &&
						!like("OR%", toString(rec.getObject("dmr_id")))) {

					query = """
							 INSERT INTO NAVDB_ORC VALUES ( ?, ?, NULL,?,USER,SYSDATE,'Y')
							""";
					app.executeNonQuery(query, navdbOrc.getRow(i).getOrcId(), navdb.getNavdbId(),
							global.getDcrNumber());
				}
				navdbOrc.add(new NavdbOrc());
				i++;
			}
			navdb.setOldFmsId(navdb.getFmsId());
			

		} catch (Exception e) {
			throw e;

		}
	}


	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> whenTabPageChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" whenTabPageChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query;
		DuRecord rec;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(navdb.getNavdbId(), null)) {
				hideView("focals");
				hideView("GEN_CRITERIA_SUB_TYPE");
				controlBlock.setSourceAg(null);
				controlBlock.setTargetAg(null);
				controlBlock.setSourceGeoArea(null);
				controlBlock.setTargetGeoArea(null);
				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					Integer lnCount = 0;

					try {

						query = """
								SELECT count(*) from navdb_general_criteria_value
								  	    WHERE navdb_id = (SELECT navdb_id FROM navdb_general_criteria
								  			      						 WHERE criteria_id = 4
								  										       AND apply_ind = 'Y'
								  										       AND navdb_id = ?)
								  	      AND criteria_id = 4
								""";
						rec = app.selectInto(query, navdb.getNavdbId());
						lnCount = rec.getInt();
						if (Objects.equals(lnCount, 0)) {

							query = """
									UPDATE navdb_general_criteria
									  		      SET apply_ind = 'N'
									  		    WHERE navdb_id = ?
									  		      AND criteria_id = 4
									  		      AND apply_ind = 'Y'
									""";
							app.executeNonQuery(query, navdb.getNavdbId());
						}

					}
					// no_data_found
					catch (NoDataFoundException e) {	
						log.debug("No Data found on whenTabPageChanged");

					}

				}

				if (Objects.equals(system.getTabNewPage(), "SELECTIONS")) {

					checkDid("Main Button Check");

			
					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");
					goBlock("datatyp_rad", "");

					if (Objects.equals(nvl(parameter.getObsEnabled(), N), Y)
							&& !Objects.equals(nvl(controlBlock.getWorldGeo(), N), Y)) {
						controlBlock.setWorldGeo(Y);
						goItem("control_block.world_geo");

					}

					goBlock("selection", "");
					setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("datatyp_rad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
					setItemProperty("datatyp_rad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
					setItemProperty("datatyp_rad.CSV_REPORT", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
					selectAllRules.setIxrrd(N);
					
					setRadioButtonProperty("inc", "datatypRadOptions", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("rules", "datatypRadOptions", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("exc", "datatypRadOptions", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("ref", "datatypRadOptions", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("default", "datatypRadOptions", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);


					populateSelections();
					populateSourceAg();

					
					populateSourceGeoArea();
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);

						}

						else {
							parameter.setUpdRec(Y);
							setItemProperty("datatyp_rad.options", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("datatyp_rad.options", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}
				else if(Objects.equals(system.getTabNewPage(), "MAIN")) {
					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
				}

				else if (Objects.equals(system.getTabNewPage(), "selCanOrc")) {
					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

		
					checkDid("Post Block Check");
					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						setItemProperty("navdb_orc.apply_ind", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setItemProperty("navdb_orc.apply_ind", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						setItemProperty("navdb_orc.apply_ind", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					}

				
					populateOrcApplied();
					navdbOrc.setQueryHits(toString(navdbOrc.size()));

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanGeo")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");
					goBlock("select_by_geographic_area", "");
					system.setCursorBlock("selectByGeographicArea");
					String where = "GEO_AREA_NAME NOT LIKE '$%%' AND GEO_AREA_NAME != 'WORLD' AND NAVDB_ID = '%s'"
							.formatted(navdb.getNavdbId());
	
					long queryHits = executeQuery(this, system.getCursorBlock(), where,
							toString(nameIn(nameIn(this, system.getCursorBlock()), "join_Clause")),
							toString(nameIn(nameIn(this, system.getCursorBlock()), "order_By")));
					log.debug(""+queryHits);
					setGeoCount();

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanArea")) {

					
					checkDid("Main Button Check");
					checkSave(system.getCursorBlock());
					checkDid("Post Block Check");
					createNewGroup("Select_Group", 1);

					createNewGroup("DeSelect_Group", 1);

					String where = "NAVDB_ID LIKE ('%s')".formatted(navdb.getNavdbId());
					long queryHits = executeQuery(this, DbConstants.SELECT_BY_AREA, where,
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_AREA), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_AREA), "order_By")));
					log.debug(""+queryHits);
					queryBlockRecords(DbConstants.AREA_CODE, "INITIAL");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanIcao")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");

					createNewGroup("Select_Group", 1);

					createNewGroup("DeSelect_Group", 1);

					String where = "NAVDB_ID LIKE ('%s')".formatted(navdb.getNavdbId());
					long queryHits = executeQuery(this, DbConstants.SELECT_BY_ICAO, where,
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_ICAO), "join_Clause")),
							toString(nameIn(nameIn(this, DbConstants.SELECT_BY_ICAO), "order_By")));
					log.debug(""+queryHits);
					queryBlockRecords("ICAO", "INITIAL");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanAirport")) {
					controlBlock.setAptCnt(0);
					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());
					checkDid("Post Block Check");

					createNewGroup("selectGroup", 2);
					createNewGroup("deselectGroup", 2);


					String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
					system.setCursorBlock("selectByAirportGroup");
					navdbExecuteQuery(this, where);

					queryBlockRecords("STD_AIRPORT", "INITIAL");
					controlBlock.setAtaIataDesignator("");
					goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "");

					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty(DbConstants.SELECT_BY_AIRPORT_GROUP, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_airport_group.group_name", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.AIRPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.chk", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("airport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.chk", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_airport.chk", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty(DbConstants.SELECT_BY_AIRPORT_GROUP, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_airport_group.group_name", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.AIRPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.move", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("airport_to_select.chk", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("std_airport.chk", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "FORMAT_MEDIA")) {

					
					checkDid("Main Button Check");

					
					checkSave(system.getCursorBlock());

					
					createNewGroup("Select_Group", 1);

					
					createNewGroup("DeSelect_Group", 1);

					String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
					system.setCursorBlock("navdbDeliveryFormatMedia");
					navdbExecuteQuery(this, where);

					queryBlockRecords(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "INITIAL");
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.format_media_type",
									FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("fms_delivery_format_media.format_media_type", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.format_media_type",
									FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("navdb_delivery_format_media.binary_size", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.chk", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("fms_delivery_format_media.format_media_type", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanHeliport")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");

					createNewGroup("Select_Group", 2);

					createNewGroup("DeSelect_Group", 2);

					String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
					system.setCursorBlock("selectByHeliportGroup");
					navdbExecuteQuery(this, where);

					queryBlockRecords("STD_HELIPORT", "INITIAL");
					goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
					system.setCursorBlock("selectByHeliportGroup");

				}

				else if (Objects.equals(system.getTabNewPage(), "DMR")) {

					
					checkDid("Main Button Check");

					
					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");
					goBlock(DbConstants.FMS_DMR, "");
					String tempCursorBlock = system.getCursorBlock();
					system.setCursorBlock("fmsDmr");
					String where = "FMS_ID = '%s' and DM_ORC_IND='DM'".formatted(navdb.getFmsId());
					navdbExecuteQuery(this, where);
					system.setCursorBlock(tempCursorBlock);

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanValidate")) {
					String vMessages = null;
					controlBlock.setDid(Y);
					String vOneMessage = null;
					String vSeperator = "-- -- -- -- -- Selection Criteria is Valid -- -- -- -- -- --";
					Integer vPosition = 0;
					String vStartWith = null;
					Integer lnValidateRecCnt = 0;
					Integer repParam = 1;
					String vSeperator1 = null;
					system.setCursorRecordIndex(0);
					this.validationResult = new DuBlock<ValidationResult>();
					validationResult.add(new ValidationResult());
					
					if (Objects.equals(controlBlock.getDid(), Y)) {
						checkSave(system.getCursorBlock());

					}


					checkDid("Main Button Check");

					checkDid("Post Block Check");
					goBlock("VALIDATION_RESULT", "");

					vSeperator1 = vSeperator;
					validationResult.getRow(system.getCursorRecordIndex()).setRuntimeMessage(
							"Selection Validation result for NAVDB ID '" + navdb.getNavdbId() + "':");

					query = """
							 Delete from TMP_FOR_LOAD_VLD_TAB
							""";
					app.executeNonQuery(query);
					int i = 0;
					for (int Rec_No = 1; Rec_No <= 10; Rec_No++) {

					
						Map<String, Object> dbMsg = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "Check_Selection_Criteria",
								"Selection_Main",
								new ProcedureInParameter("pi_snavdb_id", navdb.getNavdbId(), OracleTypes.VARCHAR),
								new ProcedureInParameter("pi_scallingprogram", "NAVDB_SETUP", OracleTypes.VARCHAR),
								new ProcedureOutParameter("po_scomments_status", OracleTypes.VARCHAR),
								new ProcedureInParameter("pi_nrec_number", Rec_No, OracleTypes.NUMBER),
								new ProcedureInParameter("pi_from_DU", repParam, OracleTypes.NUMBER));

						vMessages = toString(dbMsg.get("po_scomments_status"));

						if (!Objects.equals(vMessages, null)) {
							vSeperator = "-- -- -- -- -- Validation Messages finished -- -- -- -- -- --";

						}

						if (length(vMessages) > 32467) {
							lnValidateRecCnt = length(vMessages);

						}

						while (!Objects.equals(vMessages, null)) {
							String[] arrayOfMessages = vMessages.split("\n");
							for (String message : arrayOfMessages) {
								if (like("ERROR%", message)) {
									vStartWith = "ERROR";

								}

								else if (like("WARNING%", message)) {
									vStartWith = "WARNING";

								}

								vMessages = rtrim(ltrim(vMessages, vStartWith));
								if (Objects.equals(instr(vMessages, "WARNING"), 0)) {
									vPosition = instr(vMessages, "ERROR");

								}

								else if (Objects.equals(instr(vMessages, "ERROR"), 0)) {
									vPosition = instr(vMessages, "WARNING");

								}

								else if (instr(vMessages, "WARNING") < instr(vMessages, "ERROR")) {
									vPosition = instr(vMessages, "WARNING");

								}

								else if (instr(vMessages, "WARNING") > instr(vMessages, "ERROR")) {
									vPosition = instr(vMessages, "ERROR");

								}

								if (vPosition > 0) {
									vOneMessage = vStartWith + substr(vMessages, 1, vPosition - 1);
									vMessages = substr(vMessages, vPosition);

								}

								else {
									vOneMessage = vStartWith + vMessages;
									vMessages = null;

								}
								if (!Objects.equals(validationResult.getRow(i).getRuntimeMessage(), vOneMessage)) {
									ValidationResult validateResult = new ValidationResult();
									validateResult.setRuntimeMessage(vOneMessage);
									validationResult.add(validateResult);
									i++;

								}
							}

						}

					}

					if (Objects.equals(vSeperator, vSeperator1)) {
						parameter.setVldtReport(0);

					}

					else {
						parameter.setVldtReport(1);

					}
					validationResult.getRow(system.getCursorRecordIndex()).setRuntimeMessage(vSeperator);

					if (lnValidateRecCnt >= 32467) {

						coreptLib.dspMsg("Retrieving limited Records. Please click on Report to get \ndetailed validation messages.");

					}

					validationResult.setQueryHits(toString(validationResult.size()));

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanCopyNavdb")) {

					
					checkDid("Main Button Check");

					
					checkSave(system.getCursorBlock());
					copyGeoArptGrp.setDataSupplier(navdb.getDataSupplier());
					copyGeoArptGrp.setNewDcr(global.getDcrNumber());
					copyGeoArptGrp.setGeoArea("GEO Area");
					copyGeoArptGrp.setAreaCode("Area Code");
					copyGeoArptGrp.setIcaoCode("ICAO Code");
					copyGeoArptGrp.setArptGrp("Airport Group");
					copyGeoArptGrp.setGeoChk(N);
					copyGeoArptGrp.setAcChk(N);
					copyGeoArptGrp.setIcChk(N);
					copyGeoArptGrp.setAgChk(N);
					copyNavdb.setNewNavdb("");
					copyNavdb.setDataSupplier(navdb.getDataSupplier());
					goItem("copy_navdb.new_navdb");

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanGeneralCriteria")) {

					
					checkDid("Main Button Check");
					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");
					goBlock("general_criteria", "");
					system.setCursorBlock("generalCriteria");

					coreptLib.coreptexecutequery(this);
					lastRecord("");
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));

						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty(DbConstants.GENERAL_CRITERIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty(DbConstants.GENERAL_CRITERIA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

				else if (Objects.equals(system.getTabNewPage(), "CUSTOMER")) {
					parameter.setPCustomerFlag(Y);

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");
					goBlock("CUSTOMER_INFO", "");

					goItem("customer_info.customer_email_id");
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setItemProperty("customer_info.customer_email_id", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("customer_info.customer_email_id", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("customer_info.notes", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("customer_info.notes", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setItemProperty("customer_info.customer_email_id", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("customer_info.customer_email_id", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("customer_info.notes", FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("customer_info.notes", FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);

						}

					}
					customerInfo.setCustEmailFlag(navdb.getCustEmailFlag());
					customerInfo.setCustomerEmailId(navdb.getCustomerEmailId());
					customerInfo.setNotes(navdb.getNotes());

				}

				else if (Objects.equals(system.getTabNewPage(), "selCanSaveLoadSel")) {

					checkDid("Main Button Check");

					checkSave(system.getCursorBlock());

					checkDid("Post Block Check");
					saveSelections.setType("");
					saveSelections.setCycle("");
					saveSelections.setName("");
					saveSelections.setComments("");
					saveSelections.setCreatedOn(null);
					saveSelections.setAction("");
					setItemProperty("save_selections.name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.comments", FormConstant.INSERT_ALLOWED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.comments", FormConstant.UPDATE_ALLOWED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("save_selections.save", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else if (Objects.equals(system.getTabNewPage(), "MAIN")) {
					checkDid("Post Block Check");

				}

			}

			else {

				coreptLib.dspMsg("Please execute a query first.");
				goItem("navdb.navdb_id");
				throw new FormTriggerFailureException();

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" whenTabPageChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the whenTabPageChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	private void setGeoCount() throws Exception {
		try {
			String query = "";
			DuRecord rec = null;
			for (int i = 0; i < selectByGeographicArea.size(); i++) {
				query = "SELECT COUNT(*) FROM geographic_area_point WHERE select_by_id = ?";
				rec = app.selectInto(query, selectByGeographicArea.getRow(i).getSelectById());
				selectByGeographicArea.getRow(i).setGeoCount(rec.getInt());

			}
		} catch (Exception e) {
			throw e;
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbKeyDelrec(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer vButton = 0;
			Integer vButtonDeleteAll = 0;
			String vOut = "OK";
			String primaryCur = """
					select 'x'
					  	from GENERATED_NAVDB
					    where NAVDB_ID = ?
					""";

			checkDelRec(system.getCursorBlock(), system.getRecordStatus());

			if (!Objects.equals(navdb.getNavdbId(), null)) {
				List<DuRecord> records = app.executeQuery(primaryCur, navdb.getNavdbId());
				if (!(records.isEmpty())) {
					vButtonDeleteAll = 1;

				}

				if (Objects.equals(vButtonDeleteAll, 1)) {
					if (Objects.equals(global.getIsAdmin(), N)) {
						coreptLib.dspMsg(
								"This NAVDB_ID has been generated at least once, only \nperson who has ADMIN privilege can delete it.");
						throw new FormTriggerFailureException();

					}

					else if (Objects.equals(global.getIsAdmin(), Y)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButtonDeleteAll = displayAlert.moreButtons(S, "DELETE NAVDB",
									"This NAVDB_ID has been generated at least once. \nDelete this record will delete all the criteria and \ngeneration histories of this NAVDB ID."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("deleteAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButtonDeleteAll = alertDetails.getAlertValue("deleteAlert",
									alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButtonDeleteAll, 2)) {
							throw new FormTriggerFailureException();

						}

						else {
							vOut = deleteGeneratedNavdb();

						}

					}

				}

				else if (Objects.equals(vButtonDeleteAll, 0)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						vButton = displayAlert.moreButtons(S, "DELETE NAVDB",
								"Delete this record will delete all the criteria related with \nthis NAVDB ID."
										+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
								"Delete All", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("deleteAlert2");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("deleteAlert2", alertDetails.getCurrentAlert());
					}

					if (Objects.equals(vButton, 2)) {
						throw new FormTriggerFailureException();

					}

				}

				if (Objects.equals(vOut, "OK")) {

					 setApplicationProperty(CURSOR_STYLE, BUSY);

					Map<String, Object> deleteProcedure = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DELETE_NAVDB", "NAVDB_UTIL",
							new ProcedureInParameter("p_old_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
							new ProcedureOutParameter("p_out", OracleTypes.VARCHAR),
							new ProcedureInParameter("p_type", "DELETE_ALL", OracleTypes.VARCHAR));

					vOut = toString(deleteProcedure.get("p_out"));

					 setApplicationProperty(CURSOR_STYLE, DEFAULT);

				}

				if (Objects.equals(vOut, "OK")) {

					copy(this, "DELETED", toSnakeCase(system.getCursorBlock()) + ".recordStatus");

					commitForm(this);
					String rowid = toString(nameIn(this, substr("navdb", 1, 10) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);

					coreptLib.dspMsg("All records have been deleted succesfully.");

				}

				else {
					coreptLib.dspMsg("Error when delete:" + chr(10) + vOut);

				}

			}

			else {
				deleteRecord("");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOnPopulateDetails(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOnPopulateDetails Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String recstat = system.getRecordStatus();
			String startitm = system.getCursorItem();
			Object relId = null;
			String getFmsOrc = """
					select unique dmr_id from FMS_DMR where upper(FMS_ID) = upper(?)
					    minus
					    select unique orc_id from NAVDB_ORC where NAVDB_ID = ?
					""";
			String getNavdbOrc = """
					select unique orc_id from NAVDB_ORC where NAVDB_ID = ?
					    minus
					    select unique dmr_id from FMS_DMR where upper(FMS_ID) = upper(?)
					""";
			String vDefaultInd = null;
			log.debug(getFmsOrc+getNavdbOrc+vDefaultInd);

			if ((Objects.equals(recstat, "NEW") || Objects.equals(recstat, "INSERT"))) {
                log.debug("Inside if for recstat value is new / Insert ");
			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
			
				queryMasterDetails(relId, DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA);

			}

			if (((!Objects.equals(navdb.getFmsId(), null)))) {
				queryMasterDetails(relId, DbConstants.FMS_DMR);

			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
				queryMasterDetails(relId, DbConstants.SELECT_BY_HELIPORT_GROUP);

			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
				queryMasterDetails(relId, DbConstants.SELECT_BY_AREA);

			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
				queryMasterDetails(relId, "CUSTOMER_NAVDB");

			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
				queryMasterDetails(relId, DbConstants.SELECT_BY_ICAO);

			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
				queryMasterDetails(relId, DbConstants.SELECT_BY_GEOGRAPHIC_AREA);

			}

			if (((!Objects.equals(navdb.getNavdbId(), null)))) {
				queryMasterDetails(relId, DbConstants.SELECT_BY_AIRPORT_GROUP);

			}

			if ((!Objects.equals(system.getCursorItem(), startitm))) {
				goItem(startitm);
				checkPackageFailure();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOnPopulateDetails executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOnPopulateDetails Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbPreBlock(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbPreBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(controlBlock.getDid(), Y)) { // && idNull(findTimer("orc_alarm"))

				checkSave(system.getCursorBlock());

			}

			checkDid("Main Button Check");

			setButtonProperty("NONE");
			Integer vCount = 0;

			query = """
					select count(*) from fms_dmr		-- Fix;Changed to fms_orc instead navdb_orc - scr 6629.01 - Eswar KC -- SCR 7773 - 28-AUG-2018(CHANGED TABLE NAME FROM FMS_ORC TO FMS_DMR)
					  where fms_id = NVL(?,'$$$')
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			if (Objects.equals(vCount, 0)) {
				setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			else {
				setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPreBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPreBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbPostRecord(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbPostRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				controlBlock.setDid(N);

			}

			else {
				controlBlock.setDid(Y);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPostRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPostRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbKeyCommit(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbKeyCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if ((global.getClearBlock() != null) && (global.getClearBlock())) {
				commitForm(this);
				sendUpdatedRowIdDetails();
				global.setClearBlock(false);
				system.setFormStatus("NORMAL");
				system.setRecordStatus("QUERIED");
			} else {
				parameter.setPCustomerFlag(N);
				Integer vCount = 0;
				Integer vCount1 = 0;

				query = """
						select count(fms_id) from
								       (select fms_id from flight_management_system where fms_id = ?
								        and binary_format_type like 'K%')
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				vCount = rec.getInt();
				if (vCount > 0) {
					if (Objects.equals(navdb.getProfileNumber(), null)) {
						goItem("navdb.profile_number");

						coreptLib.dspMsg("Please provide valid profile number");
						throw new FormTriggerFailureException();

					}

				}

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					log.debug("Work type is VIEW");

				}

				else {
					if ((Objects.equals(nvl(navdb.getBinaryFormatType(), ""), "CMC"))) {
						if (Objects.equals(navdb.getCmcDependentNavdb(), null)) {
							coreptLib.dspMsg("CMC Dependent NavDB" + "is required. Please enter ");
							throw new FormTriggerFailureException();

						}

						else if (Objects.equals(navdb.getCmcCustomerName(), null)) {
							coreptLib.dspMsg("DB Name" + "is required. Please enter ");
							throw new FormTriggerFailureException();

						}

					}

					query = """
							select count(fms_id)
							from flight_management_system
							where fms_id = ? and binary_format_type in('B00','B10','B20','B31')
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					vCount1 = rec.getInt();
					if (vCount1 > 0) {
						if (Objects.equals(navdb.getBrgaIdent(), null)) {
							goItem("navdb.brga_ident");

							coreptLib.dspMsg(
									"For BRGA Database, BRGA Ident field cannot be \nBlank. This field represents short form of customer \nname(8chars)");
							throw new FormTriggerFailureException();

						}

					}

					if (Objects.equals(navdb.getPrimaryFocal(), null)) {
						coreptLib.dspMsg("Primay Focal field should not be BLANK");
						throw new FormTriggerFailureException();

					}
					// manually handled
					if (Objects.equals(system.getCursorBlock(), "customerInfo")) {
						navdb.setRecordStatus("CHANGED");
						commitForm(this);
						message("Record has been saved successfully");
						system.setFormStatus("NORMAL");
					}
					// manually handled
					if (Objects.equals(system.getCursorBlock(), "navdbDeliveryFormatMedia")) {
						commitForm(this);
						message("Record has been saved successfully");
						system.setFormStatus("NORMAL");
					}
					// manually handled
					if (Objects.equals(system.getCursorBlock(), "customerNavdb")) {
						for (int i = 0; i < customerNavdb.size(); i++) {
							if (Objects.equals(customerNavdb.getRow(i).getRecordStatus(), "INSERT")) {
								customerNavdb.getRow(i).setNavdbId(navdb.getNavdbId());
							}
						}
						commitForm(this);
						message("Record has been saved successfully");
						system.setFormStatus("NORMAL");
					}
					checkToCommit("COMMIT");
					parameter.setNewNavdb(N);
					if (Objects.equals(parameter.getNewNavdbFlag(), Y)) {
						navdbPostInsert();
						parameter.setNewNavdbFlag(N);
					}

				}
				controlBlock.setDid(Y);
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbKeyCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbKeyCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}


	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbPostQuery(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			navdb.setOldFmsId(navdb.getFmsId());
			if (Objects.equals(navdb.getProductionReadyInd(), Y)) {
				setItemInstanceProperty("navdb.production_ready_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.production_ready_ind", "current_record", "visual_attribute", "PLAIN");

			}
			if (Objects.equals(navdb.getTestDbInd(), Y)) {
				setItemInstanceProperty("navdb.test_db_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.test_db_ind", "current_record", "visual_attribute", "PLAIN");

			}
			if (Objects.equals(navdb.getSaaarInd(), Y)) {
				setItemInstanceProperty("navdb.saaar_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.saaar_ind", "current_record", "visual_attribute", "PLAIN");

			}
			checkProfile();
			enableDisableBrgaIdent();
			enableDisableValerieInd();
			if (Objects.equals(navdb.getGenValerie(), Y)) {
				setItemInstanceProperty("navdb.gen_valerie", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.gen_valerie", "current_record", "visual_attribute", "PLAIN");

			}
			if (!Objects.equals(navdb.getFmsId(), null)) {

				try {

					query = """
							select size_units from binary_table_size_limits
									where fms_id = ?
									and table_name = 'NAVDB'
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					controlBlock.setSizeUnit(rec.getString());
				}

				catch (NoDataFoundException e) {
					controlBlock.setSizeUnit(null);

				}

			}

			String getCustIdent = """
					select customer_ident 
					from customer_navdb
					where navdb_id = ?
					""";
			String vCust = null;

			List<DuRecord> records = app.executeQuery(getCustIdent, navdb.getNavdbId());

			for (int i = 0; i < records.size(); i++) {
				vCust = records.get(i).getString();
			}

			navdb.setCustomerIdent(navdb.getCustomerIdent() + " " + vCust);

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vOut = null;
				String newDataType = """
						select record_type_code
									from fms_data_type
								 where upper(fms_id) = upper(?)
								 and selectable_ind = 'Y' -- Fix SCR 06158 - Ashish N- 07-Jan-2022
								minus
								select record_type_code
									from NAVDB_SELECT_CRITERIA
								 where navdb_id = ?
								   and geo_area_id = -1
						""";
				Map<String, Object> extraDeleteProcedure = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DELETE_EXTRA_NAVDB_SELECTION",
						"NAVDB_UTIL", new ProcedureInParameter("p_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
						new ProcedureOutParameter("p_out", OracleTypes.VARCHAR));

				vOut = toString(extraDeleteProcedure.get("p_out"));

				if (Objects.equals(vOut, "OK")) {
                    log.debug("Inside if vOut value is ok");

				}

				else {
					coreptLib.dspMsg(vOut);
				}
				List<DuRecord> listOfRecords = app.executeQuery(newDataType, navdb.getFmsId(), navdb.getNavdbId());
				for (DuRecord r : listOfRecords) {
					createDefaultNewCriteria(toInteger(r.getObject("record_type_code")));
				}

			}

			try {

				query = """
						Select binary_format_type
							  from flight_management_system
							 Where fms_id = ?
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				navdb.setBinaryFormatType(rec.getString());
			}

			catch (Exception e) {

				log.error("Error while Executing the navdbPostQuery Service");

			}
			if (Objects.equals(nvl(navdb.getBinaryFormatType(), ""), "CMC")) {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}
			String lnGenCrtrExists = null;

			try {

				query = """
						Select 'Y'
									from FMS_GENERAL_CRITERIA	fgc
								 Where fgc.fms_id = ?
								 	 And RowNum = 1
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				lnGenCrtrExists = rec.getString();
			}

			catch (NoDataFoundException e) {
				lnGenCrtrExists = N;

			}
			if (!Objects.equals(lnGenCrtrExists, Y)) {
				setTabPageProperty("selCan.GeneralCriteria", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}

			else {
				setTabPageProperty("selCan.GeneralCriteria", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}
			parameter.setDupListsRec(0);
			if (Objects.equals(navdb.getDataSupplierName(), null)) {

				try {

					query = """
							SELECT DATA_SUPPLIER_NAME
								  from DATA_SUPPLIER
								 WHERE DATA_SUPPLIER = ?
							""";
					rec = app.selectInto(query, navdb.getDataSupplier());
					navdb.setDataSupplierName(rec.getString());
				}

				catch (NoDataFoundException e) {
					navdb.setDataSupplierName(null);

				}

			}

			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (!Objects.equals(global.getDataSupplier(), navdb.getDataSupplier())) {
					setItemInstanceProperty("navdb.data_supplier_name", null, "visual_attribute",
							"supplier");

				}
				else {
					setItemInstanceProperty("navdb.data_supplier_name", null, "visual_attribute",
							"supplierWhite");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Arrays.asList("QUERIED").contains(system.getRecordStatus())) {
				if (Objects.equals(navdb.getDataSupplier(), null)) {
					navdb.setDataSupplier(global.getDataSupplier());

				}

				if (true) { // idNull(findTimer("orc_alarm"))
					if (Objects.equals(navdb.getGnsNavId(), null) && !Objects.equals(navdb.getFmsId(), null)
							&& !Objects.equals(system.getFormStatus(), "QUERIED")) {
						Integer vGet = 0;

						try {

							query = """
									select 1 from flight_management_system
													where upper(fms_id) = upper(?)
													and upper(fms_descr) like '%GNS%'
									""";
							rec = app.selectInto(query, navdb.getFmsId());
							vGet = rec.getInt();
							if (Objects.equals(vGet, 1)) {

								coreptLib.dspMsg("This is a GNS type Navdb. Please enter the GNS ID.");
								throw new FormTriggerFailureException();

							}

						}

						catch (NoDataFoundException e) {
							log.debug("No data found exception captured on navdbWhenValidateRecord");

						}

					}

				}

				if (Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {	
					navdb.setCreateDcrNumber(new CustomInteger(global.getDcrNumber()));
					controlBlock.setWorldGeo(N);
					setItemInstanceProperty("control_block.world_geo", "current_record", "visual_attribute", "PLAIN");

				}

				else {
					navdb.setUpdateDcrNumber(new CustomInteger(global.getDcrNumber()));

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbPostInsert(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbPostInsert Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			try {

				query = """
						 insert into customer(customer_ident)
								values (?)
						""";
				app.executeNonQuery(query, navdb.getNavdbId());
			}

			catch (Exception e) {
				if (Objects.equals(OracleHelpers.getSQLcode(e), -1)) {
                    log.debug("Inside if SQL code value is -1");

				}

			}

			query = """
					 insert into customer_navdb(navdb_id,customer_ident)
					values (?,?)
					""";
			app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId());
			String formatMediaTypeCur = """
					select format_media_type
						  from FMS_DELIVERY_FORMAT_MEDIA
						  where upper(fms_id) = upper(?)
					""";
			String vFormatMediaType = null;
			String vDbSignVer = null;

			List<DuRecord> listOfRecords = app.executeQuery(formatMediaTypeCur, navdb.getFmsId());
			for (DuRecord record : listOfRecords) {
				vFormatMediaType = toString(record.getObject("format_media_type"));
				query = """
						SELECT DBSIGN_VER from DELIVERY_FORMAT_MEDIA WHERE FORMAT_MEDIA_TYPE=?
						""";
				rec = app.selectInto(query, vFormatMediaType);
				vDbSignVer = rec.getString();

				query = """
						 INSERT INTO  NAVDB_DELIVERY_FORMAT_MEDIA(NAVDB_ID,FORMAT_MEDIA_TYPE,DBSIGN_VER) VALUES(?,?,?)
						""";
				app.executeNonQuery(query, navdb.getNavdbId(), vFormatMediaType, vDbSignVer);
			}
			createDefaultCriteria(-1, null, null, null, null, null);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPostInsert executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPostInsert Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	public void navdbPostInsert() throws Exception {
		log.info(" navdbPostInsert Executing");
		String query = "";
		DuRecord rec = null;
		try {

			try {

				query = """
						 insert into customer(customer_ident)
								values (?)
						""";
				app.executeNonQuery(query, navdb.getNavdbId());
			}
			// others
			catch (Exception e) {
				if (Objects.equals(OracleHelpers.getSQLcode(e), -1)) {
					log.debug("Validate the Oracle code is -1");

				}

			}

			query = """
					 insert into customer_navdb(navdb_id,customer_ident)
					values (?,?)
					""";
			app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId());
			String formatMediaTypeCur = """
					select format_media_type
						  from FMS_DELIVERY_FORMAT_MEDIA
						  where upper(fms_id) = upper(?)
					""";
			String vFormatMediaType = null;
			String vDbSignVer = null;

			List<DuRecord> listOfRecords = app.executeQuery(formatMediaTypeCur, navdb.getFmsId());
			for (DuRecord record : listOfRecords) {
				vFormatMediaType = toString(record.getObject("format_media_type"));
				query = """
						SELECT DBSIGN_VER from DELIVERY_FORMAT_MEDIA WHERE FORMAT_MEDIA_TYPE=?
						""";
				rec = app.selectInto(query, vFormatMediaType);
				vDbSignVer = rec.getString();

				query = """
						 INSERT INTO  NAVDB_DELIVERY_FORMAT_MEDIA(NAVDB_ID,FORMAT_MEDIA_TYPE,DBSIGN_VER) VALUES(?,?,?)
						""";
				app.executeNonQuery(query, navdb.getNavdbId(), vFormatMediaType, vDbSignVer);
			}
			createDefaultCriteria(-1, null, null, null, null, null);
			log.info(" navdbPostInsert executed successfully");
		} catch (Exception e) {
			log.error("Error while Executing the navdbPostInsert Service");
			throw e;
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getSortOrder(), Y)) {
				navdb.setSortOrder(N);

			}

			if (Objects.equals(nvl(navdb.getSortOrder(), N), N)) {
				setFmsId();

			}
			hideView("focals");
			hideView("GEN_CRITERIA_SUB_TYPE");
			Integer lnCount = 0;

			try {

				query = """
						SELECT count(*) from navdb_general_criteria_value
						  	WHERE navdb_id = (SELECT navdb_id FROM navdb_general_criteria
						  										WHERE criteria_id = 4
						  										AND apply_ind = 'Y'
						  										AND navdb_id = ?)
						  	AND criteria_id = 4
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				lnCount = rec.getInt();
				if (Objects.equals(lnCount, 0)) {

					query = """
							UPDATE navdb_general_criteria
							  		SET apply_ind = 'N'
							  		WHERE navdb_id = ?
							  		AND criteria_id = 4
							  		AND apply_ind = 'Y'
							""";
					app.executeNonQuery(query, navdb.getNavdbId());
				}
				genericNativeQueryHelper.commit(this, "generalCriteria");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				log.debug("No Data found captured in navdbWhenNewRecordInstance");

			}

			enableDisableProfile();
			enableDisableValerieInd();
			enableDisableBrgaIdent();
			enableDisableCmc();
			setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
			
			setRadioButtonProperty("default", "selectAllRulesIxrrd", "ENABLED", PROPERTY_FALSE);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String vCblock = system.getCursorBlock();

				if (!Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOnError(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" navdbOnError Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer msgnum = global.getErrorCode();
			if (Objects.equals(msgnum, 40209)) {
				coreptLib.dspMsg("Must be of the form 99.999.");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOnError executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOnError Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbNavdbIdWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbNavdbIdWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			String navId = "";
			String vNewCust = "";
			Integer vButton;

			if (!Objects.equals(navdb.getNavdbId(), null)) {
				if (length(navdb.getNavdbId()) > 3) {
					coreptLib.dspMsg(
							"Currently, a NAVDB_ID shall be same to a Customer_id;\nit can not exceed 3 characters.");
					throw new FormTriggerFailureException();

				}

				else {

					query = """
							SELECT COUNT(*)	from navdb
							  		WHERE navdb_id = ?
							""";
					rec = app.selectInto(query, navdb.getNavdbId());
					navId = rec.getString();
					if (!Objects.equals(navId, "0")) {
						coreptLib.dspMsg("This NavDB ID is Already Exists. Please Enter A New \nNavDB ID.");
						throw new FormTriggerFailureException();

					}

					else {

						try {

							query = """
									select customer_ident from customer
														where customer_ident = ?
									""";
							rec = app.selectInto(query, navdb.getNavdbId());
							vNewCust = rec.getString();
							parameter.setNewNavdb(Y);
							log.debug(vNewCust);
						}

						catch (NoDataFoundException e) {
							alertDetails.getCurrent();
							if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
								displayAlert
										.moreButtons(S, "No Customer Found",
												"Customer with name '" + navdb.getNavdbId() + "' does not exist. "
														+ chr(10) + "Do you want to generate this customer?",
												"Yes", "No", null);
								OracleHelpers.bulkClassMapper(displayAlert, this);
								alertDetails.createNewRecord("idAlert");
								throw new AlertException(event, alertDetails);
							} else {
								vButton = alertDetails.getAlertValue("idAlert", alertDetails.getCurrentAlert());
							}

							if (Objects.equals(vButton, 2)) {
								coreptLib.dspMsg("Please enter a correct NAVDB ID");
								navdb.setNavdbId(null);
								throw new FormTriggerFailureException();

							}

							else {
								parameter.setNewNavdb(Y);

							}

						}

					}

				}

			}

			if (!Objects.equals(navdb.getFmsId(), null)) {
				navdb.setFmsId(null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbNavdbIdWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbNavdbIdWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbFmsIdWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbFmsIdWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			String recordCur = """
					select record_type_code
							from   fms_data_type
							where  upper(fms_id) = upper(?)
							and selectable_ind = 'Y'
					""";
			String extraRectypeCode = """
					select record_type_code
								from fms_data_type
							 where upper(fms_id) = upper(?)
							 and selectable_ind = 'Y' --Fix SCR 06158 - Ashish N- 21-Jan-2022
							minus
							select record_type_code
								from fms_data_type
							 where upper(fms_id) = upper(?)
							 and selectable_ind = 'Y'
					""";
			String formatMediaTypeCur = """
					select format_media_type
						  from FMS_DELIVERY_FORMAT_MEDIA
						  where upper(fms_id) = upper(?)
					""";
			String vFormatMediaType = null;
			String fmsIdCur = """
					SELECT fms_id
					        FROM flight_management_system
					       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
					         AND binary_format_type IN ('FD', 'NFD')
					""";
			Integer lnButton = 0;
			Integer buttonVal = 0;
			String datatypChk = null;
			Integer vCount = 0;
			Integer vNewRecordCode = 0;
			String lsFmsUsable = null;
			Integer vReccnt = 0;

			if (!Objects.equals(navdb.getFmsId(), null)) {
				List<DuRecord> records = app.executeQuery(fmsIdCur);
				for (DuRecord fms_id_rec : records) {
					if (Objects.equals(fms_id_rec.getObject("fms_id"), navdb.getFmsId())) {
						Boolean dbOut = app.executeFunction(Boolean.class, DbConstants.SCHEMA_CPTS, "check_ident_for_alphanum",
								"forms_utilities", OracleTypes.BOOLEAN,
								new ProcedureInParameter("p_ident", navdb.getNavdbId(), OracleTypes.VARCHAR));
						if (dbOut) {
							if (Objects.equals(system.getRecordStatus(), "INSERT")) {
								alertDetails.getCurrent();
								if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
									 displayAlert.moreButtons(S, "Change FMS ID/NavDB ID",
											"For B787 or B747 databases, Characters I,O,Q or Z shall \nnot be as a part of the Navdb Ident."
													+ chr(10) + "Do you want to change FMS ID or NavDB ID.",
											"FMS ID", "NavDB ID", null);
									OracleHelpers.bulkClassMapper(displayAlert, this);
									alertDetails.createNewRecord("idAlert");
									throw new AlertException(event, alertDetails);
								} else {
									lnButton = alertDetails.getAlertValue("idAlert", alertDetails.getCurrentAlert());
								}
								if (Objects.equals(lnButton, 1)) {
									setItemProperty("navdb.fms_id", "required", FormConstant.PROPERTY_TRUE);
									throw new FormTriggerFailureException();

								}

								else {
									setItemProperty("navdb.fms_id", "required", FormConstant.PROPERTY_FALSE);
								}

							}

							else if (Objects.equals(system.getRecordStatus(), "CHANGED")) {
								displayAlert.oneButton(S, "Change FMS ID",
										"For B787 or B747 databases, Characters I,O,Q or Z shall \nnot be as a part of the Navdb Ident."
												+ chr(10) + "Change FMS ID.");
								setItemProperty("navdb.fms_id", "required", FormConstant.PROPERTY_TRUE);
								throw new FormTriggerFailureException();

							}

						}

					}

				}

			}

			setItemProperty("navdb.fms_id", "required", FormConstant.PROPERTY_TRUE);
			if (Objects.equals(system.getRecordStatus(), "CHANGED")
					|| Objects.equals(system.getRecordStatus(), "INSERT")) {
				if (!Objects.equals(upper(parameter.getDbInstName()), "ENGR")) {

					query = """
							SELECT NVL(usable,'$') from flight_management_system
								  	WHERE fms_id = ?
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					lsFmsUsable = rec.getString();
					if (Objects.equals(lsFmsUsable, "E")) {
						coreptLib.dspMsg("FMS '" + navdb.getFmsId() + "' is an Engineering FMS_ID, you cannot use it."
								+ chr(10) + "Please press F9 to display FMS ID List.");
						throw new FormTriggerFailureException();

					}

				}

			}

			if (!Objects.equals(navdb.getFmsId(), null)) {
				List<DuRecord> records = app.executeQuery(recordCur, navdb.getFmsId());
				datatypChk = toString(records.getLast().getObject("record_type_code"));
				if (Objects.equals(datatypChk, null)) {
					dspError("This FMS ID Is Not Configured!");
					if (!Objects.equals(navdb.getOldFmsId(), null)) {
						navdb.setFmsId(navdb.getOldFmsId());

					}

					throw new FormTriggerFailureException();

				}

				else {
					Integer lnCntLoaFlag = 0;

					query = """
							SELECT count(loa_flag) from flight_management_system
										    WHERE 1 = 1
										      AND loa_flag = 'Y'
										      AND fms_id = ?
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					lnCntLoaFlag = rec.getInt();
					if (Objects.equals(lnCntLoaFlag, 0)) {
						coreptLib.dspMsg("FMS ID ''" + navdb.getFmsId() + "'' is not covered by the LOA.");

					}

					if (!Objects.equals(navdb.getOldFmsId(), null)) {
						if (!Objects.equals(navdb.getOldFmsId(), navdb.getFmsId())) {
							alertDetails.getCurrent();
							if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
								 displayAlert.moreButtons(S, "Change FMS ID",
										"Record Types in the old but not the new part number,\ntheir criteiras are going to be deleted."
												+ chr(10)
												+ "Record Types in the new but not the old part number,\ntheir default criterias are going to be created.",
										"OK", "Cancel", null);
								OracleHelpers.bulkClassMapper(displayAlert, this);
								alertDetails.createNewRecord("fmsIdAlert");
								throw new AlertException(event, alertDetails);
							} else {
								buttonVal = alertDetails.getAlertValue("fmsIdAlert", alertDetails.getCurrentAlert());
							}

							if (Objects.equals(buttonVal, 1)) {

								query = """
										select count(*) from (
										   		 				select record_type_code
													 				from fms_data_type
													 				where upper(fms_id) = upper(?)
													 				and selectable_ind = 'Y' --Fix SCR 06158 - Ashish N- 23-Jan-2022
													 				minus
													 				select record_type_code
													 				from fms_data_type
													 				where upper(fms_id) = upper(?)
													 				and selectable_ind = 'Y')
										""";
								rec = app.selectInto(query, navdb.getOldFmsId(), navdb.getFmsId());
								vCount = rec.getInt();
								if (vCount > 0) {
									deleteSelectionCriterias();

								}
								updateNavdbOrc();
								setTabPageProperty("selCan.orc", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
								List<DuRecord> listOfRecords = app.executeQuery(extraRectypeCode, navdb.getNavdbId(),
										navdb.getNavdbId());
								for (DuRecord reco : listOfRecords) {
									vNewRecordCode = toInteger(reco.getObject("record_type_code"));
									createDefaultNewCriteria(vNewRecordCode);

								}

								query = """
										 DELETE FROM NAVDB_DELIVERY_FORMAT_MEDIA
										    				WHERE NAVDB_ID = ?
										""";
								app.executeNonQuery(query, navdb.getNavdbId());
								List<DuRecord> listOfRec = app.executeQuery(formatMediaTypeCur, navdb.getFmsId());
								
								
								for (DuRecord reco : listOfRec) {
									vFormatMediaType = toString(reco.getObject("format_media_type"));
									
									String selectQuery = """
											SELECT DBSIGN_VER
											FROM DELIVERY_FORMAT_MEDIA
											WHERE FORMAT_MEDIA_TYPE=?
											""";
									DuRecord selectRecord = app.selectInto(selectQuery,vFormatMediaType);
									String insertInput = selectRecord.getString();
									query = """
											 INSERT INTO  NAVDB_DELIVERY_FORMAT_MEDIA
											                       (NAVDB_ID,FORMAT_MEDIA_TYPE, DBSIGN_VER)
																VALUES	(?,?, ?	)
											""";
									app.executeNonQuery(query, navdb.getNavdbId(), vFormatMediaType, insertInput);
								}
								if (!Objects.equals(navdb.getFmsId(), null)) {

									query = """
											SELECT COUNT(REC.RECORD_TYPE_CODE)
												 								   from FMS_DATA_TYPE FDT,
											             				      RECORD_TYPE REC
											              	     WHERE FDT.RECORD_TYPE_CODE = REC.RECORD_TYPE_CODE
											               	 	   AND FDT.FMS_ID = ?
											                	   AND REC.RECORD_TYPE_CODE IN ('133','140','150','160')
											                	   AND FDT.REQUIRED_IND = 'Y'
											""";
									rec = app.selectInto(query, navdb.getFmsId());
									vReccnt = rec.getInt();
									if (vReccnt > 0) {
										coreptLib.dspMsg("This FMS ID requires ''Fuel_Policy/APF'' ");

									}

								}

								navdb.setProductionReadyInd(N);
								setItemInstanceProperty("navdb.production_ready_ind", "current_record",
										"visual_attribute", "PLAIN");
								coreptLib.dspMsg(
										"Please check all the criterias before you set the \nProduction Ready Indicator.");
								}

							else {
								navdb.setFmsId(navdb.getOldFmsId());

							}

						}

					}

					else {
						if (!Objects.equals(navdb.getFmsId(), null)) {

							query = """
									SELECT COUNT(REC.RECORD_TYPE_CODE)
										 								   from FMS_DATA_TYPE FDT,
									             				      RECORD_TYPE REC
									              	     WHERE FDT.RECORD_TYPE_CODE = REC.RECORD_TYPE_CODE
									               	 	   AND FDT.FMS_ID = ?
									                	   AND REC.RECORD_TYPE_CODE IN ('133','140','150','160')
									                	   AND FDT.REQUIRED_IND = 'Y'
									""";
							rec = app.selectInto(query, navdb.getFmsId());
							vReccnt = rec.getInt();
							if (vReccnt > 0) {

								coreptLib.dspMsg("This FMS ID requires ''Fuel_Policy/APF''");

							}

						}

						if ((!Objects.equals(nvl(navdb.getBinaryFormatType(), ""), "CMC"))) {
							if(Objects.equals(navdb.getRecordStatus(), "INSERT")) {
								parameter.setNewNavdbFlag("Y");
								parameter.setOrcFlag("Y");
							}
							
						}

					}

				}

				try {

					query = """
							select size_units from binary_table_size_limits
										where fms_id = ?
										and table_name = 'NAVDB'
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					controlBlock.setSizeUnit(rec.getString());
				}

				catch (NoDataFoundException e) {
					controlBlock.setSizeUnit(null);

				}

			}

			navdb.setOldFmsId(navdb.getFmsId());

		
			checkProfile();

			try {

				query = """
						Select binary_format_type 
						from flight_management_system 
						Where fms_id = ?
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				navdb.setBinaryFormatType(rec.getString());
				if(Objects.equals(navdb.getBinaryFormatType(),"CMC") && Objects.equals(navdb.getRecordStatus(),"NEW") ) {
					parameter.setOrcFlag(Y);
					}
			}

			catch (Exception e) {
				navdb.setBinaryFormatType(null);

			}
			if (Objects.equals(nvl(navdb.getBinaryFormatType(), ""), "CMC")) {
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_customer_name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("navdb.cmc_dependent_navdb", "ITEM_IS_VALID", FormConstant.PROPERTY_FALSE);

			}

			else {
				navdb.setCmcDependentNavdb(null);
				navdb.setCmcCustomerName(null);
				setItemProperty("navdb.cmc_customer_name", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				setItemProperty("navdb.cmc_dependent_navdb", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

			}
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer Count = 0;

				query = """
						select count(fms_id) 
						from flight_management_system 
						where fms_id = NVL(?,fms_id) and binary_format_type in('B00','B10','B20','B31')
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				Count = rec.getInt();
				if (Count > 0) {
					setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.brga_ident", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.brga_ident", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("navdb.brga_ident", FormConstant.DELETE_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				else {
					setItemProperty("navdb.brga_ident", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb.brga_ident", FormConstant.VISIBLE, FormConstant.PROPERTY_FALSE);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbFmsIdWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbFmsIdWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbFmsIdWhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbFmsIdWhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getFmsId(), null)) {
				navdb.setFmsId(null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbFmsIdWhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbFmsIdWhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbPrimaryFocalWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbPrimaryFocalWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getPrimaryFocal(), null)) {
				navdb.setPfEmailFlag(N);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPrimaryFocalWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPrimaryFocalWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbSecondaryFocalWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbSecondaryFocalWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getSecondaryFocal(), null)) {
				navdb.setSfEmailFlag(N);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbSecondaryFocalWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbSecondaryFocalWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbSortOrderWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbSortOrderWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getSortOrder(), Y)) {
				if (Objects.equals(upper(parameter.getDbInstName()), "ENGR")) {
					setLovProperty("FMSID", "GROUP_NAME", "FMSDESC_OTHERS");

				}

				else {
					setLovProperty("FMSID", "GROUP_NAME", "FMSDESC");

				}

			}

			else {

				setFmsId();

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbSortOrderWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbSortOrderWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbProductionReadyIndWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbProductionReadyIndWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getProductionReadyInd(), Y)) {
				setItemInstanceProperty("navdb.production_ready_ind", "current_record", "visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.production_ready_ind", "current_record", "visual_attribute", "PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbProductionReadyIndWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbProductionReadyIndWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbPfEmailFlagWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbPfEmailFlagWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getPrimaryFocal(), null)) {


				coreptLib.dspMsg("Please select Primary Focal.");	
				navdb.setPfEmailFlag(N);
				goItem("navdb.primary_focal");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbPfEmailFlagWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbPfEmailFlagWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbSfEmailFlagWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbSfEmailFlagWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getSecondaryFocal(), null)) {
				coreptLib.dspMsg("Please select Secondary Focal.");		
				navdb.setSfEmailFlag(N);
				goItem("navdb.secondary_focal");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbSfEmailFlagWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbSfEmailFlagWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbStartingCycleWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbStartingCycleWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getStartingCycle(), null)) {
				navdb.setStartingCycle(new CustomInteger(global.getProcessingCycle()));

			}

			else {
				String vExist = null;

				try {

					query = """
							select 'Y' from cycle
									where cycle = ?
							""";
					rec = app.selectInto(query, toInteger(navdb.getStartingCycle()));
					vExist = rec.getString();
					log.debug(vExist);
				}

				catch (NoDataFoundException e) {
					coreptLib.dspMsg("Invalid Starting Cycle(not exist in the table CYCLE)");
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbStartingCycleWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbStartingCycleWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbEndingCycleWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbEndingCycleWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(navdb.getEndingCycle(), null)) {
				String vExist = null;

				try {

					query = """
							select 'Y' from cycle
									where cycle = ?
							""";
					rec = app.selectInto(query, toInteger(navdb.getEndingCycle()));
					vExist = rec.getString();
					log.debug(vExist);
					if (!Objects.equals(navdb.getStartingCycle(), null)) {
						if (toInteger(navdb.getStartingCycle()) > toInteger(navdb.getEndingCycle())) {

							coreptLib.dspMsg("Ending cycle must later then the starting cycle.");
							throw new FormTriggerFailureException();

						}

					}

				}

				catch (NoDataFoundException e) {
					coreptLib.dspMsg("Invalid Ending Cycle(not exist in the table CYCLE)");
					throw new FormTriggerFailureException();

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbEndingCycleWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbEndingCycleWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbRnpWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbRnpWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(navdb.getRnp(), null)) {
				String rnp = toString(navdb.getRnp());
				Double rnpValue = Double.valueOf(rnp);
				if (rnpValue >= 0.000 && rnpValue <= 99.000) {	
					navdb.setRnp(new CustomDouble(rnp));
				}

				else {
					coreptLib.dspMsg("RNP value should be in between 0.000 to 99.000 nM.");
					navdb.setRnp(null);
					throw new FormTriggerFailureException();

				}

			}

			else {
				Integer vNcnt = 0;

				query = """
						SELECT COUNT (ORC_ID)
						  from NAVDB_ORC
						 WHERE ORC_ID = 'OR028' AND APPLY_IND = 'Y' AND NAVDB_ID = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				vNcnt = rec.getInt();
				if (!Objects.equals(vNcnt, 0)) {
					coreptLib.dspMsg("ORC 'OR028' is applied and RNP can't be NULL. ");
					throw new FormTriggerFailureException();

				}

			}
			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbRnpWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbRnpWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbCmcDependentNavdbWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbCmcDependentNavdbWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		String query = "";
		DuRecord rec = null;
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lInd = null;

			try {
				if (!Objects.equals(navdb.getCmcDependentNavdb(), null)) {

					query = """
							Select Production_Ready_Ind
										from Navdb
									 Where Navdb_id = ?
							""";
					rec = app.selectInto(query, navdb.getCmcDependentNavdb());
					lInd = rec.getString();
					if (!Objects.equals(nvl(lInd, N), Y)) {
						coreptLib.dspMsg("Please enter Production Ready "+"CMC Dependent NavDB");
						throw new FormTriggerFailureException();

					}

				}

				else if ((Objects.equals(nvl(navdb.getBinaryFormatType(), ""), "CMC"))
						&& Objects.equals(system.getCursorItem(), "NAVDB.CMC_DEPENDENT_NAVDB")) {
					coreptLib.dspMsg("CMC Dependent NavDB is required. Please enter ");
					throw new FormTriggerFailureException();

				}

			}

			catch (NoDataFoundException e) {

				
				coreptLib.dspMsg("Please enter valid CMC Dependent NavDB");
				throw new FormTriggerFailureException();

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbCmcDependentNavdbWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbCmcDependentNavdbWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbTestDbIndWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbTestDbIndWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getTestDbInd(), Y)) {
				setItemInstanceProperty("navdb.test_db_ind", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.test_db_ind", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbTestDbIndWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbTestDbIndWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbSaaarIndWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbSaaarIndWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getSaaarInd(), Y)) {
				setItemInstanceProperty("navdb.saaar_ind", toString(system.getCursorRecordIndex()), "visual_attribute",
						"CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.saaar_ind", toString(system.getCursorRecordIndex()), "visual_attribute",
						"PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbSaaarIndWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbSaaarIndWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbSaaarIndKeyNextItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbSaaarIndKeyNextItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			goItem("navdb.profile_number");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbSaaarIndKeyNextItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbSaaarIndKeyNextItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbGenValerieWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbGenValerieWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getGenValerie(), Y)) {
				setItemInstanceProperty("navdb.gen_valerie", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.gen_valerie", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbGenValerieWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbGenValerieWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDataSupplierWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDataSupplierWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;

			try {

				query = """
						SELECT DATA_SUPPLIER_NAME
							  from DATA_SUPPLIER
							 WHERE DATA_SUPPLIER = ?
						""";
				rec = app.selectInto(query, navdb.getDataSupplier());
				navdb.setDataSupplierName(rec.getString());
			}

			catch (NoDataFoundException e) {
				navdb.setDataSupplierName(null);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDataSupplierWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDataSupplierWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbCustEmailFlagWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbCustEmailFlagWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getSecondaryFocal(), null)) {
				coreptLib.dspMsg("Please select Seconday Focal.");
				navdb.setSfEmailFlag(N);
				goItem("navdb.secondary_focal");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbCustEmailFlagWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbCustEmailFlagWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbAdhocWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbAdhocWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getGenValerie(), Y)) {
				setItemInstanceProperty("navdb.gen_valerie", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");

			}

			else {
				setItemInstanceProperty("navdb.gen_valerie", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbAdhocWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbAdhocWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbBrgaIdentWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbBrgaIdentWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			Integer vCount = 0;

			query = """
					SELECT count(fms_id)
					     from flight_management_system
					    WHERE fms_id = ?
					      AND binary_format_type IN('B00','B10','B20','B31')
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			vCount = rec.getInt();
			
			String regExpQuery = "select REGEXP_INSTR ('%s', '[^-|0-9|A-Z| |.|'']') RESULT from dual"
					.formatted(navdb.getBrgaIdent());
			
			 EParam.DYNAMIC_QUERY_ONE.setValue(regExpQuery);
			List<DuRecord> executeQuery = app.executeQuery( EParam.DYNAMIC_QUERY_ONE.getValue());
			Integer out = toInteger(executeQuery.getLast().getObject());
			if (vCount > 0) {
				if (out > 0) {
					coreptLib.dspMsg(
							"For BRGA Ident allowed alphabets [A-Z],Number [0-9] \nand special char as [.],[-],[\\SPC]");
					throw new FormTriggerFailureException();

				}

				else {
                    log.debug("Inside else out is less than 0");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbBrgaIdentWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbBrgaIdentWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcPostQuery(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;

			for (int i = 0; i < navdbOrc.size(); i++) {
				try {

					query = """
							select dmr_descr from DATA_MANIPULATION_ROUTINE
								where DMR_ID = ?
							""";
					rec = app.selectInto(query, navdbOrc.getRow(i).getOrcId());
					String orcDesc = rec.getString();
					navdbOrc.getRow(i).setOrcDescr(orcDesc);
				}
				// others
				catch (Exception e) {
					navdbOrc.getRow(i).setOrcDescr(null);

				}
				if (Objects.equals(navdbOrc.getRow(i).getApplyInd(), Y)) {
					setItemInstanceProperty("navdb_orc.apply_ind", toString(i), "visual_attribute", "CHECKED");

				}

				else {
					setItemInstanceProperty("navdb_orc.apply_ind", toString(i), "visual_attribute", "PLAIN");

				}
				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setItemProperty("navdb_orc.apply_ind", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setItemProperty("navdb_orc.apply_ind", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setItemProperty("navdb_orc.apply_ind", FormConstant.UPDATE_ALLOWED,
								FormConstant.PROPERTY_FALSE);
						setItemProperty("navdb_orc.apply_ind", FormConstant.INSERT_ALLOWED,
								FormConstant.PROPERTY_FALSE);

					}
				}
				
			}
			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdb.getNavdbId(), null)) {
				goBlock("navdb", "");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId(), null)
					&& !Objects.equals(toInteger(system.getTriggerRecord()), 1)) {
				previousRecord("");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcKeyExeqry(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcKeyExeqry Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcKeyExeqry executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcKeyExeqry Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcKeyNxtrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcKeyNxtrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			nextRecord("");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcKeyNxtrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcKeyNxtrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcKeyEntqry(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcKeyEntqry Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcKeyEntqry executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcKeyEntqry Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbOrcApplyIndWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbOrcApplyIndWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			Integer check = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
					toInteger(global.getDcrNumber()), navdb.getDataSupplier(), toString(navdb.getNavdbId())));

			if (Objects.equals(check, 1)) {
				parameter.setUpdRec(N);

			}

			else {
				navdbOrc.getRow(system.getCursorRecordIndex())
						.setApplyInd(navdbOrc.getRow(system.getCursorRecordIndex()).getApplyIndD());
				parameter.setUpdRec(Y);
				coreptLib.dspActionMsg(I, null, toInteger(nameIn(this, "global.dcr_number")),
						toInteger(global.getProcessingCycle()), navdb.getNavdbId());

			}
			if (Objects.equals(navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId(), "OR028")) {
				Integer vNcnt = 0;

				query = """
						SELECT COUNT (DMR_ID)
									     from FMS_DMR
									    WHERE  DMR_ID = 'OR028' AND FMS_ID = ?
						""";
				rec = app.selectInto(query, navdb.getFmsId());
				vNcnt = rec.getInt();
				if (vNcnt > 0 && Objects.equals(navdb.getRnp(), null)) {
					coreptLib.dspMsg("RNP is required for ORC 'OR028', Please provide.");
					navdbOrc.getRow(system.getCursorRecordIndex()).setApplyInd(N);

					genericNativeQueryHelper.commit(this, system.getCursorBlock());
					throw new FormTriggerFailureException();

				}

			}

			else {
				if (Objects.equals(navdbOrc.getRow(system.getCursorRecordIndex()).getApplyInd(), Y)) {
					setItemInstanceProperty("navdb_orc.apply_ind", "current_record", "visual_attribute", "CHECKED");
					navdbOrc.getRow(system.getCursorRecordIndex()).setUpdateDcrNumber(toInteger(global.getDcrNumber()));

					query = """
							 INSERT INTO NAVDB_ORC(ORC_ID,NAVDB_ID,CREATE_DCR_NUMBER,UPDATE_DCR_NUMBER,CREATED_BY,CREATED_ON,APPLY_IND)
										VALUES ( ?, ?, NULL,?,USER,SYSDATE,'Y')
							""";
					app.executeNonQuery(query, navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId(),
							navdb.getNavdbId(), global.getDcrNumber());
				}

				else {
					setItemInstanceProperty("navdb_orc.apply_ind", toString(system.getCursorRecordIndex()), "visual_attribute", "PLAIN");
					navdbOrc.getRow(system.getCursorRecordIndex()).setUpdateDcrNumber(null);

					query = """
							 DELETE FROM NAVDB_ORC WHERE ORC_ID = ? AND NAVDB_ID = ?
							""";
					app.executeNonQuery(query, navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId(),
							navdb.getNavdbId());
				}

				navdbOrc.getRow(system.getCursorRecordIndex())
						.setApplyIndD(navdbOrc.getRow(system.getCursorRecordIndex()).getApplyInd());
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);

			}
			if (!Objects.equals(navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId(), null)) {
				if (Objects.equals(navdbOrc.getRow(system.getCursorRecordIndex()).getApplyInd(), Y)) {
					if (!Objects.equals(controlBlock.getOrcApplied(), null)) {
						controlBlock.setOrcApplied(rtrim(controlBlock.getOrcApplied(), ",") + ","
								+ navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId());

					}

					else {
						controlBlock.setOrcApplied(navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId());

					}

				}

				else {
					deleteOneOrc(navdbOrc.getRow(system.getCursorRecordIndex()).getOrcId());

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbOrcApplyIndWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbOrcApplyIndWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> generalCriteriaPostQuery(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			Integer vNallowUpdate=0;
			for (int i = 0; i < generalCriteria.size(); i++) {
				if (!Objects.equals(generalCriteria.getRow(i).getCriteriaDescr(), null)
						&& !Objects.equals(navdb.getFmsId(), null)) {
					String vSelectable = null;
					String vApplyInd = null;

					try {

						query = """
								select selectable_ind
								From FMS_GENERAL_CRITERIA	fgc	--added Imran SCR 7751
								where  Criteria_id = ?
								and exists (select 1 from flight_management_system
									 			          where fms_id = ?
									 			          and fms_id  = fgc.fms_id)
								""";
						rec = app.selectInto(query, generalCriteria.getRow(i).getCriteriaId(), navdb.getFmsId());
						vSelectable = rec.getString();
						if (Objects.equals(vSelectable, Y)) {

							try {

								query = """
										select nvl(apply_ind,' ') from navdb_general_criteria
													where navdb_id = ?
													and criteria_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId(),
										generalCriteria.getRow(i).getCriteriaId());
								vApplyInd = rec.getString();
								if (Arrays.asList(Y, N).contains(vApplyInd)) {
									generalCriteria.getRow(i).setChk(vApplyInd);

								}

							}

							catch (NoDataFoundException e) {
								vApplyInd = "-";

							}
							if (Arrays.asList("-", " ").contains(vApplyInd)) {

								try {

									query = """
											select 'Y'
											From FMS_GENERAL_CRITERIA	fgc			--added Imran SCR 7751
											where criteria_id = ?
											and DEFAULT_IND = 'Y'
											and exists (select 1 from flight_management_system
														where fms_id = ?
												 		and fms_id = fgc.fms_id)
											""";
									rec = app.selectInto(query, generalCriteria.getRow(i).getCriteriaId(),
											navdb.getFmsId());
									String chk = rec.getString();
									generalCriteria.getRow(i).setChk(chk);
								}

								catch (NoDataFoundException e) {
									generalCriteria.getRow(i).setChk(N);

								}

							}

							if (Objects.equals(vApplyInd, "-")) {

								query = """
										 insert into navdb_general_criteria (navdb_id,criteria_id, apply_ind)
										  		values (?,?,?)
										""";
								app.executeNonQuery(query, navdb.getNavdbId(),
										generalCriteria.getRow(i).getCriteriaId(), generalCriteria.getRow(i).getChk());
							}

							else {

								query = """
										update navdb_general_criteria
													set apply_ind = ?
													where navdb_id = ?
													and criteria_id = ?
										""";
								app.executeNonQuery(query, generalCriteria.getRow(i).getChk(), navdb.getNavdbId(),
										generalCriteria.getRow(i).getCriteriaId());
							}

						}

						else if (Objects.equals(vSelectable, N)) {

							try {

								query = """
										select 'Y'
										From FMS_GENERAL_CRITERIA	fgc			--added Imran SCR 7751
										where criteria_id = ?
										and APPLY_IND = 'Y'
										and exists (select 1 from flight_management_system
											 		where fms_id = ?
											 		and fms_id = fgc.fms_id)
										""";
								rec = app.selectInto(query, generalCriteria.getRow(i).getCriteriaId(),
										navdb.getFmsId());
								String chk = rec.getString();
								generalCriteria.getRow(i).setChk(chk);
							}

							catch (NoDataFoundException e) {
								generalCriteria.getRow(i).setChk(N);

							}

						}

						if (Objects.equals(vSelectable, N)) {
							vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
									toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
									toString(nameIn(this, "navdb" + ".navdb_id"))));
							if(!Objects.equals(parameter.getWorkType(), "VIEW") && Objects.equals(vNallowUpdate, 1)) {
							setItemInstanceProperty("general_criteria.chk", toString(i), FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							}
							
							setItemInstanceProperty("general_criteria.criteria_descr", toString(i), "visual_attribute",
									"GREY_OUT");

						}

						else {
							vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
									toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
									toString(nameIn(this, "navdb" + ".navdb_id"))));
							if(!Objects.equals(parameter.getWorkType(), "VIEW") && Objects.equals(vNallowUpdate, 1)) {
							setItemInstanceProperty("general_criteria.chk", toString(i), FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							
							}
							setItemInstanceProperty("general_criteria.criteria_descr", toString(i), "visual_attribute",
									"CURRENT_RECORD");

							if (Objects.equals(generalCriteria.getRow(i).getChk(), Y)) {
								setItemInstanceProperty("general_criteria.chk", toString(i), "visual_attribute",
										"CHECKED");

							}

							else {
                                log.debug("Inside else for chk  is not Y");

							}

						}
					}

					catch (NoDataFoundException e) {
						coreptLib.dspMsg("Format-General-Criteria table is missing data for General Criteria '"
								+ generalCriteria.getRow(i).getCriteriaDescr() + "' .Please correct the data first.");
						throw new FormTriggerFailureException();

					}

					catch (Exception e) {
						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
						throw new FormTriggerFailureException();

					}

				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> generalCriteriaWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String vCblock = system.getCursorBlock();

				if (!Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty(vCblock, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

					}

				}

			}

			if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), 4)) {
				setItemProperty("general_criteria.aircraft_button", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("general_criteria.aircraft_button", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> generalCriteriaChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			generalCriteria.getRow(system.getCursorRecordIndex())
					.setOldChk(generalCriteria.getRow(system.getCursorRecordIndex()).getChk());
			if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getChk(), Y)) {

				query = """
						update navdb_general_criteria
						  set apply_ind = 'Y'
						  where navdb_id = ?
						  and criteria_id = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId(),
						generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId());
				if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), 4)) {
					goBlock("GEN_CRITERIA_SUB_TYPE", "");
					populateGenCriteriaValue(system.getCursorBlock());
					genCriteriaSubType.setQueryHits(toString(genCriteriaSubType.size()));

				}

			}

			else if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getChk(), N)) {
				Integer vCount = 0;
				Integer vButton = 0;

				query = """
						select count(*) from navdb_general_criteria_value
								where navdb_id = ?
								and criteria_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId(),
						generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId());
				vCount = rec.getInt();
				if (vCount > 0) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(S, "UNCHECK CRITERIA",
								"Uncheck this criteria will also delete all associated \ncriteria values." + chr(10)
										+ "Please pick your choice carefully:" + chr(10) + chr(10),
								"Delete All", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("deleteAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
					}
				}

				if (Objects.equals(vCount, 0) || Objects.equals(vButton, 1)) {

					query = """
							 delete from navdb_general_criteria_value
										where navdb_id = ?
										and criteria_id = ?
							""";
					app.executeNonQuery(query, navdb.getNavdbId(),
							generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId());
					query = """
							update navdb_general_criteria
										set apply_ind = 'N'
										where navdb_id = ?
							  		and criteria_id = ?
							""";
					app.executeNonQuery(query, navdb.getNavdbId(),
							generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId());
					hideView("GEN_CRITERIA_SUB_TYPE");

				}

				else {
					generalCriteria.getRow(system.getCursorRecordIndex()).setChk(Y);

				}

			}

			genericNativeQueryHelper.commit(this, system.getCursorBlock());
			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> generalCriteriaAircraftButtonWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" generalCriteriaAircraftButtonWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getCriteriaId(), 4)) {
				if (Objects.equals(generalCriteria.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					goBlock("GEN_CRITERIA_SUB_TYPE", "");
					populateGenCriteriaValue(system.getCursorBlock());
					genCriteriaSubType.setQueryHits(toString(genCriteriaSubType.size()));

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" generalCriteriaAircraftButtonWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the generalCriteriaAircraftButtonWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			newRecInstance(system.getCursorBlock(), system.getRecordStatus());
			parameter.setWorldGeo(controlBlock.getWorldGeo());
			parameter.setAfricaGeo(controlBlock.getAfricaGeo());
			parameter.setEuropeGeo(controlBlock.getEuropeGeo());
			parameter.setMiddleEastGeo(controlBlock.getMiddleEastGeo());
			parameter.setEurasiaGeo(controlBlock.getEurasiaGeo());
			parameter.setNorthAmericaGeo(controlBlock.getNorthAmericaGeo());
			parameter.setSouthAmericaGeo(controlBlock.getSouthAmericaGeo());
			parameter.setPacificGeo(controlBlock.getPacificGeo());
			
			
			//manually handled
			if (Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getRecordStatus(), "INSERT")) {
				if(OracleHelpers.isNullCheck(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById())) {
				String query = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
				DuRecord rec = app.selectInto(query);
				selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setSelectById(toInteger(rec.getObject()));
				selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setNavdbId(navdb.getNavdbId());
				}
				if(geographicAreaPoint.size()>2) {
					for(int i=0;i<geographicAreaPoint.size();i++) {
						geographicAreaPoint.getRow(i).setSelectById(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}
				}
				parameter.setNewFlag(Y);
				parameter.setSeq(Y);

			}

			if (!Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(), null)) {
				if (Objects.equals(system.getFormStatus(), "QUERIED")) {
					if (toInteger(
							nvl(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount(), 0)) < 3) {
						selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex())
								.setGeoCount(toInteger(getBlockProperty(DbConstants.GEOGRAPHIC_AREA_POINT,
										selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getQueryHits())));

					}

				}

				else if (Objects.equals(system.getFormStatus(), "CHANGED")) {
					if (Objects.equals(parameter.getWorkType(), "VIEW")) {
                        log.debug("Inside if Work type value is View");

					}

					else {
						parameter.setSeq(Y);
						checkToCommit("COMMIT");
						if(Objects.equals(parameter.getNewFlag(),Y)) {
							selectByGeographicAreaPostInsert();
							parameter.setNewFlag(N);			
							}
						

					}

				}

			}

			else {
				selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(0);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info("selectByGeographicAreaWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(), null)
					&& Objects.equals(system.getFormStatus(), "CHANGED")) {
				Object vRowid = null;
				String query = "";
				DuRecord rec = null;

				try {

					query = """
							select rowid from SELECT_BY_GEOGRAPHIC_AREA
										where geo_area_name = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query,
							selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getRowid(), null)
							|| (!Objects.equals(vRowid,
									selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getRowid()))) {
						coreptLib.dspMsg("This Geographic Area Name is already used. Please \ngive a different name");
						throw new FormTriggerFailureException();

					}

				}
				// no_data_found
				catch (NoDataFoundException e) {

					log.debug("No Data found captured in selectByGeographicAreaWhenValidateRecord");

				}
				controlBlock.setCurRecord(toString(system.getPreviousBlockCursorIndex()));
				//manually handled
				if(Objects.equals(geographicAreaPoint.size() , 1)&&
						Objects.equals(geographicAreaPoint.getRow(0).getLatitude(), null)){
					selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(0);
				}
				if (Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount(), 0)) {
					selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(1);
					//handled for timer
					if (Objects.equals(system.getCursorBlock(), "selectByGeographicArea")) {
						message("Please Enter Geographic Area Point Details");
						if (Objects.equals(
								selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(), null)) {
                            log.debug("Inside if Cursor Index & Geo Area Name is null");
						}

						goItem("geographic_area_point.latitude");

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaPreQuery(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaPreQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = 'WORLD'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setWorldGeo(rec.getString());
				setItemInstanceProperty("control_block.world_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setWorldGeo(N);
				setItemInstanceProperty("control_block.world_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$AFRICA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setAfricaGeo(rec.getString());
				setItemInstanceProperty("control_block.africa_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setAfricaGeo(N);
				setItemInstanceProperty("control_block.africa_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$EUROPE'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setEuropeGeo(rec.getString());
				setItemInstanceProperty("control_block.europe_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setEuropeGeo(N);
				setItemInstanceProperty("control_block.europe_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$EURASIA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setEurasiaGeo(rec.getString());
				setItemInstanceProperty("control_block.eurasia_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setEurasiaGeo(N);
				setItemInstanceProperty("control_block.eurasia_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$MIDDLE_EAST'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setMiddleEastGeo(rec.getString());
				setItemInstanceProperty("control_block.middle_east_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setMiddleEastGeo(N);
				setItemInstanceProperty("control_block.middle_east_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$NORTH_AMERICA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setNorthAmericaGeo(rec.getString());
				setItemInstanceProperty("control_block.north_america_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setNorthAmericaGeo(N);
				setItemInstanceProperty("control_block.north_america_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$SOUTH_AMERICA'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setSouthAmericaGeo(rec.getString());
				setItemInstanceProperty("control_block.south_america_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setSouthAmericaGeo(N);
				setItemInstanceProperty("control_block.south_america_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}

			try {

				query = """
						select 'Y' from select_by_geographic_area
							where rtrim(geo_area_name) = '$PACIFIC'
							and navdb_id = ?
						""";
				rec = app.selectInto(query, navdb.getNavdbId());
				controlBlock.setPacificGeo(rec.getString());
				setItemInstanceProperty("control_block.pacific_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "CHECKED");
			}
			// no_data_found
			catch (NoDataFoundException e) {
				controlBlock.setPacificGeo(N);
				setItemInstanceProperty("control_block.pacific_geo", toString(system.getCursorRecordIndex()),
						"visual_attribute", "PLAIN");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaPreQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaPreQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaPostInsert(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaPostInsert Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			displayAlert.oneButton(S, "Default SC", "Default Selection Criteria is created for New Geo Area.");
			createDefaultCriteria(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
					null, null, null, null, null);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaPostInsert executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaPostInsert Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	public void selectByGeographicAreaPostInsert() throws Exception {
		log.info(" selectByGeographicAreaPostInsert Executing");
		try {
			displayAlert.oneButton(S, "Default SC", "Default Selection Criteria is created for New Geo Area.");
			createDefaultCriteria(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
					null, null, null, null, null);
			log.info(" selectByGeographicAreaPostInsert executed successfully");
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaPostInsert Service");
			throw e;
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer vButton = 0;
			String query = "";

			if (Arrays.asList("CHANGED", "QUERIED").contains(system.getRecordStatus())) {
				checkDelRec(system.getCursorBlock(), system.getRecordStatus());
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
							"Delete current record will also delete its geographic \npoints and associated criterias."
									+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
							"Delete All", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("deleteAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
				}
				if (Objects.equals(vButton, 1)) {

					query = """
							 Delete from Selection_Criteria_Value
										where select_by_id in (select select_by_id
																from navdb_select_criteria
																 where geo_area_id = ?
																 and navdb_id = ?)
							""";
					app.executeNonQuery(query,
							selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 Delete from navdb_select_criteria
										where geo_area_id = ?
										and navdb_id = ?
							""";
					app.executeNonQuery(query,
							selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 DELETE FROM GEOGRAPHIC_AREA_POINT
										WHERE SELECT_BY_ID = ?
							""";
					app.executeNonQuery(query,
							selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById());// TODOcommit

					genericNativeQueryHelper.commit(this, "selectByGeographicArea");

					copyWithIndex(this,"DELETED", "selectByGeographicArea" + ".recordStatus",system.getPreviousBlockCursorIndex());
					commitForm(this);
					String rowid = toString(nameIn(this, substr("navdb", 1, 10) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					message("Record has been saved successfully");
					if(selectByGeographicArea.size()==0) {
						selectByGeographicArea.add(new SelectByGeographicArea());
						selectByGeographicArea.getRow(0).setRecordStatus("NEW");	
						}
					system.setFormStatus("NORMAL");

				}

				else {
					throw new FormTriggerFailureException();

				}

			}

			else {
				deleteRecord(system.getCursorBlock());

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaOnPopulateDetails(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaOnPopulateDetails Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String recstat = system.getRecordStatus();
			String startitm = system.getCursorItem();
			Object relId = null;

			if ((Objects.equals(recstat, "NEW") || Objects.equals(recstat, "INSERT"))) {
                log.debug("Inside if recstat value is New / Insert");
			}

			if (((!Objects.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getSelectById(),
					null)))) {
				queryMasterDetails(relId, DbConstants.GEOGRAPHIC_AREA_POINT);

			}

			if ((!Objects.equals(system.getCursorItem(), startitm))) {
				goItem(startitm);
				checkPackageFailure();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaOnPopulateDetails executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaOnPopulateDetails Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByGeographicAreaGeoAreaNameWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByGeographicAreaGeoAreaNameWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoAreaName(), null)) {
				String vRowid = null;

				try {

					query = """
							select rowid from SELECT_BY_GEOGRAPHIC_AREA
									where geo_area_name = ?
									and NAVDB_ID = ?
							""";
					rec = app.selectInto(query,
							selectByGeographicArea.getRow(system.getCursorRecordIndex()).getGeoAreaName(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByGeographicArea.getRow(system.getCursorRecordIndex()).getRowid(), null)
							|| (!Objects.equals(vRowid,
									selectByGeographicArea.getRow(system.getCursorRecordIndex()).getRowid()))) {
						coreptLib.dspMsg("This Geographic Area Name is already used. Please \ngive a different name.");
						throw new FormTriggerFailureException();

					}

				}
				// no_data_found
				catch (NoDataFoundException e) {

					log.debug("No Data found captured in selectByGeographicAreaGeoAreaNameWhenValidateItem");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByGeographicAreaGeoAreaNameWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByGeographicAreaGeoAreaNameWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointWhenCreateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointWhenCreateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			int count = 0;
			for (int i = 0; i < geographicAreaPoint.size(); i++) {
				if (!Objects.equals(geographicAreaPoint.getRow(i).getRecordStatus(), "DELETED")) {
					count++;
				}
			}
			if (system.getCursorRecordIndex() > count) {
				geographicAreaPoint.getRow(system.getCursorRecordIndex()).setSequenceNumber(toString((count) * 10));
			} else {
				geographicAreaPoint.getRow(system.getCursorRecordIndex())
						.setSequenceNumber(toString((system.getCursorRecordIndex() + 1) * 10));
			}

			if (selectByGeographicArea.size() > 0) {
				geographicAreaPoint.getRow(system.getCursorRecordIndex()).setSelectById(
						selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
				selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(
						(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount() + 1));
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointWhenCreateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointWhenCreateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			newRecInstance(system.getCursorBlock(), system.getRecordStatus());
			if (Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(),
					null)) {
				goBlock(DbConstants.SELECT_BY_GEOGRAPHIC_AREA, "");
				throw new FormTriggerFailureException();

			}

			else {
				if (!Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSequenceNumber(), null)
						&& Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
								null)) {
					selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(1);

				}

				else if (Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSequenceNumber(),
						null)) {
					selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(0);

				}

				controlBlock.setTempValue(
						selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName());

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointWhenRemoveRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointWhenRemoveRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSequenceNumber(), null)) {
				selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setGeoCount(
						selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount() - 1);
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointWhenRemoveRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointWhenRemoveRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointKeyCommit(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointKeyCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(),
					null)) {
				refreshGeoCount();
				if (selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount() < 3 || (Objects
						.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount(), 3)
						&& Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
								null))) {
					coreptLib.dspMsg("Please enter at least three Geographic Area Points.");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(system.getFormStatus(), "CHANGED")) {
					BigDecimal latitudeOut = app.executeFunction(BigDecimal.class, DbConstants.SCHEMA_CPT, "v_latitude", "util1",
							OracleTypes.NUMBER,
							new ProcedureInParameter("p_latitude",
									geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
									OracleTypes.VARCHAR),
							new ProcedureInParameter("p_length", 9, OracleTypes.NUMBER));

					BigDecimal longitudeOut = app.executeFunction(BigDecimal.class, DbConstants.SCHEMA_CPT, "v_longitude", "util1",
							OracleTypes.NUMBER,
							new ProcedureInParameter("p_longitude",
									geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLongitude(),
									OracleTypes.VARCHAR),
							new ProcedureInParameter("p_length", 10, OracleTypes.NUMBER));
					Integer latitudeResult = toInteger(latitudeOut);
					Integer longitudeResult = toInteger(longitudeOut);

					if (latitudeResult > 0) {
						throw new FormTriggerFailureException();

					}

					else if (longitudeResult > 0) {
						throw new FormTriggerFailureException();

					}

					else {

						parameter.setSeq(Y);
						if (Objects.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getRecordStatus(), "INSERT")) {
							if(OracleHelpers.isNullCheck(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getSelectById())) {
								String query = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
								DuRecord rec = app.selectInto(query);
								selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setSelectById(toInteger(rec.getObject()));
								selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setNavdbId(navdb.getNavdbId());
							}
							for (int i = 0; i < geographicAreaPoint.size(); i++) {
								geographicAreaPoint.getRow(i).setSelectById(selectByGeographicArea
										.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
							}

							if(global.getClearBlock() != null && global.getClearBlock()) {
								genericNativeQueryHelper.commit(this, "selectByGeographicArea");
								genericNativeQueryHelper.commit(this, "geographicAreaPoint");
								system.setFormStatus("NORMAL");
								system.setRecordStatus("QUERIED");
								global.setClearBlock(false);
								}
							checkToCommit("COMMIT");
							selectByGeographicAreaPostInsert();

						}
						else {
							if(global.getClearBlock() != null && global.getClearBlock()) {
								//maintaining seq order
								resetGeoArea(geographicAreaPoint.getRow(system.getCursorRecordIndex()).getSelectById());
								genericNativeQueryHelper.commit(this, "selectByGeographicArea");
								genericNativeQueryHelper.commit(this, "geographicAreaPoint");
								system.setFormStatus("NORMAL");
								system.setRecordStatus("QUERIED");	
								global.setClearBlock(false);
								}
							checkToCommit("COMMIT");
						}

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointKeyCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointKeyCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointPostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer vButton = 0;
			String vErrmsg = null;
			Integer vErrcode = 0;

			try {
				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					if (true) {
						if (!Objects.equals(
								selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoAreaName(), null)) {
							if (selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).getGeoCount() < 3
									|| (Objects
											.equals(selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex())
													.getGeoCount(), 3)
											&& Objects.equals(geographicAreaPoint.getRow(system.getCursorRecordIndex())
													.getLatitude(), null))) {
								alertDetails.getCurrent();
								if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
									vButton = displayAlert.moreButtons(S, "Geo Record Count",
											"Do you want to delete this Geo_Area at all?" + chr(10) + chr(10), "Delete",
											"Keep", null);
									OracleHelpers.bulkClassMapper(displayAlert, this);
									alertDetails.createNewRecord("geoDeleteAlert");
									throw new AlertException(event, alertDetails);
								} else {
									vButton = alertDetails.getAlertValue("geoDeleteAlert",
											alertDetails.getCurrentAlert());
								}
								if (Objects.equals(vButton, 1)) {
									selectByGeographicArea.getRow(system.getPreviousBlockCursorIndex()).setRecordStatus("DELETED");
									for(int i=0;i<geographicAreaPoint.size();i++) {
										geographicAreaPoint.getRow(i).setRecordStatus("DELETED");
										}
									selectByGeographicArea.filterNonDeletedRecords();
									geographicAreaPoint.filterNonDeletedRecords();
									geographicAreaPoint.add(new GeographicAreaPoint());
									if(selectByGeographicArea.size()<=0) {
										selectByGeographicArea.add(new SelectByGeographicArea());
										selectByGeographicArea.getRow(0).setRecordStatus("NEW");
										}
									system.setFormStatus("NORMAL");
									
								}

								else if (Objects.equals(vButton, 2)) {
									coreptLib.dspMsg("Please enter at least three Geographic Area Points");
									throw new FormTriggerFailureException();

								}

								else {
									coreptLib.dspMsg("Please enter at least three Geographic Area Points.");
									throw new FormTriggerFailureException();

								}

							}

						}

					}

				}

			}

			
			catch (NoDataFoundException e) {
				if (like("%100501%", OracleHelpers.getSQLerrm(e))) {
					throw new FormTriggerFailureException();

				}

				else {
					vErrmsg = OracleHelpers.getSQLerrm(e);
					vErrcode = OracleHelpers.getSQLcode(e);
					coreptLib.dspMsg("Error " + vErrcode + ": " + substr(vErrmsg, 1, 200));
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointPreUpdate(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointPreUpdate Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkToCommit("UPDATE");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointPreUpdate executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointPreUpdate Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Arrays.asList("CHANGED", "QUERIED").contains(system.getRecordStatus())) {
				checkDelRec(system.getCursorBlock(), system.getRecordStatus());
				copyWithIndex(this, "DELETED", "geographicAreaPoint" + ".recordStatus", system.getCursorRecordIndex());
				deleteRecord(system.getCursorBlock());
				refreshGeoCount();
				system.setFormStatus("CHANGED");

			}

			else {
				copyWithIndex(this, "DELETED", "geographicAreaPoint" + ".recordStatus", system.getCursorRecordIndex());
				deleteRecord(system.getCursorBlock());
				refreshGeoCount();
				system.setFormStatus("CHANGED");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointLatitudeWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointLatitudeWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			
			BigDecimal dbOut = app.executeFunction(BigDecimal.class, DbConstants.SCHEMA_CPT, "v_latitude", "util1", OracleTypes.NUMBER,
					new ProcedureInParameter("p_latitude",
							geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLatitude(),
							OracleTypes.VARCHAR),
					new ProcedureInParameter("p_length", 9, OracleTypes.NUMBER));

			Integer result = toInteger(dbOut);

			if (result > 0) {
				coreptLib.dspMsg("Invalid Latitude");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointLatitudeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointLatitudeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> geographicAreaPointLongitudeWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" geographicAreaPointLongitudeWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			BigDecimal dbOut = app.executeFunction(BigDecimal.class, DbConstants.SCHEMA_CPT, "v_longitude", "util1", OracleTypes.NUMBER,
					new ProcedureInParameter("p_longitude",
							geographicAreaPoint.getRow(system.getCursorRecordIndex()).getLongitude(),
							OracleTypes.VARCHAR),
					new ProcedureInParameter("p_length", 10, OracleTypes.NUMBER));

			Integer result = toInteger(dbOut);

			if (result > 0) {
				coreptLib.dspMsg("Invalid Longitude");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" geographicAreaPointLongitudeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the geographicAreaPointLongitudeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaKeyCommit(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaKeyCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			String selectQuery = "";
			DuRecord reco = null;
			Integer selectById = 0;
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				for (int i = 0; i < selectByArea.size(); i++) {
					if (Objects.equals(selectByArea.getRow(i).getRecordStatus(), "INSERT")) {
						if (!Objects.equals(selectByArea.getRow(i).getAreaCode(), null)) {
							String vRowid = null;
							Integer vCount = 0;
							String query = "";
							DuRecord rec = null;

							try {

								query = """
										select rowid from SELECT_BY_AREA
														where AREA_CODE = ?
														and NAVDB_ID = ?
										""";
								rec = app.selectInto(query,
										selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode(),
										navdb.getNavdbId());
								vRowid = rec.getString();
								if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getRowid(), null)
										|| (!Objects.equals(vRowid,
												selectByArea.getRow(system.getCursorRecordIndex()).getRowid()))) {
									coreptLib.dspMsg("This is a duplicated AREA Code.");
									throw new FormTriggerFailureException();

								}

							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in selectByAreaKeyCommit");

							}

							query = """
									select count(*) from AREA_CODE
												where AREA_CODE = ?
									""";
							rec = app.selectInto(query,
									selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode());
							vCount = rec.getInt();
							if (Objects.equals(vCount, 0)) {
								coreptLib.dspMsg("This is not a valid AREA Code.");
								throw new FormTriggerFailureException();

							}

						}
						selectQuery = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
						reco = app.selectInto(selectQuery);
						selectById = reco.getInt();
						selectByArea.getRow(i).setSelectById(selectById);
						selectByArea.getRow(i).setNavdbId(navdb.getNavdbId());
					}
				}
				selectByAreaPostInsert();

				commitForm(this);
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
				system.setFormStatus("NORMAL");
				system.setMode("NORMAL");
				message("Record has been saved successfully");
				selectByArea.getData().clear();
				areaCode.getData().clear();
				selectByArea.add(new SelectByArea());
				areaCode.add(new AreaCode());
				queryBlockRecords("AREA_CODE", null);
				queryBlockRecords("SELECT_BY_AREA", null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaKeyCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaKeyCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (getGroupRowCount(findGroup("selectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one AREA code." + chr(10) + chr(10)
						+ "Click the 'Select' button to select the checked AREA." + chr(10)
						+ "Click the 'Reset' button to clear all the check(s)");
				
				
				if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					selectByArea.getRow(system.getCursorRecordIndex()).setChk(N);
					setGroup("selectByArea", "deselectGroup",
							selectByArea.getRow(system.getCursorRecordIndex()).getChk(),
							toString(selectByArea.getRow(system.getCursorRecordIndex()).getSelectById()), null);

				}
				throw new FormTriggerFailureException();

			}

			else {
				//manually handled
				areaCode.getData().clear();
				areaCode.add(new AreaCode());
				String where = "area_code not in (select area_code from select_by_area where navdb_id = '%s')".formatted(navdb.getNavdbId());
				system.setCursorBlock("areaCode");
				 EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(this,  EParam.DYNAMIC_QUERY_ONE.getValue());
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
						setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_area.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
						setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_area.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					}

				}

			}
			system.setCursorBlock("selectByArea");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			Integer vButton = 0;
			if (Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {
				if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					setGroup(DbConstants.SELECT_BY_AREA, "deselectGroup", N,
							toString(selectByArea.getRow(system.getCursorRecordIndex()).getSelectById()), null);

				}

				deleteRecord("");

			}

			else {
				checkDelRec(system.getCursorBlock(), system.getRecordStatus());
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert
							.moreButtons(S, "DELETE SELECTED AREA",
									"Delete the current AREA Code will also delete all \nassociated criterias."
											+ chr(10) + "Please pick your choice carefully:",
									"Delete All", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("deleteAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {
					if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
						setGroup(DbConstants.SELECT_BY_AREA, "deselectGroup", N,
								toString(selectByArea.getRow(system.getCursorRecordIndex()).getSelectById()), null);

					}

					query = """
							 Delete from Selection_Criteria_Value
									where select_by_id in (select select_by_id
																			 	 from navdb_select_criteria
																			 	 where AREA_code_id = ?
																			 	 and navdb_id = ?)
							""";
					app.executeNonQuery(query, selectByArea.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 Delete from navdb_select_criteria
									where AREA_code_id = ?
									and navdb_id = ?
							""";
					app.executeNonQuery(query, selectByArea.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 Delete from select_by_AREA
											where navdb_id = ?
											and SELECT_BY_ID = ?
							""";
					app.executeNonQuery(query, navdb.getNavdbId(),
							selectByArea.getRow(system.getCursorRecordIndex()).getSelectById());
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					system.setFormStatus("NORMAL");
					system.setMode("NORMAL");
					message("Record has been saved successfully");
					areaCode.getData().clear();
					areaCode.add(new AreaCode());
					queryBlockRecords("AREA_CODE", null);
					selectByArea.getData().clear();
					selectByArea.add(new SelectByArea());
					queryBlockRecords("SELECT_BY_AREA", null);
					if(selectByArea.size()==1 && Objects.equals(selectByArea.getRow(0).getAreaCode(), null)) {
						selectByArea.getRow(0).setRecordStatus("NEW");
					}
				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaPostInsert(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaPostInsert Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer id = 0;
			for (int i = 0; i < selectByArea.size(); i++) {
				if (Objects.equals(selectByArea.getRow(i).getRecordStatus(), "INSERT")) {
					id = selectByArea.getRow(i).getSelectById();
					createDefaultCriteria(null, id, null, null, null, null);
				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaPostInsert executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaPostInsert Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	//added to call after areaCode select
	public void selectByAreaPostInsert() throws Exception {
		log.info(" selectByAreaPostInsert Executing");
		try {
			Integer id = 0;
			for (int i = 0; i < selectByArea.size(); i++) {
				if (Objects.equals(selectByArea.getRow(i).getRecordStatus(), "INSERT")) {
					id = selectByArea.getRow(i).getSelectById();
					createDefaultCriteria(null, id, null, null, null, null);
				}
			}

			log.info(" selectByAreaPostInsert executed successfully");
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaPostInsert Service");
			throw e;
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaAreaCodeWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaAreaCodeWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode(), null)) {
				message("Please enter the AREA Code");
				throw new FormTriggerFailureException();

			}

			else {
				String vRowid = null;
				Integer vCount = 0;

				try {

					query = """
							select rowid from SELECT_BY_AREA
										where AREA_CODE = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query, selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByArea.getRow(system.getCursorRecordIndex()).getRowid(), null) || (!Objects
							.equals(vRowid, selectByArea.getRow(system.getCursorRecordIndex()).getRowid()))) {
						coreptLib.dspMsg("This is a duplicated AREA Code.");
						throw new FormTriggerFailureException();

					}

				}

				catch (NoDataFoundException e) {
					log.debug("No Data found captured in selectByAreaAreaCodeWhenValidateItem");

				}

				query = """
						select count(*) from AREA_CODE
								where AREA_CODE = ?
						""";
				rec = app.selectInto(query, selectByArea.getRow(system.getCursorRecordIndex()).getAreaCode());
				vCount = rec.getInt();
				if (Objects.equals(vCount, 0)) {
					coreptLib.dspMsg("This is not a valid AREA Code.");
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaAreaCodeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaAreaCodeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				setGroup(DbConstants.SELECT_BY_AREA, "deselectGroup",
						selectByArea.getRow(system.getCursorRecordIndex()).getChk(),
						toString(selectByArea.getRow(system.getCursorRecordIndex()).getSelectById()), null);

			}

			else {
				selectByArea.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				RecordGroup groupId = findGroup("deselectGroup");
				Integer totalRows = getGroupRowCount(groupId);
				Integer vAreaId = 0;
				Integer vButton = 0;
				String query = "";

				checkSave(system.getCursorBlock());
				if (totalRows > 0) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert
								.moreButtons(S, "DELETE SELECTED AREA",
										"Delete the selected AREA Code will also delete all \nassociated criterias."
												+ chr(10) + "Please pick your choice carefully:",
										"Delete All", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("deleteAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 1)) {
						for (int i = 0; i < totalRows; i++) {
							vAreaId = toInteger(getGroupCharCell("deselectGroup.item1", i));

							query = """
									 Delete from Selection_Criteria_Value
													where select_by_id in (select select_by_id
																		 from navdb_select_criteria
																		 where area_code_id = ?
																			 and navdb_id = ?)
									""";
							app.executeNonQuery(query, vAreaId, navdb.getNavdbId());
							query = """
									 Delete from navdb_select_criteria
													where AREA_code_id = ?
													and navdb_id = ?
									""";
							app.executeNonQuery(query, vAreaId, navdb.getNavdbId());
							query = """
									 Delete from select_by_AREA
													where navdb_id = ?
													and SELECT_BY_ID = ?
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), vAreaId);
						}
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						deleteGroupRow("deselectGroup", "ALL_ROWS");
						selectByArea.getData().clear();
						areaCode.getData().clear();
						selectByArea.add(new SelectByArea());
						areaCode.add(new AreaCode());
						queryBlockRecords("AREA_CODE", null);
						queryBlockRecords("SELECT_BY_AREA", null);
						
						
						if(selectByArea.size()==1) {
							selectByArea.getRow(0).setRecordStatus("NEW");
						}
					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");
				queryBlockRecords(DbConstants.SELECT_BY_AREA, null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAreaCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAreaCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (!Objects.equals(selectByArea.getRow(0).getAreaCode(), null)) {
					selAll(DbConstants.SELECT_BY_AREA, "deselectGroup");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAreaCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAreaCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> areaCodeWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" areaCodeWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(DbConstants.SELECT_BY_AREA);
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {
				coreptLib.dspMsg("You have  checked at lease one AREA code." + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked \nAREA." + chr(10)
						+ "Click the 'Reset Check' button to clear all the checks(s).");

				if (Objects.equals(areaCode.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					areaCode.getRow(system.getCursorRecordIndex()).setChk(N);
					setGroup(DbConstants.AREA_CODE, "selectGroup", areaCode.getRow(system.getCursorRecordIndex()).getChk(),
							areaCode.getRow(system.getCursorRecordIndex()).getAreaCode(), null);

					

				}
				throw new FormTriggerFailureException();

			}

			else {

				selectByArea.getData().clear();
				selectByArea.add(new SelectByArea());
				String where = "NAVDB_ID='%s'".formatted(navdb.getNavdbId());
				system.setCursorBlock("selectByArea");
				navdbExecuteQuery(this, where);
				if(selectByArea.size()==1 && Objects.equals(selectByArea.getRow(0).getAreaCode(), null)) {
					selectByArea.getRow(0).setRecordStatus("NEW");
				}
				

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("area_code.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_area.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_area.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_area.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty(DbConstants.AREA_CODE, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.SELECT_BY_AREA, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("area_code.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("area_code.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_area.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_area.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			system.setCursorBlock("areaCode");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" areaCodeWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the areaCodeWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> areaCodeChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" areaCodeChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				setGroup(DbConstants.AREA_CODE, "selectGroup", areaCode.getRow(system.getCursorRecordIndex()).getChk(),
						areaCode.getRow(system.getCursorRecordIndex()).getAreaCode(), null);

			}

			else {
				areaCode.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" areaCodeChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the areaCodeChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> areaCodeSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" areaCodeSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				RecordGroup groupId = findGroup("selectGroup");
				Integer totalRows = getGroupRowCount(groupId);
				String vArea = null;
			
				if (totalRows > 0) {
					goBlock(DbConstants.SELECT_BY_AREA, "");
					for (int i = 0; i < totalRows; i++) {
						vArea = getGroupCharCell("selectGroup.item1", i);
						selectByArea.getRow(i).setAreaCode(vArea);
						selectByArea.getRow(i).setRecordStatus("INSERT");
						selectByArea.getRow(i).setNavdbId(navdb.getNavdbId());
						String query = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
						DuRecord rec = app.selectInto(query);
						Integer selectById = rec.getInt();
						selectByArea.getRow(i).setSelectById(selectById);
						selectByArea.add(new SelectByArea());

					}
					selectByArea.remove(totalRows);
					deleteGroupRow("selectGroup", "ALL_ROWS");				
					selectByAreaPostInsert();
					commitForm(this);
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					selectByArea.getData().clear();
					areaCode.getData().clear();
					selectByArea.add(new SelectByArea());
					areaCode.add(new AreaCode());
					String where = "NAVDB_ID LIKE ('%s')".formatted(navdb.getNavdbId());
					system.setCursorBlock("selectByArea");
					navdbExecuteQuery(this, where);
					queryBlockRecords("AREA_CODE",null);
					message("Record has been saved successfully");
					displayAlert.oneButton(S, "Default SC",
							"Default Selection Criteria is created for Selected Area \nCode.");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" areaCodeSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the areaCodeSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> areaCodeResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" areaCodeResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("selectGroup", "ALL_ROWS");
				queryBlockRecords(DbConstants.AREA_CODE, null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" areaCodeResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the areaCodeResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> areaCodeCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" areaCodeCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (!Objects.equals(areaCode.getRow(0).getAreaCode(), null)) {
					selAll(DbConstants.AREA_CODE, "selectGroup");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" areaCodeCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the areaCodeCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			Integer vButton = 0;
			if (Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {
				if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					setGroup(DbConstants.SELECT_BY_ICAO, "deselectGroup", N,
							toString(selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById()), null);

				}

				deleteRecord("");

			}

			else {
				checkDelRec(system.getCursorBlock(), system.getRecordStatus());
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(S, "DELETE SELECTED ICAO",
							"Delete the current ICAO Code will also delete all \nassociated criterias." + chr(10)
									+ "Please pick your choice carefully:" + chr(10) + chr(10),
							"Delete All", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("deleteAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
				}
				if (Objects.equals(vButton, 1)) {
					if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
						setGroup(DbConstants.SELECT_BY_ICAO, "deselectGroup", N,
								toString(selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById()), null);

					}

					query = """
							 Delete from Selection_Criteria_Value
									where select_by_id in (select select_by_id
															from navdb_select_criteria
															 where icao_code_id = ?
															 and navdb_id = ?)
							""";
					app.executeNonQuery(query, selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 Delete from navdb_select_criteria
									where icao_code_id = ?
									and navdb_id = ?
							""";
					app.executeNonQuery(query, selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());// TODOCOMMIT

					query = """
							 Delete from select_by_icao
											where navdb_id = ?
											and SELECT_BY_ID = ?
							""";
					app.executeNonQuery(query, navdb.getNavdbId(),
							selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById());
					message("Record has been saved successfully");
					selectByIcao.getData().clear();
					icao.getData().clear();
					selectByIcao.add(new SelectByIcao());
					icao.add(new Icao());
					queryBlockRecords("icao", null);
					queryBlockRecords("SELECT_BY_ICAO", null);
					if(selectByIcao.size()==1 && Objects.equals(selectByIcao.getRow(0).getIcaoCode(), null)) {
						selectByIcao.getRow(0).setRecordStatus("NEW");
						}
					

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoKeyCommit(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoKeyCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			String selectQuery = "";
			DuRecord reco = null;
			Integer selectById = 0;
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				for (int i = 0; i < selectByIcao.size(); i++) {
					if (Objects.equals(selectByIcao.getRow(i).getRecordStatus(), "INSERT")) {
						if (!Objects.equals(selectByIcao.getRow(i).getIcaoCode(), null)) {
							String vRowid = null;
							Integer vCount = 0;
							String query = "";
							DuRecord rec = null;

							try {

								query = """
										select rowid from SELECT_BY_ICAO
														where ICAO_CODE = ?
														and NAVDB_ID = ?
										""";
								rec = app.selectInto(query, selectByIcao.getRow(i).getIcaoCode(), navdb.getNavdbId());
								vRowid = rec.getString();
								if (Objects.equals(selectByIcao.getRow(i).getRowid(), null)
										|| (!Objects.equals(vRowid, selectByIcao.getRow(i).getRowid()))) {

									coreptLib.dspMsg("This is a duplicated ICAO Code.");
									throw new FormTriggerFailureException();

								}

							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in selectByIcaoKeyCommit");

							}

							query = """
									select count(*) from ICAO
												where ICAO_CODE = ?
									""";
							rec = app.selectInto(query,
									selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode());
							vCount = rec.getInt();
							if (Objects.equals(vCount, 0)) {
								coreptLib.dspMsg("This is not valid ICAO Code.");
								throw new FormTriggerFailureException();

							}

						}
						selectQuery = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
						reco = app.selectInto(selectQuery);
						selectById = reco.getInt();
						selectByIcao.getRow(i).setSelectById(selectById);
						selectByIcao.getRow(i).setNavdbId(navdb.getNavdbId());

					}
				}
				selectByIcaoPostInsert();
				commitForm(this);
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
				system.setFormStatus("NORMAL");
				system.setMode("NORMAL");
				message("Record has been saved successfully");
				selectByIcao.getData().clear();
				icao.getData().clear();
				selectByIcao.add(new SelectByIcao());
				icao.add(new Icao());
				queryBlockRecords("icao", null);
				queryBlockRecords("SELECT_BY_ICAO", null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoKeyCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoKeyCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (getGroupRowCount(findGroup("selectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one ICAO code." + chr(10) + chr(10)
						+ "Click the 'Select' button to select the checked ICAO." + chr(10)
						+ "Click the 'Reset' button to clear all the check(s)");
				if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					selectByIcao.getRow(system.getCursorRecordIndex()).setChk(N);
					setGroup(DbConstants.SELECT_BY_ICAO, "deselectGroup",
							selectByIcao.getRow(system.getCursorRecordIndex()).getChk(),
							toString(selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById()), null);

				}

				throw new FormTriggerFailureException();
			}

			else {

				queryBlockRecords(DbConstants.ICAO, "INITIAL");
				icao.getData().clear();
				icao.add(new Icao());
				String where = "icao_code not in (select icao_code from select_by_icao where navdb_id = '%s')".formatted(navdb.getNavdbId());
				system.setCursorBlock("icao");
				 EParam.DYNAMIC_QUERY_ONE.setValue(where);
				navdbExecuteQuery(this,  EParam.DYNAMIC_QUERY_ONE.getValue());
				
				
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
						setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
						setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
						setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
						setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
						setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

					}

				}

			}
			system.setCursorBlock("selectByIcao");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoPostInsert(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoPostInsert Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			for (int i = 0; i < selectByIcao.size(); i++) {
				if (Objects.equals(selectByIcao.getRow(i).getRecordStatus(), "INSERT")) {
					createDefaultCriteria(null, null, selectByIcao.getRow(i).getSelectById(), null, null, null);
				}
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info("selectByIcaoPostInsert executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoPostInsert Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	// added to call after icao select
	public void selectByIcaoPostInsert() throws Exception {
		log.info(" selectByIcaoPostInsert Executing");
		try {
			for (int i = 0; i < selectByIcao.size(); i++) {
				if (Objects.equals(selectByIcao.getRow(i).getRecordStatus(), "INSERT")) {
					createDefaultCriteria(null, null, selectByIcao.getRow(i).getSelectById(), null, null, null);
				}
			}
			log.info("selectByIcaoPostInsert executed successfully");
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoPostInsert Service");
			throw e;
		}
	}
	

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoIcaoCodeWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoIcaoCodeWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode(), null)) {
				message("Please enter the ICAO Code");
				throw new FormTriggerFailureException();

			}

			else {
				String vRowid = null;
				Integer vCount = 0;

				try {

					query = """
							select rowid from SELECT_BY_ICAO
										where ICAO_CODE = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query, selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByIcao.getRow(system.getCursorRecordIndex()).getRowid(), null) || (!Objects
							.equals(vRowid, selectByIcao.getRow(system.getCursorRecordIndex()).getRowid()))) {
						coreptLib.dspMsg("This is a duplicated ICAO Code.");
						throw new FormTriggerFailureException();

					}

				}
				// no_data_found
				catch (NoDataFoundException e) {
					log.debug("No Data found captured in selectByIcaoIcaoCodeWhenValidateItem");

				}

				query = """
						select count(*) from ICAO
								where ICAO_CODE = ?
						""";
				rec = app.selectInto(query, selectByIcao.getRow(system.getCursorRecordIndex()).getIcaoCode());
				vCount = rec.getInt();
				if (Objects.equals(vCount, 0)) {
					coreptLib.dspMsg("This is not a valid ICAO Code.");
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoIcaoCodeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoIcaoCodeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				setGroup(DbConstants.SELECT_BY_ICAO, "deselectGroup", selectByIcao.getRow(system.getCursorRecordIndex()).getChk(),
						toString(selectByIcao.getRow(system.getCursorRecordIndex()).getSelectById()), null);

			}

			else {
				selectByIcao.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				RecordGroup groupId = findGroup("deselectGroup");
				Integer totalRows = getGroupRowCount(groupId);
				Integer vIcaoId = 0;
				Integer vButton = 0;
				String query = "";

	
				checkSave(system.getCursorBlock());
				if (totalRows > 0) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						displayAlert
								.moreButtons("S", "DELETE SELECTED ICAO",
										"Delete the selected ICAO Code will also delete all \nassociated criterias."
												+ chr(10) + "Please pick your choice carefully:",
										"Delete All", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("deleteAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
					}

					if (Objects.equals(vButton, 1)) {
						for (int i = 0; i < totalRows; i++) {
							vIcaoId = toInteger(getGroupCharCell("deselectGroup.item1", i));
							query = """
									 Delete from Selection_Criteria_Value
													where select_by_id in (select select_by_id
																			from navdb_select_criteria
																			where icao_code_id = ?
																			and navdb_id = ?)
									""";
							app.executeNonQuery(query, vIcaoId, navdb.getNavdbId());
							query = """
									 Delete from navdb_select_criteria
													where icao_code_id = ?
													and navdb_id = ?
									""";
							app.executeNonQuery(query, vIcaoId, navdb.getNavdbId());
							query = """
									 Delete from select_by_icao
													where navdb_id = ?
													and SELECT_BY_ID = ?
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), vIcaoId);

						}
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						deleteGroupRow("deselectGroup", "ALL_ROWS");
						selectByIcao.getData().clear();
						icao.getData().clear();
						selectByIcao.add(new SelectByIcao());
						icao.add(new Icao());
						queryBlockRecords("icao", null);
						queryBlockRecords("selectByIcao", null);
						if(selectByIcao.size()==1)
						{
							selectByIcao.getRow(0).setRecordStatus("NEW");
						}
					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");
				queryBlockRecords(DbConstants.SELECT_BY_ICAO, null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByIcaoCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByIcaoCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (!Objects.equals(selectByIcao.getRow(0).getIcaoCode(), null)) {
					selAll(DbConstants.SELECT_BY_ICAO, "deselectGroup");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByIcaoCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByIcaoCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> icaoWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" icaoWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkSave(DbConstants.SELECT_BY_ICAO);
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one ICAO code." + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked \nICAO." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s).");
				if (Objects.equals(icao.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					icao.getRow(system.getCursorRecordIndex()).setChk(N);
					setGroup(DbConstants.ICAO, "selectGroup", icao.getRow(system.getCursorRecordIndex()).getChk(),
							icao.getRow(system.getCursorRecordIndex()).getIcaoCode(), null);

				}
				throw new FormTriggerFailureException();

			}

			else {

				//manually handled
				selectByIcao.getData().clear();
				selectByIcao.add(new SelectByIcao());
				String where = "NAVDB_ID='%s'".formatted(navdb.getNavdbId());
				system.setCursorBlock("selectByIcao");
				navdbExecuteQuery(this, where);
				if(selectByIcao.size()==1 && Objects.equals(selectByIcao.getRow(0).getIcaoCode(), null)) {
					selectByIcao.getRow(0).setRecordStatus("NEW");
					}
				
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("icao.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_icao.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("select_by_icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_icao.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty(DbConstants.ICAO, FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.SELECT_BY_ICAO, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("icao.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_icao.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("select_by_icao.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			system.setCursorBlock("icao");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" icaoWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the icaoWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> icaoChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" icaoChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				setGroup("icao", "selectGroup", icao.getRow(system.getCursorRecordIndex()).getChk(),
						icao.getRow(system.getCursorRecordIndex()).getIcaoCode(), null);

			}

			else {
				icao.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" icaoChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the icaoChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> icaoSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" icaoSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				RecordGroup groupId = findGroup("selectGroup");
				Integer totalRows = getGroupRowCount(groupId);
				String vIcao = null;

				if (totalRows > 0) {
					goBlock(DbConstants.SELECT_BY_ICAO, "");
					for (int i = 0; i < totalRows; i++) {
						vIcao = getGroupCharCell("selectGroup.item1", i);
						selectByIcao.getRow(i).setIcaoCode(vIcao);
						selectByIcao.getRow(i).setRecordStatus("INSERT");
						selectByIcao.getRow(i).setNavdbId(navdb.getNavdbId());
						String query = "SELECT select_by_id_seq.NEXTVAL FROM dual";
						DuRecord rec = app.selectInto(query);
						Integer selectById = rec.getInt();
						selectByIcao.getRow(i).setSelectById(selectById);
						selectByIcao.add(new SelectByIcao());
					}
					selectByIcao.remove(totalRows);
					deleteGroupRow("selectGroup", "ALL_ROWS");
									
					selectByIcaoPostInsert();
					commitForm(this);
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					message("Record has been saved successfully");
					selectByIcao.getData().clear();
					icao.getData().clear();
					selectByIcao.add(new SelectByIcao());
					icao.add(new Icao());
					String where = "NAVDB_ID LIKE ('%s')".formatted(navdb.getNavdbId());
					system.setCursorBlock("selectByIcao");
					navdbExecuteQuery(this, where);
					queryBlockRecords("icao", null);
					displayAlert.oneButton(S, "Default SC",
							"Default Selection Criteria is created for Selected ICAO \ncode.");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" icaoSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the icaoSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> icaoResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" icaoResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("selectGroup", "ALL_ROWS");
				queryBlockRecords("icao", null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" icaoResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the icaoResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> icaoCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" icaoCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (!Objects.equals(icao.getRow(0).getIcaoCode(), null)) {
					selAll(DbConstants.ICAO, "selectGroup");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" icaoCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the icaoCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkSave(DbConstants.AIRPORT_TO_SELECT);
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");

			}

			else if (getGroupRowCount(findGroup("selectGroup")) > 0) {
				deleteGroupRow("selectGroup", "ALL_ROWS");

			}
			
			airportToSelect.getData().clear();
			airportToSelect.add(new AirportToSelect());
			String where = "select_by_id=%d".formatted(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
			system.setCursorBlock("airportToSelect");
			navdbExecuteQuery(this, where);
			if(airportToSelect.size()==1 && Objects.equals(airportToSelect.getRow(0).getAirportIdent(),null) ) {
				airportToSelect.getRow(0).setRecordStatus("NEW");
			}
			stdAirport.getData().clear();
			stdAirport.add(new StdAirport());
			queryBlockRecords("STD_AIRPORT", "INITIAL");
			if (toInteger(global.getProcessingCycle()) > controlBlock.getProcCycle()) {
				controlBlock.setAirportFrameText("Available Standard Airports in cycle " + controlBlock.getProcCycle());
				setItemInstanceProperty("control_block.airport_frame_text", null, "visual_attribute", "red");

			}

			else {
				controlBlock.setAirportFrameText("Available Standard Airports in cycle " + global.getProcessingCycle());
				setItemInstanceProperty("control_block.airport_frame_text", null, "visual_attribute", "black");

			}
			controlBlock.setAptCnt(0);
			hideView("SELECT_FROM_GROUPS");
			system.setCursorBlock("selectByAirportGroup");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupOnPopulateDetails(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupOnPopulateDetails Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String recstat = system.getRecordStatus();
			String startitm = system.getCursorItem();
			Object relId = null;

			if ((Objects.equals(recstat, "NEW") || Objects.equals(recstat, "INSERT"))) {
                log.debug("Inside if rec stat value is New / Insert");
			}

			if (((!Objects.equals(selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById(), null)))) {
				setBlockProperty(DbConstants.AIRPORT_TO_SELECT, "default_where", "");

				queryMasterDetails(relId, DbConstants.AIRPORT_TO_SELECT);

			}

			if ((!Objects.equals(system.getCursorItem(), startitm))) {
				goItem(startitm);

				checkPackageFailure();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupOnPopulateDetails executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupOnPopulateDetails Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			Integer vButton = 0;

			if (Arrays.asList("CHANGED", "QUERIED").contains(system.getRecordStatus())) {
				checkDelRec(system.getCursorBlock(), system.getRecordStatus());
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					displayAlert.moreButtons(S, "DELETE AIRPORT GROUP",
							"Delete this record will also delete all selected airports \nand associated criterias."
									+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
							"Delete All", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("deleteAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("deleteAlert", alertDetails.getCurrentAlert());
				}
				if (Objects.equals(vButton, 1)) {

					query = """
							 Delete from Selection_Criteria_Value
										where select_by_id in (select select_by_id
																from navdb_select_criteria
																 where airport_group_id = ?
															 	 and navdb_id = ?)
							""";
					app.executeNonQuery(query,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 Delete from navdb_select_criteria
										where airport_group_id = ?
										and navdb_id = ?
							""";
					app.executeNonQuery(query,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 DELETE FROM AIRPORT_TO_SELECT
							   		WHERE SELECT_BY_ID = ?
							""";
					app.executeNonQuery(query,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());// TODOcommit
					deleteRecord("");

					query = """
							DELETE FROM SELECT_BY_AIRPORT_GROUP
							   		WHERE SELECT_BY_ID=?
							""";
					app.executeNonQuery(query,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
					
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					system.setFormStatus("NORMAL");
					system.setRecordStatus("QUERIED");
					selectByAirportGroup.getData().clear();
					selectByAirportGroup.add(new SelectByAirportGroup());
					String where = "NAVDB_ID LIKE ('%s')".formatted(navdb.getNavdbId());
					system.setCursorBlock("selectByAirportGroup");	
					navdbExecuteQuery(this, where);
					if(selectByAirportGroup.size()==1 && Objects.equals(selectByAirportGroup.getRow(0).getGroupName(), null) ){
						selectByAirportGroup.getRow(0).setRecordStatus("NEW");
					}
					queryBlockRecords("STD_AIRPORT", "INITIAL");
				}

				else {
					throw new FormTriggerFailureException();

				}

			}

			else {
				deleteRecord("");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName(), null)) {
				String vRowid = null;
				String query = "";
				DuRecord rec = null;

				try {

					query = """
							select rowid from SELECT_BY_AIRPORT_GROUP
										where GROUP_NAME = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query, selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getRowid(), null)
							|| (!Objects.equals(vRowid,
									selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getRowid()))) {
						coreptLib.dspMsg("This GROUP_NAME is already used. Please give a \ndifferent name.");
						throw new FormTriggerFailureException();

					}

				}
				catch (NoDataFoundException e) {
					log.error("No Data Found");;

				}
				controlBlock.setCurRecord(system.getCursorRecord());
				if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)) {

					if (Objects.equals(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getRecordStatus(),
							"INSERT")) {
						query = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
						rec = app.selectInto(query);
						Integer selectById = rec.getInt();
						selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).setSelectById(selectById);
						selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).setNavdbId(navdb.getNavdbId());
						parameter.setGroupAName(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName());
						genericNativeQueryHelper.commit(this, "selectByAirportGroup");
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						selectByAirportGroupPostInsert();
						system.setFormStatus("NORMAL");
					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info("selectByAirportGroupWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupPostInsert(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupPostInsert Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";

			displayAlert.oneButton(S, "Default SC", "Default Selection Criteria is created for New Airport \nGroup.");

			createDefaultCriteria(null, null, null,
					selectByAirportGroup.getRow(system.getPrevCursorindex()).getSelectById(), null, "T");
			if (Objects.equals(selectByAirportGroup.getRow(system.getPrevCursorindex()).getRecordStatus(), "INSERT")
					&& Objects.equals(selectByAirportGroup.getRow(system.getPrevCursorindex()).getIncludeExcludeInd(),
							"X")) {

				query = """
						UPDATE navdb_select_criteria
						     SET include_exclude_ind = ?
						   WHERE airport_group_id = ?
						""";
				app.executeNonQuery(query,
						selectByAirportGroup.getRow(system.getPrevCursorindex()).getIncludeExcludeInd(),
						selectByAirportGroup.getRow(system.getPrevCursorindex()).getSelectById());
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupPostInsert executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupPostInsert Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	// added to call after insert of selectByAirportGroup
	public void selectByAirportGroupPostInsert() throws Exception {
		log.info(" selectByAirportGroupPostInsert Executing");
		try {
			String query = "";
			displayAlert.oneButton(S, "Default SC", "Default Selection Criteria is created for New Airport \nGroup.");
			createDefaultCriteria(null, null, null,
					selectByAirportGroup.getRow(system.getPrevCursorindex()).getSelectById(), null, "T");
			if (Objects.equals(selectByAirportGroup.getRow(system.getPrevCursorindex()).getRecordStatus(), "INSERT")
					&& Objects.equals(selectByAirportGroup.getRow(system.getPrevCursorindex()).getIncludeExcludeInd(),
							"X")) {

				query = """
						UPDATE navdb_select_criteria
						     SET include_exclude_ind = ?
						   WHERE airport_group_id = ?
						""";
				app.executeNonQuery(query,
						selectByAirportGroup.getRow(system.getPrevCursorindex()).getIncludeExcludeInd(),
						selectByAirportGroup.getRow(system.getPrevCursorindex()).getSelectById());
			}

			log.info(" selectByAirportGroupPostInsert executed successfully");
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupPostInsert Service");
			throw e;
		}
	}
	
	
	
	

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupGroupNameWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupGroupNameWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName(), null)) {
				String vRowid = null;
				String query = "";
				DuRecord rec = null;

				try {

					query = """
							select rowid from SELECT_BY_AIRPORT_GROUP
									where GROUP_NAME = ?
									and NAVDB_ID = ?
							""";
					rec = app.selectInto(query,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByAirportGroup.getRow(system.getCursorRecordIndex()).getRowid(), null)
							|| (!Objects.equals(vRowid,
									selectByAirportGroup.getRow(system.getCursorRecordIndex()).getRowid()))) {
						coreptLib.dspMsg("This GROUP_NAME is already used. Please give a \ndifferent name");
						throw new FormTriggerFailureException();

					}

				}

				catch (NoDataFoundException e) {
					log.error("No Data Found");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupGroupNameWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupGroupNameWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByAirportGroupIncludeExcludeIndWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByAirportGroupIncludeExcludeIndWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);	
			if (Objects.equals(system.getRecordStatus(), "CHANGED")) {
				String vInd = null;
				Integer lnCount = 0;
				String vInd1 = null;
				Integer lnRecCount = 0;
				String query = "";
				DuRecord rec = null;

				query = """
						SELECT COUNT(*) from navdb_select_criteria
								   WHERE airport_group_id = ?
						""";
				rec = app.selectInto(query, selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				lnCount = rec.getInt();
				if (Objects.equals(lnCount, 0)) {
					createDefaultCriteria(null, null, null,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById(), null, "T");

				}

				query = """
						SELECT NVL (include_exclude_ind, 'I'), include_exclude_ind  ----Fix SCR 7202 - Venkat - 16-JUL-2017
						         from select_by_airport_group
						        WHERE select_by_id = ?
						""";
				rec = app.selectInto(query, selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				vInd = rec.getString();
				vInd1 = rec.getString();
				if (Objects.equals(vInd, I) && Objects.equals(
						selectByAirportGroup.getRow(system.getCursorRecordIndex()).getIncludeExcludeInd(), "X")) {
					if (Objects.equals(vInd1, I)) {

						try {

							query = """
									 DELETE FROM bck_selection_criteria_value
										WHERE select_by_id IN (SELECT select_by_id
													           FROM bck_navdb_select_criteria
													           WHERE navdb_id = ?
													           AND airport_group_id = (SELECT SELECT_BY_ID
													                                  FROM SELECT_BY_AIRPORT_GROUP
													                                  WHERE NAVDB_ID = ?
													                                  AND GROUP_NAME = ?))
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
									selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
						}

						catch (Exception e) {	
							log.error("Error while Executing the selectByAirportGroupIncludeExcludeIndWhenListChanged Service");


						}

						try {

							query = """
									 DELETE FROM bck_navdb_select_criteria
													         WHERE navdb_id = ?
													           AND AIRPORT_GROUP_ID =(SELECT SELECT_BY_ID
									                  			                      FROM SELECT_BY_AIRPORT_GROUP
									                                                  WHERE NAVDB_ID = ?
									                                                  AND GROUP_NAME = ?)
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
									selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
						}

						catch (Exception e) {
							log.error("Error while Executing the selectByAirportGroupIncludeExcludeIndWhenListChanged Service");


						}
						query = """
								 INSERT INTO bck_navdb_select_criteria (select_by_id,
												                		navdb_id,
																        record_type_code,
																		criteria_id,
																		parent_select_by_id,
																		geo_area_id,
																		area_code_id,
																		icao_code_id,
																		airport_group_id,
																		heliport_group_id,
																		include_exclude_ind,
								                                        create_dcr_number)
								        SELECT  select_by_id,
											  	navdb_id,
												record_type_code,
												criteria_id,
												parent_select_by_id,
												geo_area_id,
												area_code_id,
												icao_code_id,
												airport_group_id,
												heliport_group_id,
												include_exclude_ind,
								                create_dcr_number
												FROM navdb_select_criteria
												WHERE navdb_id = ?
											    AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID
								            	                       FROM SELECT_BY_AIRPORT_GROUP
								                                       WHERE NAVDB_ID = ?
								                                       AND GROUP_NAME = ?)
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());// TODOCOMMIT


						query = """
								 INSERT INTO bck_selection_criteria_value (select_by_id,
													                       value_seq,
													                       value_descr,
													                       value,
													                       create_dcr_number)
								                      SELECT select_by_id,
								                             value_seq,
								                             value_descr,
								                             value,
								                             create_dcr_number
								                    FROM selection_criteria_value
								                    WHERE select_by_id IN (SELECT select_by_id
								                                          FROM bck_navdb_select_criteria
								                                       WHERE navdb_id = ?
								                                       AND airport_group_id = (SELECT SELECT_BY_ID
								                                                               FROM SELECT_BY_AIRPORT_GROUP
								                                                               WHERE NAVDB_ID = ?
								                                                               AND GROUP_NAME = ?))
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
					}

					query = """
							 DELETE FROM selection_criteria_value
							      WHERE select_by_id IN (SELECT select_by_id
							                             FROM navdb_select_criteria
							                             WHERE navdb_id = ?
							                             AND airport_group_id =
								                                 (SELECT SELECT_BY_ID
							                                     FROM SELECT_BY_AIRPORT_GROUP
							                                     WHERE NAVDB_ID = ?
								                                 AND GROUP_NAME = ?))
							""";
					app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());


					query = """
							 DELETE FROM navdb_select_criteria
								        WHERE navdb_id = ?
								        AND parent_select_by_id IS NOT NULL
								          AND AIRPORT_GROUP_ID =
							               				(SELECT SELECT_BY_ID
							                  			 FROM SELECT_BY_AIRPORT_GROUP
							                             WHERE NAVDB_ID = ?
							                             AND GROUP_NAME = ?)
							""";
					app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());

					query = """
							UPDATE navdb_select_criteria
									         SET include_exclude_ind = 'X'
									       	WHERE airport_group_id = ?
							""";
					app.executeNonQuery(query,
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
					setRadioButtonProperty("inc", "datatypRadOptions", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("rules", "datatypRadOptions", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("ref", "datatypRadOptions", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("default", "datatypRadOptions", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

					setRadioButtonProperty("include", "selectAllRulesIxrrd", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("exclude", "selectAllRulesIxrrd", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("none", "selectAllRulesIxrrd", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setRadioButtonProperty("default", "selectAllRulesIxrrd", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else if (Objects.equals(vInd, "X") && Objects.equals(
						selectByAirportGroup.getRow(system.getCursorRecordIndex()).getIncludeExcludeInd(), I)) {

					query = """
							SELECT COUNT(*)
							from bck_navdb_select_criteria
							  WHERE navdb_id = ?
							 --AND parent_select_by_id IS NOT NULL
							   AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID
							                           FROM SELECT_BY_AIRPORT_GROUP
							                           WHERE NAVDB_ID = ?
							                           AND GROUP_NAME = ?)
							""";
					rec = app.selectInto(query, navdb.getNavdbId(), navdb.getNavdbId(),
							selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
					lnRecCount = rec.getInt();
					if (lnRecCount > 0) {

						query = """
								 DELETE FROM navdb_select_criteria
										          WHERE include_exclude_ind = 'X'
										            AND airport_group_id = ?
								""";
						app.executeNonQuery(query,
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());

						query = """
								 INSERT INTO navdb_select_criteria (select_by_id,
												                  	navdb_id,
																    record_type_code,
																	criteria_id,
																	parent_select_by_id,
																	geo_area_id,
																	area_code_id,
																	icao_code_id,
																	airport_group_id,
																	heliport_group_id,
																	include_exclude_ind,
								                                    create_dcr_number)
									SELECT  select_by_id,
									navdb_id,
									record_type_code,
									criteria_id,
									parent_select_by_id,
									geo_area_id,
									area_code_id,
									icao_code_id,
									airport_group_id,
									heliport_group_id,
									include_exclude_ind,
								    create_dcr_number
									                FROM bck_navdb_select_criteria
									                WHERE navdb_id = ?
									               AND AIRPORT_GROUP_ID = (SELECT SELECT_BY_ID
								                                           FROM SELECT_BY_AIRPORT_GROUP
								                                           WHERE NAVDB_ID = ?
								                                           AND GROUP_NAME = ?)
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
						query = """
								 INSERT INTO selection_criteria_value (select_by_id,
									                                   value_seq,
									                                   value_descr,
									                                   value,
									                                   create_dcr_number)
									            SELECT select_by_id,
									                   value_seq,
												       value_descr,
												       value,
												       create_dcr_number
												FROM bck_selection_criteria_value
												WHERE select_by_id IN (SELECT select_by_id
												                       FROM bck_navdb_select_criteria
												                       WHERE navdb_id = ?
												                       AND airport_group_id = (SELECT SELECT_BY_ID
												                                               FROM SELECT_BY_AIRPORT_GROUP
												                                               WHERE NAVDB_ID = ?
												                                               AND GROUP_NAME = ?))
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());

						try {

							query = """
									 DELETE FROM bck_selection_criteria_value
									 WHERE select_by_id IN (SELECT select_by_id
									                        FROM bck_navdb_select_criteria
									                         WHERE navdb_id = ?
									                         AND airport_group_id = (SELECT SELECT_BY_ID
									                                                 FROM SELECT_BY_AIRPORT_GROUP
									                                                  WHERE NAVDB_ID = ?
									                                                  AND GROUP_NAME = ?))
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
									selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
						}

						catch (Exception e) {	
							log.error("Error while Executing the selectByAirportGroupIncludeExcludeIndWhenListChanged Service");


						}

						try {

							query = """
									 DELETE FROM bck_navdb_select_criteria
													         WHERE navdb_id = ?
													           --AND parent_select_by_id IS NOT NULL
													           AND AIRPORT_GROUP_ID =	(SELECT SELECT_BY_ID
									                  			                     FROM SELECT_BY_AIRPORT_GROUP
									                                            	WHERE NAVDB_ID = ?
									                                              	AND GROUP_NAME = ?)
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), navdb.getNavdbId(),
									selectByAirportGroup.getRow(system.getCursorRecordIndex()).getGroupName());
						}

						catch (Exception e) {	
							log.error("Error while Executing the selectByAirportGroupIncludeExcludeIndWhenListChanged Service");


						}
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);

					}

					else {

						query = """
								UPDATE navdb_select_criteria
								               SET include_exclude_ind = 'D'
								             WHERE airport_group_id = ?
								""";
						app.executeNonQuery(query,
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());// TODOCOMMIT

						query = """
								UPDATE navdb_select_criteria
								               SET include_exclude_ind = 'I'
								             WHERE airport_group_id = ?
								               AND RECORD_TYPE_CODE IN (10,15)
								""";
						app.executeNonQuery(query,
								selectByAirportGroup.getRow(system.getCursorRecordIndex()).getSelectById());// TODOCOMMIT

					}

					setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

					setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);
					setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

				}
				genericNativeQueryHelper.commit(this, "selectByAirportGroup");
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
				system.setRecordStatus("QUERIED");
				system.setFormStatus("NORMAL");
				message("Record has been saved successfully");
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByAirportGroupIncludeExcludeIndWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByAirportGroupIncludeExcludeIndWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectFromGroupsWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectFromGroupsWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(nameIn(this, "global.moving_group"), "airport")) {
				controlBlock.setSelectGroup("Select the Move to Airport Group");

			}

			else {
				controlBlock.setSelectGroup("Select the Move to Heliport Group");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectFromGroupsWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectFromGroupsWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName(),
					null)) {

				throw new FormTriggerFailureException();

			}
			controlBlock.setAptCntTemp(getGroupRowCount(findGroup("selectGroup")));
			if (getGroupRowCount(findGroup("selectGroup")) > 0 || stdAirport.getIsSelectAll()) {
				coreptLib.dspMsg("You have checked at lease one Airport data." + chr(10) + chr(10)
						+ "Click the 'Select' button to select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					airportToSelect.getRow(system.getCursorRecordIndex()).setChk(N);
					setGroup(DbConstants.AIRPORT_TO_SELECT, "deselectGroup",
							airportToSelect.getRow(system.getCursorRecordIndex()).getChk(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao());

				}

				controlBlock.setAptCnt(controlBlock.getAptCntTemp());

				if(stdAirport.getIsSelectAll()) {
					controlBlock.setAptCnt(controlBlock.getAirportCount());
				}
				throw new FormTriggerFailureException();
			}

			else {
			
//				selectByAirportGroup.getData().clear();
//				selectByAirportGroup.add(new SelectByAirportGroup());
//				String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
//				system.setCursorBlock("selectByAirportGroup");
//				navdbExecuteQuery(this, where);
//				for(int i=0;i<selectByAirportGroup.size();i++) {
//					if(Objects.equals(selectByAirportGroup.getRow(i).getGroupName(), parameter.getGroupAName())){
//						system.setPreviousBlockCursorIndex(i);
//						}
//				}
//				if(selectByAirportGroup.size()==1 && Objects.equals(selectByAirportGroup.getRow(0).getGroupName(), null) ){
//					selectByAirportGroup.getRow(0).setRecordStatus("NEW");
//				}
//				 if(selectByAirportGroup.size()>0 && !Objects.equals(selectByAirportGroup.getRow(0).getGroupName(), null)) {
//				 	airportToSelect.getData().clear();
//				 	airportToSelect.add(new AirportToSelect());
//				 	where = "select_by_id=%d".formatted(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
//				 	system.setCursorBlock("airportToSelect");
//				 	navdbExecuteQuery(this, where);
//				 }
				stdAirport.getData().clear();
				stdAirport.add(new StdAirport());
				queryBlockRecords("STD_AIRPORT", "INITIAL");
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("airport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}
			hideView("SELECT_FROM_GROUPS");
			system.setCursorBlock("airportToSelect");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(system.getRecordStatus(), "QUERIED")) {
				if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
						&& !Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode(), null)) {
					
					if(Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getRecordStatus(), "INSERT") ) {
						airportToSelect.getRow(system.getCursorRecordIndex()).setSelectById(
								selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}
					

					try {

						query = """
								SELECT airport_ident, airport_icao
											         from pl_std_airport
											        WHERE processing_cycle = ?			 --? --7607 --Madhu
											          AND data_supplier = ?
											          AND NVL(ata_iata_designator,'$$$') = ?
								""";
						rec = app.selectInto(query, controlBlock.getProcCycle(), navdb.getDataSupplier(),
								airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode());
						airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIdent(rec.getString());
						airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIcao(rec.getString());
						checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null,
								"RECORD");
					}
					// Too_Many_Rows
					catch (TooManyRowsException e) {
						coreptLib.dspMsg("Multiple Airports Exists with IATA '"
								+ airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode() + "'");

					}
					// No_Data_Found
					catch (NoDataFoundException e) {
						coreptLib.dspMsg("No Airport Exists with IATA '"
								+ airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode() + "'");
					}
					// Others
					catch (Exception e) {
						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

					}

				}

				else if (!Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
						&& Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode(), null)) {
					if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(), null)) {
						checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null,
								"RECORD");

					}

				}

				if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)) {
					coreptLib.dspMsg("Please enter Airport Ident");
					throw new FormTriggerFailureException();

				}

				else {
					if (!Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
							&& Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(),
									null)) {
						checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null,
								"RECORD");

					}

				}

			}

			if (!Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERIED")) {
				checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(),
						airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(), "RECORD");

			}

			if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(), null)) {
				coreptLib.dspMsg("Airport Icao is required, please enter.");
				throw new FormTriggerFailureException();

			}

			if (Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())
					&& !Objects.equals(global.getAalCycle(), null)) {
				String vIdent = rtrim(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent());
				String vIcao = rtrim(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao());
				Integer vRow = 0;
				Integer vExist = 0;
				Integer totalRows = 0;

				if (!Objects.equals(vIdent + vIcao, null)) {
					totalRows = getGroupRowCount(refreshAalGroups);

					try {

						query = """
								select 1 from airport_to_select a, select_by_airport_group b, navdb c
												where a.airport_ident = ?
												and   a.airport_icao = ?
												and   a.select_by_id = b.select_by_id
												and   b.navdb_id = c.navdb_id
												and   c.data_supplier = ?
												and rownum = 1
								""";
						rec = app.selectInto(query, vIdent, vIcao, navdb.getDataSupplier());
						vExist = rec.getInt();
					}
					// no_data_found
					catch (NoDataFoundException e) {
						vExist = 0;

					}
					if (Objects.equals(vExist, 0)) {
						addGroupRow(refreshAalGroups, "endOfGroup");
						vRow = totalRows + 1;
						setGroupCharCell(refreshAalGroups, "airportIdent", totalRows, vIdent);
						setGroupCharCell(refreshAalGroups, "airportIcao", totalRows, vIcao);

					}

					if (vRow > 0) {
						setItemProperty("display_item_block.refresh_airport_airway_low", FormConstant.VISIBLE,
								FormConstant.PROPERTY_TRUE);
						setItemProperty("display_item_block.refresh_airport_airway_low", FormConstant.ENABLED,
								FormConstant.PROPERTY_TRUE);

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String curRecord = system.getCursorRecord();
			Integer totalRows = getGroupRowCount(refreshAalGroups);

			if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
				setGroup(DbConstants.AIRPORT_TO_SELECT, "deselectGroup", N,
						airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(),
						airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao());

			}

			for (int i = 0; i < totalRows; i++) {
				if (Objects.equals(getGroupCharCell("refreshAalGroups.airportIdent", i),
						airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent())
						&& Objects.equals(getGroupCharCell("refreshAalGroups.airportIcao", i),
								airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao())) {
					deleteGroupRow("refreshAalGroup", i);
					if (Objects.equals(totalRows, 1)) {
						setItemProperty("display_item_block.refresh_airport_airway_low", FormConstant.ENABLED,
								FormConstant.PROPERTY_FALSE);
						setItemProperty("display_item_block.refresh_airport_airway_low", FormConstant.VISIBLE,
								FormConstant.PROPERTY_FALSE);

					}

					break;

				}

			}

			checkDelRec(system.getCursorBlock(), system.getRecordStatus());

			copyWithIndex(this, "DELETED", "airportToSelect" + ".recordStatus", system.getCursorRecordIndex());

			genericNativeQueryHelper.commit(this, "airportToSelect");
			this.airportToSelect.filterNonDeletedRecords();
			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);
			message("Record has been saved successfully");
			queryBlockRecords("STD_AIRPORT", null);
			goBlock(DbConstants.AIRPORT_TO_SELECT, "");
			if(airportToSelect.size()==0) {
				airportToSelect.add(new AirportToSelect());
				}
			if(airportToSelect.size()==1 && Objects.equals(airportToSelect.getRow(0).getAirportIdent(), null) ){
				airportToSelect.getRow(0).setRecordStatus("NEW");
			}
			goRecord(curRecord, null);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectKeyCommit(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectKeyCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getCursorBlock(), "airportToSelect")) {
				for(int i=0;i<airportToSelect.size();i++) {
					if(Objects.equals(airportToSelect.getRow(i).getRecordStatus(), "INSERT")) {
						airportToSelect.getRow(i).setSelectById(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());	
						}
				}
			}
			if (Objects.equals(system.getFormStatus(), "CHANGED")
					&& Objects.equals(system.getCursorBlock(), "airportToSelect")) {
				checkToCommit("COMMIT");
				message("Record has been saved successfully");
				if (!Objects.equals(system.getFormStatus(), "CHANGED")) {
					queryBlockRecords("STD_AIRPORT", null);

				}

			} else if (Objects.equals(system.getFormStatus(), "CHANGED")
					&& Objects.equals(system.getCursorBlock(), "selectByAirportGroup")) {
				message("Record has been saved successfully");
				commitForm(this);
				String rowid =  toString(nameIn(this,substr("navdb", 1,15)+".rowid"));
				sendUpdatedRowIdDetails(rowid);
				system.setFormStatus("NORMAL");
				system.setRecordStatus("QUERIED");
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectKeyCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectKeyCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectPostQuery(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			for(AirportToSelect air : airportToSelect.getData())
			{
				air.setIataCode(
						populateIatacode(air.getAirportIdent(),
								air.getAirportIcao()));
			}
			
			

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectMoveWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectMoveWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkSave(system.getCursorBlock());
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if(airportToSelect.getIsSelectAll()) {
					goBlock("SELECT_FROM_GROUPS", "");
					global.setMovingGroup("airport");
					populateAirportGroups(global.getMovingGroup());
					
				}
				else {

					if (Objects.equals(getGroupRowCount(findGroup("deselectGroup")), 0)) {
						coreptLib.dspMsg("No airport to move!");

					}

					else {
						goBlock("SELECT_FROM_GROUPS", "");
						global.setMovingGroup("airport");
						populateAirportGroups(global.getMovingGroup());

					}
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectMoveWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectMoveWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectAirportIdentWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectAirportIdentWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERIED")
					&& Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(), null)) {
				checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null, "RECORD");

				try {

					query = """
							SELECT ata_iata_designator
							from pl_std_airport
							WHERE processing_cycle = ? 			--? --7607 --Madhu
							AND data_supplier = ?
							AND airport_ident = ?
							AND airport_icao = ?
							""";
					rec = app.selectInto(query, controlBlock.getProcCycle(), navdb.getDataSupplier(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao());

					airportToSelect.getRow(system.getCursorRecordIndex()).setIataCode(rec.getString());
				}

				catch (Exception e) {
					log.error("Error while Executing the airportToSelectAirportIdentWhenValidateItem Service");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectAirportIdentWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectAirportIdentWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectIataCodeWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectIataCodeWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(system.getRecordStatus(), "QUERIED")) {
				if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
						&& !Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode(), null)) {

					try {

						query = """
								SELECT airport_ident, airport_icao
										         from pl_std_airport
										        WHERE processing_cycle = ? 						--? --7607
										          AND data_supplier = ?
										          AND NVL(ata_iata_designator,'$$$') = ?
								""";
						rec = app.selectInto(query, controlBlock.getProcCycle(), global.getProcessingCycle(),
								navdb.getDataSupplier(),
								airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode());
						airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIdent(rec.getString());
						airportToSelect.getRow(system.getCursorRecordIndex()).setAirportIcao(rec.getString());
						checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null,
								"RECORD");
					}
					// Too_Many_Rows
					catch (TooManyRowsException e) {
						coreptLib.dspMsg("Multiple Airports Exists with IATA '"
								+ airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode() + "'");

					}
					// No_Data_Found
					catch (NoDataFoundException e) {
						coreptLib.dspMsg("No Airport Exists with IATA '"
								+ airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode() + "'");

					}
					// Others
					catch (Exception e) {

						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

					}

				}

				else if (!Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)
						&& Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getIataCode(), null)) {
					if (Objects.equals(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao(), null)) {

						checkAirport(airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(), null,
								"RECORD");

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectIataCodeWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectIataCodeWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if(!airportToSelect.getIsSelectAll()) {
					setGroup(DbConstants.AIRPORT_TO_SELECT, "deselectGroup",
							airportToSelect.getRow(system.getCursorRecordIndex()).getChk(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							airportToSelect.getRow(system.getCursorRecordIndex()).getAirportIcao());
				}
				else {
					int count = controlBlock.getAptCnt();
					count-=1;
					controlBlock.setAptCnt(count);
				}
			}

			else {
				airportToSelect.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				List<IncExcAptTable> incExcAptTable = new ArrayList<>();

				if (airportToSelect.getIsSelectAll()) {
					List<String> unSelectedRows = airportToSelect.getUnSelectedRows();
					List<String> airportIdentList = new ArrayList<>();
					List<String> airportIcaoList = new ArrayList<>();
					String rowIdList = unSelectedRows.stream().map(rowId -> "'" + rowId + "'")
							.collect(Collectors.joining(","));
					String lastQuery = hashUtil.decrypt(airportToSelect.getLastQuery());
					Integer recordCount = airportToSelect.getRow(0).getRecordCount();
					if (!Objects.equals(rowIdList, "")) {
						lastQuery = lastQuery.replace("order by Airport_ident offset ? rows fetch next ? rows only",
								" and rowid not in( %s ) order by airport_ident ".formatted(rowIdList));
						lastQuery = lastQuery.replace(") where rno <=" + recordCount,
								" where rowid not in(" + rowIdList + "))");
					} else {
						lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
						lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
					}
					
					 EParam.DYNAMIC_QUERY_ONE.setValue(lastQuery);
					List<DuRecord> records = app.executeQuery( EParam.DYNAMIC_QUERY_ONE.getValue());
					for (DuRecord reco : records) {
						String ident = toString(reco.getObject("AIRPORT_IDENT"));
						String icao = toString(reco.getObject("AIRPORT_ICAO"));
						airportIdentList.add(ident);
						airportIcaoList.add(icao);
					}
					for (int i = 0; i < airportIdentList.size(); i++) {
						Integer lnCnt = 0;
						String deleteStatement = """
								DELETE FROM airport_to_select
									     WHERE select_by_id = ?
									     AND airport_ident = ?
									     AND airport_icao = ?
								""";
						app.executeNonQuery(deleteStatement,
								selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
								airportIdentList.get(i), airportIcaoList.get(i));
						String navdbIECur = """
								SELECT DISTINCT scv.VALUE, nsc.include_exclude_ind,nsc.record_type_code,
								             			DECODE(nsc.record_type_code,
								             							10, 'AIRPORT',
								             							11, 'APT NDB',
								             							12, 'APT WAYPOINT',
								             							20, 'RUNWAY',
								             							37, 'LOCALIZER',
								             							90, 'APPROACH',
								             							91, 'SID',
								             							92, 'STAR',
								             							NULL) Rec_Type
								                  FROM selection_criteria_value scv,
								                       navdb_select_criteria nsc
								                 WHERE scv.select_by_id = nsc.select_by_id
								                   AND nsc.navdb_id = ?
								                   AND nsc.geo_area_id = '-2'
								                   AND scv.VALUE = ?
								""";

						try {
							List<DuRecord> listOfRecords = app.executeQuery(navdbIECur, navdb.getNavdbId(),
									airportIdentList.get(i));

							for (DuRecord record : listOfRecords) {
								incExcAptTable.get(lnCnt).setAirportIdent(toString(record.getObject("VALUE")));
								incExcAptTable.get(lnCnt)
										.setIncExcInd(toString(record.getObject("INCLUDE_EXCLUDE_IND")));
								incExcAptTable.get(lnCnt).setRecType(toString(record.getObject("REC_TYPE")));
								incExcAptTable.get(lnCnt)
										.setRecTypeCode(toInteger(record.getObject("RECORD_TYPE_CODE")));
								lnCnt++;
							}
						} catch (Exception e) {
							lnCnt = lnCnt - 1;
							coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
						}
						
					}
					if(airportIdentList.size()>0) {
						controlBlock.setAptCnt(0);
						message("Record has been saved successfully");
						deleteGroupRow("deselectGroup", "ALL_ROWS");
						queryBlockRecords("STD_AIRPORT", "INITIAL");
						airportToSelect.getData().clear();
						airportToSelect.add(new AirportToSelect());
						queryBlockRecords(DbConstants.AIRPORT_TO_SELECT, null);
					}
					
					if (incExcAptTable.size() > 0) {
						showView("INC_EXC_APT_CAN");
						goBlock("INC_EXC_APT", "");
						incExcApt.getData().clear();
						for (int i = 0; i < incExcAptTable.size(); i++) {
							incExcApt.add(new IncExcApt());
							incExcApt.getRow(i).setAirportIdent(incExcAptTable.get(i).getAirportIdent());
							incExcApt.getRow(i).setIncExcInd(incExcAptTable.get(i).getIncExcInd());
							incExcApt.getRow(i).setRecordTypeCode(incExcAptTable.get(i).getRecTypeCode());
							incExcApt.getRow(i).setRecordType(incExcAptTable.get(i).getRecType());
							incExcApt.getRow(i).setChk(Y);

						}
						goItem("INC_EXC_APT.AIRPORT_IDENT");
					}

				}

				else {
					RecordGroup groupId = findGroup("deselectGroup");

					Integer totalRows = getGroupRowCount(groupId);
					String vIdent = null;
					String vIcao = null;
					String query = "";
					

					Integer lnCnt = 1;

					checkSave(system.getCursorBlock());
					incExcAptTable.clear();
					if (totalRows > 0) {
						lnCnt = 0;
						for (int i = 0; i < totalRows; i++) {
							vIdent = getGroupCharCell("deselectGroup.item1", i);
							vIcao = getGroupCharCell("deselectGroup.item2", i);

							query = """
									 DELETE FROM airport_to_select
									     WHERE select_by_id = ?
									     AND airport_ident = ?
									     AND airport_icao = ?
									""";
							app.executeNonQuery(query,
									selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									vIdent, vIcao);
							String navdbIECur = """
									SELECT DISTINCT scv.VALUE, nsc.include_exclude_ind,nsc.record_type_code,
									             			DECODE(nsc.record_type_code,
									             							10, 'AIRPORT',
									             							11, 'APT NDB',
									             							12, 'APT WAYPOINT',
									             							20, 'RUNWAY',
									             							37, 'LOCALIZER',
									             							90, 'APPROACH',
									             							91, 'SID',
									             							92, 'STAR',
									             							NULL) Rec_Type
									                  FROM selection_criteria_value scv,
									                       navdb_select_criteria nsc
									                 WHERE scv.select_by_id = nsc.select_by_id
									                   AND nsc.navdb_id = ?
									                   AND nsc.geo_area_id = '-2'
									                   AND scv.VALUE = ?
									""";

							try {
								List<DuRecord> listOfRecords = app.executeQuery(navdbIECur, navdb.getNavdbId(), vIdent);

								for (DuRecord record : listOfRecords) {
									incExcAptTable.add(new IncExcAptTable());
									incExcAptTable.get(lnCnt).setAirportIdent(toString(record.getObject("VALUE")));
									incExcAptTable.get(lnCnt)
											.setIncExcInd(toString(record.getObject("INCLUDE_EXCLUDE_IND")));
									incExcAptTable.get(lnCnt).setRecType(toString(record.getObject("REC_TYPE")));
									incExcAptTable.get(lnCnt)
											.setRecTypeCode(toInteger(record.getObject("RECORD_TYPE_CODE")));
									lnCnt++;
								}
							} catch (Exception e) {
								lnCnt = lnCnt - 1;
								coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
							}

						}
						controlBlock.setAptCnt(0);
						message("Record has been saved successfully");
						deleteGroupRow("deselectGroup", "ALL_ROWS");
						queryBlockRecords("STD_AIRPORT", "INITIAL");
						airportToSelect.getData().clear();
						airportToSelect.add(new AirportToSelect());
						queryBlockRecords(DbConstants.AIRPORT_TO_SELECT, null);
					}

					
					if (incExcAptTable.size() > 0) {
						showView("INC_EXC_APT_CAN");
						goBlock("INC_EXC_APT", "");
						incExcApt.getData().clear();
						for (int i = 0; i < incExcAptTable.size(); i++) {
							incExcApt.add(new IncExcApt());
							incExcApt.getRow(i).setAirportIdent(incExcAptTable.get(i).getAirportIdent());
							incExcApt.getRow(i).setIncExcInd(incExcAptTable.get(i).getIncExcInd());
							incExcApt.getRow(i).setRecordTypeCode(incExcAptTable.get(i).getRecTypeCode());
							incExcApt.getRow(i).setRecordType(incExcAptTable.get(i).getRecType());
							incExcApt.getRow(i).setChk(Y);

						}
						goItem("INC_EXC_APT.AIRPORT_IDENT");
					}

				}


			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				controlBlock.setAptCnt(0);
				deleteGroupRow("deselectGroup", "ALL_ROWS");
				airportToSelect.getData().clear();
				airportToSelect.add(new AirportToSelect());
				queryBlockRecords(DbConstants.AIRPORT_TO_SELECT,null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> airportToSelectCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" airportToSelectCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

					selAllGroups("airportToSelect");
					String lastQuery = hashUtil.decrypt(airportToSelect.getLastQuery());
					String countQuery = """
							SELECT COUNT(*)
							FROM (
							""";
					Integer recordCount = airportToSelect.getRow(0).getRecordCount();
					lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
					lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
					countQuery += lastQuery + " )";
					EParam.DYNAMIC_QUERY_ONE.setValue(countQuery);
					DuRecord rec = app.selectInto(EParam.DYNAMIC_QUERY_ONE.getValue());
					Integer count = rec.getInt();
					controlBlock.setAptCnt(count);
					controlBlock.setAirportCount(count);
				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" airportToSelectCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the airportToSelectCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			setMenuItemProperty(rtrim("Record") + "." + ltrim("Clear"), FormConstant.ENABLED,
					FormConstant.BPROPERTY_FALSE);

			if (Objects.equals(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName(), null)) {
				goBlock(DbConstants.SELECT_BY_AIRPORT_GROUP, "");
				throw new FormTriggerFailureException();

			}
			checkSave(DbConstants.AIRPORT_TO_SELECT);

			controlBlock.setAptCntTemp(getGroupRowCount(findGroup("deselectGroup")));
			if (getGroupRowCount(findGroup("deselectGroup")) > 0 || airportToSelect.getIsSelectAll()) {

				coreptLib.dspMsg("You have checked at lease one Airport Data." + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked \nAirport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					stdAirport.getRow(system.getCursorRecordIndex()).setChk(N);

					setGroup("STD_AIRPORT", "selectGroup", stdAirport.getRow(system.getCursorRecordIndex()).getChk(),
							stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							stdAirport.getRow(system.getCursorRecordIndex()).getAirportIcao());

				}

				controlBlock.setAptCnt(controlBlock.getAptCntTemp());
				if(airportToSelect.getIsSelectAll()) {
					controlBlock.setAptCnt(controlBlock.getAirportCount());
					}

				throw new FormTriggerFailureException();

			}

			else {

				//manually handled
//				selectByAirportGroup.getData().clear();
//				selectByAirportGroup.add(new SelectByAirportGroup());
//				String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
//				system.setCursorBlock("selectByAirportGroup");
//				navdbExecuteQuery(this, where);
//				for(int i=0;i<selectByAirportGroup.size();i++) {
//					if(Objects.equals(selectByAirportGroup.getRow(i).getGroupName(), parameter.getGroupAName())){
//						system.setPreviousBlockCursorIndex(i);
//						}
//				}
//				if(selectByAirportGroup.size()>0 && Objects.equals(selectByAirportGroup.getRow(0).getGroupName(), null) ){
//					selectByAirportGroup.getRow(0).setRecordStatus("NEW");
//				}
//				airportToSelect.getData().clear();
//				airportToSelect.add(new AirportToSelect());
//				String where = "select_by_id=%d".formatted(selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
//				system.setCursorBlock("airportToSelect");
//				navdbExecuteQuery(this, where);
//				if(airportToSelect.size()>0 && Objects.equals(airportToSelect.getRow(0).getAirportIdent(), null) ){
//					airportToSelect.getRow(0).setRecordStatus("NEW");
//				}
//				 stdAirport.getData().clear();
//				 stdAirport.add(new StdAirport());
//				 queryBlockRecords("STD_AIRPORT", null);
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("airport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("airport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_airport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

			}
			hideView("SELECT_FROM_GROUPS");
			system.setCursorBlock("stdAirport");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportPostQuery(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			for (int i = 0; i < stdAirport.size(); i++) {

				stdAirport.getRow(i).setFourAlphaTerminal(controlBlock.getCopy4AlphaTerminal());
				stdAirport.getRow(i).setRunwayLength(controlBlock.getCopyRunwayLength());
				stdAirport.getRow(i).setSurfaceCode(controlBlock.getCopySurfaceCode());
				if (Objects.equals(stdAirport.getRow(i).getFourAlphaTerminal(), Y)) {
					setItemInstanceProperty("std_airport.four_alpha_terminal", toString(i), "visual_attribute",
							"CHECKED");

				}

				else {
					setItemInstanceProperty("std_airport.four_alpha_terminal", toString(i), "visual_attribute",
							"PLAIN");

				}
				Integer lnApp = 0;
				Integer lnSid = 0;
				Integer lnStar = 0;

				query = """
						SELECT count(*) from pl_std_approach
							WHERE data_supplier = ? AND
							validate_ind in ('Y','O') AND
							processing_cycle = nvl(?,?)
							AND airport_ident =?
						""";
				rec = app.selectInto(query, navdb.getDataSupplier(), controlBlock.getProcCycle(),
						global.getProcessingCycle(), stdAirport.getRow(i).getAirportIdent());
				lnApp = rec.getInt();

				query = """
						SELECT count(*) from pl_std_sid
							WHERE data_supplier = ? AND
							validate_ind in ('Y','O') AND
							processing_cycle = nvl(?,?)
							AND airport_ident =?
						""";
				rec = app.selectInto(query, navdb.getDataSupplier(), controlBlock.getProcCycle(),
						global.getProcessingCycle(), stdAirport.getRow(i).getAirportIdent());
				lnSid = rec.getInt();

				query = """
						SELECT count(*) from pl_std_star
							WHERE data_supplier = ? AND
							validate_ind in ('Y','O') AND
							processing_cycle = nvl(?,?)
							AND airport_ident =?
						""";
				rec = app.selectInto(query, navdb.getDataSupplier(), controlBlock.getProcCycle(),
						global.getProcessingCycle(), stdAirport.getRow(i).getAirportIdent());
				lnStar = rec.getInt();
				if (lnApp > 0) {
					stdAirport.getRow(i).setAppFlag(Y);

				}

				if (lnSid > 0) {
					stdAirport.getRow(i).setSidFlag(Y);

				}

				if (lnStar > 0) {
					stdAirport.getRow(i).setStarFlag(Y);

				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportKeyClrblk(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportKeyClrblk Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

	
			coreptLib.dspMsg("Clear Block Option is not allowed for this block");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportKeyClrblk executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportKeyClrblk Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportPostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			stdAirport.getRow(system.getCursorRecordIndex()).setRunwayLength(null);
			stdAirport.getRow(system.getCursorRecordIndex()).setSurfaceCode(null);
			stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal(N);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if (!stdAirport.getIsSelectAll()) {
					setGroup("STD_AIRPORT", "selectGroup", stdAirport.getRow(system.getCursorRecordIndex()).getChk(),
							stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(),
							stdAirport.getRow(system.getCursorRecordIndex()).getAirportIcao());
				} else {
					int count = controlBlock.getAptCnt();
					count -= 1;
					controlBlock.setAptCnt(count);
				}

			}

			else {
				stdAirport.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportFourAlphaTerminalWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportFourAlphaTerminalWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "ENTER_QUERY")) {
				if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), Y)) {
					setItemInstanceProperty("std_airport.four_alpha_terminal", toString(system.getCursorRecordIndex()),
							"visual_attribute", "CHECKED");

				}

				else {
					setItemInstanceProperty("std_airport.four_alpha_terminal", toString(system.getCursorRecordIndex()),
							"visual_attribute", "PLAIN");

				}

			}

			else {
				if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getFourAlphaTerminal(), Y)) {
					stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal(N);

				}

				else {
					stdAirport.getRow(system.getCursorRecordIndex()).setFourAlphaTerminal(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportFourAlphaTerminalWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportFourAlphaTerminalWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if (stdAirport.getIsSelectAll()) {
					List<String> unSelectedRows = stdAirport.getUnSelectedRows();
					List<String> airportIdentList = new ArrayList<>();
					List<String> airportIcaoList = new ArrayList<>();
					String rowIdList = unSelectedRows.stream().map(rowId -> "'" + rowId + "'")
							.collect(Collectors.joining(","));
					String lastQuery = hashUtil.decrypt(stdAirport.getLastQuery());
					Integer recordCount = stdAirport.getRow(0).getRecordCount();

					if(!Objects.equals(rowIdList, "")) {
						lastQuery = lastQuery.replace("order by airport_ident offset ? rows fetch next ? rows only", 
								" and rowid not in( %s ) order by airport_ident ".formatted(rowIdList));
						lastQuery = lastQuery.replace(") where rno <=" + recordCount,
								" where rowid not in(" + rowIdList + "))");
					}
					else {
						lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
						lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
					}
					EParam.DYNAMIC_QUERY_ONE.setValue(lastQuery);
					List<DuRecord> records = app.executeQuery(EParam.DYNAMIC_QUERY_ONE.getValue());
					for (DuRecord reco : records) {
						String ident = toString(reco.getObject("AIRPORT_IDENT"));
						String icao = toString(reco.getObject("AIRPORT_ICAO"));
						airportIdentList.add(ident);
						airportIcaoList.add(icao);
					}
					for(int i=0;i<airportIcaoList.size();i++) {
						
						airportToSelect.getRow(i).setAirportIdent(airportIdentList.get(i));
						airportToSelect.getRow(i).setAirportIcao(airportIcaoList.get(i));
						airportToSelect.getRow(i).setIataCode(populateIatacode(airportIdentList.get(i), airportIcaoList.get(i)));
						airportToSelect.getRow(i).setRecordStatus("INSERT");
						airportToSelect.getRow(i).setSelectById(
								selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						airportToSelect.add(new AirportToSelect());
					}
					airportToSelect.remove(airportIcaoList.size());
					
					if(airportIdentList.size()>0) {
						genericNativeQueryHelper.commit(this, "airportToSelect");
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						controlBlock.setAptCnt(0);
						stdAirport.getData().clear();
						stdAirport.add(new StdAirport());
						queryBlockRecords("STD_AIRPORT",null);
						airportToSelect.getData().clear();
						airportToSelect.add(new AirportToSelect());
						String where = "select_by_id = %d".formatted(
								selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						system.setCursorBlock("airportToSelect");
						navdbExecuteQuery(this, where);

						if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)) {
							queryBlockRecords("STD_AIRPORT", "INITIAL");

						}
					}
					
					
				}

				else {
					RecordGroup groupId = findGroup("selectGroup");
					Integer totalRows = getGroupRowCount(groupId);
					String vIdent = null;
					String vIcao = null;
					if (totalRows > 0) {
						goBlock(DbConstants.AIRPORT_TO_SELECT, "");
						for (int i = 0; i < totalRows; i++) {
							vIdent = getGroupCharCell("selectGroup.item1", i);
							vIcao = getGroupCharCell("selectGroup.item2", i);
							airportToSelect.getRow(i).setAirportIdent(vIdent);
							airportToSelect.getRow(i).setAirportIcao(vIcao);
							airportToSelect.getRow(i).setIataCode(populateIatacode(vIdent, vIcao));
							airportToSelect.getRow(i).setRecordStatus("INSERT");
							airportToSelect.getRow(i).setSelectById(
									selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
							airportToSelect.add(new AirportToSelect());
						}
						airportToSelect.remove(totalRows);
						deleteGroupRow("selectGroup", "ALL_ROWS");
						
						genericNativeQueryHelper.commit(this, "airportToSelect");
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						controlBlock.setAptCnt(0);
						stdAirport.getData().clear();
						stdAirport.add(new StdAirport());
						queryBlockRecords("STD_AIRPORT",null);
						airportToSelect.getData().clear();
						airportToSelect.add(new AirportToSelect());
						String where = "select_by_id = %d".formatted(
								selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						system.setCursorBlock("airportToSelect");
						navdbExecuteQuery(this, where);

						if (Objects.equals(stdAirport.getRow(system.getCursorRecordIndex()).getAirportIdent(), null)) {
							queryBlockRecords("STD_AIRPORT", "INITIAL");

						}
					}
					
				}
				
				


				
				setApplicationProperty("cursorStyle", "DEFAULT");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				controlBlock.setAptCnt(0);
				deleteGroupRow("selectGroup", "ALL_ROWS");
				queryBlockRecords("STD_AIRPORT", null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdAirportCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdAirportCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
					selAllGroups("stdAirport");
					String lastQuery = hashUtil.decrypt(stdAirport.getLastQuery());
					lastQuery = lastQuery.replace("where rno <=11", "");
					String countQuery = """
							SELECT COUNT(*)
							FROM (
							""";
					countQuery += lastQuery + " )";
					EParam.DYNAMIC_QUERY_ONE.setValue(countQuery);
					DuRecord rec = app.selectInto(EParam.DYNAMIC_QUERY_ONE.getValue());
					Integer count = rec.getInt();
					controlBlock.setAptCnt(count);
					controlBlock.setAirportCount(count);
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdAirportCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdAirportCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	private void selAllGroups(String pBlock) throws Exception {
		try {
			
			Object obj = nameIn(this, pBlock);
			DuBlock<?> block = (DuBlock<?>) obj;
			
			for(int i=0;i<block.size();i++) {
				copyWithIndex(this, Y, pBlock + ".chk", i);
				setItemInstanceProperty(pBlock + ".chk", toString(i), "visual_attribute", "CHECKED");
				
			}

		}

		catch (Exception e) {
			throw e;

		}

	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkSave(DbConstants.HELIPORT_TO_SELECT);
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");

			}

			else if (getGroupRowCount(findGroup("selectGroup")) > 0) {
				deleteGroupRow("selectGroup", "ALL_ROWS");

			}

			
			heliportToSelect.getData().clear();
			heliportToSelect.add(new HeliportToSelect());
			String where = "select_by_id=%d".formatted(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
			system.setCursorBlock("heliportToSelect");
			navdbExecuteQuery(this, where);
			if(heliportToSelect.size()>0 && Objects.equals(heliportToSelect.getRow(0).getHeliportIdent(), null) ){
				heliportToSelect.getRow(0).setRecordStatus("NEW");
			}
//			where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
//			system.setCursorBlock("selectByHeliportGroup");
//			navdbExecuteQuery(this, where);
			stdHeliport.getData().clear();
			stdHeliport.add(new StdHeliport());
			queryBlockRecords("STD_HELIPORT", "INITIAL");
			
			if (toInteger(global.getProcessingCycle()) > controlBlock.getProcCycle()) {
				controlBlock
						.setHeliportFrameText("Available Standard Heliports in cycle " + controlBlock.getProcCycle());
				setItemInstanceProperty("control_block.heliport_frame_text", null, "VISUAL_ATTRIBUTE", "red");

			}

			else {
				controlBlock
						.setHeliportFrameText("Available Standard Heliports in cycle " + global.getProcessingCycle());
				setItemInstanceProperty("control_block.heliport_frame_text", null, "VISUAL_ATTRIBUTE", "black");
			}
			setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
			Integer vNallowUpdate = 0;
			String vCnavdbBlock = DbConstants.NAVDB;

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec(N);
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.UPDATE_ALLOWED,
							FormConstant.PROPERTY_TRUE);
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.INSERT_ALLOWED,
							FormConstant.PROPERTY_TRUE);

				}

				else {
					parameter.setUpdRec(Y);
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.UPDATE_ALLOWED,
							FormConstant.PROPERTY_FALSE);
					setBlockProperty(DbConstants.SELECT_BY_HELIPORT_GROUP, FormConstant.INSERT_ALLOWED,
							FormConstant.PROPERTY_FALSE);

				}

			}
			hideView("SELECT_FROM_GROUPS");
			system.setCursorBlock("selectByHeliportGroup");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupOnPopulateDetails(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupOnPopulateDetails Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String recstat = system.getRecordStatus();
			String startitm = system.getCursorItem();
			Object relId = null;

			if ((Objects.equals(recstat, "NEW") || Objects.equals(recstat, "INSERT"))) {
                log.debug("Inside if recstat value is new / Insert from selectByHeliportGroupOnPopulateDetails");
			}

			if (((!Objects.equals(selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById(),
					null)))) {
				queryMasterDetails(relId, DbConstants.HELIPORT_TO_SELECT);

			}

			if ((!Objects.equals(system.getCursorItem(), startitm))) {
				goItem(startitm);
				checkPackageFailure();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupOnPopulateDetails executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupOnPopulateDetails Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer vButton = 0;
			String query = "";

			checkDelRec(system.getCursorBlock(), system.getRecordStatus());
			if (Arrays.asList("CHANGED", "QUERIED").contains(system.getRecordStatus())) {
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					vButton = displayAlert.moreButtons(S, "DELETE HELIPORT GROUP",
							"Delete this record will also delete all selected \nHELIPORTs and associated criterias."
									+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
							"Delete All", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("heliportAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("heliportAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {

					query = """
							 Delete from Selection_Criteria_Value
										where select_by_id in (select select_by_id
																from navdb_select_criteria
																where HELIPORT_group_id = ?
																and navdb_id = ?)
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 Delete from navdb_select_criteria
										where HELIPORT_group_id = ?
										and navdb_id = ?
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById(),
							navdb.getNavdbId());
					query = """
							 DELETE FROM HELIPORT_TO_SELECT
							   		WHERE SELECT_BY_ID = ?
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());// TODOcommit

					query = """
							DELETE FROM SELECT_BY_HELIPORT_GROUP
							WHERE SELECT_BY_ID = ?
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					system.setFormStatus("NORMAL");
					system.setRecordStatus("QUERIED");
					selectByHeliportGroup.getData().clear();
					selectByHeliportGroup.add(new SelectByHeliportGroup());
					String where = "NAVDB_ID LIKE ('%s')".formatted(navdb.getNavdbId());
					system.setCursorBlock("selectByHeliportGroup");
					navdbExecuteQuery(this, where);
					if(selectByHeliportGroup.size()==1 && Objects.equals(selectByHeliportGroup.getRow(0).getGroupName(), null) ){
						selectByHeliportGroup.getRow(0).setRecordStatus("NEW");
					}
					queryBlockRecords("STD_HELIPORT", "INITIAL");
					

				}

				else {
					throw new FormTriggerFailureException();

				}

			}

			else {
				deleteRecord("");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getGroupName(), null)) {
				String vRowid = null;

				try {

					query = """
							select rowid from SELECT_BY_HELIPORT_GROUP
										where GROUP_NAME = ?
										and NAVDB_ID = ?
							""";
					rec = app.selectInto(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getGroupName(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getRowid(), null)
							|| (!Objects.equals(vRowid,
									selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getRowid()))) {
						coreptLib.dspMsg("This GROUP_NAME is already used. Please give a \ndifferent name");
						throw new FormTriggerFailureException();

					}

				}
				// no_data_found
				catch (NoDataFoundException e) {
					log.debug("No Data found captured in selectByHeliportGroupWhenValidateRecord");

				}
				controlBlock.setCurRecord(system.getCursorRecord());
				if (Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null)) {
					query = "SELECT CPTSC.select_by_id_seq.NEXTVAL FROM dual";
					rec = app.selectInto(query);
					Integer selectById = rec.getInt();
					selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).setSelectById(selectById);
					selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).setNavdbId(navdb.getNavdbId());
					parameter.setGroupHName(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName());
					genericNativeQueryHelper.commit(this, "selectByHeliportGroup");
					message("Record has been saved successfully");
					selectByHeliportGroupPostInsert();
					system.setFormStatus("NORMAL");
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupPostInsert(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupPostInsert Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			displayAlert.oneButton(S, "Default SC",
					"Default Selection Criteria is Criteria is created for New Heliport \nGroup.");

			createDefaultCriteria(null, null, null, null,
					selectByHeliportGroup.getRow(system.getPrevCursorindex()).getSelectById(), H);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupPostInsert executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupPostInsert Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}
	
	public void selectByHeliportGroupPostInsert() throws Exception {
		log.info(" selectByHeliportGroupPostInsert Executing");
		try {

			displayAlert.oneButton(S, "Default SC",
					"Default Selection Criteria is created for New Heliport \nGroup.");
			createDefaultCriteria(null, null, null, null,
					selectByHeliportGroup.getRow(system.getPrevCursorindex()).getSelectById(), H);
			log.info(" selectByHeliportGroupPostInsert executed successfully");
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupPostInsert Service");
			throw e;
		}
	}
	
	
	
	
	

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupOnCheckDeleteMaster(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupOnCheckDeleteMaster Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String dummyDefine = null;
			String heliportToSelectCur = """
					SELECT 1 FROM AIRPORT_TO_SELECT A
					    WHERE A.SELECT_BY_ID = ?
					""";

			DuRecord records = app.selectInto(heliportToSelectCur,
					selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
			dummyDefine = records.getString();
			if (!Objects.equals(dummyDefine, null)) {
				message("cannot delete master record when matching detail records exist.");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupOnCheckDeleteMaster executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupOnCheckDeleteMaster Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupGroupNameWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupGroupNameWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (!Objects.equals(selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getGroupName(), null)) {
				String vRowid = null;

				try {

					query = """
							select rowid from SELECT_BY_HELIPORT_GROUP
									where GROUP_NAME = ?
									and NAVDB_ID = ?
							""";
					rec = app.selectInto(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getGroupName(),
							navdb.getNavdbId());
					vRowid = rec.getString();
					if (Objects.equals(selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getRowid(), null)
							|| (!Objects.equals(vRowid,
									selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getRowid()))) {
						coreptLib.dspMsg("This GROUP_NAME is already used. Please give a \ndifferent name");
						throw new FormTriggerFailureException();

					}

				}
				// no_data_found
				catch (NoDataFoundException e) {
					log.debug("No Data found captured in selectByHeliportGroupGroupNameWhenValidateItem");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupGroupNameWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupGroupNameWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectByHeliportGroupIncludeExcludeIndWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectByHeliportGroupIncludeExcludeIndWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (Objects.equals(system.getRecordStatus(), "CHANGED")) {
				String vInd = null;
				Integer lnCount = 0;

				query = """
						SELECT count(*) from navdb_select_criteria
								   WHERE heliport_group_id = ?
						""";
				rec = app.selectInto(query,
						selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				lnCount = rec.getInt();
				if (Objects.equals(lnCount, 0)) {
					createDefaultCriteria(null, null, null, null,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById(), H);

				}

				query = """
						SELECT NVL (include_exclude_ind, 'I')
						         from select_by_heliport_group
						        WHERE select_by_id = ?
						""";
				rec = app.selectInto(query,
						selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				vInd = rec.getString();
				if (Objects.equals(vInd, I) && Objects.equals(
						selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getIncludeExcludeInd(), "X")) {

					query = """
							UPDATE navdb_select_criteria
								        SET include_exclude_ind = 'X'
									    WHERE heliport_group_id = ?
							          AND record_type_code = 15
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());	
				}

				else if (Objects.equals(vInd, "X") && Objects.equals(
						selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getIncludeExcludeInd(), I)) {

					query = """
							UPDATE navdb_select_criteria
								            SET include_exclude_ind = 'I'
									        WHERE heliport_group_id = ?
									          AND record_type_code = 15
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				}

				else if (Objects.equals(vInd, "X") && Objects.equals(
						selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getIncludeExcludeInd(), null)) {

					query = """
							UPDATE navdb_select_criteria
								            SET include_exclude_ind = 'I'
									        WHERE heliport_group_id = ?
									          AND record_type_code = 15
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				}

				else if (Objects.equals(vInd, I) && Objects.equals(
						selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getIncludeExcludeInd(), null)) {

					query = """
							UPDATE navdb_select_criteria
								            SET include_exclude_ind = 'I'
									        WHERE heliport_group_id = ?
									          AND record_type_code = 15
							""";
					app.executeNonQuery(query,
							selectByHeliportGroup.getRow(system.getCursorRecordIndex()).getSelectById());
				}

			}
			genericNativeQueryHelper.commit(this, "selectByHeliportGroup");
			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);
			system.setRecordStatus("QUERIED");
			system.setFormStatus("NORMAL");
			message("Record has been saved successfully");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectByHeliportGroupIncludeExcludeIndWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectByHeliportGroupIncludeExcludeIndWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName(), null)) {

				throw new FormTriggerFailureException();

			}

			if (getGroupRowCount(findGroup("selectGroup")) > 0) {

				coreptLib.dspMsg("You have checked at lease one HELIPORT data." + chr(10) + chr(10)
						+ "Click the 'Select' button to select the checked HELIPORT." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");

				if (Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					heliportToSelect.getRow(system.getCursorRecordIndex()).setChk(N);

					setGroup(DbConstants.HELIPORT_TO_SELECT, "deselectGroup",
							heliportToSelect.getRow(system.getCursorRecordIndex()).getChk(),
							heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(),
							heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao());
					
					

				}

				throw new FormTriggerFailureException();

			}

			else {

//				selectByHeliportGroup.getData().clear();
//				selectByHeliportGroup.add(new SelectByHeliportGroup());
//				String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
//				system.setCursorBlock("selectByHeliportGroup");
//				navdbExecuteQuery(this, where);
//				for(int i=0;i<selectByHeliportGroup.size();i++) {
//					if(Objects.equals(selectByHeliportGroup.getRow(i).getGroupName(), parameter.getGroupName())) {
//						system.setPreviousBlockCursorIndex(i);	
//						}
//				}
				if(selectByHeliportGroup.size()>0 && Objects.equals(selectByHeliportGroup.getRow(0).getGroupName(), null) ){
					selectByHeliportGroup.getRow(0).setRecordStatus("NEW");
				}
//				if(selectByHeliportGroup.size()>0 && !Objects.equals(selectByHeliportGroup.getRow(0).getGroupName(), null) ) {
//					heliportToSelect.getData().clear();
//				 	heliportToSelect.add(new HeliportToSelect());
//				 	where = "select_by_id=%d".formatted(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
//				 	system.setCursorBlock("heliportToSelect");
//				 	navdbExecuteQuery(this, where);
//				}
				stdHeliport.getData().clear();
				stdHeliport.add(new StdHeliport());
				queryBlockRecords("STD_HELIPORT", "INITIAL");
				
				
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.move", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("heliport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockProperty(DbConstants.HELIPORT_TO_SELECT, FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.reset", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.move", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("heliport_to_select.select", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			hideView("SELECT_FROM_GROUPS");
			system.setCursorBlock("heliportToSelect");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERIED")) {
				
				if(Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getRecordStatus(), "INSERT") ) {
					heliportToSelect.getRow(system.getCursorRecordIndex()).setSelectById(
							selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
				}

				checkHeliport(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(),
						heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao(), "RECORD");

			}

			if (Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao(), null)) {

				coreptLib.dspMsg("Heliport Icao is required, please enter.");
				throw new FormTriggerFailureException();

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectKeyDelrec(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String curRecord = system.getCursorRecord();

			if (Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getChk(), Y)) {

				setGroup(DbConstants.HELIPORT_TO_SELECT, "deselectGroup", N,
						heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(),
						heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao());

			}

			checkDelRec(system.getCursorBlock(), system.getRecordStatus());
			copyWithIndex(this, "DELETED", "heliportToSelect" + ".recordStatus", system.getCursorRecordIndex());

			genericNativeQueryHelper.commit(this, "heliportToSelect");
			this.heliportToSelect.filterNonDeletedRecords();
			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);
			message("Record has been saved successfully");
			queryBlockRecords("STD_HELIPORT", null);
			goBlock(DbConstants.HELIPORT_TO_SELECT, "");

			goRecord(curRecord, First_Record);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectKeyCommit(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectKeyCommit Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getCursorBlock(), "heliportToSelect")) {
				for(int i=0;i<heliportToSelect.size();i++) {
					if(Objects.equals(heliportToSelect.getRow(i).getRecordStatus(), "INSERT")) {
						heliportToSelect.getRow(i).setSelectById(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());	
						}
				}
			}
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				commitForm(this);
				message("Record has been saved successfully");
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
				system.setFormStatus("NORMAL");
				if (!Objects.equals(system.getFormStatus(), "CHANGED")) {
					queryBlockRecords("STD_HELIPORT", null);

				}

			}
			else if (Objects.equals(system.getFormStatus(), "CHANGED")
					&& Objects.equals(system.getCursorBlock(), "selectByHeliportGroup")) {
				message("Record has been saved successfully");
				commitForm(this);
				String rowid =  toString(nameIn(this,substr("navdb", 1,15)+".rowid"));
				sendUpdatedRowIdDetails(rowid);
				system.setFormStatus("NORMAL");
				system.setRecordStatus("QUERIED");
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectKeyCommit executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectKeyCommit Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectMoveWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectMoveWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkSave(system.getCursorBlock());
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (heliportToSelect.getIsSelectAll()) {
					goBlock("SELECT_FROM_GROUPS", "");
					global.setMovingGroup("heliport");
					populateAirportGroups(global.getMovingGroup());

				} else {

					if (Objects.equals(getGroupRowCount(findGroup("deselectGroup")), 0)) {

						coreptLib.dspMsg("Nothing to move!");

					}

					else {
						goBlock("SELECT_FROM_GROUPS", "");
						global.setMovingGroup("heliport");
						populateAirportGroups(global.getMovingGroup());

					}
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectMoveWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectMoveWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectHeliportIdentWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectHeliportIdentWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null)
					&& !Objects.equals(system.getRecordStatus(), "QUERIED")
					&& Objects.equals(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao(), null)) {
				checkHeliport(heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(), null,
						"RECORD");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectHeliportIdentWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectHeliportIdentWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if(!heliportToSelect.getIsSelectAll()) {
				setGroup(DbConstants.HELIPORT_TO_SELECT, "deselectGroup",
						heliportToSelect.getRow(system.getCursorRecordIndex()).getChk(),
						heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIdent(),
						heliportToSelect.getRow(system.getCursorRecordIndex()).getHeliportIcao());
				}
			}

			else {
				heliportToSelect.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if (heliportToSelect.getIsSelectAll()) {
					List<String> unSelectedRows = heliportToSelect.getUnSelectedRows();
					List<String> identList = new ArrayList<>();
					List<String> icaoList = new ArrayList<>();
					String rowIdList = unSelectedRows.stream().map(rowId -> "'" + rowId + "'")
							.collect(Collectors.joining(","));
					String lastQuery = hashUtil.decrypt(heliportToSelect.getLastQuery());
					Integer recordCount = heliportToSelect.getRow(0).getRecordCount();
					if (!Objects.equals(rowIdList, "")) {
						lastQuery = lastQuery.replace("order by Heliport_ident offset ? rows fetch next ? rows only ",
								"and rowid not in( %s ) order by Heliport_ident ".formatted(rowIdList));
						lastQuery = lastQuery.replace(") where rno <=" + recordCount,
								" where  rowid not in(" + rowIdList + "))");
					} else {
						lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
						lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
					}
					 EParam.DYNAMIC_QUERY_ONE.setValue(lastQuery);
					List<DuRecord> records = app.executeQuery( EParam.DYNAMIC_QUERY_ONE.getValue());
					for (DuRecord reco : records) {
						String ident = toString(reco.getObject("HELIPORT_IDENT"));
						String icao = toString(reco.getObject("HELIPORT_ICAO"));
						identList.add(ident);
						icaoList.add(icao);
					}
					for (int i = 0; i < identList.size(); i++) {
						String deleteStatement = """
								 Delete from HELIPORT_to_select
												where select_by_id = ?
												and HELIPORT_ident = ?
												and HELIPORT_icao  = ?
								""";
						app.executeNonQuery(deleteStatement,
								selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
								identList.get(i), icaoList.get(i));
					
					}
					if(identList.size()>0) {
						message("Record has been saved successfully");
						deleteGroupRow("deselectGroup", "ALL_ROWS");

						stdHeliport.getData().clear();
						stdHeliport.add(new StdHeliport());
						String heliWhere = """
									data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d and (terminal_ident,terminal_icao) not in
									(select heliport_ident,heliport_icao from heliport_to_select a,select_by_heliport_group b
									where b.navdb_id='%s' and a.select_by_id = b.select_by_id)
								"""
								.formatted(navdb.getDataSupplier(), controlBlock.getProcCycle(), navdb.getNavdbId());
						system.setCursorBlock("stdHeliport");
						 EParam.DYNAMIC_QUERY_ONE.setValue(heliWhere);
						navdbExecuteQuery(this,  EParam.DYNAMIC_QUERY_ONE.getValue());
						heliportToSelect.getData().clear();
						heliportToSelect.add(new HeliportToSelect());
						queryBlockRecords("HELIPORT_TO_SELECT", null);
					}
				}

				else {
					RecordGroup groupId = findGroup("deselectGroup");
					Integer totalRows = getGroupRowCount(groupId);
					String vIdent = null;
					String vIcao = null;
					String query = "";

					checkSave(system.getCursorBlock());
					if (totalRows > 0) {
						for (int i = 0; i < totalRows; i++) {
							vIdent = getGroupCharCell("deselectGroup.item1", i);
							vIcao = getGroupCharCell("deselectGroup.item2", i);

							query = """
									 Delete from HELIPORT_to_select
													where select_by_id = ?
													and HELIPORT_ident = ?
													and HELIPORT_icao  = ?
									""";
							app.executeNonQuery(query,
									selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									vIdent, vIcao);
						}
						message("Record has been saved successfully");
						deleteGroupRow("deselectGroup", "ALL_ROWS");

						stdHeliport.getData().clear();
						stdHeliport.add(new StdHeliport());
						String heliWhere = """
									data_supplier = '%s' and validate_ind in ('Y','S','H','O') and processing_cycle = %d and (terminal_ident,terminal_icao) not in
									(select heliport_ident,heliport_icao from heliport_to_select a,select_by_heliport_group b
									where b.navdb_id='%s' and a.select_by_id = b.select_by_id)
								"""
								.formatted(navdb.getDataSupplier(), controlBlock.getProcCycle(), navdb.getNavdbId());
						system.setCursorBlock("stdHeliport");
						 EParam.DYNAMIC_QUERY_ONE.setValue(heliWhere);
						navdbExecuteQuery(this,  EParam.DYNAMIC_QUERY_ONE.getValue());
						heliportToSelect.getData().clear();
						heliportToSelect.add(new HeliportToSelect());
						queryBlockRecords("HELIPORT_TO_SELECT", null);
					}

				}
				
				
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");
				heliportToSelect.getData().clear();
				heliportToSelect.add(new HeliportToSelect());
				queryBlockRecords(DbConstants.HELIPORT_TO_SELECT, null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> heliportToSelectCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" heliportToSelectCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if(!Objects.equals(parameter.getWorkType(), "VIEW")) {
				selAllGroups("heliportToSelect");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" heliportToSelectCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the heliportToSelectCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdHeliportKeyClrblk(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportKeyClrblk Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			coreptLib.dspMsg("Clear Block Option is not allowed for this block");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdHeliportKeyClrblk executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportKeyClrblk Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdHeliportWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getGroupName(), null)) {
				goBlock(DbConstants.SELECT_BY_HELIPORT_GROUP, "");
				throw new FormTriggerFailureException();

			}

			checkSave(DbConstants.HELIPORT_TO_SELECT);
			if (getGroupRowCount(findGroup("deselectGroup")) > 0 || heliportToSelect.getIsSelectAll()) {
				coreptLib.dspMsg("You have checked at lease one Heliport Data." + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked \nHeliport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s).");
				if (Objects.equals(stdHeliport.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					stdHeliport.getRow(system.getCursorRecordIndex()).setChk(N);

					setGroup("STD_HELIPORT", "selectGroup", stdHeliport.getRow(system.getCursorRecordIndex()).getChk(),
							stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(),
							stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIcao());

				}

				throw new FormTriggerFailureException();
			}

			else {

				//manually handled
//				selectByHeliportGroup.getData().clear();
//				selectByHeliportGroup.add(new SelectByHeliportGroup());
//				String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
//				system.setCursorBlock("selectByHeliportGroup");
//				navdbExecuteQuery(this, where);
//				if(selectByHeliportGroup.size()==1 && Objects.equals(selectByHeliportGroup.getRow(0).getGroupName(), null) ){
//					selectByHeliportGroup.getRow(0).setRecordStatus("NEW");
//				}
//				heliportToSelect.getData().clear();
//				heliportToSelect.add(new HeliportToSelect());
//				where = "select_by_id=%d".formatted(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
//				system.setCursorBlock("heliportToSelect");
//				navdbExecuteQuery(this, where);
//				if(heliportToSelect.size()==1 && Objects.equals(heliportToSelect.getRow(0).getHeliportIdent(), null) ){
//					heliportToSelect.getRow(0).setRecordStatus("NEW");
//				}
//				stdHeliport.getData();
//				stdHeliport.add(new StdHeliport());
//				queryBlockRecords("STD_HELIPORT",null);
				
				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("heliport_to_select.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("heliport_to_select.move", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
					setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				}

				else {
					Integer vNallowUpdate = 0;
					String vCnavdbBlock = DbConstants.NAVDB;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockProperty("STD_HELIPORT", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
							setBlockProperty("STD_HELIPORT", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_heliport.check_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

						}

						else {
							parameter.setUpdRec(Y);
							setBlockProperty("STD_HELIPORT", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
							setBlockProperty("STD_HELIPORT", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_heliport.reset", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
							setItemProperty("std_heliport.check_all", FormConstant.ENABLED,
									FormConstant.PROPERTY_FALSE);
							setItemProperty("std_heliport.select", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

						}

					}

				}

			}
			hideView("SELECT_FROM_GROUPS");
			system.setCursorBlock("stdHeliport");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info("stdHeliportWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdHeliportChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if(!stdHeliport.getIsSelectAll()) {
				setGroup("STD_HELIPORT", "selectGroup", stdHeliport.getRow(system.getCursorRecordIndex()).getChk(),
						stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(),
						stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIcao());
				}

			}

			else {
				stdHeliport.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdHeliportChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdHeliportSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if (stdHeliport.getIsSelectAll()) {
					List<String> unSelectedRows = stdHeliport.getUnSelectedRows();
					List<String> identList = new ArrayList<>();
					List<String> icaoList = new ArrayList<>();
					String notIdentList = unSelectedRows.stream().map(notIdent -> "'" + notIdent + "'")
							.collect(Collectors.joining(","));
					String lastQuery = hashUtil.decrypt(stdHeliport.getLastQuery());
					Integer recordCount = stdHeliport.getRow(0).getRecordCount();

					if (!Objects.equals(notIdentList, "")) {
						lastQuery = lastQuery.replace("order by Heliport_ident offset ? rows fetch next ? rows only",
								" and Heliport_ident not in( %s ) order by Heliport_ident ".formatted(notIdentList));
						lastQuery = lastQuery.replace(") where rno <=" + recordCount,
								" where terminal_ident not in(" + notIdentList + "))");
					} else {
						lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
						lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
					}
					EParam.DYNAMIC_QUERY_ONE.setValue(lastQuery);
					List<DuRecord> records = app.executeQuery(EParam.DYNAMIC_QUERY_ONE.getValue());
					
					for (DuRecord reco : records) {
						String ident = toString(reco.getObject("TERMINAL_IDENT"));
						String icao = toString(reco.getObject("TERMINAL_ICAO"));
						identList.add(ident);
						icaoList.add(icao);
					}
					for (int i = 0; i < icaoList.size(); i++) {

						heliportToSelect.getRow(i).setHeliportIdent(identList.get(i));
						heliportToSelect.getRow(i).setHeliportIcao(icaoList.get(i));
						heliportToSelect.getRow(i).setRecordStatus("INSERT");
						heliportToSelect.getRow(i).setSelectById(
								selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						heliportToSelect.add(new HeliportToSelect());
					}
					heliportToSelect.remove(icaoList.size());
					
					
					if(identList.size()>0) {
						try {
						genericNativeQueryHelper.commit(this, "heliportToSelect");
						}
						catch(EntityExistsException e) {
							coreptLib.dspMsg("Duplicate Idents were selected.The same ident exist \nin both Airport and Heliport.Please select only one.");	
							throw e;
						}
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						stdHeliport.getData().clear();
						stdHeliport.add(new StdHeliport());
						queryBlockRecords("STD_HELIPORT", null);
						heliportToSelect.getData().clear();
						heliportToSelect.add(new HeliportToSelect());
						String where = "select_by_id = %d"
								.formatted(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						system.setCursorBlock("heliportToSelect");
						navdbExecuteQuery(this, where);
						if (Objects.equals(stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(), null)) {

							queryBlockRecords("STD_HELIPORT", "INITIAL");

						}
					}
					

				}

				else {
					RecordGroup groupId = findGroup("selectGroup");
					Integer totalRows = getGroupRowCount(groupId);
					String vIdent = null;
					String vIcao = null;
					if (totalRows > 0) {
						goBlock(DbConstants.HELIPORT_TO_SELECT, "");
						for (int i = 0; i < totalRows; i++) {
							vIdent = getGroupCharCell("selectGroup.item1", i);
							vIcao = getGroupCharCell("selectGroup.item2", i);

							heliportToSelect.getRow(i).setHeliportIdent(vIdent);
							heliportToSelect.getRow(i).setHeliportIcao(vIcao);
							heliportToSelect.getRow(i).setRecordStatus("INSERT");
							heliportToSelect.getRow(i).setSelectById(
									selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
							heliportToSelect.add(new HeliportToSelect());

						}
						heliportToSelect.remove(totalRows);
						deleteGroupRow("selectGroup", "ALL_ROWS");
						try {
						genericNativeQueryHelper.commit(this, "heliportToSelect");
						}
						catch(EntityExistsException e) {
							coreptLib.dspMsg("Duplicate Idents were selected.The same ident exist \nin both Airport and Heliport.Please select only one.");
							throw e;
						}
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						stdHeliport.getData().clear();
						stdHeliport.add(new StdHeliport());
						queryBlockRecords("STD_HELIPORT", null);
						heliportToSelect.getData().clear();
						heliportToSelect.add(new HeliportToSelect());
						String where = "select_by_id = %d"
								.formatted(selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						system.setCursorBlock("heliportToSelect");
						navdbExecuteQuery(this, where);
						if (Objects.equals(stdHeliport.getRow(system.getCursorRecordIndex()).getTerminalIdent(), null)) {
							queryBlockRecords("STD_HELIPORT", "INITIAL");

						}
						

					}

					
				}
				
			


			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdHeliportSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdHeliportResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("selectGroup", "ALL_ROWS");
				queryBlockRecords("STD_HELIPORT", null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdHeliportResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> stdHeliportCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" stdHeliportCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if(!Objects.equals(parameter.getWorkType(),"VIEW")) {
				selAllGroups("stdHeliport");
				}
				

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" stdHeliportCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the stdHeliportCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectionSelectionsWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectionSelectionsWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			controlBlock.setAirwaySbi(null);
			controlBlock.setAirportSbi(null);
			selectAllRules.setIxrrd(N);
			selectAllRules.setOldIxrrd(selectAllRules.getIxrrd());

			goBlock("datatyp_rad", "");

			if (Arrays.asList(S, "G", "A", I, "R", H,"P").contains(selection.getSelections())) {
				setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

				setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
				
				setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_FALSE);
				
				setRadioButtonProperty("exc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);
				
			}

			else {
				setItemProperty("datatyp_rad.options", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
				if (Objects.equals(parameter.getUpdRec(), N)) {
					setItemProperty("datatyp_rad.options", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.options", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				String vType = "E";
				Integer vCount = 0;
				Integer lnIncExcCnt = 0;

				try {

					query = """
							select 'T' from select_by_airport_group
							where select_by_id = ?
							""";
					rec = app.selectInto(query, selection.getSelections());
					vType = rec.getString();
				}

				catch (NoDataFoundException e) {

					try {

						query = """
								select 'H' from select_by_heliport_group
								where select_by_id = ?
								""";
						rec = app.selectInto(query, selection.getSelections());
						vType = rec.getString();
					}

					catch (NoDataFoundException heliportGroupEx) {

						try {

							query = """
									select 'I' from select_by_icao
									where select_by_id = ?
									""";
							rec = app.selectInto(query, selection.getSelections());
							vType = rec.getString();
						}

						catch (NoDataFoundException icaoEx) {

							try {

								query = """
										select 'G' from select_by_geographic_area
										  					where select_by_id = ?
										""";
								rec = app.selectInto(query, selection.getSelections());
								vType = rec.getString();
							}

							catch (NoDataFoundException geoAreaEx) {
								vType = "E";

							}

						}

					}

				}

				populateDatatypDescr(vType);

				if (Objects.equals(vType, "T")) {

					query = """
							SELECT COUNT (*)
								        from navdb_select_criteria sel
								       WHERE sel.airport_group_id = ?
							           AND sel.navdb_id = ?
							           AND sel.parent_select_by_id IS NULL
							           AND sel.record_type_code = 10
							""";
					rec = app.selectInto(query, selection.getSelections(), navdb.getNavdbId());
					vCount = rec.getInt();
					if (Objects.equals(vCount, 0)) {
						createDatatypCriteria(toInteger(rtrim(ltrim(selection.getSelections()))), 10);

					}

				}

				if (Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE)) {
					setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.DISPLAYED,
							FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.select_all", FormConstant.DISPLAYED, FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.select_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.select_all", "NAVIGABLE", FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.select_all", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					setItemProperty("datatyp_rad.select_all", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);

					setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
					setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

				}

				else {
					setItemProperty("datatyp_rad.inc_exc_indicator", FormConstant.DISPLAYED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("datatyp_rad.select_all", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);

					setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

				}
				if (!Objects.equals(toInteger(selection.getSelections()), -1)) {
					parameter.getDynamicGridData().clear();
					DynamicLists list = new DynamicLists();
					list.setBlockName("datatypRad");
					list.setItemName("datatypRadSelectAll");
					list.setVisible(false);
					parameter.getDynamicGridData().add(list);
					DynamicLists list1 = new DynamicLists();
					list1.setBlockName("datatypRad");
					list1.setItemName("datatypRadIncExcIndicator");
					list1.setVisible(false);
					parameter.getDynamicGridData().add(list1);
					DynamicLists list2 = new DynamicLists();
					list2.setBlockName("datatypRad");
					list2.setItemName("datatypRadRecordTypeDescr");
					list2.setVisible(true);
					parameter.getDynamicGridData().add(list2);
					DynamicLists list3 = new DynamicLists();
					list3.setBlockName("datatypRad");
					list3.setItemName("datatypRadOptions");
					list3.setVisible(true);
					parameter.getDynamicGridData().add(list3);
				} else {
					parameter.getDynamicGridData().clear();
					DynamicLists list = new DynamicLists();
					list.setBlockName("datatypRad");
					list.setItemName("datatypRadSelectAll");
					list.setVisible(true);
					parameter.getDynamicGridData().add(list);
					DynamicLists list1 = new DynamicLists();
					list1.setBlockName("datatypRad");
					list1.setItemName("datatypRadIncExcIndicator");
					list1.setVisible(true);
					parameter.getDynamicGridData().add(list1);
					DynamicLists list2 = new DynamicLists();
					list2.setBlockName("datatypRad");
					list2.setItemName("datatypRadRecordTypeDescr");
					list2.setVisible(true);
					parameter.getDynamicGridData().add(list2);
					DynamicLists list3 = new DynamicLists();
					list3.setBlockName("datatypRad");
					list3.setItemName("datatypRadOptions");
					list3.setVisible(true);
					parameter.getDynamicGridData().add(list3);
				}
				for (int i = 0; i < datatypRad.size(); i++) {
					query = """
							select count(*) from navdb_select_criteria sel
							  		where (sel.geo_area_id = ? OR
													 sel.area_code_id = ? OR
										   		 sel.icao_code_id = ? OR
										   		 sel.airport_group_id = ? OR
										   		 sel.heliport_group_id = ?)
										and sel.navdb_id = ?
										and sel.parent_select_by_id is null
										and sel.record_type_code = ?
							""";
					rec = app.selectInto(query, selection.getSelections(), selection.getSelections(),
							selection.getSelections(), selection.getSelections(), selection.getSelections(),
							navdb.getNavdbId(), datatypRad.getRow(i).getRecordTypeCode());
					vCount = rec.getInt();
					if (Objects.equals(vCount, 0)) {
						createDatatypCriteria(toInteger(rtrim(ltrim(selection.getSelections()))),
								datatypRad.getRow(i).getRecordTypeCode());

					}
					if (!Objects.equals(datatypRad.getRow(i).getRecordTypeCode(), null)) {
						parameter.setIncExcInd(getIncExcInd(toInteger(rtrim(ltrim(selection.getSelections())))));
						if (Objects.equals(parameter.getIncExcInd(), "X")) {
							datatypRad.getRow(i).setOptions("X");
							if (i == 0) {
								setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_FALSE);
								
								setRadioButtonProperty("exc", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
							}

						}

						else {
							if (i == 0) {
								setRadioButtonProperty("inc", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("rules", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

								setRadioButtonProperty("ref", "datatypRadOptions", ENABLED, PROPERTY_TRUE);
								
								setRadioButtonProperty("exc", "datatypRadOptions", ENABLED, PROPERTY_TRUE);
								
								if(!Objects.equals(toInteger(selection.getSelections()), -1)) {
								setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_TRUE);
								}

								setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								if (Objects.equals(parameter.getWorkType(), "VIEW")) {

									setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

									setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

								}

								else {

									setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

									setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_TRUE);

								}
							}
							populateDatatypOption(i);
						}
						

					}

					if (Objects.equals(toInteger(selection.getSelections()), -1)) {
						populateDefaultIncExcInd("DATATYP_RAD", "INC_EXC_INDICATOR", i);

						query = """
								SELECT COUNT (*)
										        from Select_Criteria
										       WHERE Processing_Order = 30              -- check if it has a list rule
										         AND Record_Type_Code = ?
								""";
						rec = app.selectInto(query, datatypRad.getRow(i).getRecordTypeCode());
						lnIncExcCnt = rec.getInt();
						if (Objects.equals(lnIncExcCnt, 0)) {
							setItemInstanceProperty("datatyp_rad.inc_exc_indicator", toString(i), "VISUAL_ATTRIBUTE",
									"INC_EXC_NONE");
							datatypRad.getRow(i).setIncExcIndicator(null);

						}

					}

				}
				
				
				
				datatypRad.setQueryHits(toString(datatypRad.size()));

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectionSelectionsWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectionSelectionsWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (Arrays.asList(S, "G", "A", I, "R", H).contains(selection.getSelections())) {

                log.debug("Inside if Selections.");
			}

			else {
				if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), null)) {
					if (like("--%", datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr())) {
						log.debug("Inside if for TypeDesc & Rec Index");

					}

					else {
						if (!Objects.equals(toInteger(system.getTriggerRecord()), 1)) {
							previousRecord("");

						}

						else {
							log.debug("Inside else for trigger record not in 1");

						}

					}

				}

				else {
					Integer vCount = 0;

					if (Objects.equals(selection.getSelections(), FormConstant.MINUS_ONE)) {

						setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

						setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

						populateDefaultIncExcInd("DATATYP_RAD", "INC_EXC_INDICATOR", system.getCursorRecordIndex());

						query = """
								select count(*) from select_criteria
												where processing_order = 30 -- check if it has a list rule
												and record_type_code = ?
								""";
						rec = app.selectInto(query,
								datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
						vCount = rec.getInt();
						if (Objects.equals(vCount, 0)) {
							setItemProperty("datatypRad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
							setItemProperty("datatypRad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
							setItemProperty("datatypRad.CSV_REPORT", FormConstant.DISPLAYED,
									FormConstant.PROPERTY_FALSE);

						}

						else {
							setItemProperty("datatypRad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_TRUE);
							setItemProperty("datatypRad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_TRUE);
							setItemProperty("datatypRad.CSV_REPORT", FormConstant.DISPLAYED,
									FormConstant.PROPERTY_TRUE);
							setItemProperty("datatypRad.CSV_REPORT", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("datatypRad.incall", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);
							setItemProperty("datatypRad.excall", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

							query = """
									select count(*) from record_identifier
									  				where record_type_code = ?
									""";
							rec = app.selectInto(query,
									datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode());
							datatypRad.getRow(system.getCursorRecordIndex()).setListNo(rec.getInt());

						}

					}

					else {
						if (Objects.equals(parameter.getIncExcInd(), "X")) {

							setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_FALSE);

							setRadioButtonProperty("include", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

							setRadioButtonProperty("exclude", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

							setRadioButtonProperty("none", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

							setRadioButtonProperty("refOnly", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);

							setRadioButtonProperty("default", "selectAllRulesIxrrd", ENABLED, PROPERTY_FALSE);
							

						}

						else {

							setRadioButtonProperty("default", "datatypRadOptions", ENABLED, PROPERTY_TRUE);

						}
						setItemProperty("datatypRad.incall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
						setItemProperty("datatypRad.excall", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);
						setItemProperty("datatypRad.CSV_REPORT", FormConstant.DISPLAYED, FormConstant.PROPERTY_FALSE);

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadOptionsWhenMouseClick(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadOptionsWhenMouseClick Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			navdb.setDataName(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr());
			
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), N)
					&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 94)) {
				coreptLib.dspMsg(
						"Selecting 'Ref Only' option is not allowed for SAAAR Approaches. Please select any other option.");

			}

			else {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					clickDatatypRadio();

				}

				else {
		
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						parameter.setUpdRec(N);
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

						clickDatatypRadio();

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

						coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
								toInteger(global.getProcessingCycle()),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
						throw new FormTriggerFailureException();

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadOptionsWhenMouseClick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadOptionsWhenMouseClick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadOptionsWhenMouseDoubleclick(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadOptionsWhenMouseDoubleclick Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), N)
					&& Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(), 94)) {
				coreptLib.dspMsg(
						"Selecting 'Ref Only' option is not allowed for SAAAR Approaches. Please select any other option.");

			}

			else {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					clickDatatypRadio();

				}

				else {
					vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
							toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
							toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
					if (Objects.equals(vNallowUpdate, 1)) {
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
						parameter.setUpdRec(N);

						clickDatatypRadio();

					}

					else {
						parameter.setUpdRec(Y);
						setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);

						coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
								toInteger(global.getProcessingCycle()),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
						throw new FormTriggerFailureException();

					}

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadOptionsWhenMouseDoubleclick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadOptionsWhenMouseDoubleclick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadIncallWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadIncallWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), 0)
					|| Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), null)) {
				coreptLib.dspMsg("Sorry, no record identifier is found for"
						+ datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr());
				throw new FormTriggerFailureException();

			}

			if (Arrays.asList(I, "B")
					.contains(datatypRad.getRow(system.getCursorRecordIndex()).getIncExcIndicator())) {
				setItemProperty("lists.delete_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("lists.delete_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}
			datatypRad.getRow(system.getCursorRecordIndex()).setListVal(I);
			goBlock("lists", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadIncallWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadIncallWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadExcallWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadExcallWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), 0)
					|| Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getListNo(), null)) {
				coreptLib.dspMsg("Sorry, no record identifier is found for"
						+ (datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr()==null?"":datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeDescr()));
				throw new FormTriggerFailureException();

			}

			if (Arrays.asList("X", "B")
					.contains(datatypRad.getRow(system.getCursorRecordIndex()).getIncExcIndicator())) {
				setItemProperty("lists.delete_all", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else {
				setItemProperty("lists.delete_all", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}
			datatypRad.getRow(system.getCursorRecordIndex()).setListVal("X");
			goBlock("lists", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadExcallWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadExcallWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadCsvReportWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadCsvReportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			StringBuilder reportfile = new StringBuilder();
			String DataInc = null;
			String DataExc = null;
			String value = null;
			String vLable = null;
			Integer vCriteria = 0;
			Integer vSId = 0;
			String labelhdrDisp = """
					SELECT identifier_label, identifier_length
					       FROM record_identifier
					      WHERE record_type_code = ?
					        AND display_order = ?
					""";
			List<ListName> listOfDynamicLists = new ArrayList<ListName>();

			String getListValue = """
					SELECT List_Records.S_Seq, List_Records.S_Val, List_Records.Value_Descr, Rec_Ident.Display_Order, UPDATE_DCR_NUMBER
					    FROM Record_Identifier Rec_Ident,
					         (SELECT Scv.Value_Seq S_Seq, Scv.Value S_Val, Scv.Value_Descr, SCV.UPDATE_DCR_NUMBER
					             FROM Selection_Criteria_Value Scv, Navdb_Select_Criteria Nsc
					           WHERE Scv.Value_Descr IN  (SELECT Identifier_Column_Name
					                                        FROM Record_Identifier
					                                       WHERE Record_Type_Code = ?)
					             AND Scv.Select_By_Id = Nsc.Select_By_Id
					             AND Scv.Select_By_Id = ?
					             AND Nsc.Include_Exclude_Ind = ?) List_Records,
					         (SELECT Scv1.Value, Scv1.Value_Seq
					            FROM Selection_Criteria_Value Scv1, Navdb_Select_Criteria Nsc1
					           WHERE Value_Descr = (SELECT Identifier_Column_Name
											                      FROM Record_Identifier
											                     WHERE Record_Type_Code = ?
											                       AND Display_Order = 1)
					             AND Scv1.Select_By_Id = Nsc1.Select_By_Id
					             AND Scv1.Select_By_Id = ?)  List_Value
					  WHERE List_Records.S_Seq = List_Value.Value_Seq
					    AND Rec_Ident.Record_Type_Code = ?
					    AND REC_IDENT.IDENTIFIER_COLUMN_NAME = List_Records.value_descr
					ORDER BY Value, S_Seq, Display_Order, Value_Descr desc
					""";

			String getCriteria = """
					select criteria_id
							from select_criteria
							where record_type_code = ?
							and processing_order = 30
					""";
			String getSelectById = """
					select select_by_id
							from navdb_select_criteria
							where navdb_id = ?
							and record_type_code = ?
							and parent_select_by_id is null
							and geo_area_id = '-2'
							and ((? in ('I','X') and include_exclude_ind = ?)
								or (? ='B' and include_exclude_ind in ('I','X')))
							and criteria_id = ?
							order by include_exclude_ind
					""";

			List<Integer> selectByIdList = new ArrayList<>();
			String dateQuery = """
					     SELECT TO_CHAR(SYSDATE , 'DD-MON-YY') as formatted_date  FROM DUAL
					""";

			DuRecord dateRec = app.selectInto(dateQuery);  

			reportfile.append("Exported on ").append(dateRec.getObject()).append("\n");
			reportfile.append("NAVDB:").append(" ").append(navdb.getNavdbId()).append("").append(" FMS ID:").append(" ")
					.append(navdb.getFmsId()).append("\n").append("\n");
			List<String> selectAllString = new ArrayList<>();
			int index=0;
			log.debug("index value is {}",index);
			for (DatatypRad data : datatypRad.getData()) {
				try {
					DuRecord getCriteriarecord = app.selectInto(getCriteria, data.getRecordTypeCode());

					vCriteria = getCriteriarecord.getInt();
					if (!Objects.equals(vCriteria, null)) {
						try {
							DuRecord reco = app.selectInto(getSelectById, navdb.getNavdbId(), data.getRecordTypeCode(),
									data.getIncExcIndicator(), data.getIncExcIndicator(), data.getIncExcIndicator(),
									vCriteria);
							vSId = reco.getInt();
						} catch (NoDataFoundException e) {
							vSId = null;
						} catch (TooManyRowsException e) {
							List<DuRecord> executeQuery = app.executeQuery(getSelectById, navdb.getNavdbId(),
									data.getRecordTypeCode(), data.getIncExcIndicator(), data.getIncExcIndicator(),
									data.getIncExcIndicator(), vCriteria);
							for (DuRecord rep : executeQuery) {
								if(Objects.equals(data.getSelectAll(), Y)) {
								selectByIdList.add(rep.getInt());
								}
							}
						}
					}
				} catch (NoDataFoundException e) {
					vCriteria = null;
				}
				controlBlock.setListSId(vSId);
				selectAllString.add(data.getSelectAll());
				if (Objects.equals(data.getSelectAll(), Y)) {

					if (Objects.equals(data.getIncExcIndicator(), "I")) {
						List<String> exval = new ArrayList<String>();
						DataInc = rtrim(data.getRecordTypeDescr()) + " Include List ";
						reportfile.append("Data Type :").append(DataInc).append("\n");
						for (int i = 1; i <= data.getListNo(); i++) {
							DuRecord records = app.selectInto(labelhdrDisp, data.getRecordTypeCode(), i);
							vLable = toString(records.getObject("IDENTIFIER_LABEL"));
							vLable = vLable.toUpperCase();
							vLable = vLable.replace(" ", "_");
							reportfile.append((vLable));
							exval.add(vLable);
							index++;
							reportfile.append(",");

						}

						parameter.getDynamicGridListData().addAll(listOfDynamicLists);

						reportfile.append("\n");
						List<DuRecord> listOfRec = app.executeQuery(getListValue, data.getRecordTypeCode(),
								controlBlock.getListSId(), data.getIncExcIndicator(), data.getRecordTypeCode(),
								controlBlock.getListSId(), data.getRecordTypeCode());
						int i = 0;
						Integer values1 = exval.size();
						for (DuRecord rep : listOfRec) {
							value = toString(rep.getObject("S_VAL"));

							if (values1 == i) {
								i = 0;
								reportfile.append("\n");

							}

							reportfile.append(value);

							i++;

							reportfile.append(",");
						}
						reportfile.append("\n").append("\n");
					} else if (Objects.equals(data.getIncExcIndicator(), "B")) {
						List<String> exval = new ArrayList<String>();
						DataInc = rtrim(data.getRecordTypeDescr()) + " Include List ";
						reportfile.append("Data Type :").append(DataInc).append("\n");
						for (int i = 1; i <= data.getListNo(); i++) {
							DuRecord records = app.selectInto(labelhdrDisp, data.getRecordTypeCode(), i);
							vLable = toString(records.getObject("IDENTIFIER_LABEL"));
							vLable = vLable.toUpperCase();
							vLable = vLable.replace(" ", "_");
							reportfile.append((vLable));
							exval.add(vLable);
							index++;
							reportfile.append(",");

						}

						parameter.getDynamicGridListData().addAll(listOfDynamicLists);

						reportfile.append("\n");
						List<DuRecord> listOfRec = app.executeQuery(getListValue, data.getRecordTypeCode(),
								selectByIdList.get(0), I, data.getRecordTypeCode(), selectByIdList.get(0),
								data.getRecordTypeCode());
						int i = 0;
						Integer values1 = exval.size();
						for (DuRecord rep : listOfRec) {
							value = toString(rep.getObject("S_VAL"));

							if (values1 == i) {
								i = 0;
								reportfile.append("\n");

							}

							reportfile.append(value);

							i++;

							reportfile.append(",");
						}
						reportfile.append("\n").append("\n");

						DataExc = rtrim(data.getRecordTypeDescr())
								+ " Exclude List";
						reportfile.append("Data Type :").append(DataExc).append("\n");
						for (int j = 1; j <= data.getListNo(); j++) {
							DuRecord records = app.selectInto(labelhdrDisp, data.getRecordTypeCode(), j);
							vLable = toString(records.getObject("IDENTIFIER_LABEL"));
							vLable = vLable.toUpperCase();
							vLable = vLable.toUpperCase();
							vLable = vLable.replace(" ", "_");
							reportfile.append((vLable));

							index++;
							exval.add(vLable);
							reportfile.append(",");

						}
						parameter.getDynamicGridListData().addAll(listOfDynamicLists);
						reportfile.append("\n");
						List<DuRecord> listOfRecord = app.executeQuery(getListValue, data.getRecordTypeCode(),
								selectByIdList.get(1), "X", data.getRecordTypeCode(), selectByIdList.get(1),
								data.getRecordTypeCode());
						int k = 0;

						for (DuRecord rep : listOfRecord) {

							value = toString(rep.getObject("S_VAL"));

							if (values1 == k) {
								k = 0;
								reportfile.append("\n");

							}

							reportfile.append(value);

							k++;

							reportfile.append(",");

						}

						reportfile.append("\n").append("\n");
						selectByIdList.clear();

					}

					else {
						List<String> exval = new ArrayList<String>();
						DataExc = rtrim(data.getRecordTypeDescr())
								+ " Exclude List";
						reportfile.append("Data Type :").append(DataExc).append("\n");
						for (int i = 1; i <= data.getListNo(); i++) {
							DuRecord records = app.selectInto(labelhdrDisp, data.getRecordTypeCode(), i);
							vLable = toString(records.getObject("IDENTIFIER_LABEL"));
							vLable = vLable.toUpperCase();
							vLable = vLable.toUpperCase();
							vLable = vLable.replace(" ", "_");
							reportfile.append((vLable));

							index++;
							exval.add(vLable);
							reportfile.append(",");

						}
						parameter.getDynamicGridListData().addAll(listOfDynamicLists);
						reportfile.append("\n");
						List<DuRecord> listOfRec = app.executeQuery(getListValue, data.getRecordTypeCode(),
								controlBlock.getListSId(), data.getIncExcIndicator(), data.getRecordTypeCode(),
								controlBlock.getListSId(), data.getRecordTypeCode());
						int i = 0;

						Integer values1 = exval.size();
						for (DuRecord rep : listOfRec) {

							value = toString(rep.getObject("S_VAL"));

							if (values1 == i) {
								i = 0;
								reportfile.append("\n");

							}

							reportfile.append(value);

							i++;

							reportfile.append(",");

						}

						reportfile.append("\n").append("\n");
					}

				}
			}
			if (!selectAllString.contains(Y)) {
				displayAlert.oneButton(S, "Report Warning",
						"Report cannot be generated,  select atleast one \nDatatype with Inc/Exc values for Report Generation");
				throw new FormTriggerFailureException();
			}
			message("Report generated Successfully");
			OracleHelpers.ResponseMapper(this, resDto);
			String base64 = Base64.getEncoder().encodeToString(reportfile.toString().getBytes(StandardCharsets.UTF_8));
			ReportDetail reportDetail = new ReportDetail();
			reportDetail.setData(base64);
			resDto.setReport(reportDetail);
			log.info(" datatypRadCsvReportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (RuntimeException e) {
			log.info("RuntimeException captured");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		} catch (Exception e) {
			log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadSelectAllWhenMouseEnter(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadSelectAllWhenMouseEnter Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			coreptLib.dspMsg("enabled/not " + getItemProperty("datatyp_rad.select_all", ENABLED));
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadSelectAllWhenMouseEnter executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadSelectAllWhenMouseEnter Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> datatypRadSelectAllWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" datatypRadSelectAllWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Arrays.asList(I, "X", "B")
					.contains(datatypRad.getRow(system.getCursorRecordIndex()).getIncExcIndicator())) {
				if (Objects.equals(getItemProperty("DATATYP_RAD.CSV_REPORT", VISIBLE), "FALSE")) {
					setItemProperty("datatyp_rad.csv_report", FormConstant.DISPLAYED, FormConstant.PROPERTY_TRUE);

				}

			}

			else {
				datatypRad.getRow(system.getCursorRecordIndex()).setSelectAll(N);
				coreptLib.dspMsg("Please select the Checkbox with Include/Exclude values \nfor Report Generation");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" datatypRadSelectAllWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the datatypRadSelectAllWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> rulesWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getSelectById(), null)) {
				navdb.setDataName(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr());
				if (!Objects.equals(toInteger(system.getTriggerRecord()), 1)) {
					previousRecord("");

				}

				else {
                    log.debug("Inside else for Trigger Record is not 1");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> rulesWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String selCur = """
					select decode(?,'-1','NAVDB Default')
							from dual
							union
							select decode(geo.select_by_id,?,geo.GEO_AREA_NAME)
							from select_by_geographic_area geo
							union
							select decode(area.select_by_id,?,area.AREA_CODE)
							from select_by_area area
							union
							select decode(icao.select_by_id,?,icao.icao_CODE)
							from select_by_icao icao
							union
							select decode(agrp.select_by_id,?,agrp.group_name)
							from select_by_airport_group agrp
							union
							select decode(hgrp.select_by_id,?,hgrp.group_name)
							from select_by_heliport_group hgrp
					""";

			List<DuRecord> records = app.executeQuery(selCur, selection.getSelections(), selection.getSelections(),
					selection.getSelections(), selection.getSelections(), selection.getSelections(),
					selection.getSelections());
			for(DuRecord rec:records) {
				String selHdr = rec.getString();
				if(!Objects.equals(selHdr, null)) {
					controlBlock.setSelHdr(selHdr);
					controlBlock.setSelHdr(rtrim(controlBlock.getSelHdr()) + " Criteria Rules For "
							+ rtrim(navdb.getDataName()));
				}
			}
			rules.setQueryHits(toString(rules.size()));
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> rulesListWhenMouseClick(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesListWhenMouseClick Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			clickDetailRadio();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesListWhenMouseClick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesListWhenMouseClick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> rulesListWhenMouseDoubleclick(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesListWhenMouseDoubleclick Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			clickDetailRadio();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesListWhenMouseDoubleclick executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesListWhenMouseDoubleclick Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> rulesBackWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" rulesBackWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String navcur = """
					select include_exclude_ind
							from 	navdb_select_criteria A, select_criteria B
							where A.criteria_id = B.criteria_id
							and A.parent_select_by_id = ?
					""";

			global.setDetailOption(N);
			List<DuRecord> records = app.executeQuery(navcur,
					datatypRad.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
			for (DuRecord rec : records) {
				if (Objects.equals(rec.getObject("include_exclude_ind"), I)) {
					global.setDetailOption("R");

				}

				else {
                    log.debug("Inside else for chk value is not I");

				}
			}
			if (Objects.equals(global.getDetailOption(), N)) {
				if (!Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOldOption(), "R")) {
					datatypRad.getRow(system.getPreviousBlockCursorIndex())
							.setOptions(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOldOption());

				}

				else {
					if (like("NAVDB Default%", controlBlock.getSelHdr())) {
						datatypRad.getRow(system.getPreviousBlockCursorIndex()).setOptions(N);

					}

					else {
						datatypRad.getRow(system.getPreviousBlockCursorIndex()).setOptions(D);

					}

				}

				updateDatatypValue(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions(),system.getPreviousBlockCursorIndex());

			}

			datatypRad.getRow(system.getPreviousBlockCursorIndex())
					.setOldOption(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getOptions());
			controlBlock.setDid(Y);
			hideView("rules");
			goBlock("selection", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" rulesBackWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the rulesBackWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> singleValPostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info("singleValPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the singleValPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> singleValKeyDown(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" singleValKeyDown Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValKeyDown executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the singleValKeyDown Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> singleValSingleWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info("singleValSingleWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if ((like("%AIRSPACE%", navdb.getDataName()) && Arrays.asList(535, 536, 537, 538)
					.contains(rules.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId()))) {
				
				String tempVal = singleVal.getSingle();
				if(!OracleHelpers.isNullCheck(tempVal)) {
				if (!tempVal.matches("^(FL\\d+|\\d+)$")) {
					coreptLib.dspMsg("Numeric values or FL followed by 3 numeric are allowed");
					throw new FormTriggerFailureException();

				}

				else if (Objects.equals(substr(singleVal.getSingle(), 1, 2), "FL")) {
					if (Arrays.asList("0", "00", "000").contains(substr(singleVal.getSingle(), 3))) {
						coreptLib.dspMsg("FL followed by all zeros is not a valid value.");
						throw new FormTriggerFailureException();

					}

				}
				}

			}

			else {
				String tempVal = singleVal.getSingle();
				if (!OracleHelpers.isNullCheck(tempVal)) {
					if (!tempVal.matches("^\\d+$")) {
						coreptLib.dspMsg("Numeric values are allowed");
						throw new FormTriggerFailureException();

					}
				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValSingleWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the singleValSingleWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> singleValDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" singleValDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(singleVal.getSingle(), null)) {
					message("To exit without saving, use the 'Cancel' button. To delete the value, click 'Cancel' button then choice the 'N/A' radio of the rule.");
					coreptLib.dspMsg("Please enter value.");
					goItem("single");
					throw new FormTriggerFailureException();

				}

				else {
					if (Arrays.asList("0", "00", "000", "0000", "00000").contains(singleVal.getSingle()) && (like(
							"INCLUDE LENGTH%", rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules())
							|| like("INCLUDE WIDTH%", rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules())
							|| like("%RUNWAY WIDTH%", rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules())
							|| like("%RUNWAY LENGTH%", rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules())
							|| like("EXCLUDE UPPER LIMIT%",
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules())
							|| like("EXCLUDE LOWER LIMIT%",
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules()))) {

						coreptLib.dspMsg("Sorry, 0 is not a valid value.");
						throw new FormTriggerFailureException();

					}

					if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
							rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {

						query = """
								update navdb_select_criteria
											set include_exclude_ind = ?
											where select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}

					query = """
							 delete from selection_criteria_value
									where select_by_id =?
							""";
					app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					query = """
							 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
									values (?,1,?,?)
							""";
					app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
							rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(), singleVal.getSingle());
					controlBlock.setDid(Y);
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

			}

			rules.getRow(system.getPreviousBlockCursorIndex())
					.setOldList(rules.getRow(system.getPreviousBlockCursorIndex()).getList());
			hideView("single");
			goBlock("rules", "");
			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the singleValDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> singleValCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" singleValCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList(), I)
					&& Objects.equals(singleVal.getOldValue(), null)) {
				rules.getRow(system.getPreviousBlockCursorIndex()).setList(N);

			}

			else {
				rules.getRow(system.getPreviousBlockCursorIndex())
						.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());

			}
			controlBlock.setDid(Y);
			hideView("single");
			goBlock("rules", "");
			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" singleValCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the singleValCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> multValPostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" multValPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" multValPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the multValPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> multValDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" multValDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {

			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {

				if (Objects.equals(multVal.getRow(system.getCursorRecordIndex()).getMultiple(), null)) {
					message("to exit without saving, use the 'cancel' button. to delete the value, 'click' 'cancel' button then choice the 'n/a' radio of the rule.");
					coreptLib.dspMsg("Please enter value.");
					goItem("multiple");
					throw new FormTriggerFailureException();

				}

				else {
					if (!Objects.equals(rules.getRow(system.getCursorRecordIndex()).getList(),
							rules.getRow(system.getCursorRecordIndex()).getOldList())) {

						query = """
								update navdb_select_criteria
											set include_exclude_ind = ?
											where select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getList(),
								rules.getRow(system.getCursorRecordIndex()).getSelectById());
					}

					query = """
							 delete from selection_criteria_value
									where select_by_id =?
							""";
					app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById());
					Integer vNum = 0;

					for (int i = 0; i < multVal.size(); i++) {
						vNum = vNum + 1;

						query = """
								 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
												values (?,v_num,?,?)
								""";
						app.executeNonQuery(query, rules.getRow(system.getCursorRecordIndex()).getSelectById(),
								rules.getRow(system.getCursorRecordIndex()).getSelectedRules(),
								multVal.getRow(i).getMultiple());

					}
					controlBlock.setDid(Y);

					genericNativeQueryHelper.commit(this, system.getCursorBlock());
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);

				}

			}

			rules.getRow(system.getCursorRecordIndex())
					.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());
			hideView("multiple");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" multValDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the multValDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> multValCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" multValCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (Objects.equals(rules.getRow(system.getCursorRecordIndex()).getOldList(), I)
					&& Objects.equals(singleVal.getSingle(), null)) {
				rules.getRow(system.getCursorRecordIndex()).setList(N);

			}

			else {
				rules.getRow(system.getCursorRecordIndex())
						.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());

			}
			controlBlock.setDid(Y);
			hideView("MULTIPLE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" multValCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the multValCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> recordSubTypePostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypePostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> recordSubTypeChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypeChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(recordSubType.getRow(system.getCursorRecordIndex()).getValue(), null)) {
				recordSubType.getRow(system.getCursorRecordIndex()).setChk(N);

			}

			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(recordSubType.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					recordSubType.getRow(system.getCursorRecordIndex()).setChk(N);

				}

				else if (Objects.equals(recordSubType.getRow(system.getCursorRecordIndex()).getChk(), N)) {
					recordSubType.getRow(system.getCursorRecordIndex()).setChk(Y);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypeChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypeChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> recordSubTypeDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypeDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNum = 0;
				Integer vButton = 0;

				
				for (int i = 0; i < recordSubType.size(); i++) {
					if (Objects.equals(recordSubType.getRow(i).getChk(), Y)) {
						vNum = vNum + 1;

					}

				}
				if (Objects.equals(vNum, 0)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						 displayAlert.moreButtons(
								S, "NO CRITERIA VALUE", "No value is selected, or you deseleted all the value."
										+ chr(10) + "Are you sure this is what it shall be?'" + chr(10),
								"Yes", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("recordSubTypeAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("recordSubTypeAlert", alertDetails.getCurrentAlert());
					}

					if (Objects.equals(vButton, 1)) {

						query = """
								 delete from selection_criteria_value
												where select_by_id =?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {
							rules.getRow(system.getPreviousBlockCursorIndex())
									.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());

						}

						else {
							rules.getRow(system.getPreviousBlockCursorIndex()).setList(N);

							query = """
									update navdb_select_criteria
														set include_exclude_ind = ?
														where select_by_id = ?
									""";
							app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						}
						controlBlock.setDid(Y);

					}

					else {
						throw new FormTriggerFailureException();

					}

				}

				else {

					query = """
							 delete from selection_criteria_value
										where select_by_id =?
							""";
					app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					
					vNum = 0;
					for (int i = 0; i < recordSubType.size(); i++) {
						if (Objects.equals(recordSubType.getRow(i).getChk(), Y)) {
							vNum = vNum + 1;

							query = """
									 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
														values (?,?,
																		?,?)
									""";
							app.executeNonQuery(query,
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(), vNum,
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(),
									recordSubType.getRow(i).getRealValue());
						}

					}
					if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
							rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {

						query = """
								update navdb_select_criteria
												set include_exclude_ind = ?
												where select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}

					controlBlock.setDid(Y);

				}

				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
				

			}

			rules.getRow(system.getCursorRecordIndex())
					.setOldList(rules.getRow(system.getCursorRecordIndex()).getList());
			hideView("SELECT_SUB_TYPE");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypeDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypeDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> recordSubTypeCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypeCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			rules.getRow(system.getPreviousBlockCursorIndex())
					.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());
			controlBlock.setDid(Y);
			hideView("SELECT_SUB_TYPE");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypeCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypeCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> recordSubTypeCheckWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypeCheckWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < recordSubType.size(); i++) {

				recordSubType.getRow(i).setChk(Y);

			}

			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypeCheckWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypeCheckWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> recordSubTypeClearWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" recordSubTypeClearWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			for (int i = 0; i < recordSubType.size(); i++) {
				recordSubType.getRow(i).setChk(N);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" recordSubTypeClearWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the recordSubTypeClearWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> genCriteriaSubTypePostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypePostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> genCriteriaSubTypeChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypeChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(genCriteriaSubType.getRow(system.getCursorRecordIndex()).getValue(), null)) {
				genCriteriaSubType.getRow(system.getCursorRecordIndex()).setChk(N);

			}

			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(genCriteriaSubType.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					genCriteriaSubType.getRow(system.getCursorRecordIndex()).setChk(N);

				}

				else if (Objects.equals(genCriteriaSubType.getRow(system.getCursorRecordIndex()).getChk(), N)) {
					genCriteriaSubType.getRow(system.getCursorRecordIndex()).setChk(Y);

				}

			}

			controlBlock.setDid(N);

			controlBlock.setGenCriteriaCan("GENERAL_CRITERIA");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypeChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypeChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> genCriteriaSubTypeDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypeDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNum = 0;
				Integer vButton = 0;

				
				for (int i = 0; i < genCriteriaSubType.size(); i++) {
					if (Objects.equals(genCriteriaSubType.getRow(i).getChk(), Y)) {
						vNum = vNum + 1;

					}

				}
				if (Objects.equals(vNum, 0)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						 displayAlert.moreButtons(
								S, "NO GEN CRITERIA VALUE", "No value is selected, or you deseleted all the value."
										+ chr(10) + "Are you sure this is what it shall be?" + chr(10),
								"Yes", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("genCriteriaSubTypeAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("genCriteriaSubTypeAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 1)) {

						query = """
								 DELETE FROM navdb_general_criteria_value
								               WHERE criteria_id = ?
								                     AND navdb_id = ?
								""";
						app.executeNonQuery(query,
								generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId(),
								navdb.getNavdbId());
						if (!Objects.equals(generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getChk(),
								generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getOldChk())) {
							generalCriteria.getRow(system.getPreviousBlockCursorIndex())
									.setChk(generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getOldChk());

						}

						else {
							generalCriteria.getRow(system.getPreviousBlockCursorIndex()).setChk(N);

							query = """
									UPDATE navdb_general_criteria
									               SET apply_ind = ?
									             WHERE criteria_id = ?
									                   AND navdb_id = ?
									""";
							app.executeNonQuery(query,
									generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getChk(),
									generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId(),
									navdb.getNavdbId());
						}
						controlBlock.setDid(Y);

					}

					else {
						throw new FormTriggerFailureException();

					}

				}

				else {

					query = """
							 DELETE FROM navdb_general_criteria_value
							               WHERE criteria_id = ?
							                     AND navdb_id = ?
							""";
					app.executeNonQuery(query,
							generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId(),
							navdb.getNavdbId());

					vNum = 0;
					for (int i = 0; i < genCriteriaSubType.size(); i++) {
						if (Objects.equals(genCriteriaSubType.getRow(i).getChk(), Y)) {
							vNum = vNum + 1;

							query = """
									 INSERT INTO navdb_general_criteria_value (navdb_id,
									 											criteria_id,
									                                                  value_sequence,
									                                                  value_descr,
									                                                  VALUE)
									                 VALUES (?,
									                 		?,
									                         ?,
									                         ?,
									                         ?)
									""";
							app.executeNonQuery(query, navdb.getNavdbId(),
									generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId(), vNum,
									genCriteriaSubType.getRow(i).getValue(),
									genCriteriaSubType.getRow(i).getRealValue());
						}

					}
					if (!Objects.equals(generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getChk(),
							generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getOldChk())) {

						query = """
								UPDATE navdb_general_criteria
								            SET apply_ind = ?
								             WHERE criteria_id = ?
								                   AND navdb_id = ?
								""";
						app.executeNonQuery(query,
								generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getChk(),
								generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId(),
								navdb.getNavdbId());
					}

					controlBlock.setDid(Y);

				}

				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);

			}

			controlBlock.setGenCriteriaCan(null);
			generalCriteria.getRow(system.getPreviousBlockCursorIndex())
					.setOldChk(generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getChk());
			hideView("GEN_CRITERIA_SUB_TYPE");

			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypeDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypeDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> genCriteriaSubTypeCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypeCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			Integer lnCnt = 0;

			query = """
					SELECT COUNT(*) from navdb_general_criteria_value
					 				WHERE
					 				CRITERIA_ID = ?
					 				AND navdb_id  = ?
					""";
			rec = app.selectInto(query, generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId(),
					navdb.getNavdbId());
			lnCnt = rec.getInt();
			if (lnCnt > 0) {
				generalCriteria.getRow(system.getPreviousBlockCursorIndex()).setChk(Y);

			}

			else {

				query = """
						 DELETE FROM navdb_general_criteria_value
									WHERE navdb_id = ?
									AND criteria_id = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId(),
						generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId());
				query = """
						UPDATE navdb_general_criteria
									SET apply_ind = 'N'
									WHERE navdb_id = ?
						  		AND criteria_id = ?
						""";
				app.executeNonQuery(query, navdb.getNavdbId(),
						generalCriteria.getRow(system.getPreviousBlockCursorIndex()).getCriteriaId());

				for (int i = 0; i < genCriteriaSubType.size(); i++) {
					genCriteriaSubType.getRow(i).setChk(N);

				}
				generalCriteria.getRow(system.getPreviousBlockCursorIndex()).setChk(N);


				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);

			}

			controlBlock.setGenCriteriaCan(null);
			controlBlock.setDid(Y);
			hideView("GEN_CRITERIA_SUB_TYPE");

			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypeCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypeCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> genCriteriaSubTypeCheckWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypeCheckWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			for (int i = 0; i < genCriteriaSubType.size(); i++) {
				genCriteriaSubType.getRow(i).setChk(Y);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypeCheckWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypeCheckWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> genCriteriaSubTypeClearWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" genCriteriaSubTypeClearWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			for (int i = 0; i < genCriteriaSubType.size(); i++) {
				genCriteriaSubType.getRow(i).setChk(N);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" genCriteriaSubTypeClearWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the genCriteriaSubTypeClearWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> appSubTypePostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypePostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> appSubTypeChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getRealValue(), null)) {
				appSubType.getRow(system.getCursorRecordIndex()).setChk(N);

			}

			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					appSubType.getRow(system.getCursorRecordIndex()).setChk(N);

				}

				else if (Objects.equals(appSubType.getRow(system.getCursorRecordIndex()).getChk(), N)) {
					appSubType.getRow(system.getCursorRecordIndex()).setChk(Y);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypeChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> appSubTypeDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNum = 0;
				Integer vButton = 0;
				Integer vPrecisionLimit = 0;
				Integer vNonPrecisionLimit = 0;
				String vPriority = "";
				String vPrecision = "";
				String vMessage = null;
				Integer vNumPrecision = 0;
				Integer vNumNPrecision = 0;
				String lsStmt = "";
				Integer lnOut = 0;
				String query = "";

				for (int i = 0; i < appSubType.size(); i++) {
					if (Objects.equals(appSubType.getRow(i).getValue(), "------Precision Route Types------")) {
						vPrecisionLimit = appSubType.getRow(i).getLimitPriority();
						vPrecision = Y;
						vPriority = "999";

					}

					else if (Objects.equals(appSubType.getRow(i).getValue(), "----Non Precision Route Types----")) {
						if (Objects.equals(vNumPrecision, 0) && !Objects.equals(vPrecisionLimit, null)) {
							vMessage = "Limit is set for the Precision group, but no selected \nRoute Type in this group.";
							break;

						}

						vNonPrecisionLimit = appSubType.getRow(i).getLimitPriority();
						vPrecision = N;
						vPriority = "999";

					}

					if (Objects.equals(appSubType.getRow(i).getChk(), N)
							&& !Objects.equals(substr(appSubType.getRow(i).getValue(), 1, 4), "----")
							&& !Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
						vMessage = "Please remove Priority for not selected Route Type.";
						break;

					}

					if (Objects.equals(vPrecision, Y)) {
						if (Objects.equals(appSubType.getRow(i).getChk(), Y)) {
							vNumPrecision = vNumPrecision + 1;
							if (!Objects.equals(vPrecisionLimit, null)
									&& Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
								vMessage = "Limit is set for the Precision group, so, Priority is required \nfor the selected Route Type in this group.";
								break;

							}

						}

						if (Objects.equals(vPrecisionLimit, null) && Objects.equals(appSubType.getRow(i).getChk(), Y)
								&& !Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
							vMessage = "Limit need to be set for the Precision group \nbecause Priority is been set for the selected Route Type.";
							break;

						}

					}

					if (Objects.equals(vPrecision, N)) {
						if (Objects.equals(appSubType.getRow(i).getChk(), Y)) {
							vNumNPrecision = vNumNPrecision + 1;
							if (!Objects.equals(vNonPrecisionLimit, null)
									&& Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
								vMessage = "Limit is set for the None Precision group, so, Priority is required \nfor the selected Route Type in this group.";
								break;

							}

						}

						if (Objects.equals(vNonPrecisionLimit, null)
								&& Objects.equals(appSubType.getRow(i).getChk(), Y)
								&& !Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
							vMessage = "Limit need to be set for the None Precision group \nbecause Priority is been set for the selected Route Type.";
							break;

						}

					}

					if (Objects.equals(appSubType.getRow(i).getChk(), Y)) {
						vNum = vNum + 1;
						if (!Objects.equals(appSubType.getRow(i).getLimitPriority(), null)) {
							lsStmt = "SELECT COUNT(*) FROM Dual WHERE " + appSubType.getRow(i).getLimitPriority()
									+ " IN (" + vPriority + ")";
							Map<String, Object> executeProcedure = app.executeProcedure(DbConstants.SCHEMA_CPTS, "Exe_Query",
									"Forms_Utilities", new ProcedureInParameter("p_query", lsStmt, OracleTypes.VARCHAR),
									new ProcedureOutParameter("p_err_exist", OracleTypes.NUMBER));
							lnOut = toInteger(executeProcedure.get("p_err_exist"));

							if (lnOut > 0) {
								vMessage = "The Priority number have to be unique in Precision Route \nType group and Non-Precision Route Type group. Please \ncorrect it.";
								break;

							}

						}

						vPriority = vPriority + "," + toChar(appSubType.getRow(i).getLimitPriority());
						if (Objects.equals(vPrecision, Y)) {

							if (Objects.equals(vPrecisionLimit, null)) {
								appSubType.getRow(i).setRealValue((appSubType.getRow(i).getRealValue()));
							} else {
								if(Objects.equals(vPrecisionLimit, null)) {
									appSubType.getRow(i)
									.setRealValue(substr(appSubType.getRow(i).getRealValue(), 1, 1));
								}
								else {
								appSubType.getRow(i)
										.setRealValue(substr(appSubType.getRow(i).getRealValue(), 1, 1)
												+ lpad(toChar(vPrecisionLimit), 2, '0')
												+ lpad(toChar(appSubType.getRow(i).getLimitPriority()), 2, '0'));
								}
								
							}

						}

						else if (Objects.equals(vPrecision, N)) {
							if (Objects.equals(vPrecisionLimit, null)) {
								appSubType.getRow(i).setRealValue((appSubType.getRow(i).getRealValue()));
							} else {
								if(Objects.equals(vNonPrecisionLimit, null)) {
									appSubType.getRow(i).setRealValue(substr(appSubType.getRow(i).getRealValue(), 1, 1));
									}
								else {
								appSubType.getRow(i)
										.setRealValue(substr(appSubType.getRow(i).getRealValue(), 1, 1)
												+ lpad(toChar(vNonPrecisionLimit), 2, '0')
												+ lpad(toChar(appSubType.getRow(i).getLimitPriority()), 2, '0'));
								}
							}

						}

					}

					if (i == appSubType.size() - 1) {
						if (Objects.equals(vNumNPrecision, 0) && !Objects.equals(vNonPrecisionLimit, null)) {
							vMessage = "Limit is set for the None Precision group, but no selected \nRoute Type in this group.";

						}

						break;

					}

				}
				if (!Objects.equals(vMessage, null)) {
					coreptLib.dspMsg(vMessage);
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(vNum, 0)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(
								S, "NO CRITERIA VALUE", "No value is selected, or you deseleted all the value."
										+ chr(10) + "Are you sure this is what it shall be?" + chr(10),
								"Yes", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("appSubTypeAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("appSubTypeAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 1)) {

						query = """
								 delete from selection_criteria_value
												where select_by_id =?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {
							rules.getRow(system.getPreviousBlockCursorIndex())
									.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());

						}

						else {
							rules.getRow(system.getPreviousBlockCursorIndex()).setList(N);

							query = """
									update navdb_select_criteria
														set include_exclude_ind = ?
														where select_by_id = ?
									""";
							app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						}
						controlBlock.setDid(Y);

					}

					else {
						throw new FormTriggerFailureException();

					}

				}

				else {

					query = """
							 delete from selection_criteria_value
										where select_by_id =?
							""";
					app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					vNum = 0;
					for (int i = 0; i < appSubType.size(); i++) {
						if (Objects.equals(appSubType.getRow(i).getChk(), Y)) {
							vNum = vNum + 1;

							query = """
									 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
														values (?,?,?,?)
									""";
							app.executeNonQuery(query,
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(), vNum,
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(),
									appSubType.getRow(i).getRealValue());
						}

					}
					if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
							rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {

						query = """
								update navdb_select_criteria
												set include_exclude_ind = ?
												where select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}

					controlBlock.setDid(Y);

				}

				
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
			}

			for (int i = 0; i < appSubType.size(); i++) {
				if (Objects.equals((appSubType.getRow(i).getValue()), "------Precision Route Types------")) {
					if (Objects.equals(appSubType.getRow(i).getChk(), Y)) {
						appSubType.getRow(i).setChk(N);
					}
				} else if (Objects.equals(appSubType.getRow(i).getValue(), "----Non Precision Route Types----")) {
					if (Objects.equals(appSubType.getRow(i).getChk(), Y)) {
						appSubType.getRow(i).setChk(N);
					}
				}
			}

			rules.getRow(system.getPreviousBlockCursorIndex())
					.setOldList(rules.getRow(system.getPreviousBlockCursorIndex()).getList());

			hideView("SEL_APP_SUB_TYPE");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info("appSubTypeDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> appSubTypeCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);


			rules.getRow(system.getPreviousBlockCursorIndex())
					.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());
			controlBlock.setDid(Y);
			hideView("SEL_APP_SUB_TYPE");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypeCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> appSubTypeCheckWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeCheckWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < appSubType.size(); i++) {

				if (!Objects.equals(appSubType.getRow(i).getRealValue(), null) && !Objects.equals(appSubType.getRow(i).getRealValue(), "precision") &&
						!Objects.equals(appSubType.getRow(i).getRealValue(), "non-precision")) {
					appSubType.getRow(i).setChk(Y);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypeCheckWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeCheckWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> appSubTypeClearWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" appSubTypeClearWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < appSubType.size(); i++) {
				appSubType.getRow(i).setChk(N);
				appSubType.getRow(i).setLimitPriority(null);

			}

			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" appSubTypeClearWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the appSubTypeClearWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfacePostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfacePostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfacePostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfacePostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			String query = "";
			DuRecord rec = null;
			OracleHelpers.bulkClassMapper(reqDto, this);
			RecordGroup groupId = null;

			
			runwaySurfaceGroups = createGroup("runwaySurfaceGroups");
			addGroupColumn(runwaySurfaceGroups,"soft","charColumn",30);
			addGroupColumn(runwaySurfaceGroups,"hard","charColumn",30);
			groupId = findGroup("runwaySurfaceGroups");
			
			String [] softCodeValue = {"CLAY","CORL","DIRT","GRAS","GRVL","ICE","LATE","MATS","PLNG","SAND","SELD",
					"SHAE","SILT","SNOW","SOIL","TRTD","TURF","UNKN","UNPV","WATE"};
			String [] hardCodeValue = {"ASPH","BITU","BRCK","CONC","MACA","PAVD","TARM",null,
					null,null,null,null,null,null,null,null,null,null,null,null};
			
			for(int i=0;i<softCodeValue.length;i++) {
				setGroupCharCell(groupId, "soft",i, softCodeValue[i]);
				setGroupCharCell(groupId,"hard",i,hardCodeValue[i]);
			}
			
			
			runwaySurface.getData().clear();
			for (int i = 0; i < getGroupRowCount(groupId); i++) {
				runwaySurface.add(new RunwaySurface());
				runwaySurface.getRow(i).setSoftValue(getGroupCharCell("runwaySurfaceGroups.soft", i));
				runwaySurface.getRow(i).setHardValue(getGroupCharCell("runwaySurfaceGroups.hard", i));
				
				if (!Objects.equals(runwaySurface.getRow(i).getSoftValue(), null)) {

					try {

						query = """
								select 'Y' from selection_criteria_value
								 				where value = ?
								 				and select_by_id = ?
								 				and value_descr = ?
								""";
						rec = app.selectInto(query, runwaySurface.getRow(i).getSoftValue(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
						runwaySurface.getRow(i).setSoftChk(rec.getString());
					}

					catch (NoDataFoundException e) {
						runwaySurface.getRow(i).setSoftChk(N);

					}

				}

				if (!Objects.equals(runwaySurface.getRow(i).getHardValue(), null)) {

					try {

						query = """
								select 'Y' from selection_criteria_value
								 				where value = ?
								 				and select_by_id = ?
								 				and value_descr = ?
								""";
						rec = app.selectInto(query, runwaySurface.getRow(i).getHardValue(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules());
						runwaySurface.getRow(i).setHardChk(rec.getString());
					}

					catch (NoDataFoundException e) {
						runwaySurface.getRow(i).setHardChk(N);

					}

				}
				

			}

			
			runwaySurface.setQueryHits(toString(runwaySurface.size()));
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceSoftChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceSoftChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getSoftValue(), null)) {
				runwaySurface.getRow(system.getCursorRecordIndex()).setSoftChk(N);

			}

			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getSoftChk(), Y)) {
					runwaySurface.getRow(system.getCursorRecordIndex()).setSoftChk(N);

				}

				else if (Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getSoftChk(), N)) {
					runwaySurface.getRow(system.getCursorRecordIndex()).setSoftChk(Y);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceSoftChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceSoftChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceCheckAllSoftWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceCheckAllSoftWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < runwaySurface.size(); i++) {
				runwaySurface.getRow(i).setSoftChk(Y);

			}

			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceCheckAllSoftWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceCheckAllSoftWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceClearAllSoftWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceClearAllSoftWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < runwaySurface.size(); i++) {
				runwaySurface.getRow(i).setSoftChk(N);

			}

			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceClearAllSoftWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceClearAllSoftWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceHardChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceHardChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getHardValue(), null)) {
				runwaySurface.getRow(system.getCursorRecordIndex()).setHardChk(N);

			}

			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getHardChk(), Y)) {
					runwaySurface.getRow(system.getCursorRecordIndex()).setHardChk(N);

				}

				else if (Objects.equals(runwaySurface.getRow(system.getCursorRecordIndex()).getHardChk(), N)) {
					runwaySurface.getRow(system.getCursorRecordIndex()).setHardChk(Y);

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceHardChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceHardChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceCheckAllHardWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceCheckAllHardWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < runwaySurface.size(); i++) {
				if (!Objects.equals(runwaySurface.getRow(i).getHardValue(), null)) {
					runwaySurface.getRow(i).setHardChk(Y);
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceCheckAllHardWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceCheckAllHardWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceClearAllHardWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceClearAllHardWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			for (int i = 0; i < runwaySurface.size(); i++) {
				runwaySurface.getRow(i).setHardChk(N);

			}

			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceClearAllHardWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceClearAllHardWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNum = 0;
				Integer vButton = 0;

				
				for (int i = 0; i < runwaySurface.size(); i++) {
					if (Objects.equals(runwaySurface.getRow(i).getSoftChk(), Y)) {
						vNum = vNum + 1;

					}

					if (Objects.equals(runwaySurface.getRow(i).getHardChk(), Y)) {
						vNum = vNum + 1;

					}

				}
				if (Objects.equals(vNum, 0)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						displayAlert.moreButtons(
								S, "NO CRITERIA VALUE", "No value is selected, or you deseleted all the value."
										+ chr(10) + "Are you sure this is what it shall be?'" + chr(10),
								"Yes", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("runwaySurfaceAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("runwaySurfaceAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 1)) {

						query = """
								 delete from selection_criteria_value
												where select_by_id =?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {
							rules.getRow(system.getPreviousBlockCursorIndex())
									.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());

						}

						else {
							rules.getRow(system.getPreviousBlockCursorIndex()).setList(N);

							query = """
									update navdb_select_criteria
														set include_exclude_ind = ?
														where select_by_id = ?
									""";
							app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						}
						controlBlock.setDid(Y);

					}

					else {
						throw new FormTriggerFailureException();

					}

				}

				else {

					query = """
							 delete from selection_criteria_value
										where select_by_id =?
							""";
					app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					for (int i = 0; i < runwaySurface.size(); i++) {
						if (Objects.equals(runwaySurface.getRow(i).getSoftChk(), Y)) {
							vNum = vNum + 1;

							query = """
									 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
														values (?,?,
																		?,?)
									""";
							app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									vNum, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(),
									runwaySurface.getRow(i).getSoftValue());
						}

						if (Objects.equals(runwaySurface.getRow(i).getHardChk(), Y)) {
							vNum = vNum + 1;

							query = """
									 Insert into selection_criteria_value (select_by_id,value_seq,value_descr,value)
														values (?,?,
																		?,?)
									""";
							app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									vNum, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectedRules(),
									runwaySurface.getRow(i).getHardValue());
						}

					}
					if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
							rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {

						query = """
								update navdb_select_criteria
												set include_exclude_ind = ?
												where select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}

					controlBlock.setDid(Y);

				}

				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);

			}

			rules.getRow(system.getPreviousBlockCursorIndex())
					.setOldList(rules.getRow(system.getPreviousBlockCursorIndex()).getList());
			hideView("SELECT_RUNWAY_SURFACE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> runwaySurfaceCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" runwaySurfaceCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			rules.getRow(system.getPreviousBlockCursorIndex())
					.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());
			controlBlock.setDid(Y);
			hideView("SELECT_RUNWAY_SURFACE");
			goBlock("rules", "");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" runwaySurfaceCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the runwaySurfaceCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsPostBlock(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" listsPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vLable = null;
			Integer vLength = 0;

			Integer vNallowUpdate = 0;
			String vCnavdbBlock = DbConstants.NAVDB;
			String labelhdrDisp = """
					SELECT identifier_label, identifier_length
					       FROM record_identifier
					      WHERE record_type_code = ?
					        AND display_order = ?
					""";
			List<DynamicLists> listOfDynamicLists = new ArrayList<DynamicLists>();

			
			Integer index = 0;
			parameter.getDynamicGridData().clear();
			for (int i = 2; i <= 7; i++) {
				if (i > datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo()) {
					listOfDynamicLists.add(new DynamicLists());
					listOfDynamicLists.get(index).setBlockName("lists");
					listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
					listOfDynamicLists.get(index).setVisible(false);
					listOfDynamicLists.get(index).setDynamicName(null);
					index++;

				}

				else {
					listOfDynamicLists.add(new DynamicLists());
					listOfDynamicLists.get(index).setBlockName("lists");
					listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
					listOfDynamicLists.get(index).setVisible(true);
					listOfDynamicLists.get(index).setDynamicName(null);
					index++;

					if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
						vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
								toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
								toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
						if (Objects.equals(vNallowUpdate, 1)) {
							parameter.setUpdRec(N);
							setBlockItemProperty("lists.value_" + toChar(i), FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							setBlockItemProperty("lists.value_" + toChar(i), FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_TRUE);
							listOfDynamicLists.add(new DynamicLists());
							listOfDynamicLists.get(index).setBlockName("lists");
							listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
							listOfDynamicLists.get(index).setDynamicName(null);
							listOfDynamicLists.get(index).setInsertAllowed(true);
							listOfDynamicLists.get(index).setUpdateAllowed(true);
							index++;

						}

						else {
							parameter.setUpdRec(Y);
							setBlockItemProperty("lists.value_" + toChar(i), FormConstant.INSERT_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							setBlockItemProperty("lists.value_" + toChar(i), FormConstant.UPDATE_ALLOWED,
									FormConstant.PROPERTY_FALSE);
							listOfDynamicLists.add(new DynamicLists());
							listOfDynamicLists.get(index).setBlockName("lists");
							listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
							listOfDynamicLists.get(index).setDynamicName(null);
							listOfDynamicLists.get(index).setInsertAllowed(false);
							listOfDynamicLists.get(index).setUpdateAllowed(false);
							index++;

						}

					}

				}

			}
			if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListVal(), I)) {
				controlBlock.setListhdr("NAVDB Default -- "
						+ rtrim(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr())
						+ " -- Include Lists");

			}

			else {
				controlBlock.setListhdr("NAVDB Default -- "
						+ rtrim(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr())
						+ " -- Exclude Lists");

			}
			for (int i = 1; i <= datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo(); i++) {
				DuRecord records = app.selectInto(labelhdrDisp,
						datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeCode(), i);
				vLable = toString(records.getObject("IDENTIFIER_LABEL"));
				vLength = toInteger(records.getObject("IDENTIFIER_LENGTH"));
				listOfDynamicLists.add(new DynamicLists());
				listOfDynamicLists.get(index).setBlockName("lists");
				listOfDynamicLists.get(index).setItemName("listsValue" + toChar(i));
				listOfDynamicLists.get(index).setDynamicName(vLable);
				listOfDynamicLists.get(index).setVisible(true);
				listOfDynamicLists.get(index).setInsertAllowed(false);
				listOfDynamicLists.get(index).setUpdateAllowed(false);
				index++;
				copy(vLength, "control_block.length_" + toChar(i));
				if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(), "AIRPORT")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"RUNWAY")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "RUNWAY_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"AIRPORT NDB")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_NDB_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"HELIPORT")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "HELIPORT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"ENROUTE HOLDING")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "ENROUTE_HOLDING_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"AIRPORT HOLDING")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_HOLDING_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"APPROACH")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "APPROACH_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"SIDS")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "SID_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"STARS")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "STAR_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"AIRPORT WAYPOINT")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "AIRPORT_WAYPOINT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"ENROUTE NAVAID")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "VHF_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(), "GLS")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "GLS_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"ENROUTE NDB")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "ENROUTE_NDB_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"ENROUTE AIRWAY")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "AIRWAY_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"ENROUTE WAYPOINT")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "ENROUTE_WAYPOINT_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"HELIPORT APPROACH")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "HELI_APPROACH_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"HELIPORT SID")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "HELI_SID_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"HELIPORT STAR")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "HELI_STAR_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"RESTRICTED AIRSPACE")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "RESTRICTED_AIRSPACE_LIST");

				}

				else if (Objects.equals(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getRecordTypeDescr(),
						"CONTROLLED AIRSPACE")) {
					setItemProperty("LISTS.VALUE_" + toChar(i), "LOV_NAME", "CONTRL_AIRSPACE_LIST");

				}


			}
			parameter.getDynamicGridData().addAll(listOfDynamicLists);

			populateIncExcLists(datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListVal());
			if(lists.size()==0) {
				lists.add(new Lists());
			}
			controlBlock.setDid(N);
			parameter.setRecCount(0);
			parameter.setKeyDownUp(0);
			parameter.setPSearchField(null);
			parameter.setRecCntIe(0);
			parameter.setSaveButton(0);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsKeyDelrec(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" listsKeyDelrec Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(parameter.getUpdRec(), Y)) {
				coreptLib.dspActionMsg(D, null, toInteger(nameIn(this, "global.dcr_number")),
						toInteger(global.getProcessingCycle()), toString(nameIn(this, "navdb.navdb_id")));

			}

			else if (Objects.equals(parameter.getUpdRec(), N)) {
				copyWithIndex(this, "DELETED", "lists.recordStatus", system.getCursorRecordIndex());
				deleteRecord("");
				parameter.setDupListsRec(0);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsKeyDelrec executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsKeyDelrec Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsKeyDown(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" listsKeyDown Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
	

			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue1(), null)) {
				nextRecord("");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsKeyDown executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsKeyDown Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsKeyUp(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" listsKeyUp Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			if (Objects.equals(toInteger(system.getCursorRecord()), 1)) {
				log.debug("CursorRecord value is 1");

			}

			else {
				previousRecord("");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsKeyUp executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsKeyUp Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if ((Objects.equals(lists.getRow(system.getCursorRecordIndex()).getRecordStatus(), "NEW")
					&& Objects.equals(lists.getRow(system.getCursorRecordIndex()).getDcrNumber(), null))) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}
			if(lists.size()==0) {
				lists.add(new Lists());
			}
			if(Objects.equals(lists.getRow(0).getValue1(),null)) {
				lists.getRow(0).setRecordStatus("NEW");
				}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue1WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue1WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(1);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue1(),
							lists.getRow(system.getCursorRecordIndex()).getValueD1())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue1(),
					lists.getRow(system.getCursorRecordIndex()).getValueD1())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue1WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue1WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue1WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue1WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					parameter.setUpdRec(N);
					setBlockItemProperty("lists.value_1", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
					setBlockItemProperty("lists.value_1", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);

				}

				else {
					parameter.setUpdRec(Y);
					setBlockItemProperty("lists.value_1", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
					setBlockItemProperty("lists.value_1", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue1WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue1WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue2WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue2WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(2);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue2(),
							lists.getRow(system.getCursorRecordIndex()).getValueD2())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue2(),
					lists.getRow(system.getCursorRecordIndex()).getValueD2())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue2WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue2WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue2WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue2WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getUpdRec(), Y)) {
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue2WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue2WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue3WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue3WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(3);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue3(),
							lists.getRow(system.getCursorRecordIndex()).getValueD3())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue3(),
					lists.getRow(system.getCursorRecordIndex()).getValueD3())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue3WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue3WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue3WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue3WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getUpdRec(), Y)) {
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue3WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue3WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue4WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue4WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(4);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue4(),
							lists.getRow(system.getCursorRecordIndex()).getValueD4())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue4(),
					lists.getRow(system.getCursorRecordIndex()).getValueD4())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue4WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue4WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue4WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue4WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getUpdRec(), Y)) {
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue4WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue4WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue5WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue5WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(5);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue5(),
							lists.getRow(system.getCursorRecordIndex()).getValueD5())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue5(),
					lists.getRow(system.getCursorRecordIndex()).getValueD5())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue5WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue5WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue5WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue5WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getUpdRec(), Y)) {
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue5WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue5WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue6WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue6WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(6);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue6(),
							lists.getRow(system.getCursorRecordIndex()).getValueD6())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue6(),
					lists.getRow(system.getCursorRecordIndex()).getValueD6())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue6WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue6WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue6WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue6WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getUpdRec(), Y)) {
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue6WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue6WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue7WhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue7WhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkLength(7);
			if (!Objects.equals(system.getCursorRecord(), "1")
					&& !Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue7(),
							lists.getRow(system.getCursorRecordIndex()).getValueD7())) {
				parameter.setDupLists(1);

			}

			parameter.setRecCount(toInteger(system.getCursorRecord()));
			if (!Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue7(),
					lists.getRow(system.getCursorRecordIndex()).getValueD7())) {
				lists.getRow(system.getCursorRecordIndex()).setDcrNumber(toInteger(global.getDcrNumber()));

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue7WhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue7WhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsValue7WhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsValue7WhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				String vCnavdbBlock = DbConstants.NAVDB;

				if (Objects.equals(parameter.getUpdRec(), Y)) {
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsValue7WhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsValue7WhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsNextRecWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsNextRecWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);


			if (Objects.equals(parameter.getRecCntIe(), 0) || !Objects.equals(parameter.getPSearchField(),
					lists.getRow(system.getCursorRecordIndex()).getSearchFirstField())) {
				parameter.setRecCntIe(1);
				parameter.setPSearchField(lists.getRow(system.getCursorRecordIndex()).getSearchFirstField());

				for (int i = 0; i < lists.size(); i++) {
					if (!Objects.equals(lists.getRow(i).getValue1(), null)
							&& Objects.equals(lists.getRow(i).getValue1(), parameter.getPSearchField())) {
						goItem("lists.value_1");
						break;

					}

					else if (i == lists.size() - 1) {
						goItem("lists.next_rec");
						break;

					}

					else {
						parameter.setRecCntIe(parameter.getRecCntIe() + 1);
						nextRecord("");

					}

				}

			}

			else {
				parameter.setRecCntIe(parameter.getRecCntIe() + 1);
				nextRecord("");
				for (int i = 0; i < lists.size(); i++) {
					if (!Objects.equals(lists.getRow(i).getValue1(), null)
							&& Objects.equals(lists.getRow(i).getValue1(), parameter.getPSearchField())) {
						goItem("lists.value_1");
						parameter.setRecCntIe(toInteger(system.getCursorRecord()));
						break;

					}

					else if (Objects.equals(lists.getRow(i).getValue1(), null)) {
						previousRecord("");

					}

					if (i == lists.size() - 1) {
						goItem("lists.next_rec");
						break;

					}

					else {
						parameter.setRecCntIe(parameter.getRecCntIe() + 1);
						nextRecord("");

					}

				}

			}
			lists.getRow(system.getCursorRecordIndex()).setSearchFirstField(parameter.getPSearchField());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsNextRecWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsNextRecWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsDoneListWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsDoneListWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			parameter.setSaveButton(1);
			parameter.setKeyDownUp(0);
			controlBlock.setDid(Y);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(parameter.getRecCreate(), Y)
						&& Objects.equals(lists.getRow(system.getCursorRecordIndex()).getValue1(), null)) {
					coreptLib.dspMsg("Insert/Delete the Record first" +(system.getCursorRecordIndex() + 1));
					throw new FormTriggerFailureException();

				}
				Integer ifCheck = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, "navdb.navdb_id"))));

				if (Objects.equals(ifCheck, 1)) {

					lists.filterNonDeletedRecords();
					saveIncExcList();
					if (Objects.equals(parameter.getDupListsRec(), 0)) {
						doneIncExcLists();
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						parameter.setRecCreate(N);
						system.setFormStatus("NORMAL");
						system.setRecordStatus("QUERIED");

					}

					parameter.setDupLists(0);
					parameter.setDupListsRec(0);
					hideView("list");


				}

				else {
					coreptLib.dspMsg("Record Cannot be Saved with DCR#" + global.getDcrNumber() + " for NAVDB\n"
							+ toString(nameIn(this, "navdb.navdb_id")));

				}

			}

			else {
				hideView("list");


			}
			if(lists.size()==0) {
				lists.add(new Lists());
			}
			if(Objects.equals(lists.getRow(0).getValue1(),null)) {
				lists.getRow(0).setRecordStatus("NEW");
				}

			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsDoneListWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsDoneListWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsCancelListWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsCancelListWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vValue = "";
			StringBuilder vValueBuilder = new StringBuilder();
			Integer vCount = 0;
			String query = "";
			DuRecord rec = null;

			parameter.setSaveButton(2);
			controlBlock.setDid(Y);


			for (int i = 1; i <= datatypRad.getRow(system.getPreviousBlockCursorIndex()).getListNo(); i++) {
				String value = (Objects.equals(nameIn(this, "lists.value" + toChar(i)), null) ? ""
						: toString(nameIn(this, "lists.value" + toChar(i))));
				vValueBuilder.append(value);
			}
			vValue= vValueBuilder.toString();
			if (Objects.equals(vValue, "")) {

				query = """
						select count(*) from selection_criteria_value
								where select_by_id= ?
						""";
				rec = app.selectInto(query, controlBlock.getListSId());
				vCount = rec.getInt();
				if (Objects.equals(vCount, 0)) {

					query = """
							 delete from navdb_select_criteria
										where select_by_id = ?
							""";
					app.executeNonQuery(query, controlBlock.getListSId());
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

			}

			hideView("list");
			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsCancelListWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsCancelListWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> listsDeleteAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" listsDeleteAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer vButton = 0;
			Integer vCount = 0;
			String query = "";
			DuRecord rec = null;

			controlBlock.setDid(Y);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					vButton = displayAlert.moreButtons(S, "Delete All Selection Criterias",
							"Are you sure. you want to delete all the records" + chr(10), "OK", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("listsAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("listsAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {

					query = """
							Select max(value_seq) from selection_criteria_value
											where select_by_id= ?
							""";
					rec = app.selectInto(query, controlBlock.getListSId());
					vCount = rec.getInt();

					query = """
							 delete from selection_criteria_value
											where select_by_id= ?
							""";
					app.executeNonQuery(query, controlBlock.getListSId());
					query = """
							 delete from navdb_select_criteria
											where select_by_id = ?
							""";
					app.executeNonQuery(query, controlBlock.getListSId());
					message("Total " + vCount + " rows Deleted");
					hideView("list");
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);


				}

				else {
					throw new FormTriggerFailureException();

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" listsDeleteAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the listsDeleteAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbKeyDown(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbKeyDown Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbKeyDown executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbKeyDown Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbWhenValidateRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbWhenValidateRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbWhenValidateRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbWhenValidateRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbNewNavdbWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbNewNavdbWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String fmsIdCur = """
					SELECT fms_id
					        FROM flight_management_system
					       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
					         AND binary_format_type IN ('FD', 'NFD')
					""";

			if (!Objects.equals(copyNavdb.getNewNavdb(), null)) {
				List<DuRecord> records = app.executeQuery(fmsIdCur);
				for (DuRecord fms_id_rec : records) {
					if (Objects.equals(fms_id_rec.getObject("fms_id"), navdb.getFmsId())) {
						Boolean dbOut = app.executeFunction(Boolean.class, DbConstants.SCHEMA_CPTS, "check_ident_for_alphanum",
								"forms_utilities", OracleTypes.BOOLEAN,
								new ProcedureInParameter("p_ident", copyNavdb.getNewNavdb(), OracleTypes.VARCHAR));

						if (dbOut) {
							displayAlert.oneButton(S, "Change NavDB ID",
									"For B787 or B747 databases,Characters I,O,Q or Z shall \nnot be as a part of the Navdb Ident."
											+ chr(10) + "Change NavDB ID");
							throw new FormTriggerFailureException();

						}

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbNewNavdbWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbNewNavdbWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbNewDcrWhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbNewDcrWhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			Boolean lsReturn = true;
			Integer lnDcr = 0;
			Integer lnFlag = 0;

			try {
				lnFlag = coreptLib.validateNavdb(toInteger(global.getDcrNumber()),
						toInteger(global.getProcessingCycle()), navdb.getDataSupplier(), navdb.getNavdbId());
				if (!Objects.equals(lnFlag, 1)) {

					query = """
							SELECT DISTINCT DCR_Number
										  from Search_by_Navdb_Assignee
										 WHERE NavDB_ID = ?
										   AND DCR_overall_status = 'OPEN'
										   AND Data_Supplier = ?
							""";
					rec = app.selectInto(query, copyNavdb.getNewNavdb(), navdb.getDataSupplier());
					lnDcr = rec.getInt();
					copyNavdb.setNewDcr(lnDcr);

				}

				else {
					copyNavdb.setNewDcr(toInteger(global.getDcrNumber()));

				}
			}

			catch (NoDataFoundException e) {
				String msg = copyNavdb.getNewNavdb()==null?"":copyNavdb.getNewNavdb();
				coreptLib.dspMsg("No Open DCR exists for " + msg);
				copyNavdb.setNewDcr(null);

			}

			catch (Exception e) {
				showLov("DCR_LIST");
				
				if (!lsReturn) {
					coreptLib.dspMsg("Please select a DCR from the List.");
					throw new FormTriggerFailureException();

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbNewDcrWhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbNewDcrWhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbAddCustWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbAddCustWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			showLov("ADD_CUST");
			copyNavdb.setNewCust(copyNavdb.getNewCust() + copyNavdb.getTempCust() + ",");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbAddCustWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbAddCustWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbCopyWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbCopyWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vOut = "OK";

			String vNewCust = null;
			String pCopyType = null;
			String lsFmsUsable = null;
			String vCopyNavdbDs = null;
			String vChange = N;
			String pFmsid = null;
			Integer vReccnt = 0;
			String query = "";
			DuRecord rec = null;
			Integer vButton = null;
			
			if (!Objects.equals(alertDetails.checkAlertValues("copyTailoredAlert"), -1) || 
					!Objects.equals(alertDetails.checkAlertValues("copyTailoredAlert2"), -1) ||
					!Objects.equals(alertDetails.checkAlertValues("copyTailoredAlert3"), -1)) {
				alertDetails.getAlerts().remove(0);
				callCopyTldPrc();
			}

			else {
				if (Objects.equals(copyNavdb.getNewDcr(), null)) {
					coreptLib.dspMsg("Please enter the DCR number");
					goItem("copy_navdb.new_dcr");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(copyNavdb.getNewNavdb(), null)) {
					coreptLib.dspMsg("Please enter the copy-to NAVDB ID");
					goItem("copy_navdb.new_navdb");
					throw new FormTriggerFailureException();

				}

				else {
					if (length(copyNavdb.getNewNavdb()) > 3) {
						coreptLib.dspMsg(
								"Currently, a NAVDB_ID shall be same to a Customer_id; \nit can not exceed 3 characters.");
						goItem("copy_navdb.new_navdb");
						throw new FormTriggerFailureException();

					}

				}
				if (Objects.equals(rtrim(copyNavdb.getDataSupplier()), null)) {
					copyNavdb.setDataSupplier(navdb.getDataSupplier());

				}

				if (!Objects.equals(upper(parameter.getDbInstName()), "ENGR")) {

					query = """
							SELECT NVL(usable,'$') from flight_management_system
							  	WHERE fms_id = ?
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					lsFmsUsable = rec.getString();
					if (Objects.equals(lsFmsUsable, "E")) {
						coreptLib.dspMsg("FMS '" + navdb.getNavdbId()
								+ "' is an Engineering FMS_ID, you cannot \ncreate or copy selection criteria. "
								+ chr(10) + "Please select Production FMS ID.");
						throw new FormTriggerFailureException();

					}

				}

				try {

					String queryOne = """
							SELECT customer_ident
							        from customer
							       WHERE customer_ident = ?
							""";
					DuRecord reco = app.selectInto(queryOne, copyNavdb.getNewNavdb());
					vNewCust = reco.getString();
				}

				catch (NoDataFoundException e) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						vButton = displayAlert.moreButtons(
								S, "No Customer Found", "Customer with name '" + copyNavdb.getNewNavdb()
										+ "' does not exist." + chr(10) + "Do you want to generate this customer?",
								"Yes", "No", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("copyCustomerAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("copyCustomerAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vButton, 2)) {
						coreptLib.dspMsg("Please enter the new NAVDB ID");
						goItem("copy_navdb.new_navdb");
						copyNavdb.setNewNavdb(null);
						throw new FormTriggerFailureException();

					}

				}

				try {

					query = """
							SELECT fms_id
							      from NAVDB
							      WHERE navdb_id = ?
							""";
					rec = app.selectInto(query, copyNavdb.getNewNavdb());
					pFmsid = rec.getString();
				}

				catch (NoDataFoundException e) {
					pFmsid = null;

				}
				if (Objects.equals(vNewCust, null) ) {
					pCopyType = "NEW";

				}

				else {
					if (Objects.equals(copyNavdb.getNewNavdb(), navdb.getNavdbId())) {
						if (!Objects.equals(copyNavdb.getDataSupplier(), navdb.getDataSupplier())) {
							if (Objects.equals(navdb.getFmsId(), pFmsid)) {
								alertDetails.getCurrent();
								if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
									vButton = displayAlert.moreButtons(S, "Copy NavDB Selection",
											"One NavDB can only exist for one Supplier. Do you want \nto change the Supplier of this NavDB?",
											"Yes", "No", null);
									OracleHelpers.bulkClassMapper(displayAlert, this);
									alertDetails.createNewRecord("copySupplierAlert");
									throw new AlertException(event, alertDetails);
								} else {
									vButton = alertDetails.getAlertValue("copySupplierAlert",
											alertDetails.getCurrentAlert());
								}
								if (Objects.equals(vButton, 2)) {
									throw new FormTriggerFailureException();

								}

								else {

									query = """
											UPDATE navdb
											SET data_supplier = ?
											WHERE navdb_id = ?
											""";
									app.executeNonQuery(query, copyNavdb.getDataSupplier(), navdb.getNavdbId());// TODOCOMMIT
									genericNativeQueryHelper.commit(this, system.getCursorBlock());
									vOut = "DONE";

								}

							}

						}

						else {

							coreptLib.dspMsg("Note: The new NAVDB ID shall not be same to the \ncurrent NAVDB ID.");
							goItem("copy_navdb.new_navdb");
							throw new FormTriggerFailureException();

						}

					}

					if (!Objects.equals(vOut, "DONE")) {

						try {

							query = """
									SELECT 'REPLACE'
									               from NAVDB
									             WHERE navdb_id = ?
									""";
							rec = app.selectInto(query, copyNavdb.getNewNavdb());
							pCopyType = rec.getString();

							query = """
									SELECT data_supplier
									from navdb
									WHERE navdb_id =?
									""";
							rec = app.selectInto(query, copyNavdb.getNewNavdb());
							vCopyNavdbDs = rec.getString();
							if (!Objects.equals(copyNavdb.getDataSupplier(), vCopyNavdbDs)) {
								if (Objects.equals(navdb.getFmsId(), pFmsid)) {
									alertDetails.getCurrent();
									if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
										vButton = displayAlert.moreButtons(S, "Copy NavDB Selection",
												"One NavDB can only exist for one Supplier. Do you want \nto change the Supplier of this NavDB?",
												"Yes", "No", null);
										OracleHelpers.bulkClassMapper(displayAlert, this);
										alertDetails.createNewRecord("copyAlert1");
										throw new AlertException(event, alertDetails);
									} else {
										vButton = alertDetails.getAlertValue("copyAlert1",
												alertDetails.getCurrentAlert());
									}

									if (Objects.equals(vButton, 2)) {
										throw new FormTriggerFailureException();

									}

									else {
										vChange = Y;

										query = """
												UPDATE navdb
												                    SET data_supplier = ?
												                WHERE navdb_id = ?
												""";
										app.executeNonQuery(query, copyNavdb.getDataSupplier(),
												copyNavdb.getNewNavdb());
										genericNativeQueryHelper.commit(this, system.getCursorBlock());

									}

								}

							}

							try {

								query = """
										SELECT 'REPLACE'
										                 from NAVDB
										                 WHERE navdb_id = ?
										                 AND data_supplier = ?
										""";
								rec = app.selectInto(query, copyNavdb.getNewNavdb(), copyNavdb.getDataSupplier());
								pCopyType = rec.getString();
								if (Objects.equals(navdb.getFmsId(), pFmsid)) {
									alertDetails.getCurrent();
									if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
										vButton = displayAlert.moreButtons(S, "Replace Selection", "Navdb '"
												+ copyNavdb.getNewNavdb() + "'  already exist," + chr(10)
												+ "Do you want to replace its selections with the selections \nof Navdb '"
												+ navdb.getNavdbId() + "'?", "Yes", "No", null);
										OracleHelpers.bulkClassMapper(displayAlert, this);
										alertDetails.createNewRecord("replaceAlert");
										throw new AlertException(event, alertDetails);
									} else {
										vButton = alertDetails.getAlertValue("replaceAlert",
												alertDetails.getCurrentAlert());
									}
									if (Objects.equals(vButton, 2)) {

										if (Objects.equals(vChange, Y)) {

											query = """
													UPDATE navdb
													                    SET data_supplier = ?
													                WHERE navdb_id = ?
													""";
											app.executeNonQuery(query, vCopyNavdbDs, copyNavdb.getNewNavdb());
											genericNativeQueryHelper.commit(this, system.getCursorBlock());
										}

										throw new FormTriggerFailureException();

									}

									else {
										pCopyType = "REPLACE-OK";

									}

								}

								else {
									alertDetails.getCurrent();
									if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
										vButton = displayAlert.moreButtonsColour("pcaution", "Replace Selection",
												"NavDBs '" + copyNavdb.getNewNavdb() + "" + " and " + "'"
														+ navdb.getNavdbId() + "' have different FMS_IDs. " + chr(10)
														+ "Do you wish to proceed ?",
												"Yes", "No", null);
										OracleHelpers.bulkClassMapper(displayAlert, this);
										alertDetails.createNewRecord("copyAlert2");
										throw new AlertException(event, alertDetails);
									} else {
										vButton = alertDetails.getAlertValue("copyAlert2",
												alertDetails.getCurrentAlert());
									}
									if (Objects.equals(vButton, 2)) {

										if (Objects.equals(vChange, Y)) {

											query = """
													UPDATE navdb
																		                    SET data_supplier = ?
																		                WHERE navdb_id = ?
													""";
											app.executeNonQuery(query, vCopyNavdbDs, copyNavdb.getNewNavdb());
											genericNativeQueryHelper.commit(this, system.getCursorBlock());

										}

										throw new FormTriggerFailureException();

									}

									else {
										pCopyType = "REPLACE-OK";

									}

								}
							}

							catch (NoDataFoundException e) {

								throw new FormTriggerFailureException();

							}
						}

						catch (NoDataFoundException e) {
							pCopyType = "NEW";

						}

					}

				}
				if (!Objects.equals(copyNavdb.getNewNavdb(), null)) {

					query = """
							SELECT COUNT(REC.RECORD_TYPE_CODE)
							  	   from FMS_DATA_TYPE FDT,
							                   RECORD_TYPE REC
							                   WHERE FDT.RECORD_TYPE_CODE = REC.RECORD_TYPE_CODE
							                   AND FDT.FMS_ID = ?
							                   AND REC.RECORD_TYPE_CODE IN ('133','140','150','160')
							                   AND FDT.REQUIRED_IND = 'Y'
							""";
					rec = app.selectInto(query, navdb.getFmsId());
					vReccnt = rec.getInt();
					if (vReccnt > 0) {
						coreptLib.dspMsg("This FMS ID requires 'Fuel_Policy/APF'");
					}

				}

				if (Objects.equals(pCopyType, "REPLACE-OK")) {

					if (Objects.equals(navdb.getFmsId(), pFmsid)) {
						Map<String, Object> deleteNavdbProcedure = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DELETE_NAVDB",
								"NAVDB_UTIL",
								new ProcedureInParameter("p_old_navdb", copyNavdb.getNewNavdb(), OracleTypes.VARCHAR),
								new ProcedureOutParameter("p_out", OracleTypes.VARCHAR),
								new ProcedureInParameter("p_type", pCopyType, OracleTypes.VARCHAR));
						vOut = toString(deleteNavdbProcedure.get("p_out"));
					}

					else {

						Map<String, Object> deleteFmsProcedure = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DELETE_FMS_NAVDB",
								"NAVDB_UTIL",
								new ProcedureInParameter("p_old_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
								new ProcedureInParameter("p_new_navdb", copyNavdb.getNewNavdb(), OracleTypes.VARCHAR),
								new ProcedureOutParameter("p_out", OracleTypes.VARCHAR),
								new ProcedureInParameter("p_type", pCopyType, OracleTypes.VARCHAR));
						vOut = toString(deleteFmsProcedure.get("p_out"));

					}

				}

				if (Objects.equals(vOut, "OK")) {

					Map<String, Object> duplicateProcedure = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DUPLICATE", "NAVDB_UTIL",
							new ProcedureInParameter("p_old_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
							new ProcedureInParameter("p_new_navdb", copyNavdb.getNewNavdb(), OracleTypes.VARCHAR),
							new ProcedureInParameter("p_new_dcr", copyNavdb.getNewDcr(), OracleTypes.NUMBER),
							new ProcedureInParameter("p_new_suppl", copyNavdb.getDataSupplier(), OracleTypes.VARCHAR),
							new ProcedureOutParameter("p_out", OracleTypes.VARCHAR),
							new ProcedureInParameter("p_type", pCopyType, OracleTypes.VARCHAR));

					vOut = toString(duplicateProcedure.get("p_out"));

					if (Objects.equals(vOut, "OK")) {
						if (Objects.equals(vNewCust, null)) {
							String lsTailoredTitle = null;

							query = """
									SELECT TAILORED_TITLE
									                 from CUSTOMER
									                WHERE CUSTOMER_IDENT = ?
									""";
							rec = app.selectInto(query, navdb.getNavdbId());
							lsTailoredTitle = rec.getString();

							query = """
									 INSERT INTO CUSTOMER (CUSTOMER_IDENT,
									                                     CUSTOMER_NAME,
									                                     COMMENTS,
									                                     CREATE_DCR_NUMBER,
									                                     CREATED_BY,
									                                     CREATED_ON,
									                                     TAILORED_TITLE)
									                    VALUES (
									                              ?,
									                              ?,
									                              'Created From NavDB Setup Form at Cycle '
									                              || ?,
									                              999,
									                              USER,
									                              SYSDATE,
									                              ?)
									""";
							app.executeNonQuery(query, copyNavdb.getNewNavdb(), copyNavdb.getNewNavdb(),
									global.getProcessingCycle(), lsTailoredTitle);

						}

						if (Objects.equals(pCopyType, "NEW")) {

							query = """
									 INSERT INTO CUSTOMER_NAVDB (NAVDB_ID,
														                               CUSTOMER_IDENT,
														                               CREATE_DCR_NUMBER,
														                               CREATED_BY,
														                               CREATED_ON)
															     VALUES (?,
															             ?,
															             999,
															             USER,
															             SYSDATE)
									""";
							app.executeNonQuery(query, copyNavdb.getNewNavdb(), copyNavdb.getNewNavdb());
							String rowid = toString(nameIn(this, substr("navdb", 1, 15) + ".rowid"));
							sendUpdatedRowIdDetails(rowid);
						}

						if (Objects.equals(pCopyType, "NEW")) {
							callCopyTldPrc();

						}

						else {
							if (Objects.equals(navdb.getFmsId(), pFmsid)) {

								
								coreptLib.dspMsg("'" + copyNavdb.getNewNavdb()
										+ "' data has been successfully copied from '" + navdb.getNavdbId() + "' ."
										+ chr(10) + "Please query the new NAVDB data and check it." + chr(10)
										+ "Please verify Media Type.");

							}

							else {
								displayAlert.oneButtonColour("pcaution", "Replace Selection",
										"'" + copyNavdb.getNewNavdb()
												+ "' selection criteria has been successfully copied from '"
												+ navdb.getNavdbId() + "'." + chr(10)
												+ "Please query the new NavDB selection criteria." + chr(10)
												+ "Please verify ORCs, Data Types and Media Type.");

							}

						}

					}

				}

				if (Arrays.asList("OK", "DONE").contains(vOut)) {
					copyNavdb.setNewNavdb(null);
					copyNavdb.setNewCust(null);

					
					hideView("focals");
					if (Objects.equals(vOut, "DONE")) {
						coreptLib.dspMsg("NavDB '" + navdb.getNavdbId()
								+ "' data supplier has been successfully \nmoved to supplier '"
								+ copyNavdb.getDataSupplier() + "'" + chr(10) + chr(10)
								+ "Please use copy Tailored data form to move TLD data \nfor NavDB '"
								+ navdb.getNavdbId() + "'");

					}
					goItem("navdb.navdb_id");

				}

				else {
					coreptLib.dspMsg("Copy Error:" + chr(10) + vOut);

				}
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbCopyWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbCopyWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyNavdbCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyNavdbCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			copyNavdb.setNewNavdb(null);
			copyNavdb.setNewCust(null);
			hideView("focals");
			goItem("navdb.navdb_id");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyNavdbCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyNavdbCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyGeoArptGrpNewNavdbWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyGeoArptGrpNewNavdbWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String fmsIdCur = """
					SELECT fms_id
					        FROM flight_management_system
					       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
					         AND binary_format_type IN ('FD', 'NFD')
					""";

			if (!Objects.equals(copyNavdb.getNewNavdb(), null)) {
				List<DuRecord> records = app.executeQuery(fmsIdCur);
				for (DuRecord fms_id_rec : records) {
					if (Objects.equals(fms_id_rec.getObject("fms_id"), navdb.getFmsId())) {
						Boolean dbout = app.executeFunction(Boolean.class, DbConstants.SCHEMA_CPTS, "check_ident_for_alphanum",
								"forms_utilities", OracleTypes.BOOLEAN,
								new ProcedureInParameter("p_ident", copyNavdb.getNewNavdb() , OracleTypes.VARCHAR));
						if (dbout) {
							displayAlert.oneButton(S, "Change NavDB ID",
									"For B787 or B747 databases,Characters I,O,Q or Z shall \nnot be as a part of the Navdb Ident."
											+ chr(10) + "Change NavDB ID");
							throw new FormTriggerFailureException();

						}

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyGeoArptGrpNewNavdbWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyGeoArptGrpNewNavdbWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyGeoArptGrpCopyWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyGeoArptGrpCopyWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vSout = "OK";
			Integer vNcount = 0;
			String vSdataSuppier = null;
			String vSfmsId = null;

			Integer vNbutton = 0;
			String vSgeoAreaIcaoArpt = "";
			String vSselcri = null;
			String query = "";
			DuRecord rec = null;

			query = """
					SELECT COUNT (fms_id)
					     from navdb
					    WHERE navdb_id = ?
					""";
			rec = app.selectInto(query, copyGeoArptGrp.getNewNavdb());
			vNcount = rec.getInt();
			if (Objects.equals(vNcount, 0)) {
				coreptLib.dspMsg("This NavDB ID does not Exists.Please Enter existing \nNavDB ID.");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(copyGeoArptGrp.getNewDcr(), null)) {
				coreptLib.dspMsg("Please enter the create DCR number");
				goItem("copy_geo_arpt_grp.new_dcr");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(copyGeoArptGrp.getNewNavdb(), null)) {
				coreptLib.dspMsg("Please enter the Copy-TO NAVDB ID");
				goItem("copy_geo_arpt_grp.new_navdb");
				throw new FormTriggerFailureException();

			}

			else {
				if (length(copyGeoArptGrp.getNewNavdb()) > 3) {
					coreptLib.dspMsg(
							"Currently, a NAVDB_ID shall be same to a Customer_id; it can not exceed 3 Characters.");
					goItem("copy_geo_arpt_grp.new_navdb");
					throw new FormTriggerFailureException();

				}

			}
			if (Objects.equals(rtrim(copyGeoArptGrp.getDataSupplier()), null)) {
				copyGeoArptGrp.setDataSupplier(navdb.getDataSupplier());

			}

			if (Objects.equals(copyGeoArptGrp.getNewNavdb(), navdb.getNavdbId())) {
				coreptLib.dspMsg("Note: The new NavDB shall not be same to the current NAVDB ID.");
				goItem("copy_geo_arpt_grp.new_navdb");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(copyGeoArptGrp.getGeoChk(), N) && Objects.equals(copyGeoArptGrp.getAcChk(), N)
					&& Objects.equals(copyGeoArptGrp.getIcChk(), N)
					&& Objects.equals(copyGeoArptGrp.getAgChk(), N)) {
				coreptLib.dspMsg("Please select atleast one selection data you want to copy");
				goItem("copy_geo_arpt_grp.geo_chk");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(vNcount, 1)) {

				query = """
						SELECT data_supplier, fms_id
						        from navdb
						       WHERE navdb_id = ?
						""";
				rec = app.selectInto(query, copyGeoArptGrp.getNewNavdb());
				vSdataSuppier = rec.getString();
				vSfmsId = rec.getString();
				if (!Objects.equals(navdb.getFmsId(), vSfmsId)
						&& Objects.equals(copyGeoArptGrp.getDataSupplier(), vSdataSuppier)) {
					if (Objects.equals(copyGeoArptGrp.getGeoChk(), Y)) {
						vSgeoAreaIcaoArpt = vSgeoAreaIcaoArpt + "GEO Area/";
						vSselcri = vSselcri + "1";

					}

					else {
						vSselcri = vSselcri + "0";

					}
					if (Objects.equals(copyGeoArptGrp.getAcChk(), Y)) {
						vSgeoAreaIcaoArpt = vSgeoAreaIcaoArpt + "Area Code/";
						vSselcri = vSselcri + "2";

					}

					else {
						vSselcri = vSselcri + "0";

					}
					if (Objects.equals(copyGeoArptGrp.getIcChk(), Y)) {
						vSgeoAreaIcaoArpt = vSgeoAreaIcaoArpt + "ICAO Code/";
						vSselcri = vSselcri + "3";

					}

					else {
						vSselcri = vSselcri + "0";

					}
					if (Objects.equals(copyGeoArptGrp.getAgChk(), Y)) {
						vSgeoAreaIcaoArpt = vSgeoAreaIcaoArpt + "Airport Group ";
						vSselcri = vSselcri + "4";

					}

					else {
						vSselcri = vSselcri + "0";

					}
					vSgeoAreaIcaoArpt = rtrim(vSgeoAreaIcaoArpt, "/");
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						 displayAlert.moreButtons(S, "Replace Selection",
								"Navdb '" + copyGeoArptGrp.getNewNavdb() + "' exists with FMS_ID " + vSfmsId + "."
										+ chr(10) + "Only " + vSgeoAreaIcaoArpt
										+ " data will be copied. Do you want to \ncontinue..!!",
								"Yes", "No", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("copyAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vNbutton = alertDetails.getAlertValue("copyAlert", alertDetails.getCurrentAlert());
					}
					if (Objects.equals(vNbutton, 1)) {
						Map<String, Object> duplicateGeo = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DUPLICATE_GEO", "NAVDB_UTIL",
								new ProcedureInParameter("p_old_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
								new ProcedureInParameter("p_new_navdb", copyGeoArptGrp.getNewNavdb(),
										OracleTypes.VARCHAR),
								new ProcedureInParameter("p_new_dcr", copyGeoArptGrp.getNewDcr(), OracleTypes.NUMBER),
								new ProcedureInParameter("p_new_suppl", copyGeoArptGrp.getDataSupplier(),
										OracleTypes.VARCHAR),
								new ProcedureOutParameter("p_out", OracleTypes.VARCHAR),
								new ProcedureInParameter("p_sselcri", vSselcri, OracleTypes.VARCHAR));
						vSout = toString(duplicateGeo.get("p_out"));

						if (Objects.equals(vSout, "OK")) {
							coreptLib.dspMsg(
									"'" + copyGeoArptGrp.getNewNavdb() + "' data has been successfully copied from '"
											+ navdb.getNavdbId() + "'." + chr(10) + "Please Check the '"
											+ copyGeoArptGrp.getNewNavdb() + " data and made selections.");

						}

					}

				}

				else if ((!Objects.equals(navdb.getFmsId(), vSfmsId)
						&& !Objects.equals(copyGeoArptGrp.getDataSupplier(), vSdataSuppier))
						|| (Objects.equals(navdb.getFmsId(), vSfmsId)
								&& !Objects.equals(copyGeoArptGrp.getDataSupplier(), vSdataSuppier))) {
					coreptLib.dspMsg(
							"Note: One NavDB can only exists for one Supplier. Please \nenter correct NAVDB and Supplier.");
				}

				else if (Objects.equals(navdb.getFmsId(), vSfmsId)
						&& Objects.equals(copyGeoArptGrp.getDataSupplier(), vSdataSuppier)) {
					coreptLib.dspMsg(copyGeoArptGrp.getNewNavdb() + " exists with same Supplier and FMS ID." + chr(10)
							+ "To replace its selections with the selections of Navdb\n" + navdb.getNavdbId()
							+ " use Copy/Replace Button.");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyGeoArptGrpCopyWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyGeoArptGrpCopyWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyGeoArptGrpCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyGeoArptGrpCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			copyGeoArptGrp.setNewNavdb(null);
			copyGeoArptGrp.setDataSupplier(navdb.getDataSupplier());
			hideView("FOCALS");
			goItem("navdb.navdb_id");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyGeoArptGrpCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyGeoArptGrpCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyGeoArptGrpResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyGeoArptGrpResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			goBlock("COPY_GEO_ARPT_GRP", "");
			copyGeoArptGrp.setGeoChk(N);
			copyGeoArptGrp.setAcChk(N);
			copyGeoArptGrp.setIcChk(N);
			copyGeoArptGrp.setAgChk(N);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyGeoArptGrpResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyGeoArptGrpResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyGeoArptGrpCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyGeoArptGrpCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			goBlock("COPY_GEO_ARPT_GRP", "");
			copyGeoArptGrp.setGeoChk(Y);
			copyGeoArptGrp.setAcChk(Y);
			copyGeoArptGrp.setIcChk(Y);
			copyGeoArptGrp.setAgChk(Y);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyGeoArptGrpCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyGeoArptGrpCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> copyGeoArptGrpNewDcrWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" copyGeoArptGrpNewDcrWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String fmsIdCur = """
					SELECT fms_id
					        FROM flight_management_system
					       WHERE (fms_id LIKE '%B747%' OR fms_id LIKE '%B787%') --Fix SCR 7338 --Madhu--10-Mar-2017
					         AND binary_format_type IN ('FD', 'NFD')
					""";

			if (!Objects.equals(copyNavdb.getNewNavdb(), null)) {
				List<DuRecord> records = app.executeQuery(fmsIdCur);
				for (DuRecord fms_id_rec : records) {
					if (Objects.equals(fms_id_rec.getObject("fms_id"), navdb.getFmsId())) {
						Boolean dbout = app.executeFunction(Boolean.class, DbConstants.SCHEMA_CPTS, "check_ident_for_alphanum",
								"forms_utilities", OracleTypes.BOOLEAN,
								new ProcedureInParameter("p_ident", copyNavdb.getNewNavdb(), OracleTypes.VARCHAR));

						if (dbout) {
							displayAlert.oneButton(S, "Change NavDB ID",
									"For B787 or B747 databases,Characters I,O,Q or Z shall \nnot be as a part of the Navdb Ident."
											+ chr(10) + "Change NavDB ID");
							throw new FormTriggerFailureException();

						}

					}

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" copyGeoArptGrpNewDcrWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the copyGeoArptGrpNewDcrWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> fmsDmrPostQuery(NavdbSetupTriggerRequestDto reqDto)
			throws Exception {
		log.info(" fmsDmrPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			for (int i = 0; i < fmsDmr.size(); i++) {
				if (Objects.equals(fmsDmr.getRow(i).getDmrDescr(), null)
						&& !Objects.equals(fmsDmr.getRow(i).getDmrId(), null)) {

					try {

						query = """
								select dmr_descr from Data_Manipulation_Routine
										 where dmr_id = ?
								""";
						rec = app.selectInto(query, fmsDmr.getRow(i).getDmrId());
						fmsDmr.getRow(i).setDmrDescr(rec.getString());
					}
					// no_data_found
					catch (NoDataFoundException e) {
						log.debug("No Data found captured in fmsDmrPostQuery");

					}

				}
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDmrPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDmrPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> customerInfoPostRecord(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoPostRecord Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				controlBlock.setDid(Y);

			}

			else {
				controlBlock.setDid(null);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoPostRecord executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoPostRecord Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> customerInfoCustomerEmailIdWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoCustomerEmailIdWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(customerInfo.getCustomerEmailId(), null)) {
				customerInfo.setCustEmailFlag(N);

			}

			navdb.setCustomerEmailId(customerInfo.getCustomerEmailId());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoCustomerEmailIdWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoCustomerEmailIdWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> customerInfoCustEmailFlagWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoCustEmailFlagWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(customerInfo.getCustomerEmailId(), null)) {
				coreptLib.dspMsg("Please Enter valid Customer e-mail Id.");
				customerInfo.setCustEmailFlag(N);
				goItem("customer_info.customer_email_id");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoCustEmailFlagWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoCustEmailFlagWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> customerInfoCustEmailFlagWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoCustEmailFlagWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			navdb.setCustEmailFlag(customerInfo.getCustEmailFlag());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoCustEmailFlagWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoCustEmailFlagWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> customerInfoNotesWhenValidateItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" customerInfoNotesWhenValidateItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			navdb.setNotes(customerInfo.getNotes());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" customerInfoNotesWhenValidateItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the customerInfoNotesWhenValidateItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (getGroupRowCount(findGroup("selectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one Format Media." + chr(10)+chr(10)
						+ "Click the 'Select' button to select the checked Format \nMedia." + chr(10)
						+ "Click the 'Reset' button to clear all the check(s)");
				if (Objects.equals(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setChk(N);
					setGroup(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "deselectGroup",
							navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(),
							navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(), null);

				}

				throw new FormTriggerFailureException();
			}

			else {
				
				queryBlockRecords(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "INITIAL");

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

				}

				else {
					log.debug("WorkType is not a View");

				}

			}
			system.setCursorBlock("navdbDeliveryFormatMedia");	
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaWhenNewRecordInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaWhenNewRecordInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lsCrate = null;

			lsCrate = populateCrateInd(navdb.getFmsId(),
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType());

			if (Objects.equals(lsCrate, Y)) {
				setItemInstanceProperty("navdb_delivery_format_media.format_media_type",
						toString(system.getCursorRecordIndex()), "visual_attribute", "FORMAT_MEDIA_TYPE");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaWhenNewRecordInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaWhenNewRecordInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaPostQuery(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaPostQuery Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lsCrate = null;
			for (int i = 0; i < navdbDeliveryFormatMedia.size(); i++) {
				navdbDeliveryFormatMedia.getRow(i).setCrateInd(navdbDeliveryFormatMedia.getRow(i).getCrateIndDb());
				lsCrate = populateCrateInd(navdb.getFmsId(), navdbDeliveryFormatMedia.getRow(i).getFormatMediaType());
				if (Objects.equals(lsCrate, Y)) {
					setItemInstanceProperty("navdb_delivery_format_media.format_media_type", toString(i),
							"visual_attribute", "FORMAT_MEDIA_TYPE");

				}
			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaPostQuery executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaPostQuery Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				setGroup(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "deselectGroup",
						navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(),
						navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(), null);

			}

			else {
				navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			if (Objects.equals(system.getMode(), "NORMAL")) {

				RecordGroup groupId = findGroup("deselectGroup");
				Integer totalRows = getGroupRowCount(groupId);
				String vFormatMediaType = null;

				
				checkSave(system.getCursorBlock());
				parameter.setPCustomerFlag(Y);
				checkSave(system.getCursorBlock());
				if (totalRows > 0) {
					for (int i = 0; i < totalRows; i++) {
						vFormatMediaType = getGroupCharCell("deselectGroup.item1", i);

						query = """
								 Delete from NAVDB_DELIVERY_FORMAT_MEDIA
								        where navdb_id = ? and
								        format_media_type = ?
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), vFormatMediaType);

						if (like("BRGA_LOCAL_CD_700MB_EMBRAER_v3_1", vFormatMediaType)
								&& Objects.equals(navdb.getBinaryFormatType(), "B31")) {

							query = """
									 Delete from NAVDB_ORC
									        	where ORC_ID = 'OR704'
									        	and navdb_id = ?
									""";
							app.executeNonQuery(query, navdb.getNavdbId());
						}

					}
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
					message("Record has been saved successfully");
					deleteGroupRow("deselectGroup", "ALL_ROWS");
					navdbDeliveryFormatMedia.getData().clear();
					navdbDeliveryFormatMedia.add(new NavdbDeliveryFormatMedia());
					String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
					system.setCursorBlock("navdbDeliveryFormatMedia");
					navdbExecuteQuery(this, where);
					fmsDeliveryFormatMedia.getData().clear();
					fmsDeliveryFormatMedia.add(new FmsDeliveryFormatMedia());
					where = "fms_id = '%s' and format_media_type not in (select format_media_type from navdb_delivery_format_media where navdb_id = '%s' ) "
							.formatted(navdb.getFmsId(), navdb.getNavdbId());
					system.setCursorBlock("fmsDeliveryFormatMedia");
					EParam.DYNAMIC_QUERY_ONE.setValue(where);
					navdbExecuteQuery(this, EParam.DYNAMIC_QUERY_ONE.getValue());

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("deselectGroup", "ALL_ROWS");
				//manually handled
				String pBlock = "navdbDeliveryFormatMedia";
				Integer vLengthW;
				Integer vLengthO;
				String vWhere;
				String lastQuery = hashUtil.decrypt(toString(nameIn(nameIn(this, pBlock), "lastQuery")));
				vLengthW = instr(lastQuery.toUpperCase(), "WHERE");
				vLengthO = instr(lastQuery.toLowerCase(), "order by");
				vWhere = substr(lastQuery, vLengthW + 5, vLengthO - vLengthW - 5);
				String lowerWhere = vWhere.toUpperCase();
				int orderIndex = lowerWhere.indexOf("ORDER BY");
				if (orderIndex != -1) {
					lowerWhere = lowerWhere.substring(0, orderIndex).trim();
				}
				lowerWhere = lowerWhere.replace(")A)", "");
				String encryptedWhere = hashUtil.encrypt(lowerWhere);
				copyWithIndex(this, encryptedWhere, HoneyWellUtils.toCamelCase(pBlock) + ".defaultWhere", 0);
				system.setCursorBlock("navdbDeliveryFormatMedia");
				navdbExecuteQuery(this, null);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				if (!Objects.equals(navdbDeliveryFormatMedia.getRow(0).getFormatMediaType(), null)) {
					selAll(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "deselectGroup");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaCrateIndWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaCrateIndWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lsCrate = null;
			lsCrate = populateCrateInd(navdb.getFmsId(),
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType());
			if (Objects.equals(lsCrate, N)) {
				if (Objects.equals(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateInd(), Y)) {
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setCrateInd(N);
					coreptLib.dspMsg("Selected Media Type cannot be Crated");
					system.setFormStatus("NORMAL");
					system.setRecordStatus("QUERIED");
					throw new FormTriggerFailureException();

				}

			}

			else {
				if (Objects.equals(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateInd(), Y)) {
					coreptLib.dspMsg("Selected Media Type is enabled for Crated");
				}

				else {
                    log.debug("Inside else for crantInd is not Y");

				}

			}
			if (!Objects.equals(
					nvl(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateIndDb(), "-"),
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateInd())) {
				navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex())
						.setCrateIndDb(navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getCrateInd());

			}
			commitForm(this);
			String rowid = toString(
					nameIn(this, substr("navdb", 1, 15) + ".rowid"));
			sendUpdatedRowIdDetails(rowid);
			system.setFormStatus("NORMAL");
			system.setRecordStatus("QUERIED");
			message("Record has been saved successfully");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaCrateIndWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaCrateIndWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaLsbmVersionWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaLsbmVersionWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String dfmLsbmVer = null;
			String lsFmsFamily = null;
			String query = "";
			DuRecord rec = null;

			query = """
					SELECT LSBM_VERSION from DELIVERY_FORMAT_MEDIA
						 WHERE FORMAT_MEDIA_TYPE=?
					""";
			rec = app.selectInto(query,
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType());
			dfmLsbmVer = rec.getString();

			query = """
					SELECT FMS_FAMILY from FLIGHT_MANAGEMENT_SYSTEM
						 WHERE FMS_ID=?
					""";
			rec = app.selectInto(query, navdb.getFmsId());
			lsFmsFamily = rec.getString();
			if (Objects.equals(dfmLsbmVer, "NONE")) {
				coreptLib.dspMsg("LSBM is not allowed for this Delivery Format Media");
				navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setLsbmVersion("NONE");
				system.setFormStatus("NORMAL");
			}

			if (!Objects.equals(lsFmsFamily, "AIRBUS")) {
				coreptLib.dspMsg("LSBM is not allowed for this FMS Family");
				navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setLsbmVersion("NONE");
				system.setFormStatus("NORMAL");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaLsbmVersionWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaLsbmVersionWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> navdbDeliveryFormatMediaDbsignVerWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" navdbDeliveryFormatMediaDbsignVerWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			String dfmDbsignVer = null;

			query = """
					SELECT DBSIGN_VER from DELIVERY_FORMAT_MEDIA
						 WHERE FORMAT_MEDIA_TYPE=?
					""";
			rec = app.selectInto(query,
					navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType());
			dfmDbsignVer = rec.getString();
			if (Objects.equals(dfmDbsignVer, "NONE")) {

			
				coreptLib.dspMsg("DB Signing is not allowed for this Delivery Format Media");
				navdbDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setDbsignVer("NONE");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" navdbDeliveryFormatMediaDbsignVerWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the navdbDeliveryFormatMediaDbsignVerWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> fmsDeliveryFormatMediaWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDeliveryFormatMediaWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			checkSave(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA);
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one Format Media" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked \nFormat Media." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				if (Objects.equals(fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(), Y)) {
					fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setChk(N);

					setGroup(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "selectGroup",
							fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(),
							fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(), null);

				}

				throw new FormTriggerFailureException();
			}

			else {

				queryBlockRecords(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "INITIAL");

				if (Objects.equals(parameter.getWorkType(), "VIEW")) {
					setItemProperty("fms_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.select", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("fms_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.check_all", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);
					setItemProperty("navdb_delivery_format_media.reset", FormConstant.ENABLED,
							FormConstant.PROPERTY_FALSE);

				}

				else {
					log.debug("Work Type is not a view from fmsDeliveryFormatMediaWhenNewBlockInstance");
				}

			}
			system.setCursorBlock("fmsDeliveryFormatMedia");;
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDeliveryFormatMediaWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDeliveryFormatMediaWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> fmsDeliveryFormatMediaChkWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDeliveryFormatMediaChkWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				setGroup(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "selectGroup",
						fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getChk(),
						fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).getFormatMediaType(), null);

			}

			else {
				fmsDeliveryFormatMedia.getRow(system.getCursorRecordIndex()).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDeliveryFormatMediaChkWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDeliveryFormatMediaChkWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> fmsDeliveryFormatMediaSelectWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDeliveryFormatMediaSelectWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (Objects.equals(system.getMode(), "NORMAL")) {
				RecordGroup groupId = findGroup("selectGroup");
				Integer totalRows = getGroupRowCount(groupId);
				String vFormatMediaType = null;
				String lsCrate = null;
				String vDbsignVer = null;

				try {
					if (totalRows > 0) {
						goBlock(DbConstants.NAVDB_DELIVERY_FORMAT_MEDIA, "");						
						for (int i = 0; i < totalRows; i++) {
							vFormatMediaType = getGroupCharCell("selectGroup.item1", i);

							navdbDeliveryFormatMedia.getRow(i).setFormatMediaType(vFormatMediaType);
							navdbDeliveryFormatMedia.getRow(i).setNavdbId(navdb.getNavdbId());
							navdbDeliveryFormatMedia.getRow(i).setRecordStatus("INSERT");

							try {

								query = """
										SELECT LSBM_VERSION from DELIVERY_FORMAT_MEDIA
											 			 WHERE FORMAT_MEDIA_TYPE=?
										""";
								rec = app.selectInto(query,
										navdbDeliveryFormatMedia.getRow(i).getFormatMediaType());
								rec.getString();
							}
							// OTHERS
							catch (Exception e) {
								coreptLib.dspMsg("NO LSBM FOUND FOR MEDIA TYPE" + navdbDeliveryFormatMedia
										.getRow(i).getFormatMediaType());
								throw e;
							}
							navdbDeliveryFormatMedia.getRow(i).setLsbmVersion("NONE");

							try {

								query = """
										SELECT DBSIGN_VER from DELIVERY_FORMAT_MEDIA
											 			WHERE FORMAT_MEDIA_TYPE=?
										""";
								rec = app.selectInto(query,
										navdbDeliveryFormatMedia.getRow(i).getFormatMediaType());
								vDbsignVer = rec.getString();
							}
							// OTHERS
							catch (Exception e) {
								coreptLib.dspMsg("NO DBSIGN INFO FOUND FOR MEDIA TYPE"
										+ navdbDeliveryFormatMedia.getRow(i).getFormatMediaType());
								throw e;


							}
							navdbDeliveryFormatMedia.getRow(i).setDbsignVer(vDbsignVer);
							navdbDeliveryFormatMedia.getRow(i).setCrateInd(N);
							navdbDeliveryFormatMedia.getRow(i)
									.setCrateIndDb(navdbDeliveryFormatMedia.getRow(i).getCrateInd());

							lsCrate = populateCrateInd(navdb.getFmsId(),
									navdbDeliveryFormatMedia.getRow(i).getFormatMediaType());
							if (Objects.equals(lsCrate, "Y")) {
								
//								setItemInstanceProperty("navdb_delivery_format_media.format_media_type",
//										toString(i), "visual_attribute", "FORMAT_MEDIA_TYPE");
								log.info("commented");;

							}

							if (Objects.equals(navdb.getBinaryFormatType(), "B31")
									&& like("%BRGA_LOCAL_CD_700MB_EMBRAER_v3_1%", vFormatMediaType)) {

								query = """
										 INSERT INTO navdb_orc VALUES ('OR704', ?, NULL, ?, USER, SYSDATE, 'Y')
										""";
								app.executeNonQuery(query, navdb.getNavdbId(), global.getDcrNumber());
							}
							navdbDeliveryFormatMedia.add(new NavdbDeliveryFormatMedia());
						}
						deleteGroupRow("selectGroup", "ALL_ROWS");

						genericNativeQueryHelper.commit(this, "navdbDeliveryFormatMedia");
						String rowid = toString(
								nameIn(this, substr("navdb", 1, 15) + ".rowid"));
						sendUpdatedRowIdDetails(rowid);
						message("Record has been saved successfully");
						navdbDeliveryFormatMedia.getData().clear();
						navdbDeliveryFormatMedia.add(new NavdbDeliveryFormatMedia());
						String where = "NAVDB_ID = '%s'".formatted(navdb.getNavdbId());
						system.setCursorBlock("navdbDeliveryFormatMedia");
						navdbExecuteQuery(this, where);
						fmsDeliveryFormatMedia.getData().clear();
						fmsDeliveryFormatMedia.add(new FmsDeliveryFormatMedia());
						where = "fms_id = '%s' and format_media_type not in (select format_media_type from navdb_delivery_format_media where navdb_id = '%s' )"
								.formatted(navdb.getFmsId(), navdb.getNavdbId());
						system.setCursorBlock("fmsDeliveryFormatMedia");
						 EParam.DYNAMIC_QUERY_ONE.setValue(where);
						navdbExecuteQuery(this,  EParam.DYNAMIC_QUERY_ONE.getValue());

					}

				}
				catch (Exception e) {

					coreptLib.dspMsg("ERROR IN SELECT" + substr(OracleHelpers.getSQLerrm(e), 1, 100));
					throw e;


				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDeliveryFormatMediaSelectWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDeliveryFormatMediaSelectWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> fmsDeliveryFormatMediaResetWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDeliveryFormatMediaResetWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {
				deleteGroupRow("selectGroup", "ALL_ROWS");
				queryBlockRecords(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "INITIAL");

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDeliveryFormatMediaResetWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDeliveryFormatMediaResetWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> fmsDeliveryFormatMediaCheckAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" fmsDeliveryFormatMediaCheckAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getMode(), "NORMAL")) {

				if (!Objects.equals(fmsDeliveryFormatMedia.getRow(0).getFormatMediaType(), null)) {
					selAll(DbConstants.FMS_DELIVERY_FORMAT_MEDIA, "selectGroup");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" fmsDeliveryFormatMediaCheckAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the fmsDeliveryFormatMediaCheckAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> suaRulesPostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkDid("Post Block Check");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> suaRulesWhenNewBlockInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesWhenNewBlockInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (like("CONTROLLED AIRSPACE", navdb.getDataName())) {

				populateSuaRules("UC");

			}

			else if (like("RESTRICTED AIRSPACE",
					navdb.getDataName())) {

				populateSuaRules("UR");

			}
			suaRules.setQueryHits(toString(suaRules.size()));
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesWhenNewBlockInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesWhenNewBlockInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> suaRulesDoneWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesDoneWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vNum = 0;
				Integer vButton = 0;
				String query = "";

				for (int i = 0; i < suaRules.size(); i++) {
					if (Objects.equals(suaRules.getRow(i).getChk(), Y)) {
						vNum = vNum + 1;

					}


				}
				if (Objects.equals(vNum, 0)) {
					alertDetails.getCurrent();
					if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
						 displayAlert.moreButtons(S, "NO CRITERIA VALUE",
								"No value is selected, or you deseleted all the value." + chr(10)
										+ "Are you sure this is what it shall be?",
								"Yes", "Cancel", null);
						OracleHelpers.bulkClassMapper(displayAlert, this);
						alertDetails.createNewRecord("suaRulesAlert");
						throw new AlertException(event, alertDetails);
					} else {
						vButton = alertDetails.getAlertValue("suaRulesAlert", alertDetails.getCurrentAlert());
					}

					if (Objects.equals(vButton, 1)) {

						query = """
								 DELETE FROM selection_criteria_value
								               WHERE select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());

						if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {
							rules.getRow(system.getPreviousBlockCursorIndex())
									.setList(rules.getRow(system.getPreviousBlockCursorIndex()).getOldList());

						}

						else {
							rules.getRow(system.getPreviousBlockCursorIndex()).setList(N);

							query = """
									UPDATE navdb_select_criteria
									               SET include_exclude_ind = ?
									             WHERE select_by_id = ?
									""";
							app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
									rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
						}
						controlBlock.setDid(Y);

					}

					else {
						throw new FormTriggerFailureException();

					}

				}

				else {

					query = """
							 DELETE FROM selection_criteria_value
							            WHERE select_by_id = ?
							""";
					app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());

					if (like("CONTROLLED AIRSPACE",
							navdb.getDataName())) {
						vNum = 0;
						for (int i = 0; i < suaRules.size(); i++) {
							if (Objects.equals(suaRules.getRow(i).getChk(), Y)) {
								vNum = populateSuaRecords(vNum, suaRules.getRow(i).getType());

							}


						}

					}

					if (like("RESTRICTED AIRSPACE",
							navdb.getDataName())) {
						vNum = 0;
						for (int i = 0; i < suaRules.size(); i++) {
							if (Objects.equals(suaRules.getRow(i).getChk(), Y)) {
								vNum = populateSuaRecords(vNum, suaRules.getRow(i).getType());
							}


						}

					}

					if (!Objects.equals(rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
							rules.getRow(system.getPreviousBlockCursorIndex()).getOldList())) {

						query = """
								UPDATE navdb_select_criteria
								            SET include_exclude_ind = ?
								          WHERE select_by_id = ?
								""";
						app.executeNonQuery(query, rules.getRow(system.getPreviousBlockCursorIndex()).getList(),
								rules.getRow(system.getPreviousBlockCursorIndex()).getSelectById());
					}

					controlBlock.setDid(Y);

				}

				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
			}

			rules.getRow(system.getPreviousBlockCursorIndex())
					.setOldList(rules.getRow(system.getPreviousBlockCursorIndex()).getList());
			hideView("sua_rules");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesDoneWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesDoneWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> suaRulesCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			rules.getRow(system.getCursorRecordIndex())
					.setList(rules.getRow(system.getCursorRecordIndex()).getOldList());
			controlBlock.setDid(Y);
			hideView("SUA_RULES");

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> suaRulesCheckWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesCheckWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			for (int i = 0; i < suaRules.size(); i++) {
				if (!Objects.equals(suaRules.getRow(i).getType(), null)) {
					suaRules.getRow(i).setChk(Y);

				}


			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesCheckWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesCheckWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> suaRulesClearWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" suaRulesClearWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			for (int i = 0; i < suaRules.size(); i++) {
				suaRules.getRow(i).setChk(N);

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" suaRulesClearWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the suaRulesClearWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockPreBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPreBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				log.debug("FormStatus is changes");
			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPreBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPreBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockPostBlock(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPostBlock Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			controlBlock.setAirportIdent(null);
			controlBlock.setAirportIcao(null);
			controlBlock.setHeliportIdent(null);
			controlBlock.setHeliportIcao(null);
			controlBlock.setAtaIataDesignator(null);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPostBlock executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPostBlock Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockWorldGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockWorldGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;
				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getWorldGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'WORLD',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for World wide \nRegion.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'N90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N90000000','E180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'S90000000','E180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'S90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.WORLD_GEO", toString(system.getCursorRecordIndex()),
								"visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");

					}

					else if (Objects.equals(controlBlock.getWorldGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("controlAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = 'WORLD'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																					 from navdb_select_criteria
																					 where geo_area_id = ?
																					 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockWorldGeoWhenCheckboxChanged");

							}
							setItemInstanceProperty("CONTROL_BLOCK.WORLD_GEO", toString(system.getCursorRecordIndex()),
									"visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setWorldGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setWorldGeo(parameter.getWorldGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			else {
				if (Objects.equals(controlBlock.getWorldGeo(), Y)) {
					controlBlock.setWorldGeo(N);

				}

				else if (Objects.equals(controlBlock.getWorldGeo(), N)) {
					controlBlock.setWorldGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockWorldGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockWorldGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockNorthAmericaGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockNorthAmericaGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getNorthAmericaGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$NORTH_AMERICA',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for North America \nRegion.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'N90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N05000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N05000000','W020000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'N90000000','W020000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.NORTH_AMERICA_GEO",
								toString(system.getCursorRecordIndex()), "visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");
					}

					else if (Objects.equals(controlBlock.getNorthAmericaGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("controlAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$NORTH_AMERICA'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");

							}
							setItemInstanceProperty("CONTROL_BLOCK.NORTH_AMERICA_GEO",
									toString(system.getCursorRecordIndex()), "visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setNorthAmericaGeo(Y);
							throw new FormTriggerFailureException();

						}

					}
					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setNorthAmericaGeo(parameter.getNorthAmericaGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			else {
				if (Objects.equals(controlBlock.getNorthAmericaGeo(), Y)) {
					controlBlock.setNorthAmericaGeo(N);

				}

				else if (Objects.equals(controlBlock.getNorthAmericaGeo(), N)) {
					controlBlock.setNorthAmericaGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockNorthAmericaGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockNorthAmericaGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockSouthAmericaGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockSouthAmericaGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getSouthAmericaGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$SOUTH_AMERICA',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for South America \nRegion.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'S90000000','W120000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N35000000','W120000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N30000000','W090000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'N30000000','W020000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,50,'S90000000','W020000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.SOUTH_AMERICA_GEO",
								toString(system.getCursorRecordIndex()), "visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");
					}

					else if (Objects.equals(controlBlock.getSouthAmericaGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("geoAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("geoAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$SOUTH_AMERICA'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");

							}
							setItemInstanceProperty("CONTROL_BLOCK.SOUTH_AMERICA_GEO",
									toString(system.getCursorRecordIndex()), "visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setSouthAmericaGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setSouthAmericaGeo(parameter.getSouthAmericaGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			else {
				if (Objects.equals(controlBlock.getSouthAmericaGeo(), Y)) {
					controlBlock.setSouthAmericaGeo(N);

				}

				else if (Objects.equals(controlBlock.getSouthAmericaGeo(), N)) {
					controlBlock.setSouthAmericaGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockSouthAmericaGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockSouthAmericaGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockAfricaGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockAfricaGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getAfricaGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$AFRICA',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for Africa Region.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'S90000000','W030000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N40000000','W030000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N40000000','E070000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'S90000000','E070000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.AFRICA_GEO", toString(system.getCursorRecordIndex()),
								"visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");

					}

					else if (Objects.equals(controlBlock.getAfricaGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("geoAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("geoAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$AFRICA'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");

							}
							setItemInstanceProperty("CONTROL_BLOCK.AFRICA_GEO", toString(system.getCursorRecordIndex()),
									"visual_attribute", "PLAIN");
							system.setFormStatus("NORMAL");

						}

						else {
							controlBlock.setAfricaGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setAfricaGeo(parameter.getAfricaGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			else {
				if (Objects.equals(controlBlock.getAfricaGeo(), Y)) {
					controlBlock.setAfricaGeo(N);

				}

				else if (Objects.equals(controlBlock.getAfricaGeo(), N)) {
					controlBlock.setAfricaGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockAfricaGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockAfricaGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockEuropeGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockEuropeGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getEuropeGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$EUROPE',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for Europe Region.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'N90000000','W055000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N25000000','W055000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N25000000','E045000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'N90000000','E045000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.EUROPE_GEO", toString(system.getCursorRecordIndex()),
								"visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");

					}

					else if (Objects.equals(controlBlock.getEuropeGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("geoAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("geoAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$EUROPE'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");
							}
							setItemInstanceProperty("CONTROL_BLOCK.EUROPE_GEO", toString(system.getCursorRecordIndex()),
									"visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setEuropeGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setEuropeGeo(parameter.getEuropeGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			else {
				if (Objects.equals(controlBlock.getEuropeGeo(), Y)) {
					controlBlock.setEuropeGeo(N);

				}

				else if (Objects.equals(controlBlock.getEuropeGeo(), N)) {
					controlBlock.setEuropeGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockEuropeGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockEuropeGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockEurasiaGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockEurasiaGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getEurasiaGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$EURASIA',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for Eurasia East \nRegion.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'N90000000','E020000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N35000000','E020000000')
								""";
						app.executeNonQuery(query,vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N35000000','E070000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'N15000000','E100000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,50,'N15000000','E130000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,60,'N55000000','E180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,70,'N90000000','E180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,80,'N90000000','E020000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,90,'N90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,100,'N55000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,110,'N60000000','W170000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,120,'N90000000','W170000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,130,'N90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.EURASIA_GEO", toString(system.getCursorRecordIndex()),
								"visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");
					}

					else if (Objects.equals(controlBlock.getEurasiaGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("controlAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$EURASIA'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");
							}
							setItemInstanceProperty("CONTROL_BLOCK.EURASIA_GEO",
									toString(system.getCursorRecordIndex()), "visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setEurasiaGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setEurasiaGeo(parameter.getEurasiaGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			else {
				if (Objects.equals(controlBlock.getEurasiaGeo(), Y)) {
					controlBlock.setEurasiaGeo(N);

				}

				else if (Objects.equals(controlBlock.getEurasiaGeo(), N)) {
					controlBlock.setEurasiaGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockEurasiaGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockEurasiaGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockMiddleEastGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockMiddleEastGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getMiddleEastGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$MIDDLE_EAST',?)
								""";
						app.executeNonQuery(query,vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for Middle East \nRegion.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'S90000000','E050000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N00000000','E050000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N20000000','E020000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'N43000000','E020000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,50,'N43000000','E090000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,60,'N12000000','E118000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,70,'S90000000','E118000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.MIDDLE_EAST_GEO",
								toString(system.getCursorRecordIndex()), "visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");

					}

					else if (Objects.equals(controlBlock.getMiddleEastGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("controlAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$MIDDLE_EAST'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");
							}
							setItemInstanceProperty("CONTROL_BLOCK.MIDDLE_EAST_GEO",
									toString(system.getCursorRecordIndex()), "visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setMiddleEastGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);
				}

				else {
					controlBlock.setMiddleEastGeo(parameter.getMiddleEastGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));
				}

			}

			else {
				if (Objects.equals(controlBlock.getMiddleEastGeo(), Y)) {
					controlBlock.setMiddleEastGeo(N);

				}

				else if (Objects.equals(controlBlock.getMiddleEastGeo(), N)) {
					controlBlock.setMiddleEastGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockMiddleEastGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockMiddleEastGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockPacificGeoWhenCheckboxChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPacificGeoWhenCheckboxChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				Integer vId = 0;
				Integer vButton = 0;
				Integer vNallowUpdate = 0;
				String vCnavdbBlock = DbConstants.NAVDB;
				String query = "";
				DuRecord rec = null;

				vNallowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, vCnavdbBlock + ".navdb_id"))));
				if (Objects.equals(vNallowUpdate, 1)) {
					if (Objects.equals(controlBlock.getPacificGeo(), Y)) {

						query = """
								select cptsc.select_by_id_seq.nextval from dual
								""";
						rec = app.selectInto(query);
						vId = rec.getInt();

						query = """
								 insert into select_by_geographic_area(select_by_id,geo_area_name, navdb_id)
									  		values(?,'$PACIFIC',?)
								""";
						app.executeNonQuery(query, vId, navdb.getNavdbId());
						createDefaultCriteria(vId, null, null, null, null, null);

						displayAlert.oneButton(S, "Default SC",
								"Default Selection Criteria is created for Pacific East \nRegion.");

						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,10,'S90000000','E090000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,20,'N20000000','E090000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,30,'N75000000','E180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,40,'S90000000','E180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,50,'S90000000','E090000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,60,'S90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,70,'N75000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,80,'N10000000','W100000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,90,'S90000000','W100000000')
								""";
						app.executeNonQuery(query, vId);
						query = """
								 insert into geographic_area_point(select_by_id,sequence_number,latitude,longitude)
									  		values(?,100,'S90000000','W180000000')
								""";
						app.executeNonQuery(query, vId);
						setItemInstanceProperty("CONTROL_BLOCK.PACIFIC_GEO", toString(system.getCursorRecordIndex()),
								"visual_attribute", "CHECKED");
						system.setFormStatus("NORMAL");

					}

					else if (Objects.equals(controlBlock.getPacificGeo(), N)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert.moreButtons(S, "DELETE GEOGRAPHIC AREA POINT",
									"Delete this record will also delete its geographic points \nand associated criterias."
											+ chr(10) + "Pick your choice carefully:" + chr(10) + chr(10),
									"Delete All", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("controlAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {

							try {

								query = """
										select select_by_id from select_by_geographic_area
																where geo_area_name = '$PACIFIC'
																and navdb_id = ?
										""";
								rec = app.selectInto(query, navdb.getNavdbId());
								vId = rec.getInt();

								query = """
										 delete from selection_criteria_value
																where select_by_id in (select select_by_id
																											 from navdb_select_criteria
																											 where geo_area_id = ?
																											 and navdb_id = ?)
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from navdb_select_criteria
																where geo_area_id = ?
																and navdb_id = ?
										""";
								app.executeNonQuery(query, vId, navdb.getNavdbId());
								query = """
										 delete from geographic_area_point
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
								query = """
										 delete from select_by_geographic_area
																where select_by_id = ?
										""";
								app.executeNonQuery(query, vId);
							}
							// no_data_found
							catch (NoDataFoundException e) {
								log.debug("No Data found captured in controlBlockNorthAmericaGeoWhenCheckboxChanged");

							}
							setItemInstanceProperty("CONTROL_BLOCK.PACIFIC_GEO",
									toString(system.getCursorRecordIndex()), "visual_attribute", "PLAIN");

						}

						else {
							controlBlock.setPacificGeo(Y);
							throw new FormTriggerFailureException();

						}

					}

					String rowid = toString(
							nameIn(this, substr("navdb", 1, 15) + ".rowid"));
					sendUpdatedRowIdDetails(rowid);

				}

				else {
					controlBlock.setPacificGeo(parameter.getPacificGeo());

					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, vCnavdbBlock + ".navdb_id")));

				}

			}

			else {
				if (Objects.equals(controlBlock.getPacificGeo(), Y)) {
					controlBlock.setPacificGeo(N);

				}

				else if (Objects.equals(controlBlock.getPacificGeo(), N)) {
					controlBlock.setPacificGeo(Y);

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPacificGeoWhenCheckboxChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPacificGeoWhenCheckboxChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockCustomerWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockCustomerWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(navdb.getNavdbId(), null)) {

				checkDid("Main Button Check");

				checkSave(system.getCursorBlock());

				setButtonProperty("CUSTOMER");
				showView("cust");
				goBlock("customer_navdb", "");

			}

			else {

				coreptLib.dspMsg("Please execute a query first.");
				goItem("navdb.navdb_id");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockCustomerWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockCustomerWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<?> controlBlockReportWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockReportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		HttpHeaders headers = new HttpHeaders();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (!Objects.equals(navdb.getNavdbId(), null)) {
				Object plId = null;
				Integer vSelections = 0;
				SelectionCriteriaReport report = new SelectionCriteriaReport();
				if (Objects.equals(controlBlock.getDid(), Y)) {

					checkSave(system.getCursorBlock());

				}

				checkDid("Main Button Check");

				String query = """
						select count(*)
						  	from   navdb_select_criteria
						  	where  navdb_id = ?
						""";
				DuRecord rec = app.selectInto(query, navdb.getNavdbId());
				vSelections = toInteger(rec.getString());
				if (vSelections <= 0) {

					 coreptLib.dspMsg("There are no selections for this NAVDB! Enter some \nselection criteria and try again!");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(controlBlock.getRepType(), "P")) {
					if (!idNull(plId)) {

						log.debug("Pid is null");

					}

					
					byte[] reportBytes = report.genReport(app, toInteger(global.getProcessingCycle()), navdb.getNavdbId());
					headers.setContentType(MediaType.APPLICATION_PDF);
					headers.setContentLength(reportBytes.length);
					headers.setContentDisposition(ContentDisposition.inline().filename("Selection_Criteria.pdf").build());
					headers.add("Access-Control-Expose-Headers", "Content-Disposition");
					return new ResponseEntity<>(reportBytes, headers, HttpStatus.OK);
			
				}

				else {
					StringBuilder builder = report.genReportCSV(app,toInteger(global.getProcessingCycle()), navdb.getNavdbId(), navdb.getFmsId());
					ReportDetail reportDetail = new ReportDetail("text/csv",Base64.getEncoder().encodeToString(builder.toString().getBytes(StandardCharsets.UTF_8)));
					resDto.setReport(reportDetail);	
				}

			}

			else {

				coreptLib.dspMsg("Please execute a query first.");
				goItem("navdb.navdb_id");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockReportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} 
		
		catch (FormTriggerFailureException e) {
			log.error("Error while Executing the controlBlockReportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
		
		catch (Exception e) {
			return ResponseEntity
					.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body(("PDF generation failed: "+e.getMessage()).getBytes(StandardCharsets.UTF_8));
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockMoveOkWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockMoveOkWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			if (!Objects.equals(selectFromGroups.getSelectedGroup(), null)) {

				if (airportToSelect.getIsSelectAll()) {
					if (Objects.equals(global.getMovingGroup(), "airport")) {
						List<String> unSelectedRows = airportToSelect.getUnSelectedRows();
						List<String> airportIdentList = new ArrayList<>();
						List<String> airportIcaoList = new ArrayList<>();
						String rowIdList = unSelectedRows.stream().map(rowId -> "'" + rowId + "'")
								.collect(Collectors.joining(","));
						String lastQuery = hashUtil.decrypt(airportToSelect.getLastQuery());
						Integer recordCount = airportToSelect.getRow(0).getRecordCount();

						if (!Objects.equals(rowIdList, "")) {
							lastQuery = lastQuery.replace("order by Airport_ident offset ? rows fetch next ? rows only",
									" and rowid not in( %s ) order by airport_ident ".formatted(rowIdList));
							lastQuery = lastQuery.replace(") where rno <=" + recordCount,
									" where rowid not in(" + rowIdList + "))");
						} else {
							lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
							lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
						}
						EParam.DYNAMIC_QUERY_ONE.setValue(lastQuery);
						List<DuRecord> records = app.executeQuery(EParam.DYNAMIC_QUERY_ONE.getValue());
						for (DuRecord reco : records) {
							String ident = toString(reco.getObject("AIRPORT_IDENT"));
							String icao = toString(reco.getObject("AIRPORT_ICAO"));
							airportIdentList.add(ident);
							airportIcaoList.add(icao);
						}
						for (int i = 0; i < airportIdentList.size(); i++) {
							query = """
									update airport_to_select
												set select_by_id = ?
												where select_by_id = ?
												and airport_ident = ?
												and airport_icao  = ?
									""";
							app.executeNonQuery(query, selectFromGroups.getSelectedGroup(),
									selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									airportIdentList.get(i), airportIcaoList.get(i));
						}
						queryBlockRecords("STD_AIRPORT", "INITIAL");
						airportToSelect.getData().clear();
						airportToSelect.add(new AirportToSelect());
						queryBlockRecords("AIRPORT_TO_SELECT", null);
					}
					
				}
				else if (heliportToSelect.getIsSelectAll()) {
					if (Objects.equals(global.getMovingGroup(), "heliport")) {
						List<String> unSelectedRows = heliportToSelect.getUnSelectedRows();
						List<String> identList = new ArrayList<>();
						List<String> icaoList = new ArrayList<>();
						String rowIdList = unSelectedRows.stream().map(rowId -> "'" + rowId + "'")
								.collect(Collectors.joining(","));
						String lastQuery = hashUtil.decrypt(heliportToSelect.getLastQuery());
						Integer recordCount = heliportToSelect.getRow(0).getRecordCount();
						if (!Objects.equals(rowIdList, "")) {
							lastQuery = lastQuery.replace(
									"order by Heliport_ident offset ? rows fetch next ? rows only ",
									"and rowid not in( %s ) order by Heliport_ident ".formatted(rowIdList));
							lastQuery = lastQuery.replace(") where rno <=" + recordCount,
									" where  rowid not in(" + rowIdList + "))");
						} else {
							lastQuery = lastQuery.replace("offset ? rows fetch next ? rows only", "");
							lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");
						}
						EParam.DYNAMIC_QUERY_ONE.setValue(lastQuery);
						List<DuRecord> records = app.executeQuery(EParam.DYNAMIC_QUERY_ONE.getValue());
						for (DuRecord reco : records) {
							String ident = toString(reco.getObject("HELIPORT_IDENT"));
							String icao = toString(reco.getObject("HELIPORT_ICAO"));
							identList.add(ident);
							icaoList.add(icao);
						}
						for (int i = 0; i < identList.size(); i++) {
							query = """
									update heliport_to_select
												set select_by_id = ?
												where select_by_id = ?
												and heliport_ident = ?
												and heliport_icao  = ?
									""";
							app.executeNonQuery(query, selectFromGroups.getSelectedGroup(),
									selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									identList.get(i), icaoList.get(i));
						}
						queryBlockRecords("STD_HELIPORT", "INITIAL");

						heliportToSelect.getData().clear();
						heliportToSelect.add(new HeliportToSelect());
						queryBlockRecords(DbConstants.HELIPORT_TO_SELECT, null);

					}
				}

				else {
					RecordGroup groupId = findGroup("deselectGroup");
					Integer totalRows = getGroupRowCount(groupId);
					String vIdent = null;
					String vIcao = null;

					if (Objects.equals(global.getMovingGroup(), "airport")) {
						for (int i = 0; i < totalRows; i++) {
							vIdent = getGroupCharCell("deselectGroup.item1", i);
							vIcao = getGroupCharCell("deselectGroup.item2", i);

							query = """
									update airport_to_select
												set select_by_id = ?
												where select_by_id = ?
												and airport_ident = ?
												and airport_icao  = ?
									""";
							app.executeNonQuery(query, selectFromGroups.getSelectedGroup(),
									selectByAirportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									vIdent, vIcao);
						}

						deleteGroupRow("deselectGroup", "ALL_ROWS");

						queryBlockRecords("STD_AIRPORT", "INITIAL");

						airportToSelect.getData().clear();
						airportToSelect.add(new AirportToSelect());
						queryBlockRecords("AIRPORT_TO_SELECT", null);

					}

					else if (Objects.equals(global.getMovingGroup(), "heliport")) {
						for (int i = 0; i < totalRows; i++) {
							vIdent = getGroupCharCell("deselectGroup.item1", i);
							vIcao = getGroupCharCell("deselectGroup.item2", i);

							query = """
									update heliport_to_select
												set select_by_id = ?
												where select_by_id = ?
												and heliport_ident = ?
												and heliport_icao  = ?
									""";
							app.executeNonQuery(query, selectFromGroups.getSelectedGroup(),
									selectByHeliportGroup.getRow(system.getPreviousBlockCursorIndex()).getSelectById(),
									vIdent, vIcao);

						}
						deleteGroupRow("deselectGroup", "ALL_ROWS");
						queryBlockRecords("STD_HELIPORT", "INITIAL");

						queryBlockRecords(DbConstants.HELIPORT_TO_SELECT, null);

					}
				}

				goBlock(global.getMovingGroup() + "_TO_SELECT", "");
				controlBlock.setAptCnt(0);

			}
			hideView("selectFromGroups");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockMoveOkWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockMoveOkWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockMoveCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockMoveCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			goBlock(global.getMovingGroup() + "_TO_SELECT", "");
			hideView(system.getCursorBlock());
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockMoveCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockMoveCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockPbViewTldDataWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPbViewTldDataWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String getIcaoS = """
					select Airport_icao
						  from   pl_std_Airport
						  where  Airport_ident = ? --Fix -SCR 5694 - Devi - 01-Oct-2012 Replaced ? with ?
						   --? --Fix -SCR 0087 - Madhu - 25-Apr-2012
						  and    data_supplier = ?
							and processing_cycle = ?
							and validate_ind in ('Y','S','H','O')
					""";
			String getIcaoT = """
					select Airport_icao
						  from   pl_tld_Airport
						  where  Airport_ident = ? --Fix -SCR 5694 - Devi - 01-Oct-2012 Replaced ? with ?
						  --? --Fix -SCR 0087 - Madhu - 25-Apr-2012
						  and    data_supplier = ?
							and    processing_cycle = ?
							and    customer_ident IN (SELECT CUSTOMER_IDENT
													  FROM   CUSTOMER_NAVDB
													  WHERE  NAVDB_ID = ?)
							and    validate_ind in ('Y','S','H','O')
					""";
			String vIcao = "";
			String vIcao2 = "";
			Integer vExist = 0;
			Object plId = null;

			try {

				global.setAirportIc("");
				controlBlock.setAptIdentTemp(controlBlock.getAirportIdent());
				controlBlock.setAptIcaoTemp(controlBlock.getAirportIcao());
				global.setNavIdent(navdb.getNavdbId());
				global.setAirportId(controlBlock.getAptIdentTemp());
				if (!Objects.equals(controlBlock.getAptIdentTemp(), null)
						&& Objects.equals(controlBlock.getAptIcaoTemp(), null)) {
					try {
						List<DuRecord> records = app.executeQuery(getIcaoS, controlBlock.getAirportIdent(),
								navdb.getDataSupplier(), global.getProcessingCycle());

						if (records.isEmpty()) {
							throw new NoDataFoundException(vIcao);
						}
						else {
							for (DuRecord rep : records) {
								if (records.size() == 1) {
									vIcao = toString(rep.getObject());
									vExist = 1;
								} else {
									vExist = 2;
								}
							}

						}
					}

					catch (NoDataFoundException e) {

						try {
							List<DuRecord> records = app.executeQuery(getIcaoT, controlBlock.getAirportIcao(),
									navdb.getDataSupplier(), global.getProcessingCycle(), navdb.getNavdbId());
							if (records.isEmpty()) {		
								throw new NoDataFoundException("");

							}

							else {
							
								for (DuRecord rep : records) {
									if (records.size() == 1) {
										vIcao2 = toString(rep.getObject());
										vExist = 1;
									} else {
										vExist = 2;
									}
								}

							}
						}

						catch (NoDataFoundException ex) {
							vExist = 0;

						}

						catch (Exception exp) {

							
							coreptLib.dspMsg(OracleHelpers.getSQLerrm(exp));
							throw new FormTriggerFailureException();

						}

					}

					catch (Exception e) {

						coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));
						throw new FormTriggerFailureException();

					}
					global.setAirportIc(vIcao);

				}

				else if (!Objects.equals(controlBlock.getAptIdentTemp(), null)
						&& !Objects.equals(controlBlock.getAptIcaoTemp(), null)) {
					global.setAirportIc(controlBlock.getAptIcaoTemp());

				}

				if (!idNull(plId)) {

                    log.debug("Inside if plId value is null or not");

				}
				parameter.setWorkType("VIEW");
				openForm("associatedtlddata");
			}

			catch (Exception e) {
				message("sqlerrm");

			}
			log.debug(vIcao2+vExist);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPbViewTldDataWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPbViewTldDataWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockFindAirportWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockFindAirportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			checkSave(system.getCursorBlock());
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock(DbConstants.AIRPORT_TO_SELECT, "");
				throw new FormTriggerFailureException();

			}

			else if (getGroupRowCount(findGroup("selectGroup")) > 0) {


				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'Select' button to Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock("STD_AIRPORT", "");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(rtrim(controlBlock.getAirportIdent()), null)) {
				coreptLib.dspMsg("Please enter the airport_ident");

				throw new FormTriggerFailureException();

			}

			else {

				checkAirport(controlBlock.getAirportIdent(), controlBlock.getAirportIcao(), "BUTTON");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockFindAirportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockFindAirportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockFindHeliportWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockFindHeliportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			checkSave(system.getCursorBlock());
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {

				coreptLib.dspMsg("You have checked at lease one Heliport Data" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked Heliport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock("Heliport_TO_SELECT", "");
				throw new FormTriggerFailureException();

			}

			else if (getGroupRowCount(findGroup("selectGroup")) > 0) {

				
				coreptLib.dspMsg("You have checked at lease one Heliport Data" + chr(10) + chr(10)
						+ "Click the 'Select' button to Select the checked Heliport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock("STD_Heliport", "");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(rtrim(controlBlock.getHeliportIdent()), null)) {
				coreptLib.dspMsg("Please enter the Heliport_ident");

				throw new FormTriggerFailureException();

			}

			else {

				checkHeliport(controlBlock.getHeliportIdent(), controlBlock.getHeliportIcao(), "BUTTON");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockFindHeliportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockFindHeliportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockSourceAgWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockSourceAgWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			populateTargetAg();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockSourceAgWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockSourceAgWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockSaveAirportgroupWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockSaveAirportgroupWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vOut = null;
			Integer vButton = 0;

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(controlBlock.getSourceAg(), null)) {

					coreptLib.dspMsg("Please select Source Airport Group");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(controlBlock.getTargetAg(), null)) {

					
					coreptLib.dspMsg("Please select Target Airport Group");
					throw new FormTriggerFailureException();

				}

				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(S, "Copy Airport Group Selection criteria",
							"Do you want to copy airport group selection criteria" + chr(10) + "Please Confirm"
									+ chr(10),
							"Yes", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("controlAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {

					Map<String, Object> dupAptGrp = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DUP_APT_GRP", "NAVDB_UTIL",
							new ProcedureInParameter("p_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
							new ProcedureInParameter("p_new_dcr", global.getDcrNumber(), OracleTypes.NUMBER),
							new ProcedureInParameter("p_apt_group_name_s", controlBlock.getSourceAg(),
									OracleTypes.VARCHAR),
							new ProcedureInParameter("p_apt_group_name_t", controlBlock.getTargetAg(),
									OracleTypes.VARCHAR),
							new ProcedureOutParameter("p_out", OracleTypes.VARCHAR));

					vOut = toString(dupAptGrp.get("p_out"));

					if (Objects.equals(vOut, "OK")) {
						coreptLib.dspMsg("Airport Group selection criteria has been successfully \ncopied from '"
								+ controlBlock.getSourceAg() + "' to " + controlBlock.getTargetAg());
						system.setFormStatus("NORMAL");

					}

					else {

						
						coreptLib.dspMsg(vOut);

					}

				}

				else {
					log.debug("Vout is not ok");
				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockSaveAirportgroupWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockSaveAirportgroupWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockPlotWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockPlotWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String lsPlottingFunctionDir = null;

			Integer lnRecordCount = 1;
			String lsPlotUrl = null;
			String lsDataType = "AIRPORT";
			global.setLsPlotUrl(webPlotUrl);


			try {

				throw new FormTriggerFailureException();
			}

			catch (Exception e) {
				lsPlottingFunctionDir = "C:\\Program Files\\Honeywell Inc., Aviation Services\\CorePTDU Tool\\";
				lnRecordCount = 1;

			}
			if (Objects.equals(system.getMode(), "NORMAL") && !Objects.equals(navdb.getNavdbId(), null)) {
				global.setLastQuery("NAVDB:" + navdb.getNavdbId());

			}


			if (lnRecordCount >= 10) {

				coreptLib.dspMsg(
						"Attn !!!! Maximum of 10 Plot Windows are already opened, please close atleast one Plot Window to open new Plot Window");

			}

			else {
				if (!Objects.equals(navdb.getNavdbId(), null)) {
					lsPlotUrl = global.getLsPlotUrl() + "?username=" + global.getUserName() + "&password="
							+ global.getPassword() + "&connectstr=" + global.getConnectString() + "&datatype="
							+ lsDataType + "&query=" + global.getLastQuery();

					if (Objects.equals(controlBlock.getGearth(), Y)) {

						createPlot(lsPlotUrl);

					}

					goBlock(DbConstants.NAVDB, "");

				}

				else {

					coreptLib.dspMsg("Invalid/No Data to plot");

				}

			}
			log.debug(lsPlottingFunctionDir+lsPlottingFunctionDir);
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockPlotWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockPlotWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockGoWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockGoWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(controlBlock.getPriFocal(), null) && Objects.equals(controlBlock.getSecFocal(), null)) {

				coreptLib.dspMsg("Select Primary or Secondary Focal to change.");
				goItem("control_block.pri_focal");
				throw new FormTriggerFailureException();

			}

			String lsWhereQry = null;
			String lsExeQry = "";

			Integer lnButton = 0;

			alertDetails.getCurrent();
			if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
				displayAlert.moreButtons(S, "Update Focal(s)",
						"Are you sure to update Primary/Secondary Focal for the \nqueried NavDBs.", "Yes", "No", null);
				OracleHelpers.bulkClassMapper(displayAlert, this);
				alertDetails.createNewRecord("airportAlert");
				throw new AlertException(event, alertDetails);
			} else {
				lnButton = alertDetails.getAlertValue("airportAlert", alertDetails.getCurrentAlert());
			}

			if (Objects.equals(lnButton, 1)) {
				String lastQuery = toString(nameIn(this, system.getCursorBlock()+".lastQuery"));
				
				hashUtil.decrypt(lastQuery);
				if(Objects.equals(navdb.getSecondaryFocal() , null)) {
					lsWhereQry = "WHERE DATA_SUPPLIER = '%s' AND PRIMARY_FOCAL='%s'".formatted(navdb.getDataSupplier(),navdb.getPrimaryFocal());
				}
				else if(Objects.equals(navdb.getPrimaryFocal() , null)) {
					lsWhereQry = "WHERE DATA_SUPPLIER = '%s' AND SECONDARY_FOCAL='%s'".formatted(navdb.getDataSupplier(),navdb.getSecondaryFocal());
				}
				else {
					lsWhereQry = "WHERE DATA_SUPPLIER = '%s' AND PRIMARY_FOCAL='%s' AND SECONDARY_FOCAL='%s'".formatted(navdb.getDataSupplier(),navdb.getPrimaryFocal(),navdb.getSecondaryFocal()) ;
				}
				
				if (!Objects.equals(controlBlock.getPriFocal(), null)) {
					lsExeQry = " Primary_Focal = '" + controlBlock.getPriFocal() + "' ";

				}

				if (!Objects.equals(controlBlock.getSecFocal(), null)) {
					if (Objects.equals(controlBlock.getPriFocal(), null)) {
						lsExeQry = " Secondary_Focal = '" + controlBlock.getSecFocal() + "' ";

					}

					else {
						lsExeQry = lsExeQry + " , Secondary_Focal = '" + controlBlock.getSecFocal() + "' ";

					}

				}

				lsExeQry = "Update NavDB Set " + lsExeQry + " " + lsWhereQry;
				app.executeNonQuery(lsExeQry);


				if (true) {
					hideView("focals");
					goBlock(DbConstants.NAVDB, "");

					clearBlock(system.getCursorBlock(), "No_Validate");

					coreptLib.dspMsg("Update Successful, Query the NavDB Data and Verify.");
					controlBlock.setPriFocal("");
					controlBlock.setSecFocal("");
					

				}

				

			}

			else {
				hideView("focals");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockGoWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			coreptLib.dspMsg("Error:-"+OracleHelpers.getSQLerrm(e));
			log.error("Error while Executing the controlBlockGoWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			goItem("navdb.navdb_id");
			hideView("focals");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockUpdateFocalsWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockUpdateFocalsWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			
			checkDid("Main Button Check");

			
			checkSave(system.getCursorBlock());
			if (!Objects.equals(navdb.getNavdbId(), null)) {
				showView("focals");

			}

			else {

			
				coreptLib.dspMsg("Please execute a query first.");
				goItem("navdb.navdb_id");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockUpdateFocalsWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockUpdateFocalsWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockAtaIataDesignatorKeyNextItem(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockAtaIataDesignatorKeyNextItem Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			goItem("FIND_IATA");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockAtaIataDesignatorKeyNextItem executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockAtaIataDesignatorKeyNextItem Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockFindIataWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockFindIataWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;

			checkSave(system.getCursorBlock());
			if (getGroupRowCount(findGroup("deselectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'De Select' button to De Select the checked \nAirport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock(DbConstants.AIRPORT_TO_SELECT, "");
				throw new FormTriggerFailureException();

			}

			else if (getGroupRowCount(findGroup("selectGroup")) > 0) {
				coreptLib.dspMsg("You have checked at lease one Airport Data" + chr(10) + chr(10)
						+ "Click the 'Select' button to Select the checked Airport." + chr(10)
						+ "Click the 'Reset Check' button to clear all the check(s)");
				goBlock("STD_AIRPORT", "");
				throw new FormTriggerFailureException();

			}

			if (Objects.equals(rtrim(controlBlock.getAtaIataDesignator()), null)) {
				coreptLib.dspMsg("Please enter the IATA Code");

				throw new FormTriggerFailureException();

			}

			else {
				String lsAirportIdent = null;
				String lsAirportIcao = null;

				try {

					query = """
							SELECT airport_ident, airport_icao
							         from pl_std_airport
							        WHERE processing_cycle = ? 		--? --7607 --Madhu
							          AND data_supplier = ?
							          AND ata_iata_designator = ?
							""";
					rec = app.selectInto(query, controlBlock.getProcCycle(),
							navdb.getDataSupplier(), controlBlock.getAtaIataDesignator());
					lsAirportIdent = rec.getString();
					lsAirportIcao = rec.getString();

					checkAirport(lsAirportIdent, lsAirportIcao, "BUTTON");
				}

				catch (TooManyRowsException e) {

					coreptLib
							.dspMsg("Multiple Airports Exists with IATA '" + controlBlock.getAtaIataDesignator() + "'");

				}

				catch (NoDataFoundException e) {
					coreptLib.dspMsg("No Airports Exists with IATA '" + controlBlock.getAtaIataDesignator() + "'");

				}

				catch (Exception e) {

					coreptLib.dspMsg(OracleHelpers.getSQLerrm(e));

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockFindIataWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockFindIataWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockSourceGeoAreaWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockSourceGeoAreaWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			populateTargetGeoArea();
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockSourceGeoAreaWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockSourceGeoAreaWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockSaveGeoAreaWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockSaveGeoAreaWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String vOut = null;
			Integer vButton = 0;

			if (!Objects.equals(parameter.getWorkType(), "VIEW")) {
				if (Objects.equals(controlBlock.getSourceGeoArea(), null)) {

					coreptLib.dspMsg("Please select Source Geo Area/Area code/ICAO code");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(controlBlock.getTargetGeoArea(), null)) {
					coreptLib.dspMsg("Please select Target Geo Area/Area code/ICAO code");
					throw new FormTriggerFailureException();

				}

				if (Objects.equals(controlBlock.getSourceGeoArea(), controlBlock.getTargetGeoArea())) {

					coreptLib.dspMsg("Source and Target Selection is same. Please check");
					throw new FormTriggerFailureException();

				}


				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(S, "Copy Geo Area/Area code/ICAO code Selection criteria",
							"Do you want to copy Selection Criteria" + chr(10) + "Please confirm", "Yes", "Cancel",
							null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("controlAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("controlAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {
					Map<String, Object> dupGeoArea = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "DUP_GEO_AREA", "NAVDB_UTIL",
							new ProcedureInParameter("p_navdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
							new ProcedureInParameter("p_new_dcr", global.getDcrNumber(), OracleTypes.NUMBER),
							new ProcedureInParameter("p_geo_area_s", controlBlock.getSourceGeoArea(),
									OracleTypes.VARCHAR),
							new ProcedureInParameter("p_geo_area_t", controlBlock.getTargetGeoArea(),
									OracleTypes.VARCHAR),
							new ProcedureOutParameter("p_out", OracleTypes.VARCHAR));

					vOut = toString(dupGeoArea.get("p_out"));

					if (Objects.equals(vOut, "OK")) {

						coreptLib.dspMsg("Seletion criteria has been successfully copied from \n"
								+ controlBlock.getSourceGeoArea() + " to " + controlBlock.getTargetGeoArea());
					}

					else {

						coreptLib.dspMsg(vOut);

					}

				}

				else {
					log.debug("cancel button");

				}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" controlBlockSaveGeoAreaWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockSaveGeoAreaWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> controlBlockVldtTabReportWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" controlBlockVldtTabReportWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			String aptgrpCursor = """
					SELECT distinct Data_Type_Desc,Type_id,Ident,Icao,Msg
					     FROM TMP_FOR_LOAD_VLD_TAB
					     WHERE Rec_Type='AIRPORT_GROUP'
					     ORDER BY Type_Id,Ident
					""";
			String aptGrpHdrCursor = """
					SELECT distinct List_Str
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='APT_GROUP_RW_HDR'
					     AND ROWNUM = 1
					""";

			String AptGrpListCursor = """
					SELECT distinct Type_Id,List_Str,Msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='APT_GROUP_RW_LIST'
					   ORDER BY Type_Id,List_Str
					""";

			String HeligrpCursor = """
					 SELECT distinct Data_Type_Desc,Type_id,Ident,Icao,Msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='HELIPORT_GROUP'
					   ORDER BY Type_Id,Ident
					""";

			String GeoCursor = """
					SELECT distinct Data_Type_Desc,Type_id,Msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='GEO'
					""";

			String IcaoCursor = """
					SELECT distinct Data_Type_Desc,Type_id,Msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='ICAO'
					   ORDER BY Type_id
					""";

			String AreaCursor = """
					 SELECT distinct Data_Type_Desc,Type_id,Msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='AREA'
					   ORDER BY Type_id
					""";

			String DefaultCritCursor = """
					SELECT distinct Data_Type,Data_Type_desc,Ident,msg
					    FROM tmp_for_load_vld_tab
					   WHERE Rec_Type is NULL
					   ORDER BY Data_Type,Ident
					""";

			String ListsHdrCursor = """
					SELECT distinct Data_Type,Data_Type_Desc,List_Str
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='LISTS_HDR'
					   ORDER BY Data_Type
					""";

			String ListsCursor = """
					 SELECT distinct Data_Type,Data_Type_Desc,List_Str,Msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type='LISTS'
					     AND Data_Type = ?
					   ORDER BY Data_Type,List_Str
					""";

			String MediaCursor = """
					SELECT msg
					   FROM TMP_FOR_LOAD_VLD_TAB
					   WHERE Rec_Type = 'MEDIA'
					""";

			String DupRecHdrCursor = """
					 SELECT distinct Data_Type,Data_Type_desc,List_str,msg
					    FROM tmp_for_load_vld_tab
					   WHERE Rec_Type = 'DUPREC_HDR'
					   ORDER BY Data_Type
					""";

			String DupRecCursor = """
					SELECT distinct Data_Type,Data_Type_desc,List_str,msg
					    FROM tmp_for_load_vld_tab
					   WHERE Rec_Type = 'DUPREC'
					     AND Data_Type = ?
					   ORDER BY Data_Type,List_str
					""";

			StringBuilder reportfile = new StringBuilder();

			Integer repParam = 1;

			Integer chk = 0;
			String query = """
					 Delete from TMP_FOR_LOAD_VLD_TAB
					""";
			app.executeNonQuery(query);
			String vMessages = null;
			String vSeperator = "-- -- -- -- -- Selection Criteria is Valid -- -- -- -- -- --";
			String vSeperator1 = null;
			vSeperator1 = vSeperator;

			for (int Rec_No = 1; Rec_No <= 10; Rec_No++) {

				Map<String, Object> dbMsg = app.executeProcedure(DbConstants.SCHEMA_CPTSC, "Check_Selection_Criteria", "Selection_Main",
						new ProcedureInParameter("pi_snavdb_id", navdb.getNavdbId(), OracleTypes.VARCHAR),
						new ProcedureInParameter("pi_scallingprogram", "NAVDB_SETUP", OracleTypes.VARCHAR),
						new ProcedureOutParameter("po_scomments_status", OracleTypes.VARCHAR),
						new ProcedureInParameter("pi_nrec_number", Rec_No, OracleTypes.NUMBER),
						new ProcedureInParameter("pi_from_DU", repParam, OracleTypes.NUMBER));

				vMessages = toString(dbMsg.get("po_scomments_status"));

				if (!Objects.equals(vMessages, null)) {
					vSeperator = "-- -- -- -- -- Validation Messages finished -- -- -- -- -- --";

				}

			}
			if (Objects.equals(vSeperator, vSeperator1)) {
				parameter.setVldtReport(0);
				coreptLib.dspMsg("No Records to Export");

			}

			else {
				parameter.setVldtReport(1);
				String dateQuery = """
						     SELECT TO_CHAR(SYSDATE , 'DD-MON-YY') as formatted_date  FROM DUAL
						""";

				DuRecord dateRec = app.selectInto(dateQuery);

				reportfile.append("Exported on ,").append(dateRec.getObject()).append("\n");
				reportfile.append("NAVDB: ,").append(" ").append(navdb.getNavdbId()).append("\n").append("FMS ID: ,")
						.append(" ").append(navdb.getFmsId()).append("\n").append("\n");

				/* Airport Group */

				List<DuRecord> aptgrpCursorRecs = app.executeQuery(aptgrpCursor);
				if (aptgrpCursorRecs.size() > 0) {
					chk = 1;
					reportfile.append("AIRPORT GROUP").append("\n");
					reportfile.append("AIRPORT GROUP,").append("AIRPORT IDENT,").append("AIRPORT ICAO,")
							.append("MESSAGE,").append("\n");

					Integer aptgrpSize = 1;

					int i = 0;
					for (DuRecord rep : aptgrpCursorRecs) {

						String typeId = toString(rep.getObject("Type_id"));
						String ident = toString(rep.getObject("Ident"));
						String icao = toString(rep.getObject("Icao"));
						String msg = toString(rep.getObject("Msg"));
						if (aptgrpSize == i) {
							i = 0;
							reportfile.append("\n");

						}
						reportfile.append(typeId==null?"":typeId).append(",").append(ident==null?"":ident).append(",").append(icao==null?"":icao).append(",")
								.append(msg==null?"":msg).append(",");

						i++;

					}
				}

				/* Airport Group hdr Curs */

				List<DuRecord> ptHdrCurRecs = app.executeQuery(aptGrpHdrCursor);
				if (ptHdrCurRecs.size() > 0) {
					reportfile.append("\n").append("\n");
					chk = 1;
					for (DuRecord rep : ptHdrCurRecs) {

						reportfile.append(rep.getObject(toString("List_Str"))).append(",MESSAGE").append("\n");

						List<DuRecord> apGrpList = app.executeQuery(AptGrpListCursor);
						int i = 0;
						Integer identSize = 1;
						for (DuRecord rec : apGrpList) {

							String typId = toString(rec.getObject("Type_Id"));
							String ident = toString(rec.getObject("List_Str"));
							String msg = toString(rec.getObject("Msg"));
							if (identSize == i) {
								i = 0;
								reportfile.append("\n");

							}

							i++;
							reportfile.append(typId==null?"":typId).append(",").append(ident==null?"":ident).append(",").append(msg==null?"":msg);
						}
					}

				}

				/* Heliport Group */

				List<DuRecord> helGrpCurRecs = app.executeQuery(HeligrpCursor);
				if (helGrpCurRecs.size() > 0) {
					chk = 1;
					reportfile.append("\n").append("\n");

					reportfile.append("HELIPORT GROUP").append("\n");
					reportfile.append("HELIPORT GROUP,").append("HELIPORT IDENT,").append("HELIPORT ICAO,")
							.append("MESSAGE,").append("\n");

					Integer aptgrpSize = 1;

					int i = 0;
					for (DuRecord rep : helGrpCurRecs) {

						String typeDesc = toString(rep.getObject("Data_Type_Desc"));
						String typeId = toString(rep.getObject("Type_id"));
						String ident = toString(rep.getObject("Ident"));
						String icao = toString(rep.getObject("Icao"));
						String msg = toString(rep.getObject("Msg"));
						log.debug(typeDesc);
						if (aptgrpSize == i) {
							i = 0;
							reportfile.append("\n");

						}
						reportfile.append(typeId==null?"":typeId).append(",").append(ident==null?"":ident).append(",").append(icao==null?"":icao).append(",")
								.append(msg==null?"":msg).append(",");

						i++;

					}
				}

				/* GeoArea Group */

				List<DuRecord> geoCurRecs = app.executeQuery(GeoCursor);
				if (geoCurRecs.size() > 0) {
					chk = 1;
					reportfile.append("\n").append("\n");

					reportfile.append("GEO AREA").append("\n");
					reportfile.append("GEO AREA,").append("DATA TYPE,").append("MESSAGE,").append("\n");

					Integer aptgrpSize = 1;

					int i = 0;
					for (DuRecord rep : geoCurRecs) {
						String typeId = toString(rep.getObject("Type_id"));
						String typeDesc = toString(rep.getObject("Data_Type_Desc"));
						String msg = toString(rep.getObject("Msg"));
						if (aptgrpSize == i) {
							i = 0;
							reportfile.append("\n");

						}
						reportfile.append(typeId==null?"":typeId).append(",").append(typeDesc==null?"":typeDesc).append(",").append(msg==null?"":msg).append(",");

						i++;

					}
				}

				/* IcaoCode Group */

				List<DuRecord> icaoRecs = app.executeQuery(IcaoCursor);
				if (icaoRecs.size() > 0) {
					chk = 1;
					reportfile.append("\n").append("\n");

					reportfile.append("ICAO CODE").append("\n");
					reportfile.append("ICAO CODE,").append("MESSAGE").append("\n");

					Integer aptgrpSize = 1;

					int i = 0;
					for (DuRecord rep : icaoRecs) {

						String typeId = toString(rep.getObject("Type_id"));
						String msg = toString(rep.getObject("Msg"));
						if (aptgrpSize == i) {
							i = 0;
							reportfile.append("\n");

						}
						reportfile.append(typeId==null?"":typeId).append(",").append(msg==null?"":msg);

						i++;

					}
				}

				/* AreaCode Group */

				List<DuRecord> areaRecs = app.executeQuery(AreaCursor);
				if (areaRecs.size() > 0) {
					chk = 1;
					reportfile.append("\n").append("\n");

					reportfile.append("AREA CODE").append("\n");
					reportfile.append("AREA CODE,").append("DATA TYPE,").append("MESSAGE,").append("\n");

					Integer aptgrpSize = 1;

					int i = 0;
					for (DuRecord rep : areaRecs) {

						String typeId = toString(rep.getObject("Type_id"));
						String msg = toString(rep.getObject("Msg"));
						if (aptgrpSize == i) {
							i = 0;
							reportfile.append("\n");

						}
						reportfile.append(typeId==null?"":typeId).append(",").append(msg==null?"":msg);

						i++;

					}
				}

				/* DataType Curs */

				List<DuRecord> defaultcritRec = app.executeQuery(DefaultCritCursor);
				List<DuRecord> identRec = app.executeQuery(DefaultCritCursor);
				if (defaultcritRec.size() > 0) {
					chk = 1;

					String prev = null;
					int i = 0;
					Integer identSize = 1;
					for (DuRecord rep : identRec) {
						reportfile.append("\n").append("\n");

						if (!Objects.equals(toString(rep.getObject("Data_Type")), nvl(prev, "$"))) {
							reportfile.append("DATA TYPE,").append(rep.getObject(toString("Data_Type_desc")))
									.append("\n");
							reportfile.append("IDENT,").append("MESSAGE").append("\n");
							String ident = toString(rep.getObject("Ident"));
							String msg = toString(rep.getObject("msg"));
							if (identSize == i) {
								i = 0;
								reportfile.append("\n");

							}
							
							reportfile.append(ident==null?"":ident).append(",").append(msg==null?"":msg).append(",");

							i++;

						}

						prev = toString(rep.getObject("Data_Type"));

					}

				}

				/* DataType Hdr Cur */

				List<DuRecord> dataHdrRecs = app.executeQuery(ListsHdrCursor);
				if (dataHdrRecs.size() > 0) {
					chk = 1;
					
					for (DuRecord rec : dataHdrRecs) {
						reportfile.append("\n").append("\n");
						reportfile.append("DATA TYPE,").append(rec.getObject(toString("Data_Type_desc"))).append("\n");
						reportfile.append(rec.getObject(toString("List_Str"))).append(",MESSAGE").append("\n");

						List<DuRecord> listCurRecs = app.executeQuery(ListsCursor, rec.getObject(toString("Data_Type")));
						Integer identSize = 1;
						int i = 0;
						for (DuRecord rep : listCurRecs) {

							
							
							String ident = toString(rep.getObject("List_Str"));
							String msg = toString(rep.getObject("Msg"));
							if (identSize == i) {
								i = 0;
								reportfile.append("\n");

							}

							i++;
							reportfile.append(ident==null?"":ident).append(",").append(msg==null?"":msg);
						}

					}

				}

				/* Media Cur */

				List<DuRecord> mediaCurRecs = app.executeQuery(MediaCursor);
				if (mediaCurRecs.size() > 0) {
					chk = 1;
					reportfile.append("\n").append("\n").append("MEDIA").append("\n");
					reportfile.append("MESSAGE").append("\n");
					int i = 0;
					Integer identSize = 1;
					for (DuRecord rep : mediaCurRecs) {
						String msg = toString(rep.getObject("msg"));
						if (identSize == i) {
							i = 0;
							reportfile.append("\n");

						}

						i++;
						reportfile.append(msg==null?"":msg);
					}

				}

				/* DupRec Cur */

				List<DuRecord> DupRecs = app.executeQuery(DupRecHdrCursor);
				if (DupRecs.size() > 0) {
					chk = 1;
					reportfile.append("\n").append("\n").append("Duplicate Record Details").append("\n");
					for (DuRecord rec : dataHdrRecs) {
						reportfile.append("\n").append("\n");
						reportfile.append("DATA TYPE,").append(rec.getObject(toString("Data_Type_desc"))).append("\n");
						reportfile.append(rec.getObject(toString("List_Str"))).append(",MESSAGE").append("\n");

						List<DuRecord> listCurRecs = app.executeQuery(DupRecCursor, rec.getObject(toString("Data_Type")));
						for (DuRecord rep : listCurRecs) {

							int i = 0;
							Integer identSize = 1;
							String ident = toString(rep.getObject("List_Str"));
							String msg = toString(rep.getObject("Msg"));
							if (identSize == i) {
								i = 0;
								reportfile.append("\n");

							}

							i++;
							reportfile.append(ident==null?"":ident).append(",").append(msg==null?"":msg);
						}

					}

				}

				if (chk == 1) {
					message("Report generated Successfully.");
				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			String base64 = Base64.getEncoder().encodeToString(reportfile.toString().getBytes(StandardCharsets.UTF_8));
			ReportDetail reportDetail = new ReportDetail();
			reportDetail.setData(base64);
			resDto.setReport(reportDetail);
			log.info(" controlBlockVldtTabReportWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the controlBlockVldtTabReportWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> selectAllRulesIxrrdWhenRadioChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" selectAllRulesIxrrdWhenRadioChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(parameter.getWorkType(), "VIEW")) {
				clickDatatypRadio();

			}

			else {
				Integer lnAllowUpdate = 0;
				String lcNavdbBlock = DbConstants.NAVDB;
				Integer vButton = 0;

				lnAllowUpdate = toInteger(coreptLib.checkValidNavdb(toInteger(global.getProcessingCycle()),
						toInteger(global.getDcrNumber()), navdb.getDataSupplier(),
						toString(nameIn(this, "navdb.navdb_id"))));
				if (Objects.equals(lnAllowUpdate, 1)) {
					parameter.setUpdRec(N);
					setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
					if (!Objects.equals(selectAllRules.getIxrrd(), N) && !Objects.equals(parameter.getFlag(), Y)) {
						alertDetails.getCurrent();
						if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
							vButton = displayAlert
									.moreButtons(S, "Change Selection Criteria",
											"You are going to change the Selections. Please check \nand Confirm."
													+ chr(10) + "Please pick your choice carefully:",
											"Change", "Cancel", null);
							OracleHelpers.bulkClassMapper(displayAlert, this);
							alertDetails.createNewRecord("selectAllAlert");
							throw new AlertException(event, alertDetails);
						} else {
							vButton = alertDetails.getAlertValue("selectAllAlert", alertDetails.getCurrentAlert());
						}

						if (Objects.equals(vButton, 1)) {
							parameter.setFlag(Y);
							goBlock("DATATYP_RAD", "");

						
							if (Objects.equals(selectAllRules.getIxrrd(), I)) {
								for (int i = 0; i < datatypRad.size(); i++) {
									datatypRad.getRow(i).setOptions(I);
									clickDatatypRadio(i);

								}

							}

							else if (Objects.equals(selectAllRules.getIxrrd(), "X")) {
								for (int i = 0; i < datatypRad.size(); i++) {
									datatypRad.getRow(i).setOptions("X");
									clickDatatypRadio(i);

								}

							}

							else if (Objects.equals(selectAllRules.getIxrrd(), "R")) {
								if (Objects.equals(datatypRad.getRow(system.getCursorRecordIndex()).getOptions(), N)
										&& Objects.equals(
												datatypRad.getRow(system.getCursorRecordIndex()).getRecordTypeCode(),
												94)) {
									coreptLib.dspMsg(
											"Selecting 'Ref Only' option is not allowed for SAAAR Approaches. Please select any other option.");

								}

								else {
									for (int i = 0; i < datatypRad.size(); i++) {
										datatypRad.getRow(i).setOptions(N);
										clickDatatypRadio(i);

									}

								}

							}

							else if (Objects.equals(selectAllRules.getIxrrd(), D)) {
								for (int i = 0; i < datatypRad.size(); i++) {
									datatypRad.getRow(i).setOptions(D);
									clickDatatypRadio(i);

								}
								parameter.setFlag(N);

							}

							else {
                                log.debug("Inside else for Ixrdd is not D");

							}

							parameter.setFlag(N);

						}

						else {
							parameter.setFlag(N);
							selectAllRules.setIxrrd(selectAllRules.getOldIxrrd());

						}

					}

				}

				else {
					parameter.setUpdRec(Y);
					setBlockProperty("DATATYP_RAD", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
					coreptLib.dspActionMsg(U, null, toInteger(nameIn(this, "global.dcr_number")),
							toInteger(global.getProcessingCycle()), toString(nameIn(this, lcNavdbBlock + ".navdb_id")));
					throw new FormTriggerFailureException();

				}
				parameter.setFlag(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" selectAllRulesIxrrdWhenRadioChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the selectAllRulesIxrrdWhenRadioChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> incExcAptChkAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" incExcAptChkAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			for (int i = 0; i < incExcApt.size(); i++) {
				if (!Objects.equals(incExcApt.getRow(i).getChk(), null)) {
					incExcApt.getRow(i).setChk(Y);
				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" incExcAptChkAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the incExcAptChkAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> incExcAptUnchkAllWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" incExcAptUnchkAllWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			for (int i = 0; i < incExcApt.size(); i++) {
				incExcApt.getRow(i).setChk(N);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" incExcAptUnchkAllWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the incExcAptUnchkAllWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> incExcAptCancelWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" incExcAptCancelWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			hideView("inc_exc_apt_can");
			goItem("airport_to_select.airport_ident");
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" incExcAptCancelWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the incExcAptCancelWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> incExcAptDeleteWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" incExcAptDeleteWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Object lnSelByIdIncExc = null;
			Integer lnCnt = 0;
			String query = "";
			DuRecord rec = null;

			try {

				for (int i = 0; i < incExcApt.size(); i++) {
					if (Objects.equals(incExcApt.getRow(system.getCursorRecordIndex()).getChk(), Y)) {

						query = """
								SELECT DISTINCT nsc.select_by_id -- Added DISTINCT under SCR 7069-Madhu-5-May-2016
											  from navdb_select_criteria nsc,
									                       selection_criteria_value scv
									                 WHERE nsc.select_by_id = scv.select_by_id
									                   AND nsc.navdb_id = ?
									                   AND nsc.geo_area_id = -2
									                   AND nsc.include_exclude_ind = ?
									                   AND nsc.record_type_code = ?
									                   AND scv.VALUE IN (?)
								""";
						rec = app.selectInto(query, navdb.getNavdbId(), incExcApt.getRow(i).getIncExcInd(),
								incExcApt.getRow(i).getRecordTypeCode(), incExcApt.getRow(i).getAirportIdent());
						lnSelByIdIncExc = rec.getString();

						query = """
								 DELETE FROM selection_criteria_value
									      			WHERE (select_by_id, value_seq) IN
									               (SELECT scv.select_by_id, scv.value_seq
									                  FROM navdb_select_criteria nsc,
									                       selection_criteria_value scv
									                 WHERE nsc.select_by_id = scv.select_by_id
									                   AND nsc.navdb_id = ?
									                   AND nsc.geo_area_id = -2
									                   AND nsc.include_exclude_ind = ?
									                   AND nsc.record_type_code = ?
									                   AND scv.VALUE IN (?)
									                       )
								""";
						app.executeNonQuery(query, navdb.getNavdbId(), incExcApt.getRow(i).getIncExcInd(),
								incExcApt.getRow(i).getRecordTypeCode(), incExcApt.getRow(i).getAirportIdent());
						lnCnt = 0;

						query = """
								SELECT COUNT(1)
								  from selection_criteria_value
								 WHERE select_by_id = ?
								""";
						rec = app.selectInto(query, lnSelByIdIncExc);
						lnCnt = rec.getInt();
						if (Objects.equals(lnCnt, 0)) {

							query = """
									 DELETE FROM navdb_select_criteria
													       WHERE navdb_id = ?
													         AND geo_area_id = -2
													         AND select_by_id = ?
									""";
							app.executeNonQuery(query, navdb.getNavdbId(), lnSelByIdIncExc);
						}

					}


				}				
				String rowid = toString(
						nameIn(this, substr("navdb", 1, 15) + ".rowid"));
				sendUpdatedRowIdDetails(rowid);
				coreptLib.dspMsg("Selected Airport(s) is/are removed from Inc/Exc lists.");
				hideView("inc_exc_apt_can");
				goItem("airport_to_select.airport_ident");
			}

			catch (Exception e) {
				coreptLib.dspMsg("Error:- "+OracleHelpers.getSQLcode(e)+"-"+substr(OracleHelpers.getSQLerrm(e),1,200));
				hideView("inc_exc_apt_can");
				goItem("airport_to_select.airport_ident");

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" incExcAptDeleteWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the incExcAptDeleteWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> displayItemBlockFormPartNumberWhenNewItemInstance(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" displayItemBlockFormPartNumberWhenNewItemInstance Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" displayItemBlockFormPartNumberWhenNewItemInstance executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the displayItemBlockFormPartNumberWhenNewItemInstance Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> displayItemBlockRefreshButtonWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" displayItemBlockRefreshButtonWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer totalRows = 0;
			Integer vButton = 0;

			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				coreptLib.dspMsg("There is changes in the form, please do commit first.");

			}

			else {
				totalRows = getGroupRowCount(findGroup("refreshRecordsGroup"));
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(
							S, "Refresh Record", "You have modified or inserted or deleted " + totalRows + " records."
									+ chr(10) + "Do you want to refresh the Master Library now?",
							"Refresh", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("refreshAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("refreshAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {
					refreshMasterLibrary.refreshRecords(totalRows);

				}

				else {
                    log.debug("Inside else for Vbutton is not 1");

				}

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" displayItemBlockRefreshButtonWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> displayItemBlockRefreshAirportAirwayLowWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" displayItemBlockRefreshAirportAirwayLowWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			Integer totalRows = 0;
			Integer vButton = 0;

			if (Objects.equals(system.getFormStatus(), "CHANGED")) {
				coreptLib.dspMsg("There is changes in the form, please do commit first.");

			}

			else {
				totalRows = getGroupRowCount(findGroup("refreshAalGroup"));
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
				 displayAlert.moreButtons(S, "Refresh Airport Airway Low", "There is/are " + totalRows
							+ " new Airports in the Airport List."
							+ "Airport Airway Low table must be refreshed. It may take one minute to refresh each Airport."
							+ chr(10) + "Do you want to Do it now?", "Refresh", "Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("refreshAlert");
					throw new AlertException(event, alertDetails);
				} else {
					vButton = alertDetails.getAlertValue("refreshAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(vButton, 1)) {
					refreshAal();

				}

				else {
					log.debug("cancel");
					}

			}

			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" displayItemBlockRefreshAirportAirwayLowWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the displayItemBlockRefreshAirportAirwayLowWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> saveSelectionsActionWhenListChanged(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" saveSelectionsActionWhenListChanged Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			String query = "";
			DuRecord rec = null;
			OracleHelpers.bulkClassMapper(reqDto, this);
			if (Objects.equals(saveSelections.getAction(), S)) {
				query = "SELECT SSC_ID_SEQ.NEXTVAL FROM DUAL";
				rec = app.selectInto(query);
				saveSelections.setSscId(toString(rec.getObject()));
				saveSelections.setType("MANUAL");
				saveSelections.setCycle(global.getProcessingCycle());
				LocalDate localDate = LocalDate.now();
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yy",Locale.ENGLISH).withLocale(Locale.ENGLISH);
				String formattedDate = localDate.format(formatter).toUpperCase();
				saveSelections.setCreatedOn(formattedDate);
				goItem("save_selections.name");
				setItemProperty("save_selections.name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("save_selections.name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("save_selections.comments", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("save_selections.comments", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_TRUE);
				setItemProperty("save_selections.save", FormConstant.ENABLED, FormConstant.PROPERTY_TRUE);

			}

			else if (Objects.equals(saveSelections.getAction(), "L")) {
				saveSelections.setType("");
				saveSelections.setCycle("");
				saveSelections.setCreatedOn(null);
				saveSelections.setAction("");

				
				goItem("navdb.navdb_id");
				initializeForm();
				setItemProperty("save_selections.name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.comments", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.comments", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.save", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);
				Object plId = null;


				if (!idNull(plId)) {
					log.debug("plId is not null");;

				}
				parameter.setNavdbId(navdb.getNavdbId());
				parameter.setDataSupplier(navdb.getDataSupplier());
				parameter.setCycle(saveSelections.getCycle());
				openForm("loadselections");

			}

			else {
				saveSelections.setType("");
				saveSelections.setName("");
				saveSelections.setCycle("");
				saveSelections.setComments("");
				saveSelections.setCreatedOn(null);
				setItemProperty("save_selections.name", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.name", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.comments", FormConstant.INSERT_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.comments", FormConstant.UPDATE_ALLOWED, FormConstant.PROPERTY_FALSE);
				setItemProperty("save_selections.save", FormConstant.ENABLED, FormConstant.PROPERTY_FALSE);

			}
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" saveSelectionsActionWhenListChanged executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the saveSelectionsActionWhenListChanged Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}

	@Override
	public ResponseEntity<ResponseDto<NavdbSetupTriggerResponseDto>> saveSelectionsSaveWhenButtonPressed(
			NavdbSetupTriggerRequestDto reqDto) throws Exception {
		log.info(" saveSelectionsSaveWhenButtonPressed Executing");
		BaseResponse<NavdbSetupTriggerResponseDto> responseObj = new BaseResponse<>();
		NavdbSetupTriggerResponseDto resDto = new NavdbSetupTriggerResponseDto();
		try {
			OracleHelpers.bulkClassMapper(reqDto, this);
			String query = "";
			DuRecord rec = null;
			if (Objects.equals(saveSelections.getName(), null)) {
				coreptLib.dspMsg("Please provide Selection Name.");
				goItem("save_selections.name");
				throw new FormTriggerFailureException();

			}
			Integer lnCnt = null;
			Integer lnSscId = null;
			Integer lnButton = 1;
			String lsStatus = null;

			query = """
					SELECT COUNT(*) from B_NAVDB
							 WHERE NAME = ?
							   AND NavDB_ID = ?
							   AND CYCLE = ?
					""";
			rec = app.selectInto(query, saveSelections.getName(), navdb.getNavdbId(), global.getProcessingCycle());
			lnCnt = rec.getInt();
			if (lnCnt > 0) {

				query = """
						SELECT SSC_ID from B_NAVDB
									 WHERE NAME = ?
									   AND NavDB_ID = ?
									   AND CYCLE = ?
						""";
				rec = app.selectInto(query, saveSelections.getName(), navdb.getNavdbId(), global.getProcessingCycle());
				lnSscId = rec.getInt();
				alertDetails.getCurrent();
				if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {
					 displayAlert.moreButtons(S, "Save-Load Selections", "Selection Criteria with Name "
							+ saveSelections.getName() + " already exits." + chr(10) + "Select an option:", "Overwrite",
							"Cancel", null);
					OracleHelpers.bulkClassMapper(displayAlert, this);
					alertDetails.createNewRecord("selectionAlert");
					throw new AlertException(event, alertDetails);
				} else {
					lnButton = alertDetails.getAlertValue("selectionAlert", alertDetails.getCurrentAlert());
				}

				if (Objects.equals(lnButton, 1)) {
					lsStatus = app.executeFunction(String.class, "COREPT_B", "DELETE_SELECTIONS", null,
							OracleTypes.VARCHAR, new ProcedureInParameter("pn_issc_id", lnSscId, OracleTypes.NUMBER),
							new ProcedureInParameter("ps_inavdb", navdb.getNavdbId(), OracleTypes.VARCHAR));

				}

			}

			if (Objects.equals(lnButton, 1) && !Objects.equals(lsStatus, null)) {
				coreptLib.dspMsg("Deletion of Selections is unsuccessful with Error -" + lsStatus);

			}

			else if (Objects.equals(lnButton, 1) && Objects.equals(lsStatus, null)) {

				query = """
						SELECT ssc_id_seq.nextval from Dual
						""";
				rec = app.selectInto(query);
				lnSscId = rec.getInt();

				LocalDate localDate = LocalDate.now();
				Date sqlDate = Date.valueOf(localDate);
				lsStatus = app.executeFunction(String.class, "COREPT_B", "SAVE_SELECTION_CRITERIA", "SAVE_SELECTIONS",
						OracleTypes.VARCHAR, new ProcedureInParameter("pn_issc_id", lnSscId, OracleTypes.NUMBER),
						new ProcedureInParameter("ps_iname", saveSelections.getName(), OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_inavdb", navdb.getNavdbId(), OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_icycle", global.getProcessingCycle(), OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_iseq_num", null, OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_irun_num", null, OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_itype", "M", OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_icomments", saveSelections.getComments(), OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_icreated_by", saveSelections.getCreatedBy(), OracleTypes.VARCHAR),
						new ProcedureInParameter("ps_icreated_on", sqlDate, OracleTypes.DATE),
						new ProcedureInParameter("ps_iapproved_status", N, OracleTypes.VARCHAR));
				
				if(Objects.equals(lsStatus, "O.K.")) {
					coreptLib.dspMsg("Selections saved Successfully.");
					goItem("navdb.navdbId");
				}
				else {
					coreptLib.dspMsg("Selections are not saved due to error "+lsStatus);
				}

			}
			system.setFormName("NORMAL");
			
			OracleHelpers.ResponseMapper(this, resDto);
			log.info(" saveSelectionsSaveWhenButtonPressed executed successfully");
			return responseObj.render(responseObj.formSuccessResponse(DuConstants.RECORD_FETCH, resDto));
		} catch (Exception e) {
			log.error("Error while Executing the saveSelectionsSaveWhenButtonPressed Service");
			OracleHelpers.ResponseMapper(this, resDto);
			return ExceptionUtils.handleException(e, resDto);
		}
	}



	public void updateAppInstance() {

		super.app = this.app;
		super.baseInstance = this;
		super.groups = this.groups;
		super.genericNativeQueryHelper = this.genericNativeQueryHelper;
		super.event = this.event;
		super.parameter = this.parameter;
		super.displayAlert = this.displayAlert;
		super.system = this.system;
		super.global = this.global;
		super.blocksOrder = this.blocksOrder;
		super.windows = this.windows;
		super.items = this.items; 
		super.alertDetails = this.alertDetails;
		OracleHelpers.bulkClassMapper(this, displayAlert);
		OracleHelpers.bulkClassMapper(this, coreptLib);
		coreptLib.initialization(this);
		OracleHelpers.bulkClassMapper(this, coreptTemplate);
		coreptTemplate.initialization(this);
		OracleHelpers.bulkClassMapper(this, refreshMasterLibrary);
		refreshMasterLibrary.initialization(this);

	}
	
	
}
